
F407VG_Test_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003610  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  080037a0  080037a0  000137a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003898  08003898  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003898  08003898  00013898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038a0  080038a0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038a0  080038a0  000138a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038a4  080038a4  000138a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080038a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  20000070  08003918  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08003918  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c8aa  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e2f  00000000  00000000  0002c94a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b80  00000000  00000000  0002e780  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a78  00000000  00000000  0002f300  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000220ef  00000000  00000000  0002fd78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009684  00000000  00000000  00051e67  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca837  00000000  00000000  0005b4eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00125d22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035c8  00000000  00000000  00125da0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003788 	.word	0x08003788

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003788 	.word	0x08003788

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8000574:	4b17      	ldr	r3, [pc, #92]	; (80005d4 <MX_CAN1_Init+0x64>)
 8000576:	4a18      	ldr	r2, [pc, #96]	; (80005d8 <MX_CAN1_Init+0x68>)
 8000578:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 800057a:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <MX_CAN1_Init+0x64>)
 800057c:	2204      	movs	r2, #4
 800057e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000580:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <MX_CAN1_Init+0x64>)
 8000582:	2200      	movs	r2, #0
 8000584:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000586:	4b13      	ldr	r3, [pc, #76]	; (80005d4 <MX_CAN1_Init+0x64>)
 8000588:	2200      	movs	r2, #0
 800058a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800058c:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <MX_CAN1_Init+0x64>)
 800058e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000592:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000594:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <MX_CAN1_Init+0x64>)
 8000596:	2200      	movs	r2, #0
 8000598:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800059a:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <MX_CAN1_Init+0x64>)
 800059c:	2200      	movs	r2, #0
 800059e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80005a0:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <MX_CAN1_Init+0x64>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005a6:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <MX_CAN1_Init+0x64>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 80005ac:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <MX_CAN1_Init+0x64>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005b2:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <MX_CAN1_Init+0x64>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <MX_CAN1_Init+0x64>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005be:	4805      	ldr	r0, [pc, #20]	; (80005d4 <MX_CAN1_Init+0x64>)
 80005c0:	f000 fc42 	bl	8000e48 <HAL_CAN_Init>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80005ca:	f000 fa57 	bl	8000a7c <Error_Handler>
  }

}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	2000009c 	.word	0x2000009c
 80005d8:	40006400 	.word	0x40006400

080005dc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	; 0x28
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e4:	f107 0314 	add.w	r3, r7, #20
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a19      	ldr	r2, [pc, #100]	; (8000660 <HAL_CAN_MspInit+0x84>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d12c      	bne.n	8000658 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	613b      	str	r3, [r7, #16]
 8000602:	4b18      	ldr	r3, [pc, #96]	; (8000664 <HAL_CAN_MspInit+0x88>)
 8000604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000606:	4a17      	ldr	r2, [pc, #92]	; (8000664 <HAL_CAN_MspInit+0x88>)
 8000608:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800060c:	6413      	str	r3, [r2, #64]	; 0x40
 800060e:	4b15      	ldr	r3, [pc, #84]	; (8000664 <HAL_CAN_MspInit+0x88>)
 8000610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000616:	613b      	str	r3, [r7, #16]
 8000618:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	60fb      	str	r3, [r7, #12]
 800061e:	4b11      	ldr	r3, [pc, #68]	; (8000664 <HAL_CAN_MspInit+0x88>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a10      	ldr	r2, [pc, #64]	; (8000664 <HAL_CAN_MspInit+0x88>)
 8000624:	f043 0302 	orr.w	r3, r3, #2
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <HAL_CAN_MspInit+0x88>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0302 	and.w	r3, r3, #2
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000636:	f44f 7340 	mov.w	r3, #768	; 0x300
 800063a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063c:	2302      	movs	r3, #2
 800063e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000644:	2303      	movs	r3, #3
 8000646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000648:	2309      	movs	r3, #9
 800064a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	4619      	mov	r1, r3
 8000652:	4805      	ldr	r0, [pc, #20]	; (8000668 <HAL_CAN_MspInit+0x8c>)
 8000654:	f001 f910 	bl	8001878 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000658:	bf00      	nop
 800065a:	3728      	adds	r7, #40	; 0x28
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40006400 	.word	0x40006400
 8000664:	40023800 	.word	0x40023800
 8000668:	40020400 	.word	0x40020400

0800066c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b08c      	sub	sp, #48	; 0x30
 8000670:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]
 8000680:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	61bb      	str	r3, [r7, #24]
 8000686:	4b56      	ldr	r3, [pc, #344]	; (80007e0 <MX_GPIO_Init+0x174>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a55      	ldr	r2, [pc, #340]	; (80007e0 <MX_GPIO_Init+0x174>)
 800068c:	f043 0310 	orr.w	r3, r3, #16
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b53      	ldr	r3, [pc, #332]	; (80007e0 <MX_GPIO_Init+0x174>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0310 	and.w	r3, r3, #16
 800069a:	61bb      	str	r3, [r7, #24]
 800069c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	617b      	str	r3, [r7, #20]
 80006a2:	4b4f      	ldr	r3, [pc, #316]	; (80007e0 <MX_GPIO_Init+0x174>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a4e      	ldr	r2, [pc, #312]	; (80007e0 <MX_GPIO_Init+0x174>)
 80006a8:	f043 0304 	orr.w	r3, r3, #4
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b4c      	ldr	r3, [pc, #304]	; (80007e0 <MX_GPIO_Init+0x174>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0304 	and.w	r3, r3, #4
 80006b6:	617b      	str	r3, [r7, #20]
 80006b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	613b      	str	r3, [r7, #16]
 80006be:	4b48      	ldr	r3, [pc, #288]	; (80007e0 <MX_GPIO_Init+0x174>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a47      	ldr	r2, [pc, #284]	; (80007e0 <MX_GPIO_Init+0x174>)
 80006c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b45      	ldr	r3, [pc, #276]	; (80007e0 <MX_GPIO_Init+0x174>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006d2:	613b      	str	r3, [r7, #16]
 80006d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	4b41      	ldr	r3, [pc, #260]	; (80007e0 <MX_GPIO_Init+0x174>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a40      	ldr	r2, [pc, #256]	; (80007e0 <MX_GPIO_Init+0x174>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b3e      	ldr	r3, [pc, #248]	; (80007e0 <MX_GPIO_Init+0x174>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	4b3a      	ldr	r3, [pc, #232]	; (80007e0 <MX_GPIO_Init+0x174>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a39      	ldr	r2, [pc, #228]	; (80007e0 <MX_GPIO_Init+0x174>)
 80006fc:	f043 0302 	orr.w	r3, r3, #2
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b37      	ldr	r3, [pc, #220]	; (80007e0 <MX_GPIO_Init+0x174>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0302 	and.w	r3, r3, #2
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	4b33      	ldr	r3, [pc, #204]	; (80007e0 <MX_GPIO_Init+0x174>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a32      	ldr	r2, [pc, #200]	; (80007e0 <MX_GPIO_Init+0x174>)
 8000718:	f043 0308 	orr.w	r3, r3, #8
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b30      	ldr	r3, [pc, #192]	; (80007e0 <MX_GPIO_Init+0x174>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0308 	and.w	r3, r3, #8
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800072a:	2200      	movs	r2, #0
 800072c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000730:	482c      	ldr	r0, [pc, #176]	; (80007e4 <MX_GPIO_Init+0x178>)
 8000732:	f001 fa3b 	bl	8001bac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 
                           PE6 PE7 PE8 PE9 
                           PE10 PE11 PE12 PE13 
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8000736:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800073a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800073c:	2303      	movs	r3, #3
 800073e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000744:	f107 031c 	add.w	r3, r7, #28
 8000748:	4619      	mov	r1, r3
 800074a:	4827      	ldr	r0, [pc, #156]	; (80007e8 <MX_GPIO_Init+0x17c>)
 800074c:	f001 f894 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0 
                           PC1 PC2 PC3 PC4 
                           PC5 PC6 PC7 PC8 
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 8000750:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000754:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000756:	2303      	movs	r3, #3
 8000758:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800075e:	f107 031c 	add.w	r3, r7, #28
 8000762:	4619      	mov	r1, r3
 8000764:	4821      	ldr	r0, [pc, #132]	; (80007ec <MX_GPIO_Init+0x180>)
 8000766:	f001 f887 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA4 PA5 PA6 PA7 
                           PA8 PA9 PA10 PA11 
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800076a:	f649 73ff 	movw	r3, #40959	; 0x9fff
 800076e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000770:	2303      	movs	r3, #3
 8000772:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000778:	f107 031c 	add.w	r3, r7, #28
 800077c:	4619      	mov	r1, r3
 800077e:	481c      	ldr	r0, [pc, #112]	; (80007f0 <MX_GPIO_Init+0x184>)
 8000780:	f001 f87a 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB14 
                           PB15 PB4 PB5 PB6 
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8000784:	f64f 43f7 	movw	r3, #64759	; 0xfcf7
 8000788:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800078a:	2303      	movs	r3, #3
 800078c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	4619      	mov	r1, r3
 8000798:	4816      	ldr	r0, [pc, #88]	; (80007f4 <MX_GPIO_Init+0x188>)
 800079a:	f001 f86d 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11 
                           PD13 PD14 PD15 PD0 
                           PD1 PD2 PD3 PD4 
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800079e:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80007a2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007a4:	2303      	movs	r3, #3
 80007a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007ac:	f107 031c 	add.w	r3, r7, #28
 80007b0:	4619      	mov	r1, r3
 80007b2:	480c      	ldr	r0, [pc, #48]	; (80007e4 <MX_GPIO_Init+0x178>)
 80007b4:	f001 f860 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80007b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007be:	2301      	movs	r3, #1
 80007c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2300      	movs	r3, #0
 80007c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007ca:	f107 031c 	add.w	r3, r7, #28
 80007ce:	4619      	mov	r1, r3
 80007d0:	4804      	ldr	r0, [pc, #16]	; (80007e4 <MX_GPIO_Init+0x178>)
 80007d2:	f001 f851 	bl	8001878 <HAL_GPIO_Init>

}
 80007d6:	bf00      	nop
 80007d8:	3730      	adds	r7, #48	; 0x30
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40020c00 	.word	0x40020c00
 80007e8:	40021000 	.word	0x40021000
 80007ec:	40020800 	.word	0x40020800
 80007f0:	40020000 	.word	0x40020000
 80007f4:	40020400 	.word	0x40020400

080007f8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000800:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000804:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000808:	f003 0301 	and.w	r3, r3, #1
 800080c:	2b00      	cmp	r3, #0
 800080e:	d013      	beq.n	8000838 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000810:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000814:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000818:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800081c:	2b00      	cmp	r3, #0
 800081e:	d00b      	beq.n	8000838 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000820:	e000      	b.n	8000824 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000822:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000824:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d0f9      	beq.n	8000822 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800082e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000832:	687a      	ldr	r2, [r7, #4]
 8000834:	b2d2      	uxtb	r2, r2
 8000836:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000838:	687b      	ldr	r3, [r7, #4]
}
 800083a:	4618      	mov	r0, r3
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
	...

08000848 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b09e      	sub	sp, #120	; 0x78
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800084e:	f000 fa97 	bl	8000d80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000852:	f000 f879 	bl	8000948 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000856:	f7ff ff09 	bl	800066c <MX_GPIO_Init>
  MX_CAN1_Init();
 800085a:	f7ff fe89 	bl	8000570 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  CAN_FilterTypeDef  sFilterConfig;
  sFilterConfig.FilterBank = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	663b      	str	r3, [r7, #96]	; 0x60
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000862:	2300      	movs	r3, #0
 8000864:	667b      	str	r3, [r7, #100]	; 0x64
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8000866:	2300      	movs	r3, #0
 8000868:	66bb      	str	r3, [r7, #104]	; 0x68
  sFilterConfig.FilterIdHigh = 0x0000;
 800086a:	2300      	movs	r3, #0
 800086c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sFilterConfig.FilterIdLow = 0x0000;
 800086e:	2300      	movs	r3, #0
 8000870:	653b      	str	r3, [r7, #80]	; 0x50
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000872:	2300      	movs	r3, #0
 8000874:	657b      	str	r3, [r7, #84]	; 0x54
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8000876:	2300      	movs	r3, #0
 8000878:	65bb      	str	r3, [r7, #88]	; 0x58
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800087a:	2300      	movs	r3, #0
 800087c:	65fb      	str	r3, [r7, #92]	; 0x5c
  sFilterConfig.FilterActivation = ENABLE;
 800087e:	2301      	movs	r3, #1
 8000880:	66fb      	str	r3, [r7, #108]	; 0x6c
  sFilterConfig.SlaveStartFilterBank = 14;
 8000882:	230e      	movs	r3, #14
 8000884:	673b      	str	r3, [r7, #112]	; 0x70

  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8000886:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800088a:	4619      	mov	r1, r3
 800088c:	4829      	ldr	r0, [pc, #164]	; (8000934 <main+0xec>)
 800088e:	f000 fbd7 	bl	8001040 <HAL_CAN_ConfigFilter>

  HAL_CAN_Start(&hcan1);
 8000892:	4828      	ldr	r0, [pc, #160]	; (8000934 <main+0xec>)
 8000894:	f000 fcb4 	bl	8001200 <HAL_CAN_Start>
	  uint8_t               TxData[8];
	  uint8_t               RxData[8];
	  uint32_t              TxMailbox;

	  static uint8_t count = 0;
	  TxHeader.StdId = 0x11;
 8000898:	2311      	movs	r3, #17
 800089a:	637b      	str	r3, [r7, #52]	; 0x34
	  TxHeader.RTR = CAN_RTR_DATA;
 800089c:	2300      	movs	r3, #0
 800089e:	643b      	str	r3, [r7, #64]	; 0x40
	  TxHeader.IDE = CAN_ID_STD;
 80008a0:	2300      	movs	r3, #0
 80008a2:	63fb      	str	r3, [r7, #60]	; 0x3c
	  TxHeader.DLC = 2;
 80008a4:	2302      	movs	r3, #2
 80008a6:	647b      	str	r3, [r7, #68]	; 0x44
	  TxHeader.TransmitGlobalTime = DISABLE;
 80008a8:	2300      	movs	r3, #0
 80008aa:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	  TxData[0] = 0xCA;
 80008ae:	23ca      	movs	r3, #202	; 0xca
 80008b0:	743b      	strb	r3, [r7, #16]
	  TxData[1] = count++;
 80008b2:	4b21      	ldr	r3, [pc, #132]	; (8000938 <main+0xf0>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	1c5a      	adds	r2, r3, #1
 80008b8:	b2d1      	uxtb	r1, r2
 80008ba:	4a1f      	ldr	r2, [pc, #124]	; (8000938 <main+0xf0>)
 80008bc:	7011      	strb	r1, [r2, #0]
 80008be:	747b      	strb	r3, [r7, #17]

	  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	f107 0210 	add.w	r2, r7, #16
 80008c6:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80008ca:	481a      	ldr	r0, [pc, #104]	; (8000934 <main+0xec>)
 80008cc:	f000 fcdc 	bl	8001288 <HAL_CAN_AddTxMessage>

	  HAL_Delay(100);
 80008d0:	2064      	movs	r0, #100	; 0x64
 80008d2:	f000 fa97 	bl	8000e04 <HAL_Delay>

	  uint8_t fifo0;
	  fifo0 = HAL_CAN_GetRxFifoFillLevel(&hcan1, 0);
 80008d6:	2100      	movs	r1, #0
 80008d8:	4816      	ldr	r0, [pc, #88]	; (8000934 <main+0xec>)
 80008da:	f000 fec2 	bl	8001662 <HAL_CAN_GetRxFifoFillLevel>
 80008de:	4603      	mov	r3, r0
 80008e0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	  uint8_t fifo1;
	  fifo1 = HAL_CAN_GetRxFifoFillLevel(&hcan1, 1);
 80008e4:	2101      	movs	r1, #1
 80008e6:	4813      	ldr	r0, [pc, #76]	; (8000934 <main+0xec>)
 80008e8:	f000 febb 	bl	8001662 <HAL_CAN_GetRxFifoFillLevel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	  printf("FIFO0 available %d\r\n", fifo0);
 80008f2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80008f6:	4619      	mov	r1, r3
 80008f8:	4810      	ldr	r0, [pc, #64]	; (800093c <main+0xf4>)
 80008fa:	f002 f861 	bl	80029c0 <iprintf>
	  printf("FIFO1 available %d\r\n", fifo1);
 80008fe:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8000902:	4619      	mov	r1, r3
 8000904:	480e      	ldr	r0, [pc, #56]	; (8000940 <main+0xf8>)
 8000906:	f002 f85b 	bl	80029c0 <iprintf>
	  HAL_CAN_GetRxMessage(&hcan1, 0, &RxHeader, RxData);
 800090a:	f107 0308 	add.w	r3, r7, #8
 800090e:	f107 0218 	add.w	r2, r7, #24
 8000912:	2100      	movs	r1, #0
 8000914:	4807      	ldr	r0, [pc, #28]	; (8000934 <main+0xec>)
 8000916:	f000 fd92 	bl	800143e <HAL_CAN_GetRxMessage>
	  printf("Data FIFI0: %x %x %x\r\n", RxHeader.StdId, RxData[0], RxData[1]);
 800091a:	69b9      	ldr	r1, [r7, #24]
 800091c:	7a3b      	ldrb	r3, [r7, #8]
 800091e:	461a      	mov	r2, r3
 8000920:	7a7b      	ldrb	r3, [r7, #9]
 8000922:	4808      	ldr	r0, [pc, #32]	; (8000944 <main+0xfc>)
 8000924:	f002 f84c 	bl	80029c0 <iprintf>
//	  printf("xx: \r\n");


	  HAL_Delay(2000);
 8000928:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800092c:	f000 fa6a 	bl	8000e04 <HAL_Delay>
  {
 8000930:	e7b2      	b.n	8000898 <main+0x50>
 8000932:	bf00      	nop
 8000934:	2000009c 	.word	0x2000009c
 8000938:	2000008c 	.word	0x2000008c
 800093c:	080037a0 	.word	0x080037a0
 8000940:	080037b8 	.word	0x080037b8
 8000944:	080037d0 	.word	0x080037d0

08000948 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b094      	sub	sp, #80	; 0x50
 800094c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800094e:	f107 0320 	add.w	r3, r7, #32
 8000952:	2230      	movs	r2, #48	; 0x30
 8000954:	2100      	movs	r1, #0
 8000956:	4618      	mov	r0, r3
 8000958:	f002 f82a 	bl	80029b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800095c:	f107 030c 	add.w	r3, r7, #12
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800096c:	2300      	movs	r3, #0
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	4b28      	ldr	r3, [pc, #160]	; (8000a14 <SystemClock_Config+0xcc>)
 8000972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000974:	4a27      	ldr	r2, [pc, #156]	; (8000a14 <SystemClock_Config+0xcc>)
 8000976:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800097a:	6413      	str	r3, [r2, #64]	; 0x40
 800097c:	4b25      	ldr	r3, [pc, #148]	; (8000a14 <SystemClock_Config+0xcc>)
 800097e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000984:	60bb      	str	r3, [r7, #8]
 8000986:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000988:	2300      	movs	r3, #0
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	4b22      	ldr	r3, [pc, #136]	; (8000a18 <SystemClock_Config+0xd0>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a21      	ldr	r2, [pc, #132]	; (8000a18 <SystemClock_Config+0xd0>)
 8000992:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000996:	6013      	str	r3, [r2, #0]
 8000998:	4b1f      	ldr	r3, [pc, #124]	; (8000a18 <SystemClock_Config+0xd0>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009a4:	2301      	movs	r3, #1
 80009a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ae:	2302      	movs	r3, #2
 80009b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009b8:	2304      	movs	r3, #4
 80009ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80009bc:	2340      	movs	r3, #64	; 0x40
 80009be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009c0:	2302      	movs	r3, #2
 80009c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009c4:	2304      	movs	r3, #4
 80009c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c8:	f107 0320 	add.w	r3, r7, #32
 80009cc:	4618      	mov	r0, r3
 80009ce:	f001 f907 	bl	8001be0 <HAL_RCC_OscConfig>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009d8:	f000 f850 	bl	8000a7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009dc:	230f      	movs	r3, #15
 80009de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e0:	2302      	movs	r3, #2
 80009e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80009e4:	2390      	movs	r3, #144	; 0x90
 80009e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009f4:	f107 030c 	add.w	r3, r7, #12
 80009f8:	2100      	movs	r1, #0
 80009fa:	4618      	mov	r0, r3
 80009fc:	f001 fb60 	bl	80020c0 <HAL_RCC_ClockConfig>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a06:	f000 f839 	bl	8000a7c <Error_Handler>
  }
}
 8000a0a:	bf00      	nop
 8000a0c:	3750      	adds	r7, #80	; 0x50
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40023800 	.word	0x40023800
 8000a18:	40007000 	.word	0x40007000

08000a1c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
 8000a30:	e009      	b.n	8000a46 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	1c5a      	adds	r2, r3, #1
 8000a36:	60ba      	str	r2, [r7, #8]
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff fedc 	bl	80007f8 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	3301      	adds	r3, #1
 8000a44:	617b      	str	r3, [r7, #20]
 8000a46:	697a      	ldr	r2, [r7, #20]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	dbf1      	blt.n	8000a32 <_write+0x16>
  return len;
 8000a4e:	687b      	ldr	r3, [r7, #4]
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3718      	adds	r7, #24
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a04      	ldr	r2, [pc, #16]	; (8000a78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d101      	bne.n	8000a6e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a6a:	f000 f9ab 	bl	8000dc4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40010000 	.word	0x40010000

08000a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
	...

08000a8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <HAL_MspInit+0x4c>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9a:	4a0f      	ldr	r2, [pc, #60]	; (8000ad8 <HAL_MspInit+0x4c>)
 8000a9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8000aa2:	4b0d      	ldr	r3, [pc, #52]	; (8000ad8 <HAL_MspInit+0x4c>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	603b      	str	r3, [r7, #0]
 8000ab2:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <HAL_MspInit+0x4c>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	4a08      	ldr	r2, [pc, #32]	; (8000ad8 <HAL_MspInit+0x4c>)
 8000ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000abc:	6413      	str	r3, [r2, #64]	; 0x40
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <HAL_MspInit+0x4c>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac6:	603b      	str	r3, [r7, #0]
 8000ac8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aca:	bf00      	nop
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	40023800 	.word	0x40023800

08000adc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08c      	sub	sp, #48	; 0x30
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000aec:	2200      	movs	r2, #0
 8000aee:	6879      	ldr	r1, [r7, #4]
 8000af0:	2019      	movs	r0, #25
 8000af2:	f000 fe97 	bl	8001824 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8000af6:	2019      	movs	r0, #25
 8000af8:	f000 feb0 	bl	800185c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000afc:	2300      	movs	r3, #0
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	4b1f      	ldr	r3, [pc, #124]	; (8000b80 <HAL_InitTick+0xa4>)
 8000b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b04:	4a1e      	ldr	r2, [pc, #120]	; (8000b80 <HAL_InitTick+0xa4>)
 8000b06:	f043 0301 	orr.w	r3, r3, #1
 8000b0a:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0c:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <HAL_InitTick+0xa4>)
 8000b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b10:	f003 0301 	and.w	r3, r3, #1
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b18:	f107 0210 	add.w	r2, r7, #16
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	4611      	mov	r1, r2
 8000b22:	4618      	mov	r0, r3
 8000b24:	f001 fcaa 	bl	800247c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000b28:	f001 fc94 	bl	8002454 <HAL_RCC_GetPCLK2Freq>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b34:	4a13      	ldr	r2, [pc, #76]	; (8000b84 <HAL_InitTick+0xa8>)
 8000b36:	fba2 2303 	umull	r2, r3, r2, r3
 8000b3a:	0c9b      	lsrs	r3, r3, #18
 8000b3c:	3b01      	subs	r3, #1
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b40:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <HAL_InitTick+0xac>)
 8000b42:	4a12      	ldr	r2, [pc, #72]	; (8000b8c <HAL_InitTick+0xb0>)
 8000b44:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000b46:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <HAL_InitTick+0xac>)
 8000b48:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b4c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b4e:	4a0e      	ldr	r2, [pc, #56]	; (8000b88 <HAL_InitTick+0xac>)
 8000b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b52:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <HAL_InitTick+0xac>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <HAL_InitTick+0xac>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000b60:	4809      	ldr	r0, [pc, #36]	; (8000b88 <HAL_InitTick+0xac>)
 8000b62:	f001 fcbd 	bl	80024e0 <HAL_TIM_Base_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d104      	bne.n	8000b76 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000b6c:	4806      	ldr	r0, [pc, #24]	; (8000b88 <HAL_InitTick+0xac>)
 8000b6e:	f001 fcec 	bl	800254a <HAL_TIM_Base_Start_IT>
 8000b72:	4603      	mov	r3, r0
 8000b74:	e000      	b.n	8000b78 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3730      	adds	r7, #48	; 0x30
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40023800 	.word	0x40023800
 8000b84:	431bde83 	.word	0x431bde83
 8000b88:	200000c4 	.word	0x200000c4
 8000b8c:	40010000 	.word	0x40010000

08000b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba2:	e7fe      	b.n	8000ba2 <HardFault_Handler+0x4>

08000ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <MemManage_Handler+0x4>

08000baa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bae:	e7fe      	b.n	8000bae <BusFault_Handler+0x4>

08000bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <UsageFault_Handler+0x4>

08000bb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
	...

08000bf0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bf4:	4802      	ldr	r0, [pc, #8]	; (8000c00 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000bf6:	f001 fccc 	bl	8002592 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	200000c4 	.word	0x200000c4

08000c04 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]
 8000c14:	e00a      	b.n	8000c2c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c16:	f3af 8000 	nop.w
 8000c1a:	4601      	mov	r1, r0
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	1c5a      	adds	r2, r3, #1
 8000c20:	60ba      	str	r2, [r7, #8]
 8000c22:	b2ca      	uxtb	r2, r1
 8000c24:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	617b      	str	r3, [r7, #20]
 8000c2c:	697a      	ldr	r2, [r7, #20]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	dbf0      	blt.n	8000c16 <_read+0x12>
	}

return len;
 8000c34:	687b      	ldr	r3, [r7, #4]
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3718      	adds	r7, #24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <_close>:
	}
	return len;
}

int _close(int file)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b083      	sub	sp, #12
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
	return -1;
 8000c46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c56:	b480      	push	{r7}
 8000c58:	b083      	sub	sp, #12
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
 8000c5e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c66:	605a      	str	r2, [r3, #4]
	return 0;
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <_isatty>:

int _isatty(int file)
{
 8000c76:	b480      	push	{r7}
 8000c78:	b083      	sub	sp, #12
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
	return 1;
 8000c7e:	2301      	movs	r3, #1
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
	return 0;
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3714      	adds	r7, #20
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
	...

08000ca8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000cb0:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <_sbrk+0x50>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d102      	bne.n	8000cbe <_sbrk+0x16>
		heap_end = &end;
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <_sbrk+0x50>)
 8000cba:	4a10      	ldr	r2, [pc, #64]	; (8000cfc <_sbrk+0x54>)
 8000cbc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <_sbrk+0x50>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <_sbrk+0x50>)
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4413      	add	r3, r2
 8000ccc:	466a      	mov	r2, sp
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d907      	bls.n	8000ce2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000cd2:	f001 fe43 	bl	800295c <__errno>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	230c      	movs	r3, #12
 8000cda:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce0:	e006      	b.n	8000cf0 <_sbrk+0x48>
	}

	heap_end += incr;
 8000ce2:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <_sbrk+0x50>)
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4413      	add	r3, r2
 8000cea:	4a03      	ldr	r2, [pc, #12]	; (8000cf8 <_sbrk+0x50>)
 8000cec:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000cee:	68fb      	ldr	r3, [r7, #12]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000090 	.word	0x20000090
 8000cfc:	20000110 	.word	0x20000110

08000d00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d04:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <SystemInit+0x28>)
 8000d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d0a:	4a07      	ldr	r2, [pc, #28]	; (8000d28 <SystemInit+0x28>)
 8000d0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d14:	4b04      	ldr	r3, [pc, #16]	; (8000d28 <SystemInit+0x28>)
 8000d16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d1a:	609a      	str	r2, [r3, #8]
#endif
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d64 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d30:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d32:	e003      	b.n	8000d3c <LoopCopyDataInit>

08000d34 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d34:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d36:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d38:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d3a:	3104      	adds	r1, #4

08000d3c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d3c:	480b      	ldr	r0, [pc, #44]	; (8000d6c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d3e:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d40:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d42:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d44:	d3f6      	bcc.n	8000d34 <CopyDataInit>
  ldr  r2, =_sbss
 8000d46:	4a0b      	ldr	r2, [pc, #44]	; (8000d74 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d48:	e002      	b.n	8000d50 <LoopFillZerobss>

08000d4a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d4a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d4c:	f842 3b04 	str.w	r3, [r2], #4

08000d50 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d50:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d52:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d54:	d3f9      	bcc.n	8000d4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d56:	f7ff ffd3 	bl	8000d00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d5a:	f001 fe05 	bl	8002968 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d5e:	f7ff fd73 	bl	8000848 <main>
  bx  lr    
 8000d62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d64:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000d68:	080038a8 	.word	0x080038a8
  ldr  r0, =_sdata
 8000d6c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d70:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000d74:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000d78:	2000010c 	.word	0x2000010c

08000d7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d7c:	e7fe      	b.n	8000d7c <ADC_IRQHandler>
	...

08000d80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d84:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <HAL_Init+0x40>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a0d      	ldr	r2, [pc, #52]	; (8000dc0 <HAL_Init+0x40>)
 8000d8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d90:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <HAL_Init+0x40>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <HAL_Init+0x40>)
 8000d96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d9c:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <HAL_Init+0x40>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a07      	ldr	r2, [pc, #28]	; (8000dc0 <HAL_Init+0x40>)
 8000da2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000da6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da8:	2003      	movs	r0, #3
 8000daa:	f000 fd30 	bl	800180e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dae:	2000      	movs	r0, #0
 8000db0:	f7ff fe94 	bl	8000adc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db4:	f7ff fe6a 	bl	8000a8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40023c00 	.word	0x40023c00

08000dc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_IncTick+0x20>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <HAL_IncTick+0x24>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	4a04      	ldr	r2, [pc, #16]	; (8000de8 <HAL_IncTick+0x24>)
 8000dd6:	6013      	str	r3, [r2, #0]
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	20000008 	.word	0x20000008
 8000de8:	20000104 	.word	0x20000104

08000dec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  return uwTick;
 8000df0:	4b03      	ldr	r3, [pc, #12]	; (8000e00 <HAL_GetTick+0x14>)
 8000df2:	681b      	ldr	r3, [r3, #0]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	20000104 	.word	0x20000104

08000e04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e0c:	f7ff ffee 	bl	8000dec <HAL_GetTick>
 8000e10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e1c:	d005      	beq.n	8000e2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e1e:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <HAL_Delay+0x40>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	461a      	mov	r2, r3
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	4413      	add	r3, r2
 8000e28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e2a:	bf00      	nop
 8000e2c:	f7ff ffde 	bl	8000dec <HAL_GetTick>
 8000e30:	4602      	mov	r2, r0
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	68fa      	ldr	r2, [r7, #12]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d8f7      	bhi.n	8000e2c <HAL_Delay+0x28>
  {
  }
}
 8000e3c:	bf00      	nop
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000008 	.word	0x20000008

08000e48 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d101      	bne.n	8000e5a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e0ed      	b.n	8001036 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d102      	bne.n	8000e6c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f7ff fbb8 	bl	80005dc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f022 0202 	bic.w	r2, r2, #2
 8000e7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e7c:	f7ff ffb6 	bl	8000dec <HAL_GetTick>
 8000e80:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e82:	e012      	b.n	8000eaa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e84:	f7ff ffb2 	bl	8000dec <HAL_GetTick>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	2b0a      	cmp	r3, #10
 8000e90:	d90b      	bls.n	8000eaa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e96:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2205      	movs	r2, #5
 8000ea2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e0c5      	b.n	8001036 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f003 0302 	and.w	r3, r3, #2
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d1e5      	bne.n	8000e84 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f042 0201 	orr.w	r2, r2, #1
 8000ec6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ec8:	f7ff ff90 	bl	8000dec <HAL_GetTick>
 8000ecc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ece:	e012      	b.n	8000ef6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ed0:	f7ff ff8c 	bl	8000dec <HAL_GetTick>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	2b0a      	cmp	r3, #10
 8000edc:	d90b      	bls.n	8000ef6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2205      	movs	r2, #5
 8000eee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e09f      	b.n	8001036 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f003 0301 	and.w	r3, r3, #1
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d0e5      	beq.n	8000ed0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	7e1b      	ldrb	r3, [r3, #24]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d108      	bne.n	8000f1e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	e007      	b.n	8000f2e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	7e5b      	ldrb	r3, [r3, #25]
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d108      	bne.n	8000f48 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	e007      	b.n	8000f58 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f56:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	7e9b      	ldrb	r3, [r3, #26]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d108      	bne.n	8000f72 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f042 0220 	orr.w	r2, r2, #32
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	e007      	b.n	8000f82 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f022 0220 	bic.w	r2, r2, #32
 8000f80:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	7edb      	ldrb	r3, [r3, #27]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d108      	bne.n	8000f9c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f022 0210 	bic.w	r2, r2, #16
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	e007      	b.n	8000fac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f042 0210 	orr.w	r2, r2, #16
 8000faa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	7f1b      	ldrb	r3, [r3, #28]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d108      	bne.n	8000fc6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f042 0208 	orr.w	r2, r2, #8
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	e007      	b.n	8000fd6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f022 0208 	bic.w	r2, r2, #8
 8000fd4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	7f5b      	ldrb	r3, [r3, #29]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d108      	bne.n	8000ff0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f042 0204 	orr.w	r2, r2, #4
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	e007      	b.n	8001000 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f022 0204 	bic.w	r2, r2, #4
 8000ffe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	689a      	ldr	r2, [r3, #8]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	431a      	orrs	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	691b      	ldr	r3, [r3, #16]
 800100e:	431a      	orrs	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	695b      	ldr	r3, [r3, #20]
 8001014:	ea42 0103 	orr.w	r1, r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	1e5a      	subs	r2, r3, #1
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	430a      	orrs	r2, r1
 8001024:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2201      	movs	r2, #1
 8001030:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001040:	b480      	push	{r7}
 8001042:	b087      	sub	sp, #28
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001056:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001058:	7cfb      	ldrb	r3, [r7, #19]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d003      	beq.n	8001066 <HAL_CAN_ConfigFilter+0x26>
 800105e:	7cfb      	ldrb	r3, [r7, #19]
 8001060:	2b02      	cmp	r3, #2
 8001062:	f040 80be 	bne.w	80011e2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001066:	4b65      	ldr	r3, [pc, #404]	; (80011fc <HAL_CAN_ConfigFilter+0x1bc>)
 8001068:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001070:	f043 0201 	orr.w	r2, r3, #1
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001080:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001094:	021b      	lsls	r3, r3, #8
 8001096:	431a      	orrs	r2, r3
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	f003 031f 	and.w	r3, r3, #31
 80010a6:	2201      	movs	r2, #1
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	43db      	mvns	r3, r3
 80010b8:	401a      	ands	r2, r3
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	69db      	ldr	r3, [r3, #28]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d123      	bne.n	8001110 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	43db      	mvns	r3, r3
 80010d2:	401a      	ands	r2, r3
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010e6:	683a      	ldr	r2, [r7, #0]
 80010e8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80010ea:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	3248      	adds	r2, #72	; 0x48
 80010f0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001104:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001106:	6979      	ldr	r1, [r7, #20]
 8001108:	3348      	adds	r3, #72	; 0x48
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	440b      	add	r3, r1
 800110e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	69db      	ldr	r3, [r3, #28]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d122      	bne.n	800115e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	431a      	orrs	r2, r3
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001134:	683a      	ldr	r2, [r7, #0]
 8001136:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001138:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	3248      	adds	r2, #72	; 0x48
 800113e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001152:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001154:	6979      	ldr	r1, [r7, #20]
 8001156:	3348      	adds	r3, #72	; 0x48
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	440b      	add	r3, r1
 800115c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	699b      	ldr	r3, [r3, #24]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d109      	bne.n	800117a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	43db      	mvns	r3, r3
 8001170:	401a      	ands	r2, r3
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001178:	e007      	b.n	800118a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	431a      	orrs	r2, r3
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d109      	bne.n	80011a6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	43db      	mvns	r3, r3
 800119c:	401a      	ands	r2, r3
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80011a4:	e007      	b.n	80011b6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	431a      	orrs	r2, r3
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	6a1b      	ldr	r3, [r3, #32]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d107      	bne.n	80011ce <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	431a      	orrs	r2, r3
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80011d4:	f023 0201 	bic.w	r2, r3, #1
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80011de:	2300      	movs	r3, #0
 80011e0:	e006      	b.n	80011f0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
  }
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	371c      	adds	r7, #28
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	40006400 	.word	0x40006400

08001200 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800120e:	b2db      	uxtb	r3, r3
 8001210:	2b01      	cmp	r3, #1
 8001212:	d12e      	bne.n	8001272 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2202      	movs	r2, #2
 8001218:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f022 0201 	bic.w	r2, r2, #1
 800122a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800122c:	f7ff fdde 	bl	8000dec <HAL_GetTick>
 8001230:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001232:	e012      	b.n	800125a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001234:	f7ff fdda 	bl	8000dec <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b0a      	cmp	r3, #10
 8001240:	d90b      	bls.n	800125a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001246:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2205      	movs	r2, #5
 8001252:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e012      	b.n	8001280 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 0301 	and.w	r3, r3, #1
 8001264:	2b00      	cmp	r3, #0
 8001266:	d1e5      	bne.n	8001234 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2200      	movs	r2, #0
 800126c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800126e:	2300      	movs	r3, #0
 8001270:	e006      	b.n	8001280 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001276:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
  }
}
 8001280:	4618      	mov	r0, r3
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001288:	b480      	push	{r7}
 800128a:	b089      	sub	sp, #36	; 0x24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
 8001294:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f893 3020 	ldrb.w	r3, [r3, #32]
 800129c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80012a6:	7ffb      	ldrb	r3, [r7, #31]
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d003      	beq.n	80012b4 <HAL_CAN_AddTxMessage+0x2c>
 80012ac:	7ffb      	ldrb	r3, [r7, #31]
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	f040 80b8 	bne.w	8001424 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d10a      	bne.n	80012d4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d105      	bne.n	80012d4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	f000 80a0 	beq.w	8001414 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	0e1b      	lsrs	r3, r3, #24
 80012d8:	f003 0303 	and.w	r3, r3, #3
 80012dc:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d907      	bls.n	80012f4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e09e      	b.n	8001432 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80012f4:	2201      	movs	r2, #1
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	409a      	lsls	r2, r3
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d10d      	bne.n	8001322 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001310:	68f9      	ldr	r1, [r7, #12]
 8001312:	6809      	ldr	r1, [r1, #0]
 8001314:	431a      	orrs	r2, r3
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	3318      	adds	r3, #24
 800131a:	011b      	lsls	r3, r3, #4
 800131c:	440b      	add	r3, r1
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	e00f      	b.n	8001342 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800132c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001332:	68f9      	ldr	r1, [r7, #12]
 8001334:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001336:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	3318      	adds	r3, #24
 800133c:	011b      	lsls	r3, r3, #4
 800133e:	440b      	add	r3, r1
 8001340:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	6819      	ldr	r1, [r3, #0]
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	691a      	ldr	r2, [r3, #16]
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	3318      	adds	r3, #24
 800134e:	011b      	lsls	r3, r3, #4
 8001350:	440b      	add	r3, r1
 8001352:	3304      	adds	r3, #4
 8001354:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	7d1b      	ldrb	r3, [r3, #20]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d111      	bne.n	8001382 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	3318      	adds	r3, #24
 8001366:	011b      	lsls	r3, r3, #4
 8001368:	4413      	add	r3, r2
 800136a:	3304      	adds	r3, #4
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	68fa      	ldr	r2, [r7, #12]
 8001370:	6811      	ldr	r1, [r2, #0]
 8001372:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	3318      	adds	r3, #24
 800137a:	011b      	lsls	r3, r3, #4
 800137c:	440b      	add	r3, r1
 800137e:	3304      	adds	r3, #4
 8001380:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	3307      	adds	r3, #7
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	061a      	lsls	r2, r3, #24
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	3306      	adds	r3, #6
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	041b      	lsls	r3, r3, #16
 8001392:	431a      	orrs	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3305      	adds	r3, #5
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	021b      	lsls	r3, r3, #8
 800139c:	4313      	orrs	r3, r2
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	3204      	adds	r2, #4
 80013a2:	7812      	ldrb	r2, [r2, #0]
 80013a4:	4610      	mov	r0, r2
 80013a6:	68fa      	ldr	r2, [r7, #12]
 80013a8:	6811      	ldr	r1, [r2, #0]
 80013aa:	ea43 0200 	orr.w	r2, r3, r0
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	011b      	lsls	r3, r3, #4
 80013b2:	440b      	add	r3, r1
 80013b4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80013b8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3303      	adds	r3, #3
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	061a      	lsls	r2, r3, #24
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	3302      	adds	r3, #2
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	041b      	lsls	r3, r3, #16
 80013ca:	431a      	orrs	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3301      	adds	r3, #1
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	021b      	lsls	r3, r3, #8
 80013d4:	4313      	orrs	r3, r2
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	7812      	ldrb	r2, [r2, #0]
 80013da:	4610      	mov	r0, r2
 80013dc:	68fa      	ldr	r2, [r7, #12]
 80013de:	6811      	ldr	r1, [r2, #0]
 80013e0:	ea43 0200 	orr.w	r2, r3, r0
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	011b      	lsls	r3, r3, #4
 80013e8:	440b      	add	r3, r1
 80013ea:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80013ee:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	3318      	adds	r3, #24
 80013f8:	011b      	lsls	r3, r3, #4
 80013fa:	4413      	add	r3, r2
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	6811      	ldr	r1, [r2, #0]
 8001402:	f043 0201 	orr.w	r2, r3, #1
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	3318      	adds	r3, #24
 800140a:	011b      	lsls	r3, r3, #4
 800140c:	440b      	add	r3, r1
 800140e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001410:	2300      	movs	r3, #0
 8001412:	e00e      	b.n	8001432 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001418:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e006      	b.n	8001432 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001428:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
  }
}
 8001432:	4618      	mov	r0, r3
 8001434:	3724      	adds	r7, #36	; 0x24
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800143e:	b480      	push	{r7}
 8001440:	b087      	sub	sp, #28
 8001442:	af00      	add	r7, sp, #0
 8001444:	60f8      	str	r0, [r7, #12]
 8001446:	60b9      	str	r1, [r7, #8]
 8001448:	607a      	str	r2, [r7, #4]
 800144a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001452:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001454:	7dfb      	ldrb	r3, [r7, #23]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d003      	beq.n	8001462 <HAL_CAN_GetRxMessage+0x24>
 800145a:	7dfb      	ldrb	r3, [r7, #23]
 800145c:	2b02      	cmp	r3, #2
 800145e:	f040 80f3 	bne.w	8001648 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d10e      	bne.n	8001486 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	f003 0303 	and.w	r3, r3, #3
 8001472:	2b00      	cmp	r3, #0
 8001474:	d116      	bne.n	80014a4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e0e7      	b.n	8001656 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	691b      	ldr	r3, [r3, #16]
 800148c:	f003 0303 	and.w	r3, r3, #3
 8001490:	2b00      	cmp	r3, #0
 8001492:	d107      	bne.n	80014a4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001498:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e0d8      	b.n	8001656 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	331b      	adds	r3, #27
 80014ac:	011b      	lsls	r3, r3, #4
 80014ae:	4413      	add	r3, r2
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0204 	and.w	r2, r3, #4
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d10c      	bne.n	80014dc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	331b      	adds	r3, #27
 80014ca:	011b      	lsls	r3, r3, #4
 80014cc:	4413      	add	r3, r2
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	0d5b      	lsrs	r3, r3, #21
 80014d2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	e00b      	b.n	80014f4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	331b      	adds	r3, #27
 80014e4:	011b      	lsls	r3, r3, #4
 80014e6:	4413      	add	r3, r2
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	08db      	lsrs	r3, r3, #3
 80014ec:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	331b      	adds	r3, #27
 80014fc:	011b      	lsls	r3, r3, #4
 80014fe:	4413      	add	r3, r2
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0202 	and.w	r2, r3, #2
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	331b      	adds	r3, #27
 8001512:	011b      	lsls	r3, r3, #4
 8001514:	4413      	add	r3, r2
 8001516:	3304      	adds	r3, #4
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 020f 	and.w	r2, r3, #15
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	331b      	adds	r3, #27
 800152a:	011b      	lsls	r3, r3, #4
 800152c:	4413      	add	r3, r2
 800152e:	3304      	adds	r3, #4
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	0a1b      	lsrs	r3, r3, #8
 8001534:	b2da      	uxtb	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	331b      	adds	r3, #27
 8001542:	011b      	lsls	r3, r3, #4
 8001544:	4413      	add	r3, r2
 8001546:	3304      	adds	r3, #4
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	0c1b      	lsrs	r3, r3, #16
 800154c:	b29a      	uxth	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	011b      	lsls	r3, r3, #4
 800155a:	4413      	add	r3, r2
 800155c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	b2da      	uxtb	r2, r3
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	011b      	lsls	r3, r3, #4
 8001570:	4413      	add	r3, r2
 8001572:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	0a1a      	lsrs	r2, r3, #8
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	3301      	adds	r3, #1
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	011b      	lsls	r3, r3, #4
 800158a:	4413      	add	r3, r2
 800158c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	0c1a      	lsrs	r2, r3, #16
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	3302      	adds	r3, #2
 8001598:	b2d2      	uxtb	r2, r2
 800159a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	011b      	lsls	r3, r3, #4
 80015a4:	4413      	add	r3, r2
 80015a6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	0e1a      	lsrs	r2, r3, #24
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	3303      	adds	r3, #3
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	011b      	lsls	r3, r3, #4
 80015be:	4413      	add	r3, r2
 80015c0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	3304      	adds	r3, #4
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	011b      	lsls	r3, r3, #4
 80015d6:	4413      	add	r3, r2
 80015d8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	0a1a      	lsrs	r2, r3, #8
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	3305      	adds	r3, #5
 80015e4:	b2d2      	uxtb	r2, r2
 80015e6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	011b      	lsls	r3, r3, #4
 80015f0:	4413      	add	r3, r2
 80015f2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	0c1a      	lsrs	r2, r3, #16
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	3306      	adds	r3, #6
 80015fe:	b2d2      	uxtb	r2, r2
 8001600:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	011b      	lsls	r3, r3, #4
 800160a:	4413      	add	r3, r2
 800160c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	0e1a      	lsrs	r2, r3, #24
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	3307      	adds	r3, #7
 8001618:	b2d2      	uxtb	r2, r2
 800161a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d108      	bne.n	8001634 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	68da      	ldr	r2, [r3, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f042 0220 	orr.w	r2, r2, #32
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	e007      	b.n	8001644 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	691a      	ldr	r2, [r3, #16]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f042 0220 	orr.w	r2, r2, #32
 8001642:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001644:	2300      	movs	r3, #0
 8001646:	e006      	b.n	8001656 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
  }
}
 8001656:	4618      	mov	r0, r3
 8001658:	371c      	adds	r7, #28
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8001662:	b480      	push	{r7}
 8001664:	b085      	sub	sp, #20
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
 800166a:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 800166c:	2300      	movs	r3, #0
 800166e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001676:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001678:	7afb      	ldrb	r3, [r7, #11]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d002      	beq.n	8001684 <HAL_CAN_GetRxFifoFillLevel+0x22>
 800167e:	7afb      	ldrb	r3, [r7, #11]
 8001680:	2b02      	cmp	r3, #2
 8001682:	d10f      	bne.n	80016a4 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d106      	bne.n	8001698 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	f003 0303 	and.w	r3, r3, #3
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	e005      	b.n	80016a4 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	691b      	ldr	r3, [r3, #16]
 800169e:	f003 0303 	and.w	r3, r3, #3
 80016a2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80016a4:	68fb      	ldr	r3, [r7, #12]
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3714      	adds	r7, #20
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
	...

080016b4 <__NVIC_SetPriorityGrouping>:
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c4:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <__NVIC_SetPriorityGrouping+0x44>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ca:	68ba      	ldr	r2, [r7, #8]
 80016cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016d0:	4013      	ands	r3, r2
 80016d2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016e6:	4a04      	ldr	r2, [pc, #16]	; (80016f8 <__NVIC_SetPriorityGrouping+0x44>)
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	60d3      	str	r3, [r2, #12]
}
 80016ec:	bf00      	nop
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <__NVIC_GetPriorityGrouping>:
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001700:	4b04      	ldr	r3, [pc, #16]	; (8001714 <__NVIC_GetPriorityGrouping+0x18>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	0a1b      	lsrs	r3, r3, #8
 8001706:	f003 0307 	and.w	r3, r3, #7
}
 800170a:	4618      	mov	r0, r3
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <__NVIC_EnableIRQ>:
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	2b00      	cmp	r3, #0
 8001728:	db0b      	blt.n	8001742 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	f003 021f 	and.w	r2, r3, #31
 8001730:	4907      	ldr	r1, [pc, #28]	; (8001750 <__NVIC_EnableIRQ+0x38>)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	095b      	lsrs	r3, r3, #5
 8001738:	2001      	movs	r0, #1
 800173a:	fa00 f202 	lsl.w	r2, r0, r2
 800173e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	e000e100 	.word	0xe000e100

08001754 <__NVIC_SetPriority>:
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	6039      	str	r1, [r7, #0]
 800175e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001764:	2b00      	cmp	r3, #0
 8001766:	db0a      	blt.n	800177e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	b2da      	uxtb	r2, r3
 800176c:	490c      	ldr	r1, [pc, #48]	; (80017a0 <__NVIC_SetPriority+0x4c>)
 800176e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001772:	0112      	lsls	r2, r2, #4
 8001774:	b2d2      	uxtb	r2, r2
 8001776:	440b      	add	r3, r1
 8001778:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800177c:	e00a      	b.n	8001794 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	b2da      	uxtb	r2, r3
 8001782:	4908      	ldr	r1, [pc, #32]	; (80017a4 <__NVIC_SetPriority+0x50>)
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	f003 030f 	and.w	r3, r3, #15
 800178a:	3b04      	subs	r3, #4
 800178c:	0112      	lsls	r2, r2, #4
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	440b      	add	r3, r1
 8001792:	761a      	strb	r2, [r3, #24]
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	e000e100 	.word	0xe000e100
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <NVIC_EncodePriority>:
{
 80017a8:	b480      	push	{r7}
 80017aa:	b089      	sub	sp, #36	; 0x24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	f1c3 0307 	rsb	r3, r3, #7
 80017c2:	2b04      	cmp	r3, #4
 80017c4:	bf28      	it	cs
 80017c6:	2304      	movcs	r3, #4
 80017c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3304      	adds	r3, #4
 80017ce:	2b06      	cmp	r3, #6
 80017d0:	d902      	bls.n	80017d8 <NVIC_EncodePriority+0x30>
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	3b03      	subs	r3, #3
 80017d6:	e000      	b.n	80017da <NVIC_EncodePriority+0x32>
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017dc:	f04f 32ff 	mov.w	r2, #4294967295
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43da      	mvns	r2, r3
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	401a      	ands	r2, r3
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017f0:	f04f 31ff 	mov.w	r1, #4294967295
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	fa01 f303 	lsl.w	r3, r1, r3
 80017fa:	43d9      	mvns	r1, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001800:	4313      	orrs	r3, r2
}
 8001802:	4618      	mov	r0, r3
 8001804:	3724      	adds	r7, #36	; 0x24
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7ff ff4c 	bl	80016b4 <__NVIC_SetPriorityGrouping>
}
 800181c:	bf00      	nop
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
 8001830:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001836:	f7ff ff61 	bl	80016fc <__NVIC_GetPriorityGrouping>
 800183a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	68b9      	ldr	r1, [r7, #8]
 8001840:	6978      	ldr	r0, [r7, #20]
 8001842:	f7ff ffb1 	bl	80017a8 <NVIC_EncodePriority>
 8001846:	4602      	mov	r2, r0
 8001848:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800184c:	4611      	mov	r1, r2
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff ff80 	bl	8001754 <__NVIC_SetPriority>
}
 8001854:	bf00      	nop
 8001856:	3718      	adds	r7, #24
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff ff54 	bl	8001718 <__NVIC_EnableIRQ>
}
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001878:	b480      	push	{r7}
 800187a:	b089      	sub	sp, #36	; 0x24
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001882:	2300      	movs	r3, #0
 8001884:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001886:	2300      	movs	r3, #0
 8001888:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800188a:	2300      	movs	r3, #0
 800188c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
 8001892:	e16b      	b.n	8001b6c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001894:	2201      	movs	r2, #1
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	697a      	ldr	r2, [r7, #20]
 80018a4:	4013      	ands	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	f040 815a 	bne.w	8001b66 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d00b      	beq.n	80018d2 <HAL_GPIO_Init+0x5a>
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d007      	beq.n	80018d2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018c6:	2b11      	cmp	r3, #17
 80018c8:	d003      	beq.n	80018d2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b12      	cmp	r3, #18
 80018d0:	d130      	bne.n	8001934 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	2203      	movs	r2, #3
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43db      	mvns	r3, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4013      	ands	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	68da      	ldr	r2, [r3, #12]
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001908:	2201      	movs	r2, #1
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	43db      	mvns	r3, r3
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	4013      	ands	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	091b      	lsrs	r3, r3, #4
 800191e:	f003 0201 	and.w	r2, r3, #1
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4313      	orrs	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	2203      	movs	r2, #3
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	43db      	mvns	r3, r3
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4013      	ands	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4313      	orrs	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	2b02      	cmp	r3, #2
 800196a:	d003      	beq.n	8001974 <HAL_GPIO_Init+0xfc>
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	2b12      	cmp	r3, #18
 8001972:	d123      	bne.n	80019bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	08da      	lsrs	r2, r3, #3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3208      	adds	r2, #8
 800197c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001980:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	f003 0307 	and.w	r3, r3, #7
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	220f      	movs	r2, #15
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4013      	ands	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	691a      	ldr	r2, [r3, #16]
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	08da      	lsrs	r2, r3, #3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	3208      	adds	r2, #8
 80019b6:	69b9      	ldr	r1, [r7, #24]
 80019b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	2203      	movs	r2, #3
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	43db      	mvns	r3, r3
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4013      	ands	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f003 0203 	and.w	r2, r3, #3
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f000 80b4 	beq.w	8001b66 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	4b5f      	ldr	r3, [pc, #380]	; (8001b80 <HAL_GPIO_Init+0x308>)
 8001a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a06:	4a5e      	ldr	r2, [pc, #376]	; (8001b80 <HAL_GPIO_Init+0x308>)
 8001a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a0e:	4b5c      	ldr	r3, [pc, #368]	; (8001b80 <HAL_GPIO_Init+0x308>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a1a:	4a5a      	ldr	r2, [pc, #360]	; (8001b84 <HAL_GPIO_Init+0x30c>)
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	089b      	lsrs	r3, r3, #2
 8001a20:	3302      	adds	r3, #2
 8001a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	f003 0303 	and.w	r3, r3, #3
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	220f      	movs	r2, #15
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	43db      	mvns	r3, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a51      	ldr	r2, [pc, #324]	; (8001b88 <HAL_GPIO_Init+0x310>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d02b      	beq.n	8001a9e <HAL_GPIO_Init+0x226>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a50      	ldr	r2, [pc, #320]	; (8001b8c <HAL_GPIO_Init+0x314>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d025      	beq.n	8001a9a <HAL_GPIO_Init+0x222>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a4f      	ldr	r2, [pc, #316]	; (8001b90 <HAL_GPIO_Init+0x318>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d01f      	beq.n	8001a96 <HAL_GPIO_Init+0x21e>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a4e      	ldr	r2, [pc, #312]	; (8001b94 <HAL_GPIO_Init+0x31c>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d019      	beq.n	8001a92 <HAL_GPIO_Init+0x21a>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a4d      	ldr	r2, [pc, #308]	; (8001b98 <HAL_GPIO_Init+0x320>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d013      	beq.n	8001a8e <HAL_GPIO_Init+0x216>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a4c      	ldr	r2, [pc, #304]	; (8001b9c <HAL_GPIO_Init+0x324>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d00d      	beq.n	8001a8a <HAL_GPIO_Init+0x212>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a4b      	ldr	r2, [pc, #300]	; (8001ba0 <HAL_GPIO_Init+0x328>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d007      	beq.n	8001a86 <HAL_GPIO_Init+0x20e>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a4a      	ldr	r2, [pc, #296]	; (8001ba4 <HAL_GPIO_Init+0x32c>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d101      	bne.n	8001a82 <HAL_GPIO_Init+0x20a>
 8001a7e:	2307      	movs	r3, #7
 8001a80:	e00e      	b.n	8001aa0 <HAL_GPIO_Init+0x228>
 8001a82:	2308      	movs	r3, #8
 8001a84:	e00c      	b.n	8001aa0 <HAL_GPIO_Init+0x228>
 8001a86:	2306      	movs	r3, #6
 8001a88:	e00a      	b.n	8001aa0 <HAL_GPIO_Init+0x228>
 8001a8a:	2305      	movs	r3, #5
 8001a8c:	e008      	b.n	8001aa0 <HAL_GPIO_Init+0x228>
 8001a8e:	2304      	movs	r3, #4
 8001a90:	e006      	b.n	8001aa0 <HAL_GPIO_Init+0x228>
 8001a92:	2303      	movs	r3, #3
 8001a94:	e004      	b.n	8001aa0 <HAL_GPIO_Init+0x228>
 8001a96:	2302      	movs	r3, #2
 8001a98:	e002      	b.n	8001aa0 <HAL_GPIO_Init+0x228>
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e000      	b.n	8001aa0 <HAL_GPIO_Init+0x228>
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	69fa      	ldr	r2, [r7, #28]
 8001aa2:	f002 0203 	and.w	r2, r2, #3
 8001aa6:	0092      	lsls	r2, r2, #2
 8001aa8:	4093      	lsls	r3, r2
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ab0:	4934      	ldr	r1, [pc, #208]	; (8001b84 <HAL_GPIO_Init+0x30c>)
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	089b      	lsrs	r3, r3, #2
 8001ab6:	3302      	adds	r3, #2
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001abe:	4b3a      	ldr	r3, [pc, #232]	; (8001ba8 <HAL_GPIO_Init+0x330>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	4013      	ands	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ae2:	4a31      	ldr	r2, [pc, #196]	; (8001ba8 <HAL_GPIO_Init+0x330>)
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ae8:	4b2f      	ldr	r3, [pc, #188]	; (8001ba8 <HAL_GPIO_Init+0x330>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	43db      	mvns	r3, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4013      	ands	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d003      	beq.n	8001b0c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b0c:	4a26      	ldr	r2, [pc, #152]	; (8001ba8 <HAL_GPIO_Init+0x330>)
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b12:	4b25      	ldr	r3, [pc, #148]	; (8001ba8 <HAL_GPIO_Init+0x330>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b36:	4a1c      	ldr	r2, [pc, #112]	; (8001ba8 <HAL_GPIO_Init+0x330>)
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ba8 <HAL_GPIO_Init+0x330>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	43db      	mvns	r3, r3
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d003      	beq.n	8001b60 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b60:	4a11      	ldr	r2, [pc, #68]	; (8001ba8 <HAL_GPIO_Init+0x330>)
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	61fb      	str	r3, [r7, #28]
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	2b0f      	cmp	r3, #15
 8001b70:	f67f ae90 	bls.w	8001894 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b74:	bf00      	nop
 8001b76:	3724      	adds	r7, #36	; 0x24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40013800 	.word	0x40013800
 8001b88:	40020000 	.word	0x40020000
 8001b8c:	40020400 	.word	0x40020400
 8001b90:	40020800 	.word	0x40020800
 8001b94:	40020c00 	.word	0x40020c00
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	40021400 	.word	0x40021400
 8001ba0:	40021800 	.word	0x40021800
 8001ba4:	40021c00 	.word	0x40021c00
 8001ba8:	40013c00 	.word	0x40013c00

08001bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	807b      	strh	r3, [r7, #2]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bbc:	787b      	ldrb	r3, [r7, #1]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bc2:	887a      	ldrh	r2, [r7, #2]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bc8:	e003      	b.n	8001bd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bca:	887b      	ldrh	r3, [r7, #2]
 8001bcc:	041a      	lsls	r2, r3, #16
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	619a      	str	r2, [r3, #24]
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
	...

08001be0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e25b      	b.n	80020aa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d075      	beq.n	8001cea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bfe:	4ba3      	ldr	r3, [pc, #652]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 030c 	and.w	r3, r3, #12
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d00c      	beq.n	8001c24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c0a:	4ba0      	ldr	r3, [pc, #640]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c12:	2b08      	cmp	r3, #8
 8001c14:	d112      	bne.n	8001c3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c16:	4b9d      	ldr	r3, [pc, #628]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c22:	d10b      	bne.n	8001c3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c24:	4b99      	ldr	r3, [pc, #612]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d05b      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x108>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d157      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e236      	b.n	80020aa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c44:	d106      	bne.n	8001c54 <HAL_RCC_OscConfig+0x74>
 8001c46:	4b91      	ldr	r3, [pc, #580]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a90      	ldr	r2, [pc, #576]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	e01d      	b.n	8001c90 <HAL_RCC_OscConfig+0xb0>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c5c:	d10c      	bne.n	8001c78 <HAL_RCC_OscConfig+0x98>
 8001c5e:	4b8b      	ldr	r3, [pc, #556]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a8a      	ldr	r2, [pc, #552]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001c64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	4b88      	ldr	r3, [pc, #544]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a87      	ldr	r2, [pc, #540]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	e00b      	b.n	8001c90 <HAL_RCC_OscConfig+0xb0>
 8001c78:	4b84      	ldr	r3, [pc, #528]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a83      	ldr	r2, [pc, #524]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c82:	6013      	str	r3, [r2, #0]
 8001c84:	4b81      	ldr	r3, [pc, #516]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a80      	ldr	r2, [pc, #512]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001c8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d013      	beq.n	8001cc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c98:	f7ff f8a8 	bl	8000dec <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ca0:	f7ff f8a4 	bl	8000dec <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b64      	cmp	r3, #100	; 0x64
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e1fb      	b.n	80020aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb2:	4b76      	ldr	r3, [pc, #472]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0f0      	beq.n	8001ca0 <HAL_RCC_OscConfig+0xc0>
 8001cbe:	e014      	b.n	8001cea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc0:	f7ff f894 	bl	8000dec <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cc8:	f7ff f890 	bl	8000dec <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b64      	cmp	r3, #100	; 0x64
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e1e7      	b.n	80020aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cda:	4b6c      	ldr	r3, [pc, #432]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f0      	bne.n	8001cc8 <HAL_RCC_OscConfig+0xe8>
 8001ce6:	e000      	b.n	8001cea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d063      	beq.n	8001dbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cf6:	4b65      	ldr	r3, [pc, #404]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 030c 	and.w	r3, r3, #12
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00b      	beq.n	8001d1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d02:	4b62      	ldr	r3, [pc, #392]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d0a:	2b08      	cmp	r3, #8
 8001d0c:	d11c      	bne.n	8001d48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d0e:	4b5f      	ldr	r3, [pc, #380]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d116      	bne.n	8001d48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d1a:	4b5c      	ldr	r3, [pc, #368]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d005      	beq.n	8001d32 <HAL_RCC_OscConfig+0x152>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d001      	beq.n	8001d32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e1bb      	b.n	80020aa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d32:	4b56      	ldr	r3, [pc, #344]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	4952      	ldr	r1, [pc, #328]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d46:	e03a      	b.n	8001dbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d020      	beq.n	8001d92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d50:	4b4f      	ldr	r3, [pc, #316]	; (8001e90 <HAL_RCC_OscConfig+0x2b0>)
 8001d52:	2201      	movs	r2, #1
 8001d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d56:	f7ff f849 	bl	8000dec <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d5c:	e008      	b.n	8001d70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d5e:	f7ff f845 	bl	8000dec <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e19c      	b.n	80020aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d70:	4b46      	ldr	r3, [pc, #280]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d0f0      	beq.n	8001d5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d7c:	4b43      	ldr	r3, [pc, #268]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	4940      	ldr	r1, [pc, #256]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	600b      	str	r3, [r1, #0]
 8001d90:	e015      	b.n	8001dbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d92:	4b3f      	ldr	r3, [pc, #252]	; (8001e90 <HAL_RCC_OscConfig+0x2b0>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d98:	f7ff f828 	bl	8000dec <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001da0:	f7ff f824 	bl	8000dec <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e17b      	b.n	80020aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001db2:	4b36      	ldr	r3, [pc, #216]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1f0      	bne.n	8001da0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0308 	and.w	r3, r3, #8
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d030      	beq.n	8001e2c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d016      	beq.n	8001e00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dd2:	4b30      	ldr	r3, [pc, #192]	; (8001e94 <HAL_RCC_OscConfig+0x2b4>)
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd8:	f7ff f808 	bl	8000dec <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001de0:	f7ff f804 	bl	8000dec <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e15b      	b.n	80020aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001df2:	4b26      	ldr	r3, [pc, #152]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0f0      	beq.n	8001de0 <HAL_RCC_OscConfig+0x200>
 8001dfe:	e015      	b.n	8001e2c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e00:	4b24      	ldr	r3, [pc, #144]	; (8001e94 <HAL_RCC_OscConfig+0x2b4>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e06:	f7fe fff1 	bl	8000dec <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e0e:	f7fe ffed 	bl	8000dec <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e144      	b.n	80020aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e20:	4b1a      	ldr	r3, [pc, #104]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001e22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1f0      	bne.n	8001e0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0304 	and.w	r3, r3, #4
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f000 80a0 	beq.w	8001f7a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e3e:	4b13      	ldr	r3, [pc, #76]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d10f      	bne.n	8001e6a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60bb      	str	r3, [r7, #8]
 8001e4e:	4b0f      	ldr	r3, [pc, #60]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	4a0e      	ldr	r2, [pc, #56]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e58:	6413      	str	r3, [r2, #64]	; 0x40
 8001e5a:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e62:	60bb      	str	r3, [r7, #8]
 8001e64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e66:	2301      	movs	r3, #1
 8001e68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e6a:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <HAL_RCC_OscConfig+0x2b8>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d121      	bne.n	8001eba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e76:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <HAL_RCC_OscConfig+0x2b8>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a07      	ldr	r2, [pc, #28]	; (8001e98 <HAL_RCC_OscConfig+0x2b8>)
 8001e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e82:	f7fe ffb3 	bl	8000dec <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e88:	e011      	b.n	8001eae <HAL_RCC_OscConfig+0x2ce>
 8001e8a:	bf00      	nop
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	42470000 	.word	0x42470000
 8001e94:	42470e80 	.word	0x42470e80
 8001e98:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e9c:	f7fe ffa6 	bl	8000dec <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e0fd      	b.n	80020aa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eae:	4b81      	ldr	r3, [pc, #516]	; (80020b4 <HAL_RCC_OscConfig+0x4d4>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0f0      	beq.n	8001e9c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d106      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x2f0>
 8001ec2:	4b7d      	ldr	r3, [pc, #500]	; (80020b8 <HAL_RCC_OscConfig+0x4d8>)
 8001ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec6:	4a7c      	ldr	r2, [pc, #496]	; (80020b8 <HAL_RCC_OscConfig+0x4d8>)
 8001ec8:	f043 0301 	orr.w	r3, r3, #1
 8001ecc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ece:	e01c      	b.n	8001f0a <HAL_RCC_OscConfig+0x32a>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	2b05      	cmp	r3, #5
 8001ed6:	d10c      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x312>
 8001ed8:	4b77      	ldr	r3, [pc, #476]	; (80020b8 <HAL_RCC_OscConfig+0x4d8>)
 8001eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001edc:	4a76      	ldr	r2, [pc, #472]	; (80020b8 <HAL_RCC_OscConfig+0x4d8>)
 8001ede:	f043 0304 	orr.w	r3, r3, #4
 8001ee2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ee4:	4b74      	ldr	r3, [pc, #464]	; (80020b8 <HAL_RCC_OscConfig+0x4d8>)
 8001ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee8:	4a73      	ldr	r2, [pc, #460]	; (80020b8 <HAL_RCC_OscConfig+0x4d8>)
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	6713      	str	r3, [r2, #112]	; 0x70
 8001ef0:	e00b      	b.n	8001f0a <HAL_RCC_OscConfig+0x32a>
 8001ef2:	4b71      	ldr	r3, [pc, #452]	; (80020b8 <HAL_RCC_OscConfig+0x4d8>)
 8001ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef6:	4a70      	ldr	r2, [pc, #448]	; (80020b8 <HAL_RCC_OscConfig+0x4d8>)
 8001ef8:	f023 0301 	bic.w	r3, r3, #1
 8001efc:	6713      	str	r3, [r2, #112]	; 0x70
 8001efe:	4b6e      	ldr	r3, [pc, #440]	; (80020b8 <HAL_RCC_OscConfig+0x4d8>)
 8001f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f02:	4a6d      	ldr	r2, [pc, #436]	; (80020b8 <HAL_RCC_OscConfig+0x4d8>)
 8001f04:	f023 0304 	bic.w	r3, r3, #4
 8001f08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d015      	beq.n	8001f3e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f12:	f7fe ff6b 	bl	8000dec <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f18:	e00a      	b.n	8001f30 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f1a:	f7fe ff67 	bl	8000dec <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e0bc      	b.n	80020aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f30:	4b61      	ldr	r3, [pc, #388]	; (80020b8 <HAL_RCC_OscConfig+0x4d8>)
 8001f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0ee      	beq.n	8001f1a <HAL_RCC_OscConfig+0x33a>
 8001f3c:	e014      	b.n	8001f68 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f3e:	f7fe ff55 	bl	8000dec <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f44:	e00a      	b.n	8001f5c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f46:	f7fe ff51 	bl	8000dec <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e0a6      	b.n	80020aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f5c:	4b56      	ldr	r3, [pc, #344]	; (80020b8 <HAL_RCC_OscConfig+0x4d8>)
 8001f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1ee      	bne.n	8001f46 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f68:	7dfb      	ldrb	r3, [r7, #23]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d105      	bne.n	8001f7a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f6e:	4b52      	ldr	r3, [pc, #328]	; (80020b8 <HAL_RCC_OscConfig+0x4d8>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	4a51      	ldr	r2, [pc, #324]	; (80020b8 <HAL_RCC_OscConfig+0x4d8>)
 8001f74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f78:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 8092 	beq.w	80020a8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f84:	4b4c      	ldr	r3, [pc, #304]	; (80020b8 <HAL_RCC_OscConfig+0x4d8>)
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f003 030c 	and.w	r3, r3, #12
 8001f8c:	2b08      	cmp	r3, #8
 8001f8e:	d05c      	beq.n	800204a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d141      	bne.n	800201c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f98:	4b48      	ldr	r3, [pc, #288]	; (80020bc <HAL_RCC_OscConfig+0x4dc>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9e:	f7fe ff25 	bl	8000dec <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fa6:	f7fe ff21 	bl	8000dec <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e078      	b.n	80020aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fb8:	4b3f      	ldr	r3, [pc, #252]	; (80020b8 <HAL_RCC_OscConfig+0x4d8>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1f0      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69da      	ldr	r2, [r3, #28]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd2:	019b      	lsls	r3, r3, #6
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fda:	085b      	lsrs	r3, r3, #1
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	041b      	lsls	r3, r3, #16
 8001fe0:	431a      	orrs	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe6:	061b      	lsls	r3, r3, #24
 8001fe8:	4933      	ldr	r1, [pc, #204]	; (80020b8 <HAL_RCC_OscConfig+0x4d8>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fee:	4b33      	ldr	r3, [pc, #204]	; (80020bc <HAL_RCC_OscConfig+0x4dc>)
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff4:	f7fe fefa 	bl	8000dec <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ffc:	f7fe fef6 	bl	8000dec <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e04d      	b.n	80020aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800200e:	4b2a      	ldr	r3, [pc, #168]	; (80020b8 <HAL_RCC_OscConfig+0x4d8>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0f0      	beq.n	8001ffc <HAL_RCC_OscConfig+0x41c>
 800201a:	e045      	b.n	80020a8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800201c:	4b27      	ldr	r3, [pc, #156]	; (80020bc <HAL_RCC_OscConfig+0x4dc>)
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002022:	f7fe fee3 	bl	8000dec <HAL_GetTick>
 8002026:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002028:	e008      	b.n	800203c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800202a:	f7fe fedf 	bl	8000dec <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e036      	b.n	80020aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800203c:	4b1e      	ldr	r3, [pc, #120]	; (80020b8 <HAL_RCC_OscConfig+0x4d8>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1f0      	bne.n	800202a <HAL_RCC_OscConfig+0x44a>
 8002048:	e02e      	b.n	80020a8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d101      	bne.n	8002056 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e029      	b.n	80020aa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002056:	4b18      	ldr	r3, [pc, #96]	; (80020b8 <HAL_RCC_OscConfig+0x4d8>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	429a      	cmp	r2, r3
 8002068:	d11c      	bne.n	80020a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002074:	429a      	cmp	r2, r3
 8002076:	d115      	bne.n	80020a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800207e:	4013      	ands	r3, r2
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002084:	4293      	cmp	r3, r2
 8002086:	d10d      	bne.n	80020a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002092:	429a      	cmp	r2, r3
 8002094:	d106      	bne.n	80020a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d001      	beq.n	80020a8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e000      	b.n	80020aa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3718      	adds	r7, #24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40007000 	.word	0x40007000
 80020b8:	40023800 	.word	0x40023800
 80020bc:	42470060 	.word	0x42470060

080020c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e0cc      	b.n	800226e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020d4:	4b68      	ldr	r3, [pc, #416]	; (8002278 <HAL_RCC_ClockConfig+0x1b8>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 030f 	and.w	r3, r3, #15
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d90c      	bls.n	80020fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e2:	4b65      	ldr	r3, [pc, #404]	; (8002278 <HAL_RCC_ClockConfig+0x1b8>)
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ea:	4b63      	ldr	r3, [pc, #396]	; (8002278 <HAL_RCC_ClockConfig+0x1b8>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 030f 	and.w	r3, r3, #15
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d001      	beq.n	80020fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e0b8      	b.n	800226e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d020      	beq.n	800214a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b00      	cmp	r3, #0
 8002112:	d005      	beq.n	8002120 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002114:	4b59      	ldr	r3, [pc, #356]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	4a58      	ldr	r2, [pc, #352]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 800211a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800211e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0308 	and.w	r3, r3, #8
 8002128:	2b00      	cmp	r3, #0
 800212a:	d005      	beq.n	8002138 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800212c:	4b53      	ldr	r3, [pc, #332]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	4a52      	ldr	r2, [pc, #328]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002132:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002136:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002138:	4b50      	ldr	r3, [pc, #320]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	494d      	ldr	r1, [pc, #308]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002146:	4313      	orrs	r3, r2
 8002148:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	d044      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d107      	bne.n	800216e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215e:	4b47      	ldr	r3, [pc, #284]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d119      	bne.n	800219e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e07f      	b.n	800226e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d003      	beq.n	800217e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800217a:	2b03      	cmp	r3, #3
 800217c:	d107      	bne.n	800218e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800217e:	4b3f      	ldr	r3, [pc, #252]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d109      	bne.n	800219e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e06f      	b.n	800226e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800218e:	4b3b      	ldr	r3, [pc, #236]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e067      	b.n	800226e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800219e:	4b37      	ldr	r3, [pc, #220]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f023 0203 	bic.w	r2, r3, #3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	4934      	ldr	r1, [pc, #208]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021b0:	f7fe fe1c 	bl	8000dec <HAL_GetTick>
 80021b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b6:	e00a      	b.n	80021ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b8:	f7fe fe18 	bl	8000dec <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e04f      	b.n	800226e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ce:	4b2b      	ldr	r3, [pc, #172]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 020c 	and.w	r2, r3, #12
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	429a      	cmp	r2, r3
 80021de:	d1eb      	bne.n	80021b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021e0:	4b25      	ldr	r3, [pc, #148]	; (8002278 <HAL_RCC_ClockConfig+0x1b8>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 030f 	and.w	r3, r3, #15
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d20c      	bcs.n	8002208 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ee:	4b22      	ldr	r3, [pc, #136]	; (8002278 <HAL_RCC_ClockConfig+0x1b8>)
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f6:	4b20      	ldr	r3, [pc, #128]	; (8002278 <HAL_RCC_ClockConfig+0x1b8>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	429a      	cmp	r2, r3
 8002202:	d001      	beq.n	8002208 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e032      	b.n	800226e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	d008      	beq.n	8002226 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002214:	4b19      	ldr	r3, [pc, #100]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	4916      	ldr	r1, [pc, #88]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002222:	4313      	orrs	r3, r2
 8002224:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0308 	and.w	r3, r3, #8
 800222e:	2b00      	cmp	r3, #0
 8002230:	d009      	beq.n	8002246 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002232:	4b12      	ldr	r3, [pc, #72]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	490e      	ldr	r1, [pc, #56]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002242:	4313      	orrs	r3, r2
 8002244:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002246:	f000 f821 	bl	800228c <HAL_RCC_GetSysClockFreq>
 800224a:	4601      	mov	r1, r0
 800224c:	4b0b      	ldr	r3, [pc, #44]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	091b      	lsrs	r3, r3, #4
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	4a0a      	ldr	r2, [pc, #40]	; (8002280 <HAL_RCC_ClockConfig+0x1c0>)
 8002258:	5cd3      	ldrb	r3, [r2, r3]
 800225a:	fa21 f303 	lsr.w	r3, r1, r3
 800225e:	4a09      	ldr	r2, [pc, #36]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 8002260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002262:	4b09      	ldr	r3, [pc, #36]	; (8002288 <HAL_RCC_ClockConfig+0x1c8>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f7fe fc38 	bl	8000adc <HAL_InitTick>

  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40023c00 	.word	0x40023c00
 800227c:	40023800 	.word	0x40023800
 8002280:	080037e8 	.word	0x080037e8
 8002284:	20000000 	.word	0x20000000
 8002288:	20000004 	.word	0x20000004

0800228c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800228c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002292:	2300      	movs	r3, #0
 8002294:	607b      	str	r3, [r7, #4]
 8002296:	2300      	movs	r3, #0
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	2300      	movs	r3, #0
 800229c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800229e:	2300      	movs	r3, #0
 80022a0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022a2:	4b63      	ldr	r3, [pc, #396]	; (8002430 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 030c 	and.w	r3, r3, #12
 80022aa:	2b04      	cmp	r3, #4
 80022ac:	d007      	beq.n	80022be <HAL_RCC_GetSysClockFreq+0x32>
 80022ae:	2b08      	cmp	r3, #8
 80022b0:	d008      	beq.n	80022c4 <HAL_RCC_GetSysClockFreq+0x38>
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f040 80b4 	bne.w	8002420 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022b8:	4b5e      	ldr	r3, [pc, #376]	; (8002434 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80022ba:	60bb      	str	r3, [r7, #8]
       break;
 80022bc:	e0b3      	b.n	8002426 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022be:	4b5e      	ldr	r3, [pc, #376]	; (8002438 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80022c0:	60bb      	str	r3, [r7, #8]
      break;
 80022c2:	e0b0      	b.n	8002426 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022c4:	4b5a      	ldr	r3, [pc, #360]	; (8002430 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022cc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022ce:	4b58      	ldr	r3, [pc, #352]	; (8002430 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d04a      	beq.n	8002370 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022da:	4b55      	ldr	r3, [pc, #340]	; (8002430 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	099b      	lsrs	r3, r3, #6
 80022e0:	f04f 0400 	mov.w	r4, #0
 80022e4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80022e8:	f04f 0200 	mov.w	r2, #0
 80022ec:	ea03 0501 	and.w	r5, r3, r1
 80022f0:	ea04 0602 	and.w	r6, r4, r2
 80022f4:	4629      	mov	r1, r5
 80022f6:	4632      	mov	r2, r6
 80022f8:	f04f 0300 	mov.w	r3, #0
 80022fc:	f04f 0400 	mov.w	r4, #0
 8002300:	0154      	lsls	r4, r2, #5
 8002302:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002306:	014b      	lsls	r3, r1, #5
 8002308:	4619      	mov	r1, r3
 800230a:	4622      	mov	r2, r4
 800230c:	1b49      	subs	r1, r1, r5
 800230e:	eb62 0206 	sbc.w	r2, r2, r6
 8002312:	f04f 0300 	mov.w	r3, #0
 8002316:	f04f 0400 	mov.w	r4, #0
 800231a:	0194      	lsls	r4, r2, #6
 800231c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002320:	018b      	lsls	r3, r1, #6
 8002322:	1a5b      	subs	r3, r3, r1
 8002324:	eb64 0402 	sbc.w	r4, r4, r2
 8002328:	f04f 0100 	mov.w	r1, #0
 800232c:	f04f 0200 	mov.w	r2, #0
 8002330:	00e2      	lsls	r2, r4, #3
 8002332:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002336:	00d9      	lsls	r1, r3, #3
 8002338:	460b      	mov	r3, r1
 800233a:	4614      	mov	r4, r2
 800233c:	195b      	adds	r3, r3, r5
 800233e:	eb44 0406 	adc.w	r4, r4, r6
 8002342:	f04f 0100 	mov.w	r1, #0
 8002346:	f04f 0200 	mov.w	r2, #0
 800234a:	0262      	lsls	r2, r4, #9
 800234c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002350:	0259      	lsls	r1, r3, #9
 8002352:	460b      	mov	r3, r1
 8002354:	4614      	mov	r4, r2
 8002356:	4618      	mov	r0, r3
 8002358:	4621      	mov	r1, r4
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f04f 0400 	mov.w	r4, #0
 8002360:	461a      	mov	r2, r3
 8002362:	4623      	mov	r3, r4
 8002364:	f7fd ff84 	bl	8000270 <__aeabi_uldivmod>
 8002368:	4603      	mov	r3, r0
 800236a:	460c      	mov	r4, r1
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	e049      	b.n	8002404 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002370:	4b2f      	ldr	r3, [pc, #188]	; (8002430 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	099b      	lsrs	r3, r3, #6
 8002376:	f04f 0400 	mov.w	r4, #0
 800237a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800237e:	f04f 0200 	mov.w	r2, #0
 8002382:	ea03 0501 	and.w	r5, r3, r1
 8002386:	ea04 0602 	and.w	r6, r4, r2
 800238a:	4629      	mov	r1, r5
 800238c:	4632      	mov	r2, r6
 800238e:	f04f 0300 	mov.w	r3, #0
 8002392:	f04f 0400 	mov.w	r4, #0
 8002396:	0154      	lsls	r4, r2, #5
 8002398:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800239c:	014b      	lsls	r3, r1, #5
 800239e:	4619      	mov	r1, r3
 80023a0:	4622      	mov	r2, r4
 80023a2:	1b49      	subs	r1, r1, r5
 80023a4:	eb62 0206 	sbc.w	r2, r2, r6
 80023a8:	f04f 0300 	mov.w	r3, #0
 80023ac:	f04f 0400 	mov.w	r4, #0
 80023b0:	0194      	lsls	r4, r2, #6
 80023b2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80023b6:	018b      	lsls	r3, r1, #6
 80023b8:	1a5b      	subs	r3, r3, r1
 80023ba:	eb64 0402 	sbc.w	r4, r4, r2
 80023be:	f04f 0100 	mov.w	r1, #0
 80023c2:	f04f 0200 	mov.w	r2, #0
 80023c6:	00e2      	lsls	r2, r4, #3
 80023c8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80023cc:	00d9      	lsls	r1, r3, #3
 80023ce:	460b      	mov	r3, r1
 80023d0:	4614      	mov	r4, r2
 80023d2:	195b      	adds	r3, r3, r5
 80023d4:	eb44 0406 	adc.w	r4, r4, r6
 80023d8:	f04f 0100 	mov.w	r1, #0
 80023dc:	f04f 0200 	mov.w	r2, #0
 80023e0:	02a2      	lsls	r2, r4, #10
 80023e2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80023e6:	0299      	lsls	r1, r3, #10
 80023e8:	460b      	mov	r3, r1
 80023ea:	4614      	mov	r4, r2
 80023ec:	4618      	mov	r0, r3
 80023ee:	4621      	mov	r1, r4
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f04f 0400 	mov.w	r4, #0
 80023f6:	461a      	mov	r2, r3
 80023f8:	4623      	mov	r3, r4
 80023fa:	f7fd ff39 	bl	8000270 <__aeabi_uldivmod>
 80023fe:	4603      	mov	r3, r0
 8002400:	460c      	mov	r4, r1
 8002402:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002404:	4b0a      	ldr	r3, [pc, #40]	; (8002430 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	0c1b      	lsrs	r3, r3, #16
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	3301      	adds	r3, #1
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	fbb2 f3f3 	udiv	r3, r2, r3
 800241c:	60bb      	str	r3, [r7, #8]
      break;
 800241e:	e002      	b.n	8002426 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002420:	4b04      	ldr	r3, [pc, #16]	; (8002434 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002422:	60bb      	str	r3, [r7, #8]
      break;
 8002424:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002426:	68bb      	ldr	r3, [r7, #8]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3714      	adds	r7, #20
 800242c:	46bd      	mov	sp, r7
 800242e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002430:	40023800 	.word	0x40023800
 8002434:	00f42400 	.word	0x00f42400
 8002438:	007a1200 	.word	0x007a1200

0800243c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002440:	4b03      	ldr	r3, [pc, #12]	; (8002450 <HAL_RCC_GetHCLKFreq+0x14>)
 8002442:	681b      	ldr	r3, [r3, #0]
}
 8002444:	4618      	mov	r0, r3
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	20000000 	.word	0x20000000

08002454 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002458:	f7ff fff0 	bl	800243c <HAL_RCC_GetHCLKFreq>
 800245c:	4601      	mov	r1, r0
 800245e:	4b05      	ldr	r3, [pc, #20]	; (8002474 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	0b5b      	lsrs	r3, r3, #13
 8002464:	f003 0307 	and.w	r3, r3, #7
 8002468:	4a03      	ldr	r2, [pc, #12]	; (8002478 <HAL_RCC_GetPCLK2Freq+0x24>)
 800246a:	5cd3      	ldrb	r3, [r2, r3]
 800246c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002470:	4618      	mov	r0, r3
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40023800 	.word	0x40023800
 8002478:	080037f8 	.word	0x080037f8

0800247c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	220f      	movs	r2, #15
 800248a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800248c:	4b12      	ldr	r3, [pc, #72]	; (80024d8 <HAL_RCC_GetClockConfig+0x5c>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 0203 	and.w	r2, r3, #3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002498:	4b0f      	ldr	r3, [pc, #60]	; (80024d8 <HAL_RCC_GetClockConfig+0x5c>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80024a4:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <HAL_RCC_GetClockConfig+0x5c>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80024b0:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <HAL_RCC_GetClockConfig+0x5c>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	08db      	lsrs	r3, r3, #3
 80024b6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80024be:	4b07      	ldr	r3, [pc, #28]	; (80024dc <HAL_RCC_GetClockConfig+0x60>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 020f 	and.w	r2, r3, #15
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	601a      	str	r2, [r3, #0]
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	40023800 	.word	0x40023800
 80024dc:	40023c00 	.word	0x40023c00

080024e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e01d      	b.n	800252e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d106      	bne.n	800250c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 f815 	bl	8002536 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2202      	movs	r2, #2
 8002510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3304      	adds	r3, #4
 800251c:	4619      	mov	r1, r3
 800251e:	4610      	mov	r0, r2
 8002520:	f000 f968 	bl	80027f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002536:	b480      	push	{r7}
 8002538:	b083      	sub	sp, #12
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800254a:	b480      	push	{r7}
 800254c:	b085      	sub	sp, #20
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68da      	ldr	r2, [r3, #12]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f042 0201 	orr.w	r2, r2, #1
 8002560:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2b06      	cmp	r3, #6
 8002572:	d007      	beq.n	8002584 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f042 0201 	orr.w	r2, r2, #1
 8002582:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b082      	sub	sp, #8
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d122      	bne.n	80025ee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d11b      	bne.n	80025ee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f06f 0202 	mvn.w	r2, #2
 80025be:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	f003 0303 	and.w	r3, r3, #3
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d003      	beq.n	80025dc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 f8ee 	bl	80027b6 <HAL_TIM_IC_CaptureCallback>
 80025da:	e005      	b.n	80025e8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 f8e0 	bl	80027a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f8f1 	bl	80027ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b04      	cmp	r3, #4
 80025fa:	d122      	bne.n	8002642 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	f003 0304 	and.w	r3, r3, #4
 8002606:	2b04      	cmp	r3, #4
 8002608:	d11b      	bne.n	8002642 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f06f 0204 	mvn.w	r2, #4
 8002612:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2202      	movs	r2, #2
 8002618:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002624:	2b00      	cmp	r3, #0
 8002626:	d003      	beq.n	8002630 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 f8c4 	bl	80027b6 <HAL_TIM_IC_CaptureCallback>
 800262e:	e005      	b.n	800263c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 f8b6 	bl	80027a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f8c7 	bl	80027ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	f003 0308 	and.w	r3, r3, #8
 800264c:	2b08      	cmp	r3, #8
 800264e:	d122      	bne.n	8002696 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	f003 0308 	and.w	r3, r3, #8
 800265a:	2b08      	cmp	r3, #8
 800265c:	d11b      	bne.n	8002696 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f06f 0208 	mvn.w	r2, #8
 8002666:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2204      	movs	r2, #4
 800266c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	69db      	ldr	r3, [r3, #28]
 8002674:	f003 0303 	and.w	r3, r3, #3
 8002678:	2b00      	cmp	r3, #0
 800267a:	d003      	beq.n	8002684 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 f89a 	bl	80027b6 <HAL_TIM_IC_CaptureCallback>
 8002682:	e005      	b.n	8002690 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 f88c 	bl	80027a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f89d 	bl	80027ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	f003 0310 	and.w	r3, r3, #16
 80026a0:	2b10      	cmp	r3, #16
 80026a2:	d122      	bne.n	80026ea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	f003 0310 	and.w	r3, r3, #16
 80026ae:	2b10      	cmp	r3, #16
 80026b0:	d11b      	bne.n	80026ea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f06f 0210 	mvn.w	r2, #16
 80026ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2208      	movs	r2, #8
 80026c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	69db      	ldr	r3, [r3, #28]
 80026c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d003      	beq.n	80026d8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 f870 	bl	80027b6 <HAL_TIM_IC_CaptureCallback>
 80026d6:	e005      	b.n	80026e4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 f862 	bl	80027a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f873 	bl	80027ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d10e      	bne.n	8002716 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b01      	cmp	r3, #1
 8002704:	d107      	bne.n	8002716 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f06f 0201 	mvn.w	r2, #1
 800270e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f7fe f9a1 	bl	8000a58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002720:	2b80      	cmp	r3, #128	; 0x80
 8002722:	d10e      	bne.n	8002742 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800272e:	2b80      	cmp	r3, #128	; 0x80
 8002730:	d107      	bne.n	8002742 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800273a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 f903 	bl	8002948 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800274c:	2b40      	cmp	r3, #64	; 0x40
 800274e:	d10e      	bne.n	800276e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800275a:	2b40      	cmp	r3, #64	; 0x40
 800275c:	d107      	bne.n	800276e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 f838 	bl	80027de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	f003 0320 	and.w	r3, r3, #32
 8002778:	2b20      	cmp	r3, #32
 800277a:	d10e      	bne.n	800279a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	f003 0320 	and.w	r3, r3, #32
 8002786:	2b20      	cmp	r3, #32
 8002788:	d107      	bne.n	800279a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f06f 0220 	mvn.w	r2, #32
 8002792:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f000 f8cd 	bl	8002934 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800279a:	bf00      	nop
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b083      	sub	sp, #12
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027be:	bf00      	nop
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr

080027ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027de:	b480      	push	{r7}
 80027e0:	b083      	sub	sp, #12
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
	...

080027f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a40      	ldr	r2, [pc, #256]	; (8002908 <TIM_Base_SetConfig+0x114>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d013      	beq.n	8002834 <TIM_Base_SetConfig+0x40>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002812:	d00f      	beq.n	8002834 <TIM_Base_SetConfig+0x40>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a3d      	ldr	r2, [pc, #244]	; (800290c <TIM_Base_SetConfig+0x118>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d00b      	beq.n	8002834 <TIM_Base_SetConfig+0x40>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a3c      	ldr	r2, [pc, #240]	; (8002910 <TIM_Base_SetConfig+0x11c>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d007      	beq.n	8002834 <TIM_Base_SetConfig+0x40>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a3b      	ldr	r2, [pc, #236]	; (8002914 <TIM_Base_SetConfig+0x120>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d003      	beq.n	8002834 <TIM_Base_SetConfig+0x40>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a3a      	ldr	r2, [pc, #232]	; (8002918 <TIM_Base_SetConfig+0x124>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d108      	bne.n	8002846 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800283a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	4313      	orrs	r3, r2
 8002844:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a2f      	ldr	r2, [pc, #188]	; (8002908 <TIM_Base_SetConfig+0x114>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d02b      	beq.n	80028a6 <TIM_Base_SetConfig+0xb2>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002854:	d027      	beq.n	80028a6 <TIM_Base_SetConfig+0xb2>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a2c      	ldr	r2, [pc, #176]	; (800290c <TIM_Base_SetConfig+0x118>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d023      	beq.n	80028a6 <TIM_Base_SetConfig+0xb2>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a2b      	ldr	r2, [pc, #172]	; (8002910 <TIM_Base_SetConfig+0x11c>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d01f      	beq.n	80028a6 <TIM_Base_SetConfig+0xb2>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a2a      	ldr	r2, [pc, #168]	; (8002914 <TIM_Base_SetConfig+0x120>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d01b      	beq.n	80028a6 <TIM_Base_SetConfig+0xb2>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a29      	ldr	r2, [pc, #164]	; (8002918 <TIM_Base_SetConfig+0x124>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d017      	beq.n	80028a6 <TIM_Base_SetConfig+0xb2>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a28      	ldr	r2, [pc, #160]	; (800291c <TIM_Base_SetConfig+0x128>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d013      	beq.n	80028a6 <TIM_Base_SetConfig+0xb2>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a27      	ldr	r2, [pc, #156]	; (8002920 <TIM_Base_SetConfig+0x12c>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d00f      	beq.n	80028a6 <TIM_Base_SetConfig+0xb2>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a26      	ldr	r2, [pc, #152]	; (8002924 <TIM_Base_SetConfig+0x130>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d00b      	beq.n	80028a6 <TIM_Base_SetConfig+0xb2>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a25      	ldr	r2, [pc, #148]	; (8002928 <TIM_Base_SetConfig+0x134>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d007      	beq.n	80028a6 <TIM_Base_SetConfig+0xb2>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a24      	ldr	r2, [pc, #144]	; (800292c <TIM_Base_SetConfig+0x138>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d003      	beq.n	80028a6 <TIM_Base_SetConfig+0xb2>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a23      	ldr	r2, [pc, #140]	; (8002930 <TIM_Base_SetConfig+0x13c>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d108      	bne.n	80028b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a0a      	ldr	r2, [pc, #40]	; (8002908 <TIM_Base_SetConfig+0x114>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d003      	beq.n	80028ec <TIM_Base_SetConfig+0xf8>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a0c      	ldr	r2, [pc, #48]	; (8002918 <TIM_Base_SetConfig+0x124>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d103      	bne.n	80028f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	691a      	ldr	r2, [r3, #16]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	615a      	str	r2, [r3, #20]
}
 80028fa:	bf00      	nop
 80028fc:	3714      	adds	r7, #20
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	40010000 	.word	0x40010000
 800290c:	40000400 	.word	0x40000400
 8002910:	40000800 	.word	0x40000800
 8002914:	40000c00 	.word	0x40000c00
 8002918:	40010400 	.word	0x40010400
 800291c:	40014000 	.word	0x40014000
 8002920:	40014400 	.word	0x40014400
 8002924:	40014800 	.word	0x40014800
 8002928:	40001800 	.word	0x40001800
 800292c:	40001c00 	.word	0x40001c00
 8002930:	40002000 	.word	0x40002000

08002934 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <__errno>:
 800295c:	4b01      	ldr	r3, [pc, #4]	; (8002964 <__errno+0x8>)
 800295e:	6818      	ldr	r0, [r3, #0]
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	2000000c 	.word	0x2000000c

08002968 <__libc_init_array>:
 8002968:	b570      	push	{r4, r5, r6, lr}
 800296a:	4e0d      	ldr	r6, [pc, #52]	; (80029a0 <__libc_init_array+0x38>)
 800296c:	4c0d      	ldr	r4, [pc, #52]	; (80029a4 <__libc_init_array+0x3c>)
 800296e:	1ba4      	subs	r4, r4, r6
 8002970:	10a4      	asrs	r4, r4, #2
 8002972:	2500      	movs	r5, #0
 8002974:	42a5      	cmp	r5, r4
 8002976:	d109      	bne.n	800298c <__libc_init_array+0x24>
 8002978:	4e0b      	ldr	r6, [pc, #44]	; (80029a8 <__libc_init_array+0x40>)
 800297a:	4c0c      	ldr	r4, [pc, #48]	; (80029ac <__libc_init_array+0x44>)
 800297c:	f000 ff04 	bl	8003788 <_init>
 8002980:	1ba4      	subs	r4, r4, r6
 8002982:	10a4      	asrs	r4, r4, #2
 8002984:	2500      	movs	r5, #0
 8002986:	42a5      	cmp	r5, r4
 8002988:	d105      	bne.n	8002996 <__libc_init_array+0x2e>
 800298a:	bd70      	pop	{r4, r5, r6, pc}
 800298c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002990:	4798      	blx	r3
 8002992:	3501      	adds	r5, #1
 8002994:	e7ee      	b.n	8002974 <__libc_init_array+0xc>
 8002996:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800299a:	4798      	blx	r3
 800299c:	3501      	adds	r5, #1
 800299e:	e7f2      	b.n	8002986 <__libc_init_array+0x1e>
 80029a0:	080038a0 	.word	0x080038a0
 80029a4:	080038a0 	.word	0x080038a0
 80029a8:	080038a0 	.word	0x080038a0
 80029ac:	080038a4 	.word	0x080038a4

080029b0 <memset>:
 80029b0:	4402      	add	r2, r0
 80029b2:	4603      	mov	r3, r0
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d100      	bne.n	80029ba <memset+0xa>
 80029b8:	4770      	bx	lr
 80029ba:	f803 1b01 	strb.w	r1, [r3], #1
 80029be:	e7f9      	b.n	80029b4 <memset+0x4>

080029c0 <iprintf>:
 80029c0:	b40f      	push	{r0, r1, r2, r3}
 80029c2:	4b0a      	ldr	r3, [pc, #40]	; (80029ec <iprintf+0x2c>)
 80029c4:	b513      	push	{r0, r1, r4, lr}
 80029c6:	681c      	ldr	r4, [r3, #0]
 80029c8:	b124      	cbz	r4, 80029d4 <iprintf+0x14>
 80029ca:	69a3      	ldr	r3, [r4, #24]
 80029cc:	b913      	cbnz	r3, 80029d4 <iprintf+0x14>
 80029ce:	4620      	mov	r0, r4
 80029d0:	f000 f84e 	bl	8002a70 <__sinit>
 80029d4:	ab05      	add	r3, sp, #20
 80029d6:	9a04      	ldr	r2, [sp, #16]
 80029d8:	68a1      	ldr	r1, [r4, #8]
 80029da:	9301      	str	r3, [sp, #4]
 80029dc:	4620      	mov	r0, r4
 80029de:	f000 f955 	bl	8002c8c <_vfiprintf_r>
 80029e2:	b002      	add	sp, #8
 80029e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029e8:	b004      	add	sp, #16
 80029ea:	4770      	bx	lr
 80029ec:	2000000c 	.word	0x2000000c

080029f0 <std>:
 80029f0:	2300      	movs	r3, #0
 80029f2:	b510      	push	{r4, lr}
 80029f4:	4604      	mov	r4, r0
 80029f6:	e9c0 3300 	strd	r3, r3, [r0]
 80029fa:	6083      	str	r3, [r0, #8]
 80029fc:	8181      	strh	r1, [r0, #12]
 80029fe:	6643      	str	r3, [r0, #100]	; 0x64
 8002a00:	81c2      	strh	r2, [r0, #14]
 8002a02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002a06:	6183      	str	r3, [r0, #24]
 8002a08:	4619      	mov	r1, r3
 8002a0a:	2208      	movs	r2, #8
 8002a0c:	305c      	adds	r0, #92	; 0x5c
 8002a0e:	f7ff ffcf 	bl	80029b0 <memset>
 8002a12:	4b05      	ldr	r3, [pc, #20]	; (8002a28 <std+0x38>)
 8002a14:	6263      	str	r3, [r4, #36]	; 0x24
 8002a16:	4b05      	ldr	r3, [pc, #20]	; (8002a2c <std+0x3c>)
 8002a18:	62a3      	str	r3, [r4, #40]	; 0x28
 8002a1a:	4b05      	ldr	r3, [pc, #20]	; (8002a30 <std+0x40>)
 8002a1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002a1e:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <std+0x44>)
 8002a20:	6224      	str	r4, [r4, #32]
 8002a22:	6323      	str	r3, [r4, #48]	; 0x30
 8002a24:	bd10      	pop	{r4, pc}
 8002a26:	bf00      	nop
 8002a28:	080031e9 	.word	0x080031e9
 8002a2c:	0800320b 	.word	0x0800320b
 8002a30:	08003243 	.word	0x08003243
 8002a34:	08003267 	.word	0x08003267

08002a38 <_cleanup_r>:
 8002a38:	4901      	ldr	r1, [pc, #4]	; (8002a40 <_cleanup_r+0x8>)
 8002a3a:	f000 b885 	b.w	8002b48 <_fwalk_reent>
 8002a3e:	bf00      	nop
 8002a40:	08003541 	.word	0x08003541

08002a44 <__sfmoreglue>:
 8002a44:	b570      	push	{r4, r5, r6, lr}
 8002a46:	1e4a      	subs	r2, r1, #1
 8002a48:	2568      	movs	r5, #104	; 0x68
 8002a4a:	4355      	muls	r5, r2
 8002a4c:	460e      	mov	r6, r1
 8002a4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002a52:	f000 f897 	bl	8002b84 <_malloc_r>
 8002a56:	4604      	mov	r4, r0
 8002a58:	b140      	cbz	r0, 8002a6c <__sfmoreglue+0x28>
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	e9c0 1600 	strd	r1, r6, [r0]
 8002a60:	300c      	adds	r0, #12
 8002a62:	60a0      	str	r0, [r4, #8]
 8002a64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002a68:	f7ff ffa2 	bl	80029b0 <memset>
 8002a6c:	4620      	mov	r0, r4
 8002a6e:	bd70      	pop	{r4, r5, r6, pc}

08002a70 <__sinit>:
 8002a70:	6983      	ldr	r3, [r0, #24]
 8002a72:	b510      	push	{r4, lr}
 8002a74:	4604      	mov	r4, r0
 8002a76:	bb33      	cbnz	r3, 8002ac6 <__sinit+0x56>
 8002a78:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002a7c:	6503      	str	r3, [r0, #80]	; 0x50
 8002a7e:	4b12      	ldr	r3, [pc, #72]	; (8002ac8 <__sinit+0x58>)
 8002a80:	4a12      	ldr	r2, [pc, #72]	; (8002acc <__sinit+0x5c>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6282      	str	r2, [r0, #40]	; 0x28
 8002a86:	4298      	cmp	r0, r3
 8002a88:	bf04      	itt	eq
 8002a8a:	2301      	moveq	r3, #1
 8002a8c:	6183      	streq	r3, [r0, #24]
 8002a8e:	f000 f81f 	bl	8002ad0 <__sfp>
 8002a92:	6060      	str	r0, [r4, #4]
 8002a94:	4620      	mov	r0, r4
 8002a96:	f000 f81b 	bl	8002ad0 <__sfp>
 8002a9a:	60a0      	str	r0, [r4, #8]
 8002a9c:	4620      	mov	r0, r4
 8002a9e:	f000 f817 	bl	8002ad0 <__sfp>
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	60e0      	str	r0, [r4, #12]
 8002aa6:	2104      	movs	r1, #4
 8002aa8:	6860      	ldr	r0, [r4, #4]
 8002aaa:	f7ff ffa1 	bl	80029f0 <std>
 8002aae:	2201      	movs	r2, #1
 8002ab0:	2109      	movs	r1, #9
 8002ab2:	68a0      	ldr	r0, [r4, #8]
 8002ab4:	f7ff ff9c 	bl	80029f0 <std>
 8002ab8:	2202      	movs	r2, #2
 8002aba:	2112      	movs	r1, #18
 8002abc:	68e0      	ldr	r0, [r4, #12]
 8002abe:	f7ff ff97 	bl	80029f0 <std>
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	61a3      	str	r3, [r4, #24]
 8002ac6:	bd10      	pop	{r4, pc}
 8002ac8:	08003800 	.word	0x08003800
 8002acc:	08002a39 	.word	0x08002a39

08002ad0 <__sfp>:
 8002ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ad2:	4b1b      	ldr	r3, [pc, #108]	; (8002b40 <__sfp+0x70>)
 8002ad4:	681e      	ldr	r6, [r3, #0]
 8002ad6:	69b3      	ldr	r3, [r6, #24]
 8002ad8:	4607      	mov	r7, r0
 8002ada:	b913      	cbnz	r3, 8002ae2 <__sfp+0x12>
 8002adc:	4630      	mov	r0, r6
 8002ade:	f7ff ffc7 	bl	8002a70 <__sinit>
 8002ae2:	3648      	adds	r6, #72	; 0x48
 8002ae4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	d503      	bpl.n	8002af4 <__sfp+0x24>
 8002aec:	6833      	ldr	r3, [r6, #0]
 8002aee:	b133      	cbz	r3, 8002afe <__sfp+0x2e>
 8002af0:	6836      	ldr	r6, [r6, #0]
 8002af2:	e7f7      	b.n	8002ae4 <__sfp+0x14>
 8002af4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002af8:	b16d      	cbz	r5, 8002b16 <__sfp+0x46>
 8002afa:	3468      	adds	r4, #104	; 0x68
 8002afc:	e7f4      	b.n	8002ae8 <__sfp+0x18>
 8002afe:	2104      	movs	r1, #4
 8002b00:	4638      	mov	r0, r7
 8002b02:	f7ff ff9f 	bl	8002a44 <__sfmoreglue>
 8002b06:	6030      	str	r0, [r6, #0]
 8002b08:	2800      	cmp	r0, #0
 8002b0a:	d1f1      	bne.n	8002af0 <__sfp+0x20>
 8002b0c:	230c      	movs	r3, #12
 8002b0e:	603b      	str	r3, [r7, #0]
 8002b10:	4604      	mov	r4, r0
 8002b12:	4620      	mov	r0, r4
 8002b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b16:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <__sfp+0x74>)
 8002b18:	6665      	str	r5, [r4, #100]	; 0x64
 8002b1a:	e9c4 5500 	strd	r5, r5, [r4]
 8002b1e:	60a5      	str	r5, [r4, #8]
 8002b20:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002b24:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002b28:	2208      	movs	r2, #8
 8002b2a:	4629      	mov	r1, r5
 8002b2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002b30:	f7ff ff3e 	bl	80029b0 <memset>
 8002b34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002b38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002b3c:	e7e9      	b.n	8002b12 <__sfp+0x42>
 8002b3e:	bf00      	nop
 8002b40:	08003800 	.word	0x08003800
 8002b44:	ffff0001 	.word	0xffff0001

08002b48 <_fwalk_reent>:
 8002b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b4c:	4680      	mov	r8, r0
 8002b4e:	4689      	mov	r9, r1
 8002b50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002b54:	2600      	movs	r6, #0
 8002b56:	b914      	cbnz	r4, 8002b5e <_fwalk_reent+0x16>
 8002b58:	4630      	mov	r0, r6
 8002b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b5e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8002b62:	3f01      	subs	r7, #1
 8002b64:	d501      	bpl.n	8002b6a <_fwalk_reent+0x22>
 8002b66:	6824      	ldr	r4, [r4, #0]
 8002b68:	e7f5      	b.n	8002b56 <_fwalk_reent+0xe>
 8002b6a:	89ab      	ldrh	r3, [r5, #12]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d907      	bls.n	8002b80 <_fwalk_reent+0x38>
 8002b70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002b74:	3301      	adds	r3, #1
 8002b76:	d003      	beq.n	8002b80 <_fwalk_reent+0x38>
 8002b78:	4629      	mov	r1, r5
 8002b7a:	4640      	mov	r0, r8
 8002b7c:	47c8      	blx	r9
 8002b7e:	4306      	orrs	r6, r0
 8002b80:	3568      	adds	r5, #104	; 0x68
 8002b82:	e7ee      	b.n	8002b62 <_fwalk_reent+0x1a>

08002b84 <_malloc_r>:
 8002b84:	b570      	push	{r4, r5, r6, lr}
 8002b86:	1ccd      	adds	r5, r1, #3
 8002b88:	f025 0503 	bic.w	r5, r5, #3
 8002b8c:	3508      	adds	r5, #8
 8002b8e:	2d0c      	cmp	r5, #12
 8002b90:	bf38      	it	cc
 8002b92:	250c      	movcc	r5, #12
 8002b94:	2d00      	cmp	r5, #0
 8002b96:	4606      	mov	r6, r0
 8002b98:	db01      	blt.n	8002b9e <_malloc_r+0x1a>
 8002b9a:	42a9      	cmp	r1, r5
 8002b9c:	d903      	bls.n	8002ba6 <_malloc_r+0x22>
 8002b9e:	230c      	movs	r3, #12
 8002ba0:	6033      	str	r3, [r6, #0]
 8002ba2:	2000      	movs	r0, #0
 8002ba4:	bd70      	pop	{r4, r5, r6, pc}
 8002ba6:	f000 fd6b 	bl	8003680 <__malloc_lock>
 8002baa:	4a21      	ldr	r2, [pc, #132]	; (8002c30 <_malloc_r+0xac>)
 8002bac:	6814      	ldr	r4, [r2, #0]
 8002bae:	4621      	mov	r1, r4
 8002bb0:	b991      	cbnz	r1, 8002bd8 <_malloc_r+0x54>
 8002bb2:	4c20      	ldr	r4, [pc, #128]	; (8002c34 <_malloc_r+0xb0>)
 8002bb4:	6823      	ldr	r3, [r4, #0]
 8002bb6:	b91b      	cbnz	r3, 8002bc0 <_malloc_r+0x3c>
 8002bb8:	4630      	mov	r0, r6
 8002bba:	f000 fb05 	bl	80031c8 <_sbrk_r>
 8002bbe:	6020      	str	r0, [r4, #0]
 8002bc0:	4629      	mov	r1, r5
 8002bc2:	4630      	mov	r0, r6
 8002bc4:	f000 fb00 	bl	80031c8 <_sbrk_r>
 8002bc8:	1c43      	adds	r3, r0, #1
 8002bca:	d124      	bne.n	8002c16 <_malloc_r+0x92>
 8002bcc:	230c      	movs	r3, #12
 8002bce:	6033      	str	r3, [r6, #0]
 8002bd0:	4630      	mov	r0, r6
 8002bd2:	f000 fd56 	bl	8003682 <__malloc_unlock>
 8002bd6:	e7e4      	b.n	8002ba2 <_malloc_r+0x1e>
 8002bd8:	680b      	ldr	r3, [r1, #0]
 8002bda:	1b5b      	subs	r3, r3, r5
 8002bdc:	d418      	bmi.n	8002c10 <_malloc_r+0x8c>
 8002bde:	2b0b      	cmp	r3, #11
 8002be0:	d90f      	bls.n	8002c02 <_malloc_r+0x7e>
 8002be2:	600b      	str	r3, [r1, #0]
 8002be4:	50cd      	str	r5, [r1, r3]
 8002be6:	18cc      	adds	r4, r1, r3
 8002be8:	4630      	mov	r0, r6
 8002bea:	f000 fd4a 	bl	8003682 <__malloc_unlock>
 8002bee:	f104 000b 	add.w	r0, r4, #11
 8002bf2:	1d23      	adds	r3, r4, #4
 8002bf4:	f020 0007 	bic.w	r0, r0, #7
 8002bf8:	1ac3      	subs	r3, r0, r3
 8002bfa:	d0d3      	beq.n	8002ba4 <_malloc_r+0x20>
 8002bfc:	425a      	negs	r2, r3
 8002bfe:	50e2      	str	r2, [r4, r3]
 8002c00:	e7d0      	b.n	8002ba4 <_malloc_r+0x20>
 8002c02:	428c      	cmp	r4, r1
 8002c04:	684b      	ldr	r3, [r1, #4]
 8002c06:	bf16      	itet	ne
 8002c08:	6063      	strne	r3, [r4, #4]
 8002c0a:	6013      	streq	r3, [r2, #0]
 8002c0c:	460c      	movne	r4, r1
 8002c0e:	e7eb      	b.n	8002be8 <_malloc_r+0x64>
 8002c10:	460c      	mov	r4, r1
 8002c12:	6849      	ldr	r1, [r1, #4]
 8002c14:	e7cc      	b.n	8002bb0 <_malloc_r+0x2c>
 8002c16:	1cc4      	adds	r4, r0, #3
 8002c18:	f024 0403 	bic.w	r4, r4, #3
 8002c1c:	42a0      	cmp	r0, r4
 8002c1e:	d005      	beq.n	8002c2c <_malloc_r+0xa8>
 8002c20:	1a21      	subs	r1, r4, r0
 8002c22:	4630      	mov	r0, r6
 8002c24:	f000 fad0 	bl	80031c8 <_sbrk_r>
 8002c28:	3001      	adds	r0, #1
 8002c2a:	d0cf      	beq.n	8002bcc <_malloc_r+0x48>
 8002c2c:	6025      	str	r5, [r4, #0]
 8002c2e:	e7db      	b.n	8002be8 <_malloc_r+0x64>
 8002c30:	20000094 	.word	0x20000094
 8002c34:	20000098 	.word	0x20000098

08002c38 <__sfputc_r>:
 8002c38:	6893      	ldr	r3, [r2, #8]
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	b410      	push	{r4}
 8002c40:	6093      	str	r3, [r2, #8]
 8002c42:	da08      	bge.n	8002c56 <__sfputc_r+0x1e>
 8002c44:	6994      	ldr	r4, [r2, #24]
 8002c46:	42a3      	cmp	r3, r4
 8002c48:	db01      	blt.n	8002c4e <__sfputc_r+0x16>
 8002c4a:	290a      	cmp	r1, #10
 8002c4c:	d103      	bne.n	8002c56 <__sfputc_r+0x1e>
 8002c4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c52:	f000 bb0d 	b.w	8003270 <__swbuf_r>
 8002c56:	6813      	ldr	r3, [r2, #0]
 8002c58:	1c58      	adds	r0, r3, #1
 8002c5a:	6010      	str	r0, [r2, #0]
 8002c5c:	7019      	strb	r1, [r3, #0]
 8002c5e:	4608      	mov	r0, r1
 8002c60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <__sfputs_r>:
 8002c66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c68:	4606      	mov	r6, r0
 8002c6a:	460f      	mov	r7, r1
 8002c6c:	4614      	mov	r4, r2
 8002c6e:	18d5      	adds	r5, r2, r3
 8002c70:	42ac      	cmp	r4, r5
 8002c72:	d101      	bne.n	8002c78 <__sfputs_r+0x12>
 8002c74:	2000      	movs	r0, #0
 8002c76:	e007      	b.n	8002c88 <__sfputs_r+0x22>
 8002c78:	463a      	mov	r2, r7
 8002c7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c7e:	4630      	mov	r0, r6
 8002c80:	f7ff ffda 	bl	8002c38 <__sfputc_r>
 8002c84:	1c43      	adds	r3, r0, #1
 8002c86:	d1f3      	bne.n	8002c70 <__sfputs_r+0xa>
 8002c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002c8c <_vfiprintf_r>:
 8002c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c90:	460c      	mov	r4, r1
 8002c92:	b09d      	sub	sp, #116	; 0x74
 8002c94:	4617      	mov	r7, r2
 8002c96:	461d      	mov	r5, r3
 8002c98:	4606      	mov	r6, r0
 8002c9a:	b118      	cbz	r0, 8002ca4 <_vfiprintf_r+0x18>
 8002c9c:	6983      	ldr	r3, [r0, #24]
 8002c9e:	b90b      	cbnz	r3, 8002ca4 <_vfiprintf_r+0x18>
 8002ca0:	f7ff fee6 	bl	8002a70 <__sinit>
 8002ca4:	4b7c      	ldr	r3, [pc, #496]	; (8002e98 <_vfiprintf_r+0x20c>)
 8002ca6:	429c      	cmp	r4, r3
 8002ca8:	d158      	bne.n	8002d5c <_vfiprintf_r+0xd0>
 8002caa:	6874      	ldr	r4, [r6, #4]
 8002cac:	89a3      	ldrh	r3, [r4, #12]
 8002cae:	0718      	lsls	r0, r3, #28
 8002cb0:	d55e      	bpl.n	8002d70 <_vfiprintf_r+0xe4>
 8002cb2:	6923      	ldr	r3, [r4, #16]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d05b      	beq.n	8002d70 <_vfiprintf_r+0xe4>
 8002cb8:	2300      	movs	r3, #0
 8002cba:	9309      	str	r3, [sp, #36]	; 0x24
 8002cbc:	2320      	movs	r3, #32
 8002cbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002cc2:	2330      	movs	r3, #48	; 0x30
 8002cc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002cc8:	9503      	str	r5, [sp, #12]
 8002cca:	f04f 0b01 	mov.w	fp, #1
 8002cce:	46b8      	mov	r8, r7
 8002cd0:	4645      	mov	r5, r8
 8002cd2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002cd6:	b10b      	cbz	r3, 8002cdc <_vfiprintf_r+0x50>
 8002cd8:	2b25      	cmp	r3, #37	; 0x25
 8002cda:	d154      	bne.n	8002d86 <_vfiprintf_r+0xfa>
 8002cdc:	ebb8 0a07 	subs.w	sl, r8, r7
 8002ce0:	d00b      	beq.n	8002cfa <_vfiprintf_r+0x6e>
 8002ce2:	4653      	mov	r3, sl
 8002ce4:	463a      	mov	r2, r7
 8002ce6:	4621      	mov	r1, r4
 8002ce8:	4630      	mov	r0, r6
 8002cea:	f7ff ffbc 	bl	8002c66 <__sfputs_r>
 8002cee:	3001      	adds	r0, #1
 8002cf0:	f000 80c2 	beq.w	8002e78 <_vfiprintf_r+0x1ec>
 8002cf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002cf6:	4453      	add	r3, sl
 8002cf8:	9309      	str	r3, [sp, #36]	; 0x24
 8002cfa:	f898 3000 	ldrb.w	r3, [r8]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f000 80ba 	beq.w	8002e78 <_vfiprintf_r+0x1ec>
 8002d04:	2300      	movs	r3, #0
 8002d06:	f04f 32ff 	mov.w	r2, #4294967295
 8002d0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d0e:	9304      	str	r3, [sp, #16]
 8002d10:	9307      	str	r3, [sp, #28]
 8002d12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002d16:	931a      	str	r3, [sp, #104]	; 0x68
 8002d18:	46a8      	mov	r8, r5
 8002d1a:	2205      	movs	r2, #5
 8002d1c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8002d20:	485e      	ldr	r0, [pc, #376]	; (8002e9c <_vfiprintf_r+0x210>)
 8002d22:	f7fd fa55 	bl	80001d0 <memchr>
 8002d26:	9b04      	ldr	r3, [sp, #16]
 8002d28:	bb78      	cbnz	r0, 8002d8a <_vfiprintf_r+0xfe>
 8002d2a:	06d9      	lsls	r1, r3, #27
 8002d2c:	bf44      	itt	mi
 8002d2e:	2220      	movmi	r2, #32
 8002d30:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002d34:	071a      	lsls	r2, r3, #28
 8002d36:	bf44      	itt	mi
 8002d38:	222b      	movmi	r2, #43	; 0x2b
 8002d3a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002d3e:	782a      	ldrb	r2, [r5, #0]
 8002d40:	2a2a      	cmp	r2, #42	; 0x2a
 8002d42:	d02a      	beq.n	8002d9a <_vfiprintf_r+0x10e>
 8002d44:	9a07      	ldr	r2, [sp, #28]
 8002d46:	46a8      	mov	r8, r5
 8002d48:	2000      	movs	r0, #0
 8002d4a:	250a      	movs	r5, #10
 8002d4c:	4641      	mov	r1, r8
 8002d4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d52:	3b30      	subs	r3, #48	; 0x30
 8002d54:	2b09      	cmp	r3, #9
 8002d56:	d969      	bls.n	8002e2c <_vfiprintf_r+0x1a0>
 8002d58:	b360      	cbz	r0, 8002db4 <_vfiprintf_r+0x128>
 8002d5a:	e024      	b.n	8002da6 <_vfiprintf_r+0x11a>
 8002d5c:	4b50      	ldr	r3, [pc, #320]	; (8002ea0 <_vfiprintf_r+0x214>)
 8002d5e:	429c      	cmp	r4, r3
 8002d60:	d101      	bne.n	8002d66 <_vfiprintf_r+0xda>
 8002d62:	68b4      	ldr	r4, [r6, #8]
 8002d64:	e7a2      	b.n	8002cac <_vfiprintf_r+0x20>
 8002d66:	4b4f      	ldr	r3, [pc, #316]	; (8002ea4 <_vfiprintf_r+0x218>)
 8002d68:	429c      	cmp	r4, r3
 8002d6a:	bf08      	it	eq
 8002d6c:	68f4      	ldreq	r4, [r6, #12]
 8002d6e:	e79d      	b.n	8002cac <_vfiprintf_r+0x20>
 8002d70:	4621      	mov	r1, r4
 8002d72:	4630      	mov	r0, r6
 8002d74:	f000 fae0 	bl	8003338 <__swsetup_r>
 8002d78:	2800      	cmp	r0, #0
 8002d7a:	d09d      	beq.n	8002cb8 <_vfiprintf_r+0x2c>
 8002d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d80:	b01d      	add	sp, #116	; 0x74
 8002d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d86:	46a8      	mov	r8, r5
 8002d88:	e7a2      	b.n	8002cd0 <_vfiprintf_r+0x44>
 8002d8a:	4a44      	ldr	r2, [pc, #272]	; (8002e9c <_vfiprintf_r+0x210>)
 8002d8c:	1a80      	subs	r0, r0, r2
 8002d8e:	fa0b f000 	lsl.w	r0, fp, r0
 8002d92:	4318      	orrs	r0, r3
 8002d94:	9004      	str	r0, [sp, #16]
 8002d96:	4645      	mov	r5, r8
 8002d98:	e7be      	b.n	8002d18 <_vfiprintf_r+0x8c>
 8002d9a:	9a03      	ldr	r2, [sp, #12]
 8002d9c:	1d11      	adds	r1, r2, #4
 8002d9e:	6812      	ldr	r2, [r2, #0]
 8002da0:	9103      	str	r1, [sp, #12]
 8002da2:	2a00      	cmp	r2, #0
 8002da4:	db01      	blt.n	8002daa <_vfiprintf_r+0x11e>
 8002da6:	9207      	str	r2, [sp, #28]
 8002da8:	e004      	b.n	8002db4 <_vfiprintf_r+0x128>
 8002daa:	4252      	negs	r2, r2
 8002dac:	f043 0302 	orr.w	r3, r3, #2
 8002db0:	9207      	str	r2, [sp, #28]
 8002db2:	9304      	str	r3, [sp, #16]
 8002db4:	f898 3000 	ldrb.w	r3, [r8]
 8002db8:	2b2e      	cmp	r3, #46	; 0x2e
 8002dba:	d10e      	bne.n	8002dda <_vfiprintf_r+0x14e>
 8002dbc:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002dc0:	2b2a      	cmp	r3, #42	; 0x2a
 8002dc2:	d138      	bne.n	8002e36 <_vfiprintf_r+0x1aa>
 8002dc4:	9b03      	ldr	r3, [sp, #12]
 8002dc6:	1d1a      	adds	r2, r3, #4
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	9203      	str	r2, [sp, #12]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	bfb8      	it	lt
 8002dd0:	f04f 33ff 	movlt.w	r3, #4294967295
 8002dd4:	f108 0802 	add.w	r8, r8, #2
 8002dd8:	9305      	str	r3, [sp, #20]
 8002dda:	4d33      	ldr	r5, [pc, #204]	; (8002ea8 <_vfiprintf_r+0x21c>)
 8002ddc:	f898 1000 	ldrb.w	r1, [r8]
 8002de0:	2203      	movs	r2, #3
 8002de2:	4628      	mov	r0, r5
 8002de4:	f7fd f9f4 	bl	80001d0 <memchr>
 8002de8:	b140      	cbz	r0, 8002dfc <_vfiprintf_r+0x170>
 8002dea:	2340      	movs	r3, #64	; 0x40
 8002dec:	1b40      	subs	r0, r0, r5
 8002dee:	fa03 f000 	lsl.w	r0, r3, r0
 8002df2:	9b04      	ldr	r3, [sp, #16]
 8002df4:	4303      	orrs	r3, r0
 8002df6:	f108 0801 	add.w	r8, r8, #1
 8002dfa:	9304      	str	r3, [sp, #16]
 8002dfc:	f898 1000 	ldrb.w	r1, [r8]
 8002e00:	482a      	ldr	r0, [pc, #168]	; (8002eac <_vfiprintf_r+0x220>)
 8002e02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002e06:	2206      	movs	r2, #6
 8002e08:	f108 0701 	add.w	r7, r8, #1
 8002e0c:	f7fd f9e0 	bl	80001d0 <memchr>
 8002e10:	2800      	cmp	r0, #0
 8002e12:	d037      	beq.n	8002e84 <_vfiprintf_r+0x1f8>
 8002e14:	4b26      	ldr	r3, [pc, #152]	; (8002eb0 <_vfiprintf_r+0x224>)
 8002e16:	bb1b      	cbnz	r3, 8002e60 <_vfiprintf_r+0x1d4>
 8002e18:	9b03      	ldr	r3, [sp, #12]
 8002e1a:	3307      	adds	r3, #7
 8002e1c:	f023 0307 	bic.w	r3, r3, #7
 8002e20:	3308      	adds	r3, #8
 8002e22:	9303      	str	r3, [sp, #12]
 8002e24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e26:	444b      	add	r3, r9
 8002e28:	9309      	str	r3, [sp, #36]	; 0x24
 8002e2a:	e750      	b.n	8002cce <_vfiprintf_r+0x42>
 8002e2c:	fb05 3202 	mla	r2, r5, r2, r3
 8002e30:	2001      	movs	r0, #1
 8002e32:	4688      	mov	r8, r1
 8002e34:	e78a      	b.n	8002d4c <_vfiprintf_r+0xc0>
 8002e36:	2300      	movs	r3, #0
 8002e38:	f108 0801 	add.w	r8, r8, #1
 8002e3c:	9305      	str	r3, [sp, #20]
 8002e3e:	4619      	mov	r1, r3
 8002e40:	250a      	movs	r5, #10
 8002e42:	4640      	mov	r0, r8
 8002e44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e48:	3a30      	subs	r2, #48	; 0x30
 8002e4a:	2a09      	cmp	r2, #9
 8002e4c:	d903      	bls.n	8002e56 <_vfiprintf_r+0x1ca>
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d0c3      	beq.n	8002dda <_vfiprintf_r+0x14e>
 8002e52:	9105      	str	r1, [sp, #20]
 8002e54:	e7c1      	b.n	8002dda <_vfiprintf_r+0x14e>
 8002e56:	fb05 2101 	mla	r1, r5, r1, r2
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	4680      	mov	r8, r0
 8002e5e:	e7f0      	b.n	8002e42 <_vfiprintf_r+0x1b6>
 8002e60:	ab03      	add	r3, sp, #12
 8002e62:	9300      	str	r3, [sp, #0]
 8002e64:	4622      	mov	r2, r4
 8002e66:	4b13      	ldr	r3, [pc, #76]	; (8002eb4 <_vfiprintf_r+0x228>)
 8002e68:	a904      	add	r1, sp, #16
 8002e6a:	4630      	mov	r0, r6
 8002e6c:	f3af 8000 	nop.w
 8002e70:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002e74:	4681      	mov	r9, r0
 8002e76:	d1d5      	bne.n	8002e24 <_vfiprintf_r+0x198>
 8002e78:	89a3      	ldrh	r3, [r4, #12]
 8002e7a:	065b      	lsls	r3, r3, #25
 8002e7c:	f53f af7e 	bmi.w	8002d7c <_vfiprintf_r+0xf0>
 8002e80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e82:	e77d      	b.n	8002d80 <_vfiprintf_r+0xf4>
 8002e84:	ab03      	add	r3, sp, #12
 8002e86:	9300      	str	r3, [sp, #0]
 8002e88:	4622      	mov	r2, r4
 8002e8a:	4b0a      	ldr	r3, [pc, #40]	; (8002eb4 <_vfiprintf_r+0x228>)
 8002e8c:	a904      	add	r1, sp, #16
 8002e8e:	4630      	mov	r0, r6
 8002e90:	f000 f888 	bl	8002fa4 <_printf_i>
 8002e94:	e7ec      	b.n	8002e70 <_vfiprintf_r+0x1e4>
 8002e96:	bf00      	nop
 8002e98:	08003824 	.word	0x08003824
 8002e9c:	08003864 	.word	0x08003864
 8002ea0:	08003844 	.word	0x08003844
 8002ea4:	08003804 	.word	0x08003804
 8002ea8:	0800386a 	.word	0x0800386a
 8002eac:	0800386e 	.word	0x0800386e
 8002eb0:	00000000 	.word	0x00000000
 8002eb4:	08002c67 	.word	0x08002c67

08002eb8 <_printf_common>:
 8002eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ebc:	4691      	mov	r9, r2
 8002ebe:	461f      	mov	r7, r3
 8002ec0:	688a      	ldr	r2, [r1, #8]
 8002ec2:	690b      	ldr	r3, [r1, #16]
 8002ec4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	bfb8      	it	lt
 8002ecc:	4613      	movlt	r3, r2
 8002ece:	f8c9 3000 	str.w	r3, [r9]
 8002ed2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002ed6:	4606      	mov	r6, r0
 8002ed8:	460c      	mov	r4, r1
 8002eda:	b112      	cbz	r2, 8002ee2 <_printf_common+0x2a>
 8002edc:	3301      	adds	r3, #1
 8002ede:	f8c9 3000 	str.w	r3, [r9]
 8002ee2:	6823      	ldr	r3, [r4, #0]
 8002ee4:	0699      	lsls	r1, r3, #26
 8002ee6:	bf42      	ittt	mi
 8002ee8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002eec:	3302      	addmi	r3, #2
 8002eee:	f8c9 3000 	strmi.w	r3, [r9]
 8002ef2:	6825      	ldr	r5, [r4, #0]
 8002ef4:	f015 0506 	ands.w	r5, r5, #6
 8002ef8:	d107      	bne.n	8002f0a <_printf_common+0x52>
 8002efa:	f104 0a19 	add.w	sl, r4, #25
 8002efe:	68e3      	ldr	r3, [r4, #12]
 8002f00:	f8d9 2000 	ldr.w	r2, [r9]
 8002f04:	1a9b      	subs	r3, r3, r2
 8002f06:	42ab      	cmp	r3, r5
 8002f08:	dc28      	bgt.n	8002f5c <_printf_common+0xa4>
 8002f0a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002f0e:	6822      	ldr	r2, [r4, #0]
 8002f10:	3300      	adds	r3, #0
 8002f12:	bf18      	it	ne
 8002f14:	2301      	movne	r3, #1
 8002f16:	0692      	lsls	r2, r2, #26
 8002f18:	d42d      	bmi.n	8002f76 <_printf_common+0xbe>
 8002f1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f1e:	4639      	mov	r1, r7
 8002f20:	4630      	mov	r0, r6
 8002f22:	47c0      	blx	r8
 8002f24:	3001      	adds	r0, #1
 8002f26:	d020      	beq.n	8002f6a <_printf_common+0xb2>
 8002f28:	6823      	ldr	r3, [r4, #0]
 8002f2a:	68e5      	ldr	r5, [r4, #12]
 8002f2c:	f8d9 2000 	ldr.w	r2, [r9]
 8002f30:	f003 0306 	and.w	r3, r3, #6
 8002f34:	2b04      	cmp	r3, #4
 8002f36:	bf08      	it	eq
 8002f38:	1aad      	subeq	r5, r5, r2
 8002f3a:	68a3      	ldr	r3, [r4, #8]
 8002f3c:	6922      	ldr	r2, [r4, #16]
 8002f3e:	bf0c      	ite	eq
 8002f40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f44:	2500      	movne	r5, #0
 8002f46:	4293      	cmp	r3, r2
 8002f48:	bfc4      	itt	gt
 8002f4a:	1a9b      	subgt	r3, r3, r2
 8002f4c:	18ed      	addgt	r5, r5, r3
 8002f4e:	f04f 0900 	mov.w	r9, #0
 8002f52:	341a      	adds	r4, #26
 8002f54:	454d      	cmp	r5, r9
 8002f56:	d11a      	bne.n	8002f8e <_printf_common+0xd6>
 8002f58:	2000      	movs	r0, #0
 8002f5a:	e008      	b.n	8002f6e <_printf_common+0xb6>
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	4652      	mov	r2, sl
 8002f60:	4639      	mov	r1, r7
 8002f62:	4630      	mov	r0, r6
 8002f64:	47c0      	blx	r8
 8002f66:	3001      	adds	r0, #1
 8002f68:	d103      	bne.n	8002f72 <_printf_common+0xba>
 8002f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8002f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f72:	3501      	adds	r5, #1
 8002f74:	e7c3      	b.n	8002efe <_printf_common+0x46>
 8002f76:	18e1      	adds	r1, r4, r3
 8002f78:	1c5a      	adds	r2, r3, #1
 8002f7a:	2030      	movs	r0, #48	; 0x30
 8002f7c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f80:	4422      	add	r2, r4
 8002f82:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f86:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f8a:	3302      	adds	r3, #2
 8002f8c:	e7c5      	b.n	8002f1a <_printf_common+0x62>
 8002f8e:	2301      	movs	r3, #1
 8002f90:	4622      	mov	r2, r4
 8002f92:	4639      	mov	r1, r7
 8002f94:	4630      	mov	r0, r6
 8002f96:	47c0      	blx	r8
 8002f98:	3001      	adds	r0, #1
 8002f9a:	d0e6      	beq.n	8002f6a <_printf_common+0xb2>
 8002f9c:	f109 0901 	add.w	r9, r9, #1
 8002fa0:	e7d8      	b.n	8002f54 <_printf_common+0x9c>
	...

08002fa4 <_printf_i>:
 8002fa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002fa8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002fac:	460c      	mov	r4, r1
 8002fae:	7e09      	ldrb	r1, [r1, #24]
 8002fb0:	b085      	sub	sp, #20
 8002fb2:	296e      	cmp	r1, #110	; 0x6e
 8002fb4:	4617      	mov	r7, r2
 8002fb6:	4606      	mov	r6, r0
 8002fb8:	4698      	mov	r8, r3
 8002fba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002fbc:	f000 80b3 	beq.w	8003126 <_printf_i+0x182>
 8002fc0:	d822      	bhi.n	8003008 <_printf_i+0x64>
 8002fc2:	2963      	cmp	r1, #99	; 0x63
 8002fc4:	d036      	beq.n	8003034 <_printf_i+0x90>
 8002fc6:	d80a      	bhi.n	8002fde <_printf_i+0x3a>
 8002fc8:	2900      	cmp	r1, #0
 8002fca:	f000 80b9 	beq.w	8003140 <_printf_i+0x19c>
 8002fce:	2958      	cmp	r1, #88	; 0x58
 8002fd0:	f000 8083 	beq.w	80030da <_printf_i+0x136>
 8002fd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002fd8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002fdc:	e032      	b.n	8003044 <_printf_i+0xa0>
 8002fde:	2964      	cmp	r1, #100	; 0x64
 8002fe0:	d001      	beq.n	8002fe6 <_printf_i+0x42>
 8002fe2:	2969      	cmp	r1, #105	; 0x69
 8002fe4:	d1f6      	bne.n	8002fd4 <_printf_i+0x30>
 8002fe6:	6820      	ldr	r0, [r4, #0]
 8002fe8:	6813      	ldr	r3, [r2, #0]
 8002fea:	0605      	lsls	r5, r0, #24
 8002fec:	f103 0104 	add.w	r1, r3, #4
 8002ff0:	d52a      	bpl.n	8003048 <_printf_i+0xa4>
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6011      	str	r1, [r2, #0]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	da03      	bge.n	8003002 <_printf_i+0x5e>
 8002ffa:	222d      	movs	r2, #45	; 0x2d
 8002ffc:	425b      	negs	r3, r3
 8002ffe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003002:	486f      	ldr	r0, [pc, #444]	; (80031c0 <_printf_i+0x21c>)
 8003004:	220a      	movs	r2, #10
 8003006:	e039      	b.n	800307c <_printf_i+0xd8>
 8003008:	2973      	cmp	r1, #115	; 0x73
 800300a:	f000 809d 	beq.w	8003148 <_printf_i+0x1a4>
 800300e:	d808      	bhi.n	8003022 <_printf_i+0x7e>
 8003010:	296f      	cmp	r1, #111	; 0x6f
 8003012:	d020      	beq.n	8003056 <_printf_i+0xb2>
 8003014:	2970      	cmp	r1, #112	; 0x70
 8003016:	d1dd      	bne.n	8002fd4 <_printf_i+0x30>
 8003018:	6823      	ldr	r3, [r4, #0]
 800301a:	f043 0320 	orr.w	r3, r3, #32
 800301e:	6023      	str	r3, [r4, #0]
 8003020:	e003      	b.n	800302a <_printf_i+0x86>
 8003022:	2975      	cmp	r1, #117	; 0x75
 8003024:	d017      	beq.n	8003056 <_printf_i+0xb2>
 8003026:	2978      	cmp	r1, #120	; 0x78
 8003028:	d1d4      	bne.n	8002fd4 <_printf_i+0x30>
 800302a:	2378      	movs	r3, #120	; 0x78
 800302c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003030:	4864      	ldr	r0, [pc, #400]	; (80031c4 <_printf_i+0x220>)
 8003032:	e055      	b.n	80030e0 <_printf_i+0x13c>
 8003034:	6813      	ldr	r3, [r2, #0]
 8003036:	1d19      	adds	r1, r3, #4
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6011      	str	r1, [r2, #0]
 800303c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003040:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003044:	2301      	movs	r3, #1
 8003046:	e08c      	b.n	8003162 <_printf_i+0x1be>
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6011      	str	r1, [r2, #0]
 800304c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003050:	bf18      	it	ne
 8003052:	b21b      	sxthne	r3, r3
 8003054:	e7cf      	b.n	8002ff6 <_printf_i+0x52>
 8003056:	6813      	ldr	r3, [r2, #0]
 8003058:	6825      	ldr	r5, [r4, #0]
 800305a:	1d18      	adds	r0, r3, #4
 800305c:	6010      	str	r0, [r2, #0]
 800305e:	0628      	lsls	r0, r5, #24
 8003060:	d501      	bpl.n	8003066 <_printf_i+0xc2>
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	e002      	b.n	800306c <_printf_i+0xc8>
 8003066:	0668      	lsls	r0, r5, #25
 8003068:	d5fb      	bpl.n	8003062 <_printf_i+0xbe>
 800306a:	881b      	ldrh	r3, [r3, #0]
 800306c:	4854      	ldr	r0, [pc, #336]	; (80031c0 <_printf_i+0x21c>)
 800306e:	296f      	cmp	r1, #111	; 0x6f
 8003070:	bf14      	ite	ne
 8003072:	220a      	movne	r2, #10
 8003074:	2208      	moveq	r2, #8
 8003076:	2100      	movs	r1, #0
 8003078:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800307c:	6865      	ldr	r5, [r4, #4]
 800307e:	60a5      	str	r5, [r4, #8]
 8003080:	2d00      	cmp	r5, #0
 8003082:	f2c0 8095 	blt.w	80031b0 <_printf_i+0x20c>
 8003086:	6821      	ldr	r1, [r4, #0]
 8003088:	f021 0104 	bic.w	r1, r1, #4
 800308c:	6021      	str	r1, [r4, #0]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d13d      	bne.n	800310e <_printf_i+0x16a>
 8003092:	2d00      	cmp	r5, #0
 8003094:	f040 808e 	bne.w	80031b4 <_printf_i+0x210>
 8003098:	4665      	mov	r5, ip
 800309a:	2a08      	cmp	r2, #8
 800309c:	d10b      	bne.n	80030b6 <_printf_i+0x112>
 800309e:	6823      	ldr	r3, [r4, #0]
 80030a0:	07db      	lsls	r3, r3, #31
 80030a2:	d508      	bpl.n	80030b6 <_printf_i+0x112>
 80030a4:	6923      	ldr	r3, [r4, #16]
 80030a6:	6862      	ldr	r2, [r4, #4]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	bfde      	ittt	le
 80030ac:	2330      	movle	r3, #48	; 0x30
 80030ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 80030b2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80030b6:	ebac 0305 	sub.w	r3, ip, r5
 80030ba:	6123      	str	r3, [r4, #16]
 80030bc:	f8cd 8000 	str.w	r8, [sp]
 80030c0:	463b      	mov	r3, r7
 80030c2:	aa03      	add	r2, sp, #12
 80030c4:	4621      	mov	r1, r4
 80030c6:	4630      	mov	r0, r6
 80030c8:	f7ff fef6 	bl	8002eb8 <_printf_common>
 80030cc:	3001      	adds	r0, #1
 80030ce:	d14d      	bne.n	800316c <_printf_i+0x1c8>
 80030d0:	f04f 30ff 	mov.w	r0, #4294967295
 80030d4:	b005      	add	sp, #20
 80030d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80030da:	4839      	ldr	r0, [pc, #228]	; (80031c0 <_printf_i+0x21c>)
 80030dc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80030e0:	6813      	ldr	r3, [r2, #0]
 80030e2:	6821      	ldr	r1, [r4, #0]
 80030e4:	1d1d      	adds	r5, r3, #4
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6015      	str	r5, [r2, #0]
 80030ea:	060a      	lsls	r2, r1, #24
 80030ec:	d50b      	bpl.n	8003106 <_printf_i+0x162>
 80030ee:	07ca      	lsls	r2, r1, #31
 80030f0:	bf44      	itt	mi
 80030f2:	f041 0120 	orrmi.w	r1, r1, #32
 80030f6:	6021      	strmi	r1, [r4, #0]
 80030f8:	b91b      	cbnz	r3, 8003102 <_printf_i+0x15e>
 80030fa:	6822      	ldr	r2, [r4, #0]
 80030fc:	f022 0220 	bic.w	r2, r2, #32
 8003100:	6022      	str	r2, [r4, #0]
 8003102:	2210      	movs	r2, #16
 8003104:	e7b7      	b.n	8003076 <_printf_i+0xd2>
 8003106:	064d      	lsls	r5, r1, #25
 8003108:	bf48      	it	mi
 800310a:	b29b      	uxthmi	r3, r3
 800310c:	e7ef      	b.n	80030ee <_printf_i+0x14a>
 800310e:	4665      	mov	r5, ip
 8003110:	fbb3 f1f2 	udiv	r1, r3, r2
 8003114:	fb02 3311 	mls	r3, r2, r1, r3
 8003118:	5cc3      	ldrb	r3, [r0, r3]
 800311a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800311e:	460b      	mov	r3, r1
 8003120:	2900      	cmp	r1, #0
 8003122:	d1f5      	bne.n	8003110 <_printf_i+0x16c>
 8003124:	e7b9      	b.n	800309a <_printf_i+0xf6>
 8003126:	6813      	ldr	r3, [r2, #0]
 8003128:	6825      	ldr	r5, [r4, #0]
 800312a:	6961      	ldr	r1, [r4, #20]
 800312c:	1d18      	adds	r0, r3, #4
 800312e:	6010      	str	r0, [r2, #0]
 8003130:	0628      	lsls	r0, r5, #24
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	d501      	bpl.n	800313a <_printf_i+0x196>
 8003136:	6019      	str	r1, [r3, #0]
 8003138:	e002      	b.n	8003140 <_printf_i+0x19c>
 800313a:	066a      	lsls	r2, r5, #25
 800313c:	d5fb      	bpl.n	8003136 <_printf_i+0x192>
 800313e:	8019      	strh	r1, [r3, #0]
 8003140:	2300      	movs	r3, #0
 8003142:	6123      	str	r3, [r4, #16]
 8003144:	4665      	mov	r5, ip
 8003146:	e7b9      	b.n	80030bc <_printf_i+0x118>
 8003148:	6813      	ldr	r3, [r2, #0]
 800314a:	1d19      	adds	r1, r3, #4
 800314c:	6011      	str	r1, [r2, #0]
 800314e:	681d      	ldr	r5, [r3, #0]
 8003150:	6862      	ldr	r2, [r4, #4]
 8003152:	2100      	movs	r1, #0
 8003154:	4628      	mov	r0, r5
 8003156:	f7fd f83b 	bl	80001d0 <memchr>
 800315a:	b108      	cbz	r0, 8003160 <_printf_i+0x1bc>
 800315c:	1b40      	subs	r0, r0, r5
 800315e:	6060      	str	r0, [r4, #4]
 8003160:	6863      	ldr	r3, [r4, #4]
 8003162:	6123      	str	r3, [r4, #16]
 8003164:	2300      	movs	r3, #0
 8003166:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800316a:	e7a7      	b.n	80030bc <_printf_i+0x118>
 800316c:	6923      	ldr	r3, [r4, #16]
 800316e:	462a      	mov	r2, r5
 8003170:	4639      	mov	r1, r7
 8003172:	4630      	mov	r0, r6
 8003174:	47c0      	blx	r8
 8003176:	3001      	adds	r0, #1
 8003178:	d0aa      	beq.n	80030d0 <_printf_i+0x12c>
 800317a:	6823      	ldr	r3, [r4, #0]
 800317c:	079b      	lsls	r3, r3, #30
 800317e:	d413      	bmi.n	80031a8 <_printf_i+0x204>
 8003180:	68e0      	ldr	r0, [r4, #12]
 8003182:	9b03      	ldr	r3, [sp, #12]
 8003184:	4298      	cmp	r0, r3
 8003186:	bfb8      	it	lt
 8003188:	4618      	movlt	r0, r3
 800318a:	e7a3      	b.n	80030d4 <_printf_i+0x130>
 800318c:	2301      	movs	r3, #1
 800318e:	464a      	mov	r2, r9
 8003190:	4639      	mov	r1, r7
 8003192:	4630      	mov	r0, r6
 8003194:	47c0      	blx	r8
 8003196:	3001      	adds	r0, #1
 8003198:	d09a      	beq.n	80030d0 <_printf_i+0x12c>
 800319a:	3501      	adds	r5, #1
 800319c:	68e3      	ldr	r3, [r4, #12]
 800319e:	9a03      	ldr	r2, [sp, #12]
 80031a0:	1a9b      	subs	r3, r3, r2
 80031a2:	42ab      	cmp	r3, r5
 80031a4:	dcf2      	bgt.n	800318c <_printf_i+0x1e8>
 80031a6:	e7eb      	b.n	8003180 <_printf_i+0x1dc>
 80031a8:	2500      	movs	r5, #0
 80031aa:	f104 0919 	add.w	r9, r4, #25
 80031ae:	e7f5      	b.n	800319c <_printf_i+0x1f8>
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1ac      	bne.n	800310e <_printf_i+0x16a>
 80031b4:	7803      	ldrb	r3, [r0, #0]
 80031b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80031ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031be:	e76c      	b.n	800309a <_printf_i+0xf6>
 80031c0:	08003875 	.word	0x08003875
 80031c4:	08003886 	.word	0x08003886

080031c8 <_sbrk_r>:
 80031c8:	b538      	push	{r3, r4, r5, lr}
 80031ca:	4c06      	ldr	r4, [pc, #24]	; (80031e4 <_sbrk_r+0x1c>)
 80031cc:	2300      	movs	r3, #0
 80031ce:	4605      	mov	r5, r0
 80031d0:	4608      	mov	r0, r1
 80031d2:	6023      	str	r3, [r4, #0]
 80031d4:	f7fd fd68 	bl	8000ca8 <_sbrk>
 80031d8:	1c43      	adds	r3, r0, #1
 80031da:	d102      	bne.n	80031e2 <_sbrk_r+0x1a>
 80031dc:	6823      	ldr	r3, [r4, #0]
 80031de:	b103      	cbz	r3, 80031e2 <_sbrk_r+0x1a>
 80031e0:	602b      	str	r3, [r5, #0]
 80031e2:	bd38      	pop	{r3, r4, r5, pc}
 80031e4:	20000108 	.word	0x20000108

080031e8 <__sread>:
 80031e8:	b510      	push	{r4, lr}
 80031ea:	460c      	mov	r4, r1
 80031ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031f0:	f000 fa96 	bl	8003720 <_read_r>
 80031f4:	2800      	cmp	r0, #0
 80031f6:	bfab      	itete	ge
 80031f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80031fa:	89a3      	ldrhlt	r3, [r4, #12]
 80031fc:	181b      	addge	r3, r3, r0
 80031fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003202:	bfac      	ite	ge
 8003204:	6563      	strge	r3, [r4, #84]	; 0x54
 8003206:	81a3      	strhlt	r3, [r4, #12]
 8003208:	bd10      	pop	{r4, pc}

0800320a <__swrite>:
 800320a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800320e:	461f      	mov	r7, r3
 8003210:	898b      	ldrh	r3, [r1, #12]
 8003212:	05db      	lsls	r3, r3, #23
 8003214:	4605      	mov	r5, r0
 8003216:	460c      	mov	r4, r1
 8003218:	4616      	mov	r6, r2
 800321a:	d505      	bpl.n	8003228 <__swrite+0x1e>
 800321c:	2302      	movs	r3, #2
 800321e:	2200      	movs	r2, #0
 8003220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003224:	f000 f9b6 	bl	8003594 <_lseek_r>
 8003228:	89a3      	ldrh	r3, [r4, #12]
 800322a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800322e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003232:	81a3      	strh	r3, [r4, #12]
 8003234:	4632      	mov	r2, r6
 8003236:	463b      	mov	r3, r7
 8003238:	4628      	mov	r0, r5
 800323a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800323e:	f000 b869 	b.w	8003314 <_write_r>

08003242 <__sseek>:
 8003242:	b510      	push	{r4, lr}
 8003244:	460c      	mov	r4, r1
 8003246:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800324a:	f000 f9a3 	bl	8003594 <_lseek_r>
 800324e:	1c43      	adds	r3, r0, #1
 8003250:	89a3      	ldrh	r3, [r4, #12]
 8003252:	bf15      	itete	ne
 8003254:	6560      	strne	r0, [r4, #84]	; 0x54
 8003256:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800325a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800325e:	81a3      	strheq	r3, [r4, #12]
 8003260:	bf18      	it	ne
 8003262:	81a3      	strhne	r3, [r4, #12]
 8003264:	bd10      	pop	{r4, pc}

08003266 <__sclose>:
 8003266:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800326a:	f000 b8d3 	b.w	8003414 <_close_r>
	...

08003270 <__swbuf_r>:
 8003270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003272:	460e      	mov	r6, r1
 8003274:	4614      	mov	r4, r2
 8003276:	4605      	mov	r5, r0
 8003278:	b118      	cbz	r0, 8003282 <__swbuf_r+0x12>
 800327a:	6983      	ldr	r3, [r0, #24]
 800327c:	b90b      	cbnz	r3, 8003282 <__swbuf_r+0x12>
 800327e:	f7ff fbf7 	bl	8002a70 <__sinit>
 8003282:	4b21      	ldr	r3, [pc, #132]	; (8003308 <__swbuf_r+0x98>)
 8003284:	429c      	cmp	r4, r3
 8003286:	d12a      	bne.n	80032de <__swbuf_r+0x6e>
 8003288:	686c      	ldr	r4, [r5, #4]
 800328a:	69a3      	ldr	r3, [r4, #24]
 800328c:	60a3      	str	r3, [r4, #8]
 800328e:	89a3      	ldrh	r3, [r4, #12]
 8003290:	071a      	lsls	r2, r3, #28
 8003292:	d52e      	bpl.n	80032f2 <__swbuf_r+0x82>
 8003294:	6923      	ldr	r3, [r4, #16]
 8003296:	b363      	cbz	r3, 80032f2 <__swbuf_r+0x82>
 8003298:	6923      	ldr	r3, [r4, #16]
 800329a:	6820      	ldr	r0, [r4, #0]
 800329c:	1ac0      	subs	r0, r0, r3
 800329e:	6963      	ldr	r3, [r4, #20]
 80032a0:	b2f6      	uxtb	r6, r6
 80032a2:	4283      	cmp	r3, r0
 80032a4:	4637      	mov	r7, r6
 80032a6:	dc04      	bgt.n	80032b2 <__swbuf_r+0x42>
 80032a8:	4621      	mov	r1, r4
 80032aa:	4628      	mov	r0, r5
 80032ac:	f000 f948 	bl	8003540 <_fflush_r>
 80032b0:	bb28      	cbnz	r0, 80032fe <__swbuf_r+0x8e>
 80032b2:	68a3      	ldr	r3, [r4, #8]
 80032b4:	3b01      	subs	r3, #1
 80032b6:	60a3      	str	r3, [r4, #8]
 80032b8:	6823      	ldr	r3, [r4, #0]
 80032ba:	1c5a      	adds	r2, r3, #1
 80032bc:	6022      	str	r2, [r4, #0]
 80032be:	701e      	strb	r6, [r3, #0]
 80032c0:	6963      	ldr	r3, [r4, #20]
 80032c2:	3001      	adds	r0, #1
 80032c4:	4283      	cmp	r3, r0
 80032c6:	d004      	beq.n	80032d2 <__swbuf_r+0x62>
 80032c8:	89a3      	ldrh	r3, [r4, #12]
 80032ca:	07db      	lsls	r3, r3, #31
 80032cc:	d519      	bpl.n	8003302 <__swbuf_r+0x92>
 80032ce:	2e0a      	cmp	r6, #10
 80032d0:	d117      	bne.n	8003302 <__swbuf_r+0x92>
 80032d2:	4621      	mov	r1, r4
 80032d4:	4628      	mov	r0, r5
 80032d6:	f000 f933 	bl	8003540 <_fflush_r>
 80032da:	b190      	cbz	r0, 8003302 <__swbuf_r+0x92>
 80032dc:	e00f      	b.n	80032fe <__swbuf_r+0x8e>
 80032de:	4b0b      	ldr	r3, [pc, #44]	; (800330c <__swbuf_r+0x9c>)
 80032e0:	429c      	cmp	r4, r3
 80032e2:	d101      	bne.n	80032e8 <__swbuf_r+0x78>
 80032e4:	68ac      	ldr	r4, [r5, #8]
 80032e6:	e7d0      	b.n	800328a <__swbuf_r+0x1a>
 80032e8:	4b09      	ldr	r3, [pc, #36]	; (8003310 <__swbuf_r+0xa0>)
 80032ea:	429c      	cmp	r4, r3
 80032ec:	bf08      	it	eq
 80032ee:	68ec      	ldreq	r4, [r5, #12]
 80032f0:	e7cb      	b.n	800328a <__swbuf_r+0x1a>
 80032f2:	4621      	mov	r1, r4
 80032f4:	4628      	mov	r0, r5
 80032f6:	f000 f81f 	bl	8003338 <__swsetup_r>
 80032fa:	2800      	cmp	r0, #0
 80032fc:	d0cc      	beq.n	8003298 <__swbuf_r+0x28>
 80032fe:	f04f 37ff 	mov.w	r7, #4294967295
 8003302:	4638      	mov	r0, r7
 8003304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003306:	bf00      	nop
 8003308:	08003824 	.word	0x08003824
 800330c:	08003844 	.word	0x08003844
 8003310:	08003804 	.word	0x08003804

08003314 <_write_r>:
 8003314:	b538      	push	{r3, r4, r5, lr}
 8003316:	4c07      	ldr	r4, [pc, #28]	; (8003334 <_write_r+0x20>)
 8003318:	4605      	mov	r5, r0
 800331a:	4608      	mov	r0, r1
 800331c:	4611      	mov	r1, r2
 800331e:	2200      	movs	r2, #0
 8003320:	6022      	str	r2, [r4, #0]
 8003322:	461a      	mov	r2, r3
 8003324:	f7fd fb7a 	bl	8000a1c <_write>
 8003328:	1c43      	adds	r3, r0, #1
 800332a:	d102      	bne.n	8003332 <_write_r+0x1e>
 800332c:	6823      	ldr	r3, [r4, #0]
 800332e:	b103      	cbz	r3, 8003332 <_write_r+0x1e>
 8003330:	602b      	str	r3, [r5, #0]
 8003332:	bd38      	pop	{r3, r4, r5, pc}
 8003334:	20000108 	.word	0x20000108

08003338 <__swsetup_r>:
 8003338:	4b32      	ldr	r3, [pc, #200]	; (8003404 <__swsetup_r+0xcc>)
 800333a:	b570      	push	{r4, r5, r6, lr}
 800333c:	681d      	ldr	r5, [r3, #0]
 800333e:	4606      	mov	r6, r0
 8003340:	460c      	mov	r4, r1
 8003342:	b125      	cbz	r5, 800334e <__swsetup_r+0x16>
 8003344:	69ab      	ldr	r3, [r5, #24]
 8003346:	b913      	cbnz	r3, 800334e <__swsetup_r+0x16>
 8003348:	4628      	mov	r0, r5
 800334a:	f7ff fb91 	bl	8002a70 <__sinit>
 800334e:	4b2e      	ldr	r3, [pc, #184]	; (8003408 <__swsetup_r+0xd0>)
 8003350:	429c      	cmp	r4, r3
 8003352:	d10f      	bne.n	8003374 <__swsetup_r+0x3c>
 8003354:	686c      	ldr	r4, [r5, #4]
 8003356:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800335a:	b29a      	uxth	r2, r3
 800335c:	0715      	lsls	r5, r2, #28
 800335e:	d42c      	bmi.n	80033ba <__swsetup_r+0x82>
 8003360:	06d0      	lsls	r0, r2, #27
 8003362:	d411      	bmi.n	8003388 <__swsetup_r+0x50>
 8003364:	2209      	movs	r2, #9
 8003366:	6032      	str	r2, [r6, #0]
 8003368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800336c:	81a3      	strh	r3, [r4, #12]
 800336e:	f04f 30ff 	mov.w	r0, #4294967295
 8003372:	e03e      	b.n	80033f2 <__swsetup_r+0xba>
 8003374:	4b25      	ldr	r3, [pc, #148]	; (800340c <__swsetup_r+0xd4>)
 8003376:	429c      	cmp	r4, r3
 8003378:	d101      	bne.n	800337e <__swsetup_r+0x46>
 800337a:	68ac      	ldr	r4, [r5, #8]
 800337c:	e7eb      	b.n	8003356 <__swsetup_r+0x1e>
 800337e:	4b24      	ldr	r3, [pc, #144]	; (8003410 <__swsetup_r+0xd8>)
 8003380:	429c      	cmp	r4, r3
 8003382:	bf08      	it	eq
 8003384:	68ec      	ldreq	r4, [r5, #12]
 8003386:	e7e6      	b.n	8003356 <__swsetup_r+0x1e>
 8003388:	0751      	lsls	r1, r2, #29
 800338a:	d512      	bpl.n	80033b2 <__swsetup_r+0x7a>
 800338c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800338e:	b141      	cbz	r1, 80033a2 <__swsetup_r+0x6a>
 8003390:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003394:	4299      	cmp	r1, r3
 8003396:	d002      	beq.n	800339e <__swsetup_r+0x66>
 8003398:	4630      	mov	r0, r6
 800339a:	f000 f973 	bl	8003684 <_free_r>
 800339e:	2300      	movs	r3, #0
 80033a0:	6363      	str	r3, [r4, #52]	; 0x34
 80033a2:	89a3      	ldrh	r3, [r4, #12]
 80033a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80033a8:	81a3      	strh	r3, [r4, #12]
 80033aa:	2300      	movs	r3, #0
 80033ac:	6063      	str	r3, [r4, #4]
 80033ae:	6923      	ldr	r3, [r4, #16]
 80033b0:	6023      	str	r3, [r4, #0]
 80033b2:	89a3      	ldrh	r3, [r4, #12]
 80033b4:	f043 0308 	orr.w	r3, r3, #8
 80033b8:	81a3      	strh	r3, [r4, #12]
 80033ba:	6923      	ldr	r3, [r4, #16]
 80033bc:	b94b      	cbnz	r3, 80033d2 <__swsetup_r+0x9a>
 80033be:	89a3      	ldrh	r3, [r4, #12]
 80033c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80033c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033c8:	d003      	beq.n	80033d2 <__swsetup_r+0x9a>
 80033ca:	4621      	mov	r1, r4
 80033cc:	4630      	mov	r0, r6
 80033ce:	f000 f917 	bl	8003600 <__smakebuf_r>
 80033d2:	89a2      	ldrh	r2, [r4, #12]
 80033d4:	f012 0301 	ands.w	r3, r2, #1
 80033d8:	d00c      	beq.n	80033f4 <__swsetup_r+0xbc>
 80033da:	2300      	movs	r3, #0
 80033dc:	60a3      	str	r3, [r4, #8]
 80033de:	6963      	ldr	r3, [r4, #20]
 80033e0:	425b      	negs	r3, r3
 80033e2:	61a3      	str	r3, [r4, #24]
 80033e4:	6923      	ldr	r3, [r4, #16]
 80033e6:	b953      	cbnz	r3, 80033fe <__swsetup_r+0xc6>
 80033e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033ec:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80033f0:	d1ba      	bne.n	8003368 <__swsetup_r+0x30>
 80033f2:	bd70      	pop	{r4, r5, r6, pc}
 80033f4:	0792      	lsls	r2, r2, #30
 80033f6:	bf58      	it	pl
 80033f8:	6963      	ldrpl	r3, [r4, #20]
 80033fa:	60a3      	str	r3, [r4, #8]
 80033fc:	e7f2      	b.n	80033e4 <__swsetup_r+0xac>
 80033fe:	2000      	movs	r0, #0
 8003400:	e7f7      	b.n	80033f2 <__swsetup_r+0xba>
 8003402:	bf00      	nop
 8003404:	2000000c 	.word	0x2000000c
 8003408:	08003824 	.word	0x08003824
 800340c:	08003844 	.word	0x08003844
 8003410:	08003804 	.word	0x08003804

08003414 <_close_r>:
 8003414:	b538      	push	{r3, r4, r5, lr}
 8003416:	4c06      	ldr	r4, [pc, #24]	; (8003430 <_close_r+0x1c>)
 8003418:	2300      	movs	r3, #0
 800341a:	4605      	mov	r5, r0
 800341c:	4608      	mov	r0, r1
 800341e:	6023      	str	r3, [r4, #0]
 8003420:	f7fd fc0d 	bl	8000c3e <_close>
 8003424:	1c43      	adds	r3, r0, #1
 8003426:	d102      	bne.n	800342e <_close_r+0x1a>
 8003428:	6823      	ldr	r3, [r4, #0]
 800342a:	b103      	cbz	r3, 800342e <_close_r+0x1a>
 800342c:	602b      	str	r3, [r5, #0]
 800342e:	bd38      	pop	{r3, r4, r5, pc}
 8003430:	20000108 	.word	0x20000108

08003434 <__sflush_r>:
 8003434:	898a      	ldrh	r2, [r1, #12]
 8003436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800343a:	4605      	mov	r5, r0
 800343c:	0710      	lsls	r0, r2, #28
 800343e:	460c      	mov	r4, r1
 8003440:	d458      	bmi.n	80034f4 <__sflush_r+0xc0>
 8003442:	684b      	ldr	r3, [r1, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	dc05      	bgt.n	8003454 <__sflush_r+0x20>
 8003448:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800344a:	2b00      	cmp	r3, #0
 800344c:	dc02      	bgt.n	8003454 <__sflush_r+0x20>
 800344e:	2000      	movs	r0, #0
 8003450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003454:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003456:	2e00      	cmp	r6, #0
 8003458:	d0f9      	beq.n	800344e <__sflush_r+0x1a>
 800345a:	2300      	movs	r3, #0
 800345c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003460:	682f      	ldr	r7, [r5, #0]
 8003462:	6a21      	ldr	r1, [r4, #32]
 8003464:	602b      	str	r3, [r5, #0]
 8003466:	d032      	beq.n	80034ce <__sflush_r+0x9a>
 8003468:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800346a:	89a3      	ldrh	r3, [r4, #12]
 800346c:	075a      	lsls	r2, r3, #29
 800346e:	d505      	bpl.n	800347c <__sflush_r+0x48>
 8003470:	6863      	ldr	r3, [r4, #4]
 8003472:	1ac0      	subs	r0, r0, r3
 8003474:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003476:	b10b      	cbz	r3, 800347c <__sflush_r+0x48>
 8003478:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800347a:	1ac0      	subs	r0, r0, r3
 800347c:	2300      	movs	r3, #0
 800347e:	4602      	mov	r2, r0
 8003480:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003482:	6a21      	ldr	r1, [r4, #32]
 8003484:	4628      	mov	r0, r5
 8003486:	47b0      	blx	r6
 8003488:	1c43      	adds	r3, r0, #1
 800348a:	89a3      	ldrh	r3, [r4, #12]
 800348c:	d106      	bne.n	800349c <__sflush_r+0x68>
 800348e:	6829      	ldr	r1, [r5, #0]
 8003490:	291d      	cmp	r1, #29
 8003492:	d848      	bhi.n	8003526 <__sflush_r+0xf2>
 8003494:	4a29      	ldr	r2, [pc, #164]	; (800353c <__sflush_r+0x108>)
 8003496:	40ca      	lsrs	r2, r1
 8003498:	07d6      	lsls	r6, r2, #31
 800349a:	d544      	bpl.n	8003526 <__sflush_r+0xf2>
 800349c:	2200      	movs	r2, #0
 800349e:	6062      	str	r2, [r4, #4]
 80034a0:	04d9      	lsls	r1, r3, #19
 80034a2:	6922      	ldr	r2, [r4, #16]
 80034a4:	6022      	str	r2, [r4, #0]
 80034a6:	d504      	bpl.n	80034b2 <__sflush_r+0x7e>
 80034a8:	1c42      	adds	r2, r0, #1
 80034aa:	d101      	bne.n	80034b0 <__sflush_r+0x7c>
 80034ac:	682b      	ldr	r3, [r5, #0]
 80034ae:	b903      	cbnz	r3, 80034b2 <__sflush_r+0x7e>
 80034b0:	6560      	str	r0, [r4, #84]	; 0x54
 80034b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80034b4:	602f      	str	r7, [r5, #0]
 80034b6:	2900      	cmp	r1, #0
 80034b8:	d0c9      	beq.n	800344e <__sflush_r+0x1a>
 80034ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80034be:	4299      	cmp	r1, r3
 80034c0:	d002      	beq.n	80034c8 <__sflush_r+0x94>
 80034c2:	4628      	mov	r0, r5
 80034c4:	f000 f8de 	bl	8003684 <_free_r>
 80034c8:	2000      	movs	r0, #0
 80034ca:	6360      	str	r0, [r4, #52]	; 0x34
 80034cc:	e7c0      	b.n	8003450 <__sflush_r+0x1c>
 80034ce:	2301      	movs	r3, #1
 80034d0:	4628      	mov	r0, r5
 80034d2:	47b0      	blx	r6
 80034d4:	1c41      	adds	r1, r0, #1
 80034d6:	d1c8      	bne.n	800346a <__sflush_r+0x36>
 80034d8:	682b      	ldr	r3, [r5, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0c5      	beq.n	800346a <__sflush_r+0x36>
 80034de:	2b1d      	cmp	r3, #29
 80034e0:	d001      	beq.n	80034e6 <__sflush_r+0xb2>
 80034e2:	2b16      	cmp	r3, #22
 80034e4:	d101      	bne.n	80034ea <__sflush_r+0xb6>
 80034e6:	602f      	str	r7, [r5, #0]
 80034e8:	e7b1      	b.n	800344e <__sflush_r+0x1a>
 80034ea:	89a3      	ldrh	r3, [r4, #12]
 80034ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034f0:	81a3      	strh	r3, [r4, #12]
 80034f2:	e7ad      	b.n	8003450 <__sflush_r+0x1c>
 80034f4:	690f      	ldr	r7, [r1, #16]
 80034f6:	2f00      	cmp	r7, #0
 80034f8:	d0a9      	beq.n	800344e <__sflush_r+0x1a>
 80034fa:	0793      	lsls	r3, r2, #30
 80034fc:	680e      	ldr	r6, [r1, #0]
 80034fe:	bf08      	it	eq
 8003500:	694b      	ldreq	r3, [r1, #20]
 8003502:	600f      	str	r7, [r1, #0]
 8003504:	bf18      	it	ne
 8003506:	2300      	movne	r3, #0
 8003508:	eba6 0807 	sub.w	r8, r6, r7
 800350c:	608b      	str	r3, [r1, #8]
 800350e:	f1b8 0f00 	cmp.w	r8, #0
 8003512:	dd9c      	ble.n	800344e <__sflush_r+0x1a>
 8003514:	4643      	mov	r3, r8
 8003516:	463a      	mov	r2, r7
 8003518:	6a21      	ldr	r1, [r4, #32]
 800351a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800351c:	4628      	mov	r0, r5
 800351e:	47b0      	blx	r6
 8003520:	2800      	cmp	r0, #0
 8003522:	dc06      	bgt.n	8003532 <__sflush_r+0xfe>
 8003524:	89a3      	ldrh	r3, [r4, #12]
 8003526:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800352a:	81a3      	strh	r3, [r4, #12]
 800352c:	f04f 30ff 	mov.w	r0, #4294967295
 8003530:	e78e      	b.n	8003450 <__sflush_r+0x1c>
 8003532:	4407      	add	r7, r0
 8003534:	eba8 0800 	sub.w	r8, r8, r0
 8003538:	e7e9      	b.n	800350e <__sflush_r+0xda>
 800353a:	bf00      	nop
 800353c:	20400001 	.word	0x20400001

08003540 <_fflush_r>:
 8003540:	b538      	push	{r3, r4, r5, lr}
 8003542:	690b      	ldr	r3, [r1, #16]
 8003544:	4605      	mov	r5, r0
 8003546:	460c      	mov	r4, r1
 8003548:	b1db      	cbz	r3, 8003582 <_fflush_r+0x42>
 800354a:	b118      	cbz	r0, 8003554 <_fflush_r+0x14>
 800354c:	6983      	ldr	r3, [r0, #24]
 800354e:	b90b      	cbnz	r3, 8003554 <_fflush_r+0x14>
 8003550:	f7ff fa8e 	bl	8002a70 <__sinit>
 8003554:	4b0c      	ldr	r3, [pc, #48]	; (8003588 <_fflush_r+0x48>)
 8003556:	429c      	cmp	r4, r3
 8003558:	d109      	bne.n	800356e <_fflush_r+0x2e>
 800355a:	686c      	ldr	r4, [r5, #4]
 800355c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003560:	b17b      	cbz	r3, 8003582 <_fflush_r+0x42>
 8003562:	4621      	mov	r1, r4
 8003564:	4628      	mov	r0, r5
 8003566:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800356a:	f7ff bf63 	b.w	8003434 <__sflush_r>
 800356e:	4b07      	ldr	r3, [pc, #28]	; (800358c <_fflush_r+0x4c>)
 8003570:	429c      	cmp	r4, r3
 8003572:	d101      	bne.n	8003578 <_fflush_r+0x38>
 8003574:	68ac      	ldr	r4, [r5, #8]
 8003576:	e7f1      	b.n	800355c <_fflush_r+0x1c>
 8003578:	4b05      	ldr	r3, [pc, #20]	; (8003590 <_fflush_r+0x50>)
 800357a:	429c      	cmp	r4, r3
 800357c:	bf08      	it	eq
 800357e:	68ec      	ldreq	r4, [r5, #12]
 8003580:	e7ec      	b.n	800355c <_fflush_r+0x1c>
 8003582:	2000      	movs	r0, #0
 8003584:	bd38      	pop	{r3, r4, r5, pc}
 8003586:	bf00      	nop
 8003588:	08003824 	.word	0x08003824
 800358c:	08003844 	.word	0x08003844
 8003590:	08003804 	.word	0x08003804

08003594 <_lseek_r>:
 8003594:	b538      	push	{r3, r4, r5, lr}
 8003596:	4c07      	ldr	r4, [pc, #28]	; (80035b4 <_lseek_r+0x20>)
 8003598:	4605      	mov	r5, r0
 800359a:	4608      	mov	r0, r1
 800359c:	4611      	mov	r1, r2
 800359e:	2200      	movs	r2, #0
 80035a0:	6022      	str	r2, [r4, #0]
 80035a2:	461a      	mov	r2, r3
 80035a4:	f7fd fb72 	bl	8000c8c <_lseek>
 80035a8:	1c43      	adds	r3, r0, #1
 80035aa:	d102      	bne.n	80035b2 <_lseek_r+0x1e>
 80035ac:	6823      	ldr	r3, [r4, #0]
 80035ae:	b103      	cbz	r3, 80035b2 <_lseek_r+0x1e>
 80035b0:	602b      	str	r3, [r5, #0]
 80035b2:	bd38      	pop	{r3, r4, r5, pc}
 80035b4:	20000108 	.word	0x20000108

080035b8 <__swhatbuf_r>:
 80035b8:	b570      	push	{r4, r5, r6, lr}
 80035ba:	460e      	mov	r6, r1
 80035bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035c0:	2900      	cmp	r1, #0
 80035c2:	b096      	sub	sp, #88	; 0x58
 80035c4:	4614      	mov	r4, r2
 80035c6:	461d      	mov	r5, r3
 80035c8:	da07      	bge.n	80035da <__swhatbuf_r+0x22>
 80035ca:	2300      	movs	r3, #0
 80035cc:	602b      	str	r3, [r5, #0]
 80035ce:	89b3      	ldrh	r3, [r6, #12]
 80035d0:	061a      	lsls	r2, r3, #24
 80035d2:	d410      	bmi.n	80035f6 <__swhatbuf_r+0x3e>
 80035d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035d8:	e00e      	b.n	80035f8 <__swhatbuf_r+0x40>
 80035da:	466a      	mov	r2, sp
 80035dc:	f000 f8b2 	bl	8003744 <_fstat_r>
 80035e0:	2800      	cmp	r0, #0
 80035e2:	dbf2      	blt.n	80035ca <__swhatbuf_r+0x12>
 80035e4:	9a01      	ldr	r2, [sp, #4]
 80035e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80035ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80035ee:	425a      	negs	r2, r3
 80035f0:	415a      	adcs	r2, r3
 80035f2:	602a      	str	r2, [r5, #0]
 80035f4:	e7ee      	b.n	80035d4 <__swhatbuf_r+0x1c>
 80035f6:	2340      	movs	r3, #64	; 0x40
 80035f8:	2000      	movs	r0, #0
 80035fa:	6023      	str	r3, [r4, #0]
 80035fc:	b016      	add	sp, #88	; 0x58
 80035fe:	bd70      	pop	{r4, r5, r6, pc}

08003600 <__smakebuf_r>:
 8003600:	898b      	ldrh	r3, [r1, #12]
 8003602:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003604:	079d      	lsls	r5, r3, #30
 8003606:	4606      	mov	r6, r0
 8003608:	460c      	mov	r4, r1
 800360a:	d507      	bpl.n	800361c <__smakebuf_r+0x1c>
 800360c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003610:	6023      	str	r3, [r4, #0]
 8003612:	6123      	str	r3, [r4, #16]
 8003614:	2301      	movs	r3, #1
 8003616:	6163      	str	r3, [r4, #20]
 8003618:	b002      	add	sp, #8
 800361a:	bd70      	pop	{r4, r5, r6, pc}
 800361c:	ab01      	add	r3, sp, #4
 800361e:	466a      	mov	r2, sp
 8003620:	f7ff ffca 	bl	80035b8 <__swhatbuf_r>
 8003624:	9900      	ldr	r1, [sp, #0]
 8003626:	4605      	mov	r5, r0
 8003628:	4630      	mov	r0, r6
 800362a:	f7ff faab 	bl	8002b84 <_malloc_r>
 800362e:	b948      	cbnz	r0, 8003644 <__smakebuf_r+0x44>
 8003630:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003634:	059a      	lsls	r2, r3, #22
 8003636:	d4ef      	bmi.n	8003618 <__smakebuf_r+0x18>
 8003638:	f023 0303 	bic.w	r3, r3, #3
 800363c:	f043 0302 	orr.w	r3, r3, #2
 8003640:	81a3      	strh	r3, [r4, #12]
 8003642:	e7e3      	b.n	800360c <__smakebuf_r+0xc>
 8003644:	4b0d      	ldr	r3, [pc, #52]	; (800367c <__smakebuf_r+0x7c>)
 8003646:	62b3      	str	r3, [r6, #40]	; 0x28
 8003648:	89a3      	ldrh	r3, [r4, #12]
 800364a:	6020      	str	r0, [r4, #0]
 800364c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003650:	81a3      	strh	r3, [r4, #12]
 8003652:	9b00      	ldr	r3, [sp, #0]
 8003654:	6163      	str	r3, [r4, #20]
 8003656:	9b01      	ldr	r3, [sp, #4]
 8003658:	6120      	str	r0, [r4, #16]
 800365a:	b15b      	cbz	r3, 8003674 <__smakebuf_r+0x74>
 800365c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003660:	4630      	mov	r0, r6
 8003662:	f000 f881 	bl	8003768 <_isatty_r>
 8003666:	b128      	cbz	r0, 8003674 <__smakebuf_r+0x74>
 8003668:	89a3      	ldrh	r3, [r4, #12]
 800366a:	f023 0303 	bic.w	r3, r3, #3
 800366e:	f043 0301 	orr.w	r3, r3, #1
 8003672:	81a3      	strh	r3, [r4, #12]
 8003674:	89a3      	ldrh	r3, [r4, #12]
 8003676:	431d      	orrs	r5, r3
 8003678:	81a5      	strh	r5, [r4, #12]
 800367a:	e7cd      	b.n	8003618 <__smakebuf_r+0x18>
 800367c:	08002a39 	.word	0x08002a39

08003680 <__malloc_lock>:
 8003680:	4770      	bx	lr

08003682 <__malloc_unlock>:
 8003682:	4770      	bx	lr

08003684 <_free_r>:
 8003684:	b538      	push	{r3, r4, r5, lr}
 8003686:	4605      	mov	r5, r0
 8003688:	2900      	cmp	r1, #0
 800368a:	d045      	beq.n	8003718 <_free_r+0x94>
 800368c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003690:	1f0c      	subs	r4, r1, #4
 8003692:	2b00      	cmp	r3, #0
 8003694:	bfb8      	it	lt
 8003696:	18e4      	addlt	r4, r4, r3
 8003698:	f7ff fff2 	bl	8003680 <__malloc_lock>
 800369c:	4a1f      	ldr	r2, [pc, #124]	; (800371c <_free_r+0x98>)
 800369e:	6813      	ldr	r3, [r2, #0]
 80036a0:	4610      	mov	r0, r2
 80036a2:	b933      	cbnz	r3, 80036b2 <_free_r+0x2e>
 80036a4:	6063      	str	r3, [r4, #4]
 80036a6:	6014      	str	r4, [r2, #0]
 80036a8:	4628      	mov	r0, r5
 80036aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80036ae:	f7ff bfe8 	b.w	8003682 <__malloc_unlock>
 80036b2:	42a3      	cmp	r3, r4
 80036b4:	d90c      	bls.n	80036d0 <_free_r+0x4c>
 80036b6:	6821      	ldr	r1, [r4, #0]
 80036b8:	1862      	adds	r2, r4, r1
 80036ba:	4293      	cmp	r3, r2
 80036bc:	bf04      	itt	eq
 80036be:	681a      	ldreq	r2, [r3, #0]
 80036c0:	685b      	ldreq	r3, [r3, #4]
 80036c2:	6063      	str	r3, [r4, #4]
 80036c4:	bf04      	itt	eq
 80036c6:	1852      	addeq	r2, r2, r1
 80036c8:	6022      	streq	r2, [r4, #0]
 80036ca:	6004      	str	r4, [r0, #0]
 80036cc:	e7ec      	b.n	80036a8 <_free_r+0x24>
 80036ce:	4613      	mov	r3, r2
 80036d0:	685a      	ldr	r2, [r3, #4]
 80036d2:	b10a      	cbz	r2, 80036d8 <_free_r+0x54>
 80036d4:	42a2      	cmp	r2, r4
 80036d6:	d9fa      	bls.n	80036ce <_free_r+0x4a>
 80036d8:	6819      	ldr	r1, [r3, #0]
 80036da:	1858      	adds	r0, r3, r1
 80036dc:	42a0      	cmp	r0, r4
 80036de:	d10b      	bne.n	80036f8 <_free_r+0x74>
 80036e0:	6820      	ldr	r0, [r4, #0]
 80036e2:	4401      	add	r1, r0
 80036e4:	1858      	adds	r0, r3, r1
 80036e6:	4282      	cmp	r2, r0
 80036e8:	6019      	str	r1, [r3, #0]
 80036ea:	d1dd      	bne.n	80036a8 <_free_r+0x24>
 80036ec:	6810      	ldr	r0, [r2, #0]
 80036ee:	6852      	ldr	r2, [r2, #4]
 80036f0:	605a      	str	r2, [r3, #4]
 80036f2:	4401      	add	r1, r0
 80036f4:	6019      	str	r1, [r3, #0]
 80036f6:	e7d7      	b.n	80036a8 <_free_r+0x24>
 80036f8:	d902      	bls.n	8003700 <_free_r+0x7c>
 80036fa:	230c      	movs	r3, #12
 80036fc:	602b      	str	r3, [r5, #0]
 80036fe:	e7d3      	b.n	80036a8 <_free_r+0x24>
 8003700:	6820      	ldr	r0, [r4, #0]
 8003702:	1821      	adds	r1, r4, r0
 8003704:	428a      	cmp	r2, r1
 8003706:	bf04      	itt	eq
 8003708:	6811      	ldreq	r1, [r2, #0]
 800370a:	6852      	ldreq	r2, [r2, #4]
 800370c:	6062      	str	r2, [r4, #4]
 800370e:	bf04      	itt	eq
 8003710:	1809      	addeq	r1, r1, r0
 8003712:	6021      	streq	r1, [r4, #0]
 8003714:	605c      	str	r4, [r3, #4]
 8003716:	e7c7      	b.n	80036a8 <_free_r+0x24>
 8003718:	bd38      	pop	{r3, r4, r5, pc}
 800371a:	bf00      	nop
 800371c:	20000094 	.word	0x20000094

08003720 <_read_r>:
 8003720:	b538      	push	{r3, r4, r5, lr}
 8003722:	4c07      	ldr	r4, [pc, #28]	; (8003740 <_read_r+0x20>)
 8003724:	4605      	mov	r5, r0
 8003726:	4608      	mov	r0, r1
 8003728:	4611      	mov	r1, r2
 800372a:	2200      	movs	r2, #0
 800372c:	6022      	str	r2, [r4, #0]
 800372e:	461a      	mov	r2, r3
 8003730:	f7fd fa68 	bl	8000c04 <_read>
 8003734:	1c43      	adds	r3, r0, #1
 8003736:	d102      	bne.n	800373e <_read_r+0x1e>
 8003738:	6823      	ldr	r3, [r4, #0]
 800373a:	b103      	cbz	r3, 800373e <_read_r+0x1e>
 800373c:	602b      	str	r3, [r5, #0]
 800373e:	bd38      	pop	{r3, r4, r5, pc}
 8003740:	20000108 	.word	0x20000108

08003744 <_fstat_r>:
 8003744:	b538      	push	{r3, r4, r5, lr}
 8003746:	4c07      	ldr	r4, [pc, #28]	; (8003764 <_fstat_r+0x20>)
 8003748:	2300      	movs	r3, #0
 800374a:	4605      	mov	r5, r0
 800374c:	4608      	mov	r0, r1
 800374e:	4611      	mov	r1, r2
 8003750:	6023      	str	r3, [r4, #0]
 8003752:	f7fd fa80 	bl	8000c56 <_fstat>
 8003756:	1c43      	adds	r3, r0, #1
 8003758:	d102      	bne.n	8003760 <_fstat_r+0x1c>
 800375a:	6823      	ldr	r3, [r4, #0]
 800375c:	b103      	cbz	r3, 8003760 <_fstat_r+0x1c>
 800375e:	602b      	str	r3, [r5, #0]
 8003760:	bd38      	pop	{r3, r4, r5, pc}
 8003762:	bf00      	nop
 8003764:	20000108 	.word	0x20000108

08003768 <_isatty_r>:
 8003768:	b538      	push	{r3, r4, r5, lr}
 800376a:	4c06      	ldr	r4, [pc, #24]	; (8003784 <_isatty_r+0x1c>)
 800376c:	2300      	movs	r3, #0
 800376e:	4605      	mov	r5, r0
 8003770:	4608      	mov	r0, r1
 8003772:	6023      	str	r3, [r4, #0]
 8003774:	f7fd fa7f 	bl	8000c76 <_isatty>
 8003778:	1c43      	adds	r3, r0, #1
 800377a:	d102      	bne.n	8003782 <_isatty_r+0x1a>
 800377c:	6823      	ldr	r3, [r4, #0]
 800377e:	b103      	cbz	r3, 8003782 <_isatty_r+0x1a>
 8003780:	602b      	str	r3, [r5, #0]
 8003782:	bd38      	pop	{r3, r4, r5, pc}
 8003784:	20000108 	.word	0x20000108

08003788 <_init>:
 8003788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800378a:	bf00      	nop
 800378c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800378e:	bc08      	pop	{r3}
 8003790:	469e      	mov	lr, r3
 8003792:	4770      	bx	lr

08003794 <_fini>:
 8003794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003796:	bf00      	nop
 8003798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800379a:	bc08      	pop	{r3}
 800379c:	469e      	mov	lr, r3
 800379e:	4770      	bx	lr
