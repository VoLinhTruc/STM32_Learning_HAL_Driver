
F407VE_SPI_Slave_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000323c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  080033cc  080033cc  000133cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800353c  0800353c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800353c  0800353c  0001353c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003544  08003544  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003544  08003544  00013544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003548  08003548  00013548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800354c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  20000074  080035c0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  080035c0  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e42  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001874  00000000  00000000  00028ee6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000788  00000000  00000000  0002a760  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006c0  00000000  00000000  0002aee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020de1  00000000  00000000  0002b5a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000068e4  00000000  00000000  0004c389  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c2477  00000000  00000000  00052c6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001150e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000248c  00000000  00000000  00115160  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080033b4 	.word	0x080033b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080033b4 	.word	0x080033b4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000578:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800057c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000580:	f003 0301 	and.w	r3, r3, #1
 8000584:	2b00      	cmp	r3, #0
 8000586:	d013      	beq.n	80005b0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000588:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800058c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000590:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000594:	2b00      	cmp	r3, #0
 8000596:	d00b      	beq.n	80005b0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000598:	e000      	b.n	800059c <ITM_SendChar+0x2c>
    {
      __NOP();
 800059a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800059c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d0f9      	beq.n	800059a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005a6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	b2d2      	uxtb	r2, r2
 80005ae:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005b0:	687b      	ldr	r3, [r7, #4]
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
	...

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f000 faa2 	bl	8000b0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f812 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005cc:	f000 f8a0 	bl	8000710 <MX_GPIO_Init>
  MX_SPI1_Init();
 80005d0:	f000 f86c 	bl	80006ac <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_SPI_Receive_IT(&hspi1, &spi_rev_data, 1);
 80005d4:	2201      	movs	r2, #1
 80005d6:	4904      	ldr	r1, [pc, #16]	; (80005e8 <main+0x28>)
 80005d8:	4804      	ldr	r0, [pc, #16]	; (80005ec <main+0x2c>)
 80005da:	f001 fa65 	bl	8001aa8 <HAL_SPI_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(1);
 80005de:	2001      	movs	r0, #1
 80005e0:	f000 fb06 	bl	8000bf0 <HAL_Delay>
 80005e4:	e7fb      	b.n	80005de <main+0x1e>
 80005e6:	bf00      	nop
 80005e8:	20000000 	.word	0x20000000
 80005ec:	2000009c 	.word	0x2000009c

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b094      	sub	sp, #80	; 0x50
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0320 	add.w	r3, r7, #32
 80005fa:	2230      	movs	r2, #48	; 0x30
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f001 ff88 	bl	8002514 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	4b22      	ldr	r3, [pc, #136]	; (80006a4 <SystemClock_Config+0xb4>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	4a21      	ldr	r2, [pc, #132]	; (80006a4 <SystemClock_Config+0xb4>)
 800061e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000622:	6413      	str	r3, [r2, #64]	; 0x40
 8000624:	4b1f      	ldr	r3, [pc, #124]	; (80006a4 <SystemClock_Config+0xb4>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000630:	2300      	movs	r3, #0
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	4b1c      	ldr	r3, [pc, #112]	; (80006a8 <SystemClock_Config+0xb8>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a1b      	ldr	r2, [pc, #108]	; (80006a8 <SystemClock_Config+0xb8>)
 800063a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	4b19      	ldr	r3, [pc, #100]	; (80006a8 <SystemClock_Config+0xb8>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800064c:	2302      	movs	r3, #2
 800064e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000650:	2301      	movs	r3, #1
 8000652:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000654:	2310      	movs	r3, #16
 8000656:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000658:	2300      	movs	r3, #0
 800065a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065c:	f107 0320 	add.w	r3, r7, #32
 8000660:	4618      	mov	r0, r3
 8000662:	f000 fdb5 	bl	80011d0 <HAL_RCC_OscConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800066c:	f000 f8d8 	bl	8000820 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000670:	230f      	movs	r3, #15
 8000672:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000674:	2300      	movs	r3, #0
 8000676:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f001 f810 	bl	80016b0 <HAL_RCC_ClockConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000696:	f000 f8c3 	bl	8000820 <Error_Handler>
  }
}
 800069a:	bf00      	nop
 800069c:	3750      	adds	r7, #80	; 0x50
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40007000 	.word	0x40007000

080006ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006b0:	4b15      	ldr	r3, [pc, #84]	; (8000708 <MX_SPI1_Init+0x5c>)
 80006b2:	4a16      	ldr	r2, [pc, #88]	; (800070c <MX_SPI1_Init+0x60>)
 80006b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80006b6:	4b14      	ldr	r3, [pc, #80]	; (8000708 <MX_SPI1_Init+0x5c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006bc:	4b12      	ldr	r3, [pc, #72]	; (8000708 <MX_SPI1_Init+0x5c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_SPI1_Init+0x5c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <MX_SPI1_Init+0x5c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_SPI1_Init+0x5c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_SPI1_Init+0x5c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006da:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <MX_SPI1_Init+0x5c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006e0:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_SPI1_Init+0x5c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <MX_SPI1_Init+0x5c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_SPI1_Init+0x5c>)
 80006ee:	220a      	movs	r2, #10
 80006f0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_SPI1_Init+0x5c>)
 80006f4:	f001 f974 	bl	80019e0 <HAL_SPI_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_SPI1_Init+0x56>
  {
    Error_Handler();
 80006fe:	f000 f88f 	bl	8000820 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	2000009c 	.word	0x2000009c
 800070c:	40013000 	.word	0x40013000

08000710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000710:	b480      	push	{r7}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	4b17      	ldr	r3, [pc, #92]	; (8000778 <MX_GPIO_Init+0x68>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a16      	ldr	r2, [pc, #88]	; (8000778 <MX_GPIO_Init+0x68>)
 8000720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b14      	ldr	r3, [pc, #80]	; (8000778 <MX_GPIO_Init+0x68>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	4b10      	ldr	r3, [pc, #64]	; (8000778 <MX_GPIO_Init+0x68>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a0f      	ldr	r2, [pc, #60]	; (8000778 <MX_GPIO_Init+0x68>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <MX_GPIO_Init+0x68>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	4b09      	ldr	r3, [pc, #36]	; (8000778 <MX_GPIO_Init+0x68>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a08      	ldr	r2, [pc, #32]	; (8000778 <MX_GPIO_Init+0x68>)
 8000758:	f043 0302 	orr.w	r3, r3, #2
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <MX_GPIO_Init+0x68>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0302 	and.w	r3, r3, #2
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]

}
 800076a:	bf00      	nop
 800076c:	3714      	adds	r7, #20
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	40023800 	.word	0x40023800

0800077c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	60b9      	str	r1, [r7, #8]
 8000786:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
 8000790:	e009      	b.n	80007a6 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8000792:	68bb      	ldr	r3, [r7, #8]
 8000794:	1c5a      	adds	r2, r3, #1
 8000796:	60ba      	str	r2, [r7, #8]
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff fee8 	bl	8000570 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	3301      	adds	r3, #1
 80007a4:	617b      	str	r3, [r7, #20]
 80007a6:	697a      	ldr	r2, [r7, #20]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	429a      	cmp	r2, r3
 80007ac:	dbf1      	blt.n	8000792 <_write+0x16>
  return len;
 80007ae:	687b      	ldr	r3, [r7, #4]
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3718      	adds	r7, #24
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
	printf("%d X	\r\n", spi_rev_data);
 80007c0:	4b07      	ldr	r3, [pc, #28]	; (80007e0 <HAL_SPI_RxCpltCallback+0x28>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	4619      	mov	r1, r3
 80007c6:	4807      	ldr	r0, [pc, #28]	; (80007e4 <HAL_SPI_RxCpltCallback+0x2c>)
 80007c8:	f001 feac 	bl	8002524 <iprintf>
	HAL_SPI_Receive_IT(hspi, &spi_rev_data, 1);
 80007cc:	2201      	movs	r2, #1
 80007ce:	4904      	ldr	r1, [pc, #16]	; (80007e0 <HAL_SPI_RxCpltCallback+0x28>)
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f001 f969 	bl	8001aa8 <HAL_SPI_Receive_IT>
}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000000 	.word	0x20000000
 80007e4:	080033cc 	.word	0x080033cc

080007e8 <HAL_SPI_TxRxCpltCallback>:
	printf("HAL_SPI_TxCpltCallback\r\n");
}


void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	printf("HAL_SPI_TxRxCpltCallback\r\n");
 80007f0:	4803      	ldr	r0, [pc, #12]	; (8000800 <HAL_SPI_TxRxCpltCallback+0x18>)
 80007f2:	f001 ff0b 	bl	800260c <puts>
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	080033ec 	.word	0x080033ec

08000804 <HAL_SPI_ErrorCallback>:
	printf("HAL_SPI_TxRxHalfCpltCallback\r\n");
}


void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	printf("HAL_SPI_ErrorCallback\r\n");
 800080c:	4803      	ldr	r0, [pc, #12]	; (800081c <HAL_SPI_ErrorCallback+0x18>)
 800080e:	f001 fefd 	bl	800260c <puts>
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	08003460 	.word	0x08003460

08000820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
	...

08000830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	4b10      	ldr	r3, [pc, #64]	; (800087c <HAL_MspInit+0x4c>)
 800083c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083e:	4a0f      	ldr	r2, [pc, #60]	; (800087c <HAL_MspInit+0x4c>)
 8000840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000844:	6453      	str	r3, [r2, #68]	; 0x44
 8000846:	4b0d      	ldr	r3, [pc, #52]	; (800087c <HAL_MspInit+0x4c>)
 8000848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	603b      	str	r3, [r7, #0]
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <HAL_MspInit+0x4c>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085a:	4a08      	ldr	r2, [pc, #32]	; (800087c <HAL_MspInit+0x4c>)
 800085c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000860:	6413      	str	r3, [r2, #64]	; 0x40
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <HAL_MspInit+0x4c>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086e:	bf00      	nop
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	40023800 	.word	0x40023800

08000880 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08a      	sub	sp, #40	; 0x28
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a1d      	ldr	r2, [pc, #116]	; (8000914 <HAL_SPI_MspInit+0x94>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d133      	bne.n	800090a <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	613b      	str	r3, [r7, #16]
 80008a6:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <HAL_SPI_MspInit+0x98>)
 80008a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008aa:	4a1b      	ldr	r2, [pc, #108]	; (8000918 <HAL_SPI_MspInit+0x98>)
 80008ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008b0:	6453      	str	r3, [r2, #68]	; 0x44
 80008b2:	4b19      	ldr	r3, [pc, #100]	; (8000918 <HAL_SPI_MspInit+0x98>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	4b15      	ldr	r3, [pc, #84]	; (8000918 <HAL_SPI_MspInit+0x98>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a14      	ldr	r2, [pc, #80]	; (8000918 <HAL_SPI_MspInit+0x98>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b12      	ldr	r3, [pc, #72]	; (8000918 <HAL_SPI_MspInit+0x98>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80008da:	23f0      	movs	r3, #240	; 0xf0
 80008dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	2302      	movs	r3, #2
 80008e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e6:	2303      	movs	r3, #3
 80008e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008ea:	2305      	movs	r3, #5
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	4619      	mov	r1, r3
 80008f4:	4809      	ldr	r0, [pc, #36]	; (800091c <HAL_SPI_MspInit+0x9c>)
 80008f6:	f000 fad1 	bl	8000e9c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2101      	movs	r1, #1
 80008fe:	2023      	movs	r0, #35	; 0x23
 8000900:	f000 fa73 	bl	8000dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000904:	2023      	movs	r0, #35	; 0x23
 8000906:	f000 fa8c 	bl	8000e22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800090a:	bf00      	nop
 800090c:	3728      	adds	r7, #40	; 0x28
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40013000 	.word	0x40013000
 8000918:	40023800 	.word	0x40023800
 800091c:	40020000 	.word	0x40020000

08000920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr

0800092e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000932:	e7fe      	b.n	8000932 <HardFault_Handler+0x4>

08000934 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <MemManage_Handler+0x4>

0800093a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800093e:	e7fe      	b.n	800093e <BusFault_Handler+0x4>

08000940 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000944:	e7fe      	b.n	8000944 <UsageFault_Handler+0x4>

08000946 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr

08000954 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr

08000962 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000974:	f000 f91c 	bl	8000bb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}

0800097c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000980:	4802      	ldr	r0, [pc, #8]	; (800098c <SPI1_IRQHandler+0x10>)
 8000982:	f001 f9bb 	bl	8001cfc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	2000009c 	.word	0x2000009c

08000990 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	af00      	add	r7, sp, #0
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	60b9      	str	r1, [r7, #8]
 800099a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800099c:	2300      	movs	r3, #0
 800099e:	617b      	str	r3, [r7, #20]
 80009a0:	e00a      	b.n	80009b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009a2:	f3af 8000 	nop.w
 80009a6:	4601      	mov	r1, r0
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	1c5a      	adds	r2, r3, #1
 80009ac:	60ba      	str	r2, [r7, #8]
 80009ae:	b2ca      	uxtb	r2, r1
 80009b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	3301      	adds	r3, #1
 80009b6:	617b      	str	r3, [r7, #20]
 80009b8:	697a      	ldr	r2, [r7, #20]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	429a      	cmp	r2, r3
 80009be:	dbf0      	blt.n	80009a2 <_read+0x12>
	}

return len;
 80009c0:	687b      	ldr	r3, [r7, #4]
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3718      	adds	r7, #24
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <_close>:
	}
	return len;
}

int _close(int file)
{
 80009ca:	b480      	push	{r7}
 80009cc:	b083      	sub	sp, #12
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
	return -1;
 80009d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr

080009e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009e2:	b480      	push	{r7}
 80009e4:	b083      	sub	sp, #12
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
 80009ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009f2:	605a      	str	r2, [r3, #4]
	return 0;
 80009f4:	2300      	movs	r3, #0
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <_isatty>:

int _isatty(int file)
{
 8000a02:	b480      	push	{r7}
 8000a04:	b083      	sub	sp, #12
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
	return 1;
 8000a0a:	2301      	movs	r3, #1
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	607a      	str	r2, [r7, #4]
	return 0;
 8000a24:	2300      	movs	r3, #0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3714      	adds	r7, #20
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
	...

08000a34 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000a3c:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <_sbrk+0x50>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d102      	bne.n	8000a4a <_sbrk+0x16>
		heap_end = &end;
 8000a44:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <_sbrk+0x50>)
 8000a46:	4a10      	ldr	r2, [pc, #64]	; (8000a88 <_sbrk+0x54>)
 8000a48:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <_sbrk+0x50>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <_sbrk+0x50>)
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4413      	add	r3, r2
 8000a58:	466a      	mov	r2, sp
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d907      	bls.n	8000a6e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000a5e:	f001 fd2f 	bl	80024c0 <__errno>
 8000a62:	4602      	mov	r2, r0
 8000a64:	230c      	movs	r3, #12
 8000a66:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000a68:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6c:	e006      	b.n	8000a7c <_sbrk+0x48>
	}

	heap_end += incr;
 8000a6e:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <_sbrk+0x50>)
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4413      	add	r3, r2
 8000a76:	4a03      	ldr	r2, [pc, #12]	; (8000a84 <_sbrk+0x50>)
 8000a78:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000090 	.word	0x20000090
 8000a88:	20000100 	.word	0x20000100

08000a8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <SystemInit+0x28>)
 8000a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a96:	4a07      	ldr	r2, [pc, #28]	; (8000ab4 <SystemInit+0x28>)
 8000a98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000aa0:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <SystemInit+0x28>)
 8000aa2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000aa6:	609a      	str	r2, [r3, #8]
#endif
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ab8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000af0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000abc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000abe:	e003      	b.n	8000ac8 <LoopCopyDataInit>

08000ac0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ac2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ac4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ac6:	3104      	adds	r1, #4

08000ac8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ac8:	480b      	ldr	r0, [pc, #44]	; (8000af8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000aca:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000acc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ace:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ad0:	d3f6      	bcc.n	8000ac0 <CopyDataInit>
  ldr  r2, =_sbss
 8000ad2:	4a0b      	ldr	r2, [pc, #44]	; (8000b00 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ad4:	e002      	b.n	8000adc <LoopFillZerobss>

08000ad6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ad6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ad8:	f842 3b04 	str.w	r3, [r2], #4

08000adc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ade:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ae0:	d3f9      	bcc.n	8000ad6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ae2:	f7ff ffd3 	bl	8000a8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ae6:	f001 fcf1 	bl	80024cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aea:	f7ff fd69 	bl	80005c0 <main>
  bx  lr    
 8000aee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000af0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000af4:	0800354c 	.word	0x0800354c
  ldr  r0, =_sdata
 8000af8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000afc:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000b00:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000b04:	200000fc 	.word	0x200000fc

08000b08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b08:	e7fe      	b.n	8000b08 <ADC_IRQHandler>
	...

08000b0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b10:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <HAL_Init+0x40>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a0d      	ldr	r2, [pc, #52]	; (8000b4c <HAL_Init+0x40>)
 8000b16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b1c:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <HAL_Init+0x40>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a0a      	ldr	r2, [pc, #40]	; (8000b4c <HAL_Init+0x40>)
 8000b22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b28:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <HAL_Init+0x40>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a07      	ldr	r2, [pc, #28]	; (8000b4c <HAL_Init+0x40>)
 8000b2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b34:	2003      	movs	r0, #3
 8000b36:	f000 f94d 	bl	8000dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f000 f808 	bl	8000b50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b40:	f7ff fe76 	bl	8000830 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b44:	2300      	movs	r3, #0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40023c00 	.word	0x40023c00

08000b50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <HAL_InitTick+0x54>)
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <HAL_InitTick+0x58>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	4619      	mov	r1, r3
 8000b62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 f965 	bl	8000e3e <HAL_SYSTICK_Config>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e00e      	b.n	8000b9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2b0f      	cmp	r3, #15
 8000b82:	d80a      	bhi.n	8000b9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b84:	2200      	movs	r2, #0
 8000b86:	6879      	ldr	r1, [r7, #4]
 8000b88:	f04f 30ff 	mov.w	r0, #4294967295
 8000b8c:	f000 f92d 	bl	8000dea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b90:	4a06      	ldr	r2, [pc, #24]	; (8000bac <HAL_InitTick+0x5c>)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b96:	2300      	movs	r3, #0
 8000b98:	e000      	b.n	8000b9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20000004 	.word	0x20000004
 8000ba8:	2000000c 	.word	0x2000000c
 8000bac:	20000008 	.word	0x20000008

08000bb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_IncTick+0x20>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <HAL_IncTick+0x24>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	4a04      	ldr	r2, [pc, #16]	; (8000bd4 <HAL_IncTick+0x24>)
 8000bc2:	6013      	str	r3, [r2, #0]
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	2000000c 	.word	0x2000000c
 8000bd4:	200000f4 	.word	0x200000f4

08000bd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  return uwTick;
 8000bdc:	4b03      	ldr	r3, [pc, #12]	; (8000bec <HAL_GetTick+0x14>)
 8000bde:	681b      	ldr	r3, [r3, #0]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	200000f4 	.word	0x200000f4

08000bf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bf8:	f7ff ffee 	bl	8000bd8 <HAL_GetTick>
 8000bfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c08:	d005      	beq.n	8000c16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c0a:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <HAL_Delay+0x40>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	461a      	mov	r2, r3
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	4413      	add	r3, r2
 8000c14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c16:	bf00      	nop
 8000c18:	f7ff ffde 	bl	8000bd8 <HAL_GetTick>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	68fa      	ldr	r2, [r7, #12]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d8f7      	bhi.n	8000c18 <HAL_Delay+0x28>
  {
  }
}
 8000c28:	bf00      	nop
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	2000000c 	.word	0x2000000c

08000c34 <__NVIC_SetPriorityGrouping>:
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <__NVIC_SetPriorityGrouping+0x44>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c4a:	68ba      	ldr	r2, [r7, #8]
 8000c4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c50:	4013      	ands	r3, r2
 8000c52:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c66:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <__NVIC_SetPriorityGrouping+0x44>)
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	60d3      	str	r3, [r2, #12]
}
 8000c6c:	bf00      	nop
 8000c6e:	3714      	adds	r7, #20
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_GetPriorityGrouping>:
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c80:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <__NVIC_GetPriorityGrouping+0x18>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	0a1b      	lsrs	r3, r3, #8
 8000c86:	f003 0307 	and.w	r3, r3, #7
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <__NVIC_EnableIRQ>:
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	db0b      	blt.n	8000cc2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	f003 021f 	and.w	r2, r3, #31
 8000cb0:	4907      	ldr	r1, [pc, #28]	; (8000cd0 <__NVIC_EnableIRQ+0x38>)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	095b      	lsrs	r3, r3, #5
 8000cb8:	2001      	movs	r0, #1
 8000cba:	fa00 f202 	lsl.w	r2, r0, r2
 8000cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000e100 	.word	0xe000e100

08000cd4 <__NVIC_SetPriority>:
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	6039      	str	r1, [r7, #0]
 8000cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	db0a      	blt.n	8000cfe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	490c      	ldr	r1, [pc, #48]	; (8000d20 <__NVIC_SetPriority+0x4c>)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	0112      	lsls	r2, r2, #4
 8000cf4:	b2d2      	uxtb	r2, r2
 8000cf6:	440b      	add	r3, r1
 8000cf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000cfc:	e00a      	b.n	8000d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	4908      	ldr	r1, [pc, #32]	; (8000d24 <__NVIC_SetPriority+0x50>)
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	f003 030f 	and.w	r3, r3, #15
 8000d0a:	3b04      	subs	r3, #4
 8000d0c:	0112      	lsls	r2, r2, #4
 8000d0e:	b2d2      	uxtb	r2, r2
 8000d10:	440b      	add	r3, r1
 8000d12:	761a      	strb	r2, [r3, #24]
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000e100 	.word	0xe000e100
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <NVIC_EncodePriority>:
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b089      	sub	sp, #36	; 0x24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	f1c3 0307 	rsb	r3, r3, #7
 8000d42:	2b04      	cmp	r3, #4
 8000d44:	bf28      	it	cs
 8000d46:	2304      	movcs	r3, #4
 8000d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	3304      	adds	r3, #4
 8000d4e:	2b06      	cmp	r3, #6
 8000d50:	d902      	bls.n	8000d58 <NVIC_EncodePriority+0x30>
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	3b03      	subs	r3, #3
 8000d56:	e000      	b.n	8000d5a <NVIC_EncodePriority+0x32>
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43da      	mvns	r2, r3
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	401a      	ands	r2, r3
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d70:	f04f 31ff 	mov.w	r1, #4294967295
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7a:	43d9      	mvns	r1, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d80:	4313      	orrs	r3, r2
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3724      	adds	r7, #36	; 0x24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
	...

08000d90 <SysTick_Config>:
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000da0:	d301      	bcc.n	8000da6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000da2:	2301      	movs	r3, #1
 8000da4:	e00f      	b.n	8000dc6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000da6:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <SysTick_Config+0x40>)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3b01      	subs	r3, #1
 8000dac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dae:	210f      	movs	r1, #15
 8000db0:	f04f 30ff 	mov.w	r0, #4294967295
 8000db4:	f7ff ff8e 	bl	8000cd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db8:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <SysTick_Config+0x40>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dbe:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <SysTick_Config+0x40>)
 8000dc0:	2207      	movs	r2, #7
 8000dc2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	e000e010 	.word	0xe000e010

08000dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff ff29 	bl	8000c34 <__NVIC_SetPriorityGrouping>
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b086      	sub	sp, #24
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	4603      	mov	r3, r0
 8000df2:	60b9      	str	r1, [r7, #8]
 8000df4:	607a      	str	r2, [r7, #4]
 8000df6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dfc:	f7ff ff3e 	bl	8000c7c <__NVIC_GetPriorityGrouping>
 8000e00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	68b9      	ldr	r1, [r7, #8]
 8000e06:	6978      	ldr	r0, [r7, #20]
 8000e08:	f7ff ff8e 	bl	8000d28 <NVIC_EncodePriority>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e12:	4611      	mov	r1, r2
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff ff5d 	bl	8000cd4 <__NVIC_SetPriority>
}
 8000e1a:	bf00      	nop
 8000e1c:	3718      	adds	r7, #24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	4603      	mov	r3, r0
 8000e2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff ff31 	bl	8000c98 <__NVIC_EnableIRQ>
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f7ff ffa2 	bl	8000d90 <SysTick_Config>
 8000e4c:	4603      	mov	r3, r0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b083      	sub	sp, #12
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d004      	beq.n	8000e74 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2280      	movs	r2, #128	; 0x80
 8000e6e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	e00c      	b.n	8000e8e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2205      	movs	r2, #5
 8000e78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f022 0201 	bic.w	r2, r2, #1
 8000e8a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
	...

08000e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b089      	sub	sp, #36	; 0x24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]
 8000eb6:	e16b      	b.n	8001190 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000eb8:	2201      	movs	r2, #1
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	697a      	ldr	r2, [r7, #20]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	f040 815a 	bne.w	800118a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d00b      	beq.n	8000ef6 <HAL_GPIO_Init+0x5a>
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d007      	beq.n	8000ef6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eea:	2b11      	cmp	r3, #17
 8000eec:	d003      	beq.n	8000ef6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	2b12      	cmp	r3, #18
 8000ef4:	d130      	bne.n	8000f58 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	2203      	movs	r2, #3
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43db      	mvns	r3, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	68da      	ldr	r2, [r3, #12]
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	091b      	lsrs	r3, r3, #4
 8000f42:	f003 0201 	and.w	r2, r3, #1
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	2203      	movs	r2, #3
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	689a      	ldr	r2, [r3, #8]
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d003      	beq.n	8000f98 <HAL_GPIO_Init+0xfc>
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	2b12      	cmp	r3, #18
 8000f96:	d123      	bne.n	8000fe0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	08da      	lsrs	r2, r3, #3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3208      	adds	r2, #8
 8000fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	f003 0307 	and.w	r3, r3, #7
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	220f      	movs	r2, #15
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	691a      	ldr	r2, [r3, #16]
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	08da      	lsrs	r2, r3, #3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	3208      	adds	r2, #8
 8000fda:	69b9      	ldr	r1, [r7, #24]
 8000fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	2203      	movs	r2, #3
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f003 0203 	and.w	r2, r3, #3
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4313      	orrs	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101c:	2b00      	cmp	r3, #0
 800101e:	f000 80b4 	beq.w	800118a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	4b5f      	ldr	r3, [pc, #380]	; (80011a4 <HAL_GPIO_Init+0x308>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102a:	4a5e      	ldr	r2, [pc, #376]	; (80011a4 <HAL_GPIO_Init+0x308>)
 800102c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001030:	6453      	str	r3, [r2, #68]	; 0x44
 8001032:	4b5c      	ldr	r3, [pc, #368]	; (80011a4 <HAL_GPIO_Init+0x308>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800103e:	4a5a      	ldr	r2, [pc, #360]	; (80011a8 <HAL_GPIO_Init+0x30c>)
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	089b      	lsrs	r3, r3, #2
 8001044:	3302      	adds	r3, #2
 8001046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800104a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	f003 0303 	and.w	r3, r3, #3
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	220f      	movs	r2, #15
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43db      	mvns	r3, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4013      	ands	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a51      	ldr	r2, [pc, #324]	; (80011ac <HAL_GPIO_Init+0x310>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d02b      	beq.n	80010c2 <HAL_GPIO_Init+0x226>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a50      	ldr	r2, [pc, #320]	; (80011b0 <HAL_GPIO_Init+0x314>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d025      	beq.n	80010be <HAL_GPIO_Init+0x222>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a4f      	ldr	r2, [pc, #316]	; (80011b4 <HAL_GPIO_Init+0x318>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d01f      	beq.n	80010ba <HAL_GPIO_Init+0x21e>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a4e      	ldr	r2, [pc, #312]	; (80011b8 <HAL_GPIO_Init+0x31c>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d019      	beq.n	80010b6 <HAL_GPIO_Init+0x21a>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a4d      	ldr	r2, [pc, #308]	; (80011bc <HAL_GPIO_Init+0x320>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d013      	beq.n	80010b2 <HAL_GPIO_Init+0x216>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a4c      	ldr	r2, [pc, #304]	; (80011c0 <HAL_GPIO_Init+0x324>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d00d      	beq.n	80010ae <HAL_GPIO_Init+0x212>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a4b      	ldr	r2, [pc, #300]	; (80011c4 <HAL_GPIO_Init+0x328>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d007      	beq.n	80010aa <HAL_GPIO_Init+0x20e>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a4a      	ldr	r2, [pc, #296]	; (80011c8 <HAL_GPIO_Init+0x32c>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d101      	bne.n	80010a6 <HAL_GPIO_Init+0x20a>
 80010a2:	2307      	movs	r3, #7
 80010a4:	e00e      	b.n	80010c4 <HAL_GPIO_Init+0x228>
 80010a6:	2308      	movs	r3, #8
 80010a8:	e00c      	b.n	80010c4 <HAL_GPIO_Init+0x228>
 80010aa:	2306      	movs	r3, #6
 80010ac:	e00a      	b.n	80010c4 <HAL_GPIO_Init+0x228>
 80010ae:	2305      	movs	r3, #5
 80010b0:	e008      	b.n	80010c4 <HAL_GPIO_Init+0x228>
 80010b2:	2304      	movs	r3, #4
 80010b4:	e006      	b.n	80010c4 <HAL_GPIO_Init+0x228>
 80010b6:	2303      	movs	r3, #3
 80010b8:	e004      	b.n	80010c4 <HAL_GPIO_Init+0x228>
 80010ba:	2302      	movs	r3, #2
 80010bc:	e002      	b.n	80010c4 <HAL_GPIO_Init+0x228>
 80010be:	2301      	movs	r3, #1
 80010c0:	e000      	b.n	80010c4 <HAL_GPIO_Init+0x228>
 80010c2:	2300      	movs	r3, #0
 80010c4:	69fa      	ldr	r2, [r7, #28]
 80010c6:	f002 0203 	and.w	r2, r2, #3
 80010ca:	0092      	lsls	r2, r2, #2
 80010cc:	4093      	lsls	r3, r2
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010d4:	4934      	ldr	r1, [pc, #208]	; (80011a8 <HAL_GPIO_Init+0x30c>)
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	089b      	lsrs	r3, r3, #2
 80010da:	3302      	adds	r3, #2
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010e2:	4b3a      	ldr	r3, [pc, #232]	; (80011cc <HAL_GPIO_Init+0x330>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	43db      	mvns	r3, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4013      	ands	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d003      	beq.n	8001106 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001106:	4a31      	ldr	r2, [pc, #196]	; (80011cc <HAL_GPIO_Init+0x330>)
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800110c:	4b2f      	ldr	r3, [pc, #188]	; (80011cc <HAL_GPIO_Init+0x330>)
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d003      	beq.n	8001130 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	4313      	orrs	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001130:	4a26      	ldr	r2, [pc, #152]	; (80011cc <HAL_GPIO_Init+0x330>)
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001136:	4b25      	ldr	r3, [pc, #148]	; (80011cc <HAL_GPIO_Init+0x330>)
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	43db      	mvns	r3, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4013      	ands	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800115a:	4a1c      	ldr	r2, [pc, #112]	; (80011cc <HAL_GPIO_Init+0x330>)
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001160:	4b1a      	ldr	r3, [pc, #104]	; (80011cc <HAL_GPIO_Init+0x330>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d003      	beq.n	8001184 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	4313      	orrs	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001184:	4a11      	ldr	r2, [pc, #68]	; (80011cc <HAL_GPIO_Init+0x330>)
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3301      	adds	r3, #1
 800118e:	61fb      	str	r3, [r7, #28]
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	2b0f      	cmp	r3, #15
 8001194:	f67f ae90 	bls.w	8000eb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001198:	bf00      	nop
 800119a:	3724      	adds	r7, #36	; 0x24
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40013800 	.word	0x40013800
 80011ac:	40020000 	.word	0x40020000
 80011b0:	40020400 	.word	0x40020400
 80011b4:	40020800 	.word	0x40020800
 80011b8:	40020c00 	.word	0x40020c00
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40021400 	.word	0x40021400
 80011c4:	40021800 	.word	0x40021800
 80011c8:	40021c00 	.word	0x40021c00
 80011cc:	40013c00 	.word	0x40013c00

080011d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d101      	bne.n	80011e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e25b      	b.n	800169a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d075      	beq.n	80012da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011ee:	4ba3      	ldr	r3, [pc, #652]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f003 030c 	and.w	r3, r3, #12
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	d00c      	beq.n	8001214 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011fa:	4ba0      	ldr	r3, [pc, #640]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001202:	2b08      	cmp	r3, #8
 8001204:	d112      	bne.n	800122c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001206:	4b9d      	ldr	r3, [pc, #628]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800120e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001212:	d10b      	bne.n	800122c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001214:	4b99      	ldr	r3, [pc, #612]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d05b      	beq.n	80012d8 <HAL_RCC_OscConfig+0x108>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d157      	bne.n	80012d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e236      	b.n	800169a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001234:	d106      	bne.n	8001244 <HAL_RCC_OscConfig+0x74>
 8001236:	4b91      	ldr	r3, [pc, #580]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a90      	ldr	r2, [pc, #576]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 800123c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001240:	6013      	str	r3, [r2, #0]
 8001242:	e01d      	b.n	8001280 <HAL_RCC_OscConfig+0xb0>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800124c:	d10c      	bne.n	8001268 <HAL_RCC_OscConfig+0x98>
 800124e:	4b8b      	ldr	r3, [pc, #556]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a8a      	ldr	r2, [pc, #552]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 8001254:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	4b88      	ldr	r3, [pc, #544]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a87      	ldr	r2, [pc, #540]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 8001260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001264:	6013      	str	r3, [r2, #0]
 8001266:	e00b      	b.n	8001280 <HAL_RCC_OscConfig+0xb0>
 8001268:	4b84      	ldr	r3, [pc, #528]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a83      	ldr	r2, [pc, #524]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 800126e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001272:	6013      	str	r3, [r2, #0]
 8001274:	4b81      	ldr	r3, [pc, #516]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a80      	ldr	r2, [pc, #512]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 800127a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800127e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d013      	beq.n	80012b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001288:	f7ff fca6 	bl	8000bd8 <HAL_GetTick>
 800128c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800128e:	e008      	b.n	80012a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001290:	f7ff fca2 	bl	8000bd8 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b64      	cmp	r3, #100	; 0x64
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e1fb      	b.n	800169a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012a2:	4b76      	ldr	r3, [pc, #472]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d0f0      	beq.n	8001290 <HAL_RCC_OscConfig+0xc0>
 80012ae:	e014      	b.n	80012da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b0:	f7ff fc92 	bl	8000bd8 <HAL_GetTick>
 80012b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012b6:	e008      	b.n	80012ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012b8:	f7ff fc8e 	bl	8000bd8 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b64      	cmp	r3, #100	; 0x64
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e1e7      	b.n	800169a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ca:	4b6c      	ldr	r3, [pc, #432]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1f0      	bne.n	80012b8 <HAL_RCC_OscConfig+0xe8>
 80012d6:	e000      	b.n	80012da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d063      	beq.n	80013ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012e6:	4b65      	ldr	r3, [pc, #404]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f003 030c 	and.w	r3, r3, #12
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d00b      	beq.n	800130a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012f2:	4b62      	ldr	r3, [pc, #392]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012fa:	2b08      	cmp	r3, #8
 80012fc:	d11c      	bne.n	8001338 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012fe:	4b5f      	ldr	r3, [pc, #380]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d116      	bne.n	8001338 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800130a:	4b5c      	ldr	r3, [pc, #368]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d005      	beq.n	8001322 <HAL_RCC_OscConfig+0x152>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d001      	beq.n	8001322 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e1bb      	b.n	800169a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001322:	4b56      	ldr	r3, [pc, #344]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	4952      	ldr	r1, [pc, #328]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 8001332:	4313      	orrs	r3, r2
 8001334:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001336:	e03a      	b.n	80013ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d020      	beq.n	8001382 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001340:	4b4f      	ldr	r3, [pc, #316]	; (8001480 <HAL_RCC_OscConfig+0x2b0>)
 8001342:	2201      	movs	r2, #1
 8001344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001346:	f7ff fc47 	bl	8000bd8 <HAL_GetTick>
 800134a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800134c:	e008      	b.n	8001360 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800134e:	f7ff fc43 	bl	8000bd8 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e19c      	b.n	800169a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001360:	4b46      	ldr	r3, [pc, #280]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	2b00      	cmp	r3, #0
 800136a:	d0f0      	beq.n	800134e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800136c:	4b43      	ldr	r3, [pc, #268]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	691b      	ldr	r3, [r3, #16]
 8001378:	00db      	lsls	r3, r3, #3
 800137a:	4940      	ldr	r1, [pc, #256]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 800137c:	4313      	orrs	r3, r2
 800137e:	600b      	str	r3, [r1, #0]
 8001380:	e015      	b.n	80013ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001382:	4b3f      	ldr	r3, [pc, #252]	; (8001480 <HAL_RCC_OscConfig+0x2b0>)
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001388:	f7ff fc26 	bl	8000bd8 <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001390:	f7ff fc22 	bl	8000bd8 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e17b      	b.n	800169a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013a2:	4b36      	ldr	r3, [pc, #216]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1f0      	bne.n	8001390 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0308 	and.w	r3, r3, #8
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d030      	beq.n	800141c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d016      	beq.n	80013f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013c2:	4b30      	ldr	r3, [pc, #192]	; (8001484 <HAL_RCC_OscConfig+0x2b4>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013c8:	f7ff fc06 	bl	8000bd8 <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013d0:	f7ff fc02 	bl	8000bd8 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e15b      	b.n	800169a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013e2:	4b26      	ldr	r3, [pc, #152]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 80013e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d0f0      	beq.n	80013d0 <HAL_RCC_OscConfig+0x200>
 80013ee:	e015      	b.n	800141c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013f0:	4b24      	ldr	r3, [pc, #144]	; (8001484 <HAL_RCC_OscConfig+0x2b4>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f6:	f7ff fbef 	bl	8000bd8 <HAL_GetTick>
 80013fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013fc:	e008      	b.n	8001410 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013fe:	f7ff fbeb 	bl	8000bd8 <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e144      	b.n	800169a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001410:	4b1a      	ldr	r3, [pc, #104]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 8001412:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1f0      	bne.n	80013fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	2b00      	cmp	r3, #0
 8001426:	f000 80a0 	beq.w	800156a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800142a:	2300      	movs	r3, #0
 800142c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800142e:	4b13      	ldr	r3, [pc, #76]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d10f      	bne.n	800145a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	60bb      	str	r3, [r7, #8]
 800143e:	4b0f      	ldr	r3, [pc, #60]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	4a0e      	ldr	r2, [pc, #56]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 8001444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001448:	6413      	str	r3, [r2, #64]	; 0x40
 800144a:	4b0c      	ldr	r3, [pc, #48]	; (800147c <HAL_RCC_OscConfig+0x2ac>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001452:	60bb      	str	r3, [r7, #8]
 8001454:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001456:	2301      	movs	r3, #1
 8001458:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800145a:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <HAL_RCC_OscConfig+0x2b8>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001462:	2b00      	cmp	r3, #0
 8001464:	d121      	bne.n	80014aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001466:	4b08      	ldr	r3, [pc, #32]	; (8001488 <HAL_RCC_OscConfig+0x2b8>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a07      	ldr	r2, [pc, #28]	; (8001488 <HAL_RCC_OscConfig+0x2b8>)
 800146c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001470:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001472:	f7ff fbb1 	bl	8000bd8 <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001478:	e011      	b.n	800149e <HAL_RCC_OscConfig+0x2ce>
 800147a:	bf00      	nop
 800147c:	40023800 	.word	0x40023800
 8001480:	42470000 	.word	0x42470000
 8001484:	42470e80 	.word	0x42470e80
 8001488:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800148c:	f7ff fba4 	bl	8000bd8 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b02      	cmp	r3, #2
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e0fd      	b.n	800169a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800149e:	4b81      	ldr	r3, [pc, #516]	; (80016a4 <HAL_RCC_OscConfig+0x4d4>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d0f0      	beq.n	800148c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d106      	bne.n	80014c0 <HAL_RCC_OscConfig+0x2f0>
 80014b2:	4b7d      	ldr	r3, [pc, #500]	; (80016a8 <HAL_RCC_OscConfig+0x4d8>)
 80014b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b6:	4a7c      	ldr	r2, [pc, #496]	; (80016a8 <HAL_RCC_OscConfig+0x4d8>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	6713      	str	r3, [r2, #112]	; 0x70
 80014be:	e01c      	b.n	80014fa <HAL_RCC_OscConfig+0x32a>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	2b05      	cmp	r3, #5
 80014c6:	d10c      	bne.n	80014e2 <HAL_RCC_OscConfig+0x312>
 80014c8:	4b77      	ldr	r3, [pc, #476]	; (80016a8 <HAL_RCC_OscConfig+0x4d8>)
 80014ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014cc:	4a76      	ldr	r2, [pc, #472]	; (80016a8 <HAL_RCC_OscConfig+0x4d8>)
 80014ce:	f043 0304 	orr.w	r3, r3, #4
 80014d2:	6713      	str	r3, [r2, #112]	; 0x70
 80014d4:	4b74      	ldr	r3, [pc, #464]	; (80016a8 <HAL_RCC_OscConfig+0x4d8>)
 80014d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d8:	4a73      	ldr	r2, [pc, #460]	; (80016a8 <HAL_RCC_OscConfig+0x4d8>)
 80014da:	f043 0301 	orr.w	r3, r3, #1
 80014de:	6713      	str	r3, [r2, #112]	; 0x70
 80014e0:	e00b      	b.n	80014fa <HAL_RCC_OscConfig+0x32a>
 80014e2:	4b71      	ldr	r3, [pc, #452]	; (80016a8 <HAL_RCC_OscConfig+0x4d8>)
 80014e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e6:	4a70      	ldr	r2, [pc, #448]	; (80016a8 <HAL_RCC_OscConfig+0x4d8>)
 80014e8:	f023 0301 	bic.w	r3, r3, #1
 80014ec:	6713      	str	r3, [r2, #112]	; 0x70
 80014ee:	4b6e      	ldr	r3, [pc, #440]	; (80016a8 <HAL_RCC_OscConfig+0x4d8>)
 80014f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f2:	4a6d      	ldr	r2, [pc, #436]	; (80016a8 <HAL_RCC_OscConfig+0x4d8>)
 80014f4:	f023 0304 	bic.w	r3, r3, #4
 80014f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d015      	beq.n	800152e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001502:	f7ff fb69 	bl	8000bd8 <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001508:	e00a      	b.n	8001520 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800150a:	f7ff fb65 	bl	8000bd8 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	f241 3288 	movw	r2, #5000	; 0x1388
 8001518:	4293      	cmp	r3, r2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e0bc      	b.n	800169a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001520:	4b61      	ldr	r3, [pc, #388]	; (80016a8 <HAL_RCC_OscConfig+0x4d8>)
 8001522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d0ee      	beq.n	800150a <HAL_RCC_OscConfig+0x33a>
 800152c:	e014      	b.n	8001558 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800152e:	f7ff fb53 	bl	8000bd8 <HAL_GetTick>
 8001532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001534:	e00a      	b.n	800154c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001536:	f7ff fb4f 	bl	8000bd8 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	f241 3288 	movw	r2, #5000	; 0x1388
 8001544:	4293      	cmp	r3, r2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e0a6      	b.n	800169a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800154c:	4b56      	ldr	r3, [pc, #344]	; (80016a8 <HAL_RCC_OscConfig+0x4d8>)
 800154e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1ee      	bne.n	8001536 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001558:	7dfb      	ldrb	r3, [r7, #23]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d105      	bne.n	800156a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800155e:	4b52      	ldr	r3, [pc, #328]	; (80016a8 <HAL_RCC_OscConfig+0x4d8>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	4a51      	ldr	r2, [pc, #324]	; (80016a8 <HAL_RCC_OscConfig+0x4d8>)
 8001564:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001568:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	2b00      	cmp	r3, #0
 8001570:	f000 8092 	beq.w	8001698 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001574:	4b4c      	ldr	r3, [pc, #304]	; (80016a8 <HAL_RCC_OscConfig+0x4d8>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f003 030c 	and.w	r3, r3, #12
 800157c:	2b08      	cmp	r3, #8
 800157e:	d05c      	beq.n	800163a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	2b02      	cmp	r3, #2
 8001586:	d141      	bne.n	800160c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001588:	4b48      	ldr	r3, [pc, #288]	; (80016ac <HAL_RCC_OscConfig+0x4dc>)
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158e:	f7ff fb23 	bl	8000bd8 <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001596:	f7ff fb1f 	bl	8000bd8 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e078      	b.n	800169a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015a8:	4b3f      	ldr	r3, [pc, #252]	; (80016a8 <HAL_RCC_OscConfig+0x4d8>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d1f0      	bne.n	8001596 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	69da      	ldr	r2, [r3, #28]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a1b      	ldr	r3, [r3, #32]
 80015bc:	431a      	orrs	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c2:	019b      	lsls	r3, r3, #6
 80015c4:	431a      	orrs	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ca:	085b      	lsrs	r3, r3, #1
 80015cc:	3b01      	subs	r3, #1
 80015ce:	041b      	lsls	r3, r3, #16
 80015d0:	431a      	orrs	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d6:	061b      	lsls	r3, r3, #24
 80015d8:	4933      	ldr	r1, [pc, #204]	; (80016a8 <HAL_RCC_OscConfig+0x4d8>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015de:	4b33      	ldr	r3, [pc, #204]	; (80016ac <HAL_RCC_OscConfig+0x4dc>)
 80015e0:	2201      	movs	r2, #1
 80015e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e4:	f7ff faf8 	bl	8000bd8 <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ec:	f7ff faf4 	bl	8000bd8 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e04d      	b.n	800169a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015fe:	4b2a      	ldr	r3, [pc, #168]	; (80016a8 <HAL_RCC_OscConfig+0x4d8>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0f0      	beq.n	80015ec <HAL_RCC_OscConfig+0x41c>
 800160a:	e045      	b.n	8001698 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800160c:	4b27      	ldr	r3, [pc, #156]	; (80016ac <HAL_RCC_OscConfig+0x4dc>)
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001612:	f7ff fae1 	bl	8000bd8 <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800161a:	f7ff fadd 	bl	8000bd8 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e036      	b.n	800169a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800162c:	4b1e      	ldr	r3, [pc, #120]	; (80016a8 <HAL_RCC_OscConfig+0x4d8>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1f0      	bne.n	800161a <HAL_RCC_OscConfig+0x44a>
 8001638:	e02e      	b.n	8001698 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d101      	bne.n	8001646 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e029      	b.n	800169a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001646:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <HAL_RCC_OscConfig+0x4d8>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	429a      	cmp	r2, r3
 8001658:	d11c      	bne.n	8001694 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001664:	429a      	cmp	r2, r3
 8001666:	d115      	bne.n	8001694 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001668:	68fa      	ldr	r2, [r7, #12]
 800166a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800166e:	4013      	ands	r3, r2
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001674:	4293      	cmp	r3, r2
 8001676:	d10d      	bne.n	8001694 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001682:	429a      	cmp	r2, r3
 8001684:	d106      	bne.n	8001694 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001690:	429a      	cmp	r2, r3
 8001692:	d001      	beq.n	8001698 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e000      	b.n	800169a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3718      	adds	r7, #24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40007000 	.word	0x40007000
 80016a8:	40023800 	.word	0x40023800
 80016ac:	42470060 	.word	0x42470060

080016b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d101      	bne.n	80016c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e0cc      	b.n	800185e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016c4:	4b68      	ldr	r3, [pc, #416]	; (8001868 <HAL_RCC_ClockConfig+0x1b8>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 030f 	and.w	r3, r3, #15
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d90c      	bls.n	80016ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016d2:	4b65      	ldr	r3, [pc, #404]	; (8001868 <HAL_RCC_ClockConfig+0x1b8>)
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016da:	4b63      	ldr	r3, [pc, #396]	; (8001868 <HAL_RCC_ClockConfig+0x1b8>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 030f 	and.w	r3, r3, #15
 80016e2:	683a      	ldr	r2, [r7, #0]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d001      	beq.n	80016ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e0b8      	b.n	800185e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d020      	beq.n	800173a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	2b00      	cmp	r3, #0
 8001702:	d005      	beq.n	8001710 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001704:	4b59      	ldr	r3, [pc, #356]	; (800186c <HAL_RCC_ClockConfig+0x1bc>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	4a58      	ldr	r2, [pc, #352]	; (800186c <HAL_RCC_ClockConfig+0x1bc>)
 800170a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800170e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0308 	and.w	r3, r3, #8
 8001718:	2b00      	cmp	r3, #0
 800171a:	d005      	beq.n	8001728 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800171c:	4b53      	ldr	r3, [pc, #332]	; (800186c <HAL_RCC_ClockConfig+0x1bc>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	4a52      	ldr	r2, [pc, #328]	; (800186c <HAL_RCC_ClockConfig+0x1bc>)
 8001722:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001726:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001728:	4b50      	ldr	r3, [pc, #320]	; (800186c <HAL_RCC_ClockConfig+0x1bc>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	494d      	ldr	r1, [pc, #308]	; (800186c <HAL_RCC_ClockConfig+0x1bc>)
 8001736:	4313      	orrs	r3, r2
 8001738:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	2b00      	cmp	r3, #0
 8001744:	d044      	beq.n	80017d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d107      	bne.n	800175e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800174e:	4b47      	ldr	r3, [pc, #284]	; (800186c <HAL_RCC_ClockConfig+0x1bc>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d119      	bne.n	800178e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e07f      	b.n	800185e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2b02      	cmp	r3, #2
 8001764:	d003      	beq.n	800176e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800176a:	2b03      	cmp	r3, #3
 800176c:	d107      	bne.n	800177e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800176e:	4b3f      	ldr	r3, [pc, #252]	; (800186c <HAL_RCC_ClockConfig+0x1bc>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d109      	bne.n	800178e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e06f      	b.n	800185e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800177e:	4b3b      	ldr	r3, [pc, #236]	; (800186c <HAL_RCC_ClockConfig+0x1bc>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e067      	b.n	800185e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800178e:	4b37      	ldr	r3, [pc, #220]	; (800186c <HAL_RCC_ClockConfig+0x1bc>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f023 0203 	bic.w	r2, r3, #3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	4934      	ldr	r1, [pc, #208]	; (800186c <HAL_RCC_ClockConfig+0x1bc>)
 800179c:	4313      	orrs	r3, r2
 800179e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017a0:	f7ff fa1a 	bl	8000bd8 <HAL_GetTick>
 80017a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017a6:	e00a      	b.n	80017be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017a8:	f7ff fa16 	bl	8000bd8 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e04f      	b.n	800185e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017be:	4b2b      	ldr	r3, [pc, #172]	; (800186c <HAL_RCC_ClockConfig+0x1bc>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f003 020c 	and.w	r2, r3, #12
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d1eb      	bne.n	80017a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017d0:	4b25      	ldr	r3, [pc, #148]	; (8001868 <HAL_RCC_ClockConfig+0x1b8>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 030f 	and.w	r3, r3, #15
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d20c      	bcs.n	80017f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017de:	4b22      	ldr	r3, [pc, #136]	; (8001868 <HAL_RCC_ClockConfig+0x1b8>)
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	b2d2      	uxtb	r2, r2
 80017e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e6:	4b20      	ldr	r3, [pc, #128]	; (8001868 <HAL_RCC_ClockConfig+0x1b8>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 030f 	and.w	r3, r3, #15
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d001      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e032      	b.n	800185e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	2b00      	cmp	r3, #0
 8001802:	d008      	beq.n	8001816 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001804:	4b19      	ldr	r3, [pc, #100]	; (800186c <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	4916      	ldr	r1, [pc, #88]	; (800186c <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	4313      	orrs	r3, r2
 8001814:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0308 	and.w	r3, r3, #8
 800181e:	2b00      	cmp	r3, #0
 8001820:	d009      	beq.n	8001836 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001822:	4b12      	ldr	r3, [pc, #72]	; (800186c <HAL_RCC_ClockConfig+0x1bc>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	490e      	ldr	r1, [pc, #56]	; (800186c <HAL_RCC_ClockConfig+0x1bc>)
 8001832:	4313      	orrs	r3, r2
 8001834:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001836:	f000 f821 	bl	800187c <HAL_RCC_GetSysClockFreq>
 800183a:	4601      	mov	r1, r0
 800183c:	4b0b      	ldr	r3, [pc, #44]	; (800186c <HAL_RCC_ClockConfig+0x1bc>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	091b      	lsrs	r3, r3, #4
 8001842:	f003 030f 	and.w	r3, r3, #15
 8001846:	4a0a      	ldr	r2, [pc, #40]	; (8001870 <HAL_RCC_ClockConfig+0x1c0>)
 8001848:	5cd3      	ldrb	r3, [r2, r3]
 800184a:	fa21 f303 	lsr.w	r3, r1, r3
 800184e:	4a09      	ldr	r2, [pc, #36]	; (8001874 <HAL_RCC_ClockConfig+0x1c4>)
 8001850:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001852:	4b09      	ldr	r3, [pc, #36]	; (8001878 <HAL_RCC_ClockConfig+0x1c8>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff f97a 	bl	8000b50 <HAL_InitTick>

  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40023c00 	.word	0x40023c00
 800186c:	40023800 	.word	0x40023800
 8001870:	08003494 	.word	0x08003494
 8001874:	20000004 	.word	0x20000004
 8001878:	20000008 	.word	0x20000008

0800187c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800187c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001882:	2300      	movs	r3, #0
 8001884:	607b      	str	r3, [r7, #4]
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	2300      	movs	r3, #0
 800188c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800188e:	2300      	movs	r3, #0
 8001890:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001892:	4b50      	ldr	r3, [pc, #320]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f003 030c 	and.w	r3, r3, #12
 800189a:	2b04      	cmp	r3, #4
 800189c:	d007      	beq.n	80018ae <HAL_RCC_GetSysClockFreq+0x32>
 800189e:	2b08      	cmp	r3, #8
 80018a0:	d008      	beq.n	80018b4 <HAL_RCC_GetSysClockFreq+0x38>
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f040 808d 	bne.w	80019c2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018a8:	4b4b      	ldr	r3, [pc, #300]	; (80019d8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80018aa:	60bb      	str	r3, [r7, #8]
       break;
 80018ac:	e08c      	b.n	80019c8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018ae:	4b4b      	ldr	r3, [pc, #300]	; (80019dc <HAL_RCC_GetSysClockFreq+0x160>)
 80018b0:	60bb      	str	r3, [r7, #8]
      break;
 80018b2:	e089      	b.n	80019c8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018b4:	4b47      	ldr	r3, [pc, #284]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x158>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018bc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018be:	4b45      	ldr	r3, [pc, #276]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x158>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d023      	beq.n	8001912 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ca:	4b42      	ldr	r3, [pc, #264]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x158>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	099b      	lsrs	r3, r3, #6
 80018d0:	f04f 0400 	mov.w	r4, #0
 80018d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018d8:	f04f 0200 	mov.w	r2, #0
 80018dc:	ea03 0501 	and.w	r5, r3, r1
 80018e0:	ea04 0602 	and.w	r6, r4, r2
 80018e4:	4a3d      	ldr	r2, [pc, #244]	; (80019dc <HAL_RCC_GetSysClockFreq+0x160>)
 80018e6:	fb02 f106 	mul.w	r1, r2, r6
 80018ea:	2200      	movs	r2, #0
 80018ec:	fb02 f205 	mul.w	r2, r2, r5
 80018f0:	440a      	add	r2, r1
 80018f2:	493a      	ldr	r1, [pc, #232]	; (80019dc <HAL_RCC_GetSysClockFreq+0x160>)
 80018f4:	fba5 0101 	umull	r0, r1, r5, r1
 80018f8:	1853      	adds	r3, r2, r1
 80018fa:	4619      	mov	r1, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f04f 0400 	mov.w	r4, #0
 8001902:	461a      	mov	r2, r3
 8001904:	4623      	mov	r3, r4
 8001906:	f7fe fcb3 	bl	8000270 <__aeabi_uldivmod>
 800190a:	4603      	mov	r3, r0
 800190c:	460c      	mov	r4, r1
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	e049      	b.n	80019a6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001912:	4b30      	ldr	r3, [pc, #192]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	099b      	lsrs	r3, r3, #6
 8001918:	f04f 0400 	mov.w	r4, #0
 800191c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001920:	f04f 0200 	mov.w	r2, #0
 8001924:	ea03 0501 	and.w	r5, r3, r1
 8001928:	ea04 0602 	and.w	r6, r4, r2
 800192c:	4629      	mov	r1, r5
 800192e:	4632      	mov	r2, r6
 8001930:	f04f 0300 	mov.w	r3, #0
 8001934:	f04f 0400 	mov.w	r4, #0
 8001938:	0154      	lsls	r4, r2, #5
 800193a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800193e:	014b      	lsls	r3, r1, #5
 8001940:	4619      	mov	r1, r3
 8001942:	4622      	mov	r2, r4
 8001944:	1b49      	subs	r1, r1, r5
 8001946:	eb62 0206 	sbc.w	r2, r2, r6
 800194a:	f04f 0300 	mov.w	r3, #0
 800194e:	f04f 0400 	mov.w	r4, #0
 8001952:	0194      	lsls	r4, r2, #6
 8001954:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001958:	018b      	lsls	r3, r1, #6
 800195a:	1a5b      	subs	r3, r3, r1
 800195c:	eb64 0402 	sbc.w	r4, r4, r2
 8001960:	f04f 0100 	mov.w	r1, #0
 8001964:	f04f 0200 	mov.w	r2, #0
 8001968:	00e2      	lsls	r2, r4, #3
 800196a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800196e:	00d9      	lsls	r1, r3, #3
 8001970:	460b      	mov	r3, r1
 8001972:	4614      	mov	r4, r2
 8001974:	195b      	adds	r3, r3, r5
 8001976:	eb44 0406 	adc.w	r4, r4, r6
 800197a:	f04f 0100 	mov.w	r1, #0
 800197e:	f04f 0200 	mov.w	r2, #0
 8001982:	02a2      	lsls	r2, r4, #10
 8001984:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001988:	0299      	lsls	r1, r3, #10
 800198a:	460b      	mov	r3, r1
 800198c:	4614      	mov	r4, r2
 800198e:	4618      	mov	r0, r3
 8001990:	4621      	mov	r1, r4
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f04f 0400 	mov.w	r4, #0
 8001998:	461a      	mov	r2, r3
 800199a:	4623      	mov	r3, r4
 800199c:	f7fe fc68 	bl	8000270 <__aeabi_uldivmod>
 80019a0:	4603      	mov	r3, r0
 80019a2:	460c      	mov	r4, r1
 80019a4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019a6:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x158>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	0c1b      	lsrs	r3, r3, #16
 80019ac:	f003 0303 	and.w	r3, r3, #3
 80019b0:	3301      	adds	r3, #1
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80019be:	60bb      	str	r3, [r7, #8]
      break;
 80019c0:	e002      	b.n	80019c8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019c2:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80019c4:	60bb      	str	r3, [r7, #8]
      break;
 80019c6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019c8:	68bb      	ldr	r3, [r7, #8]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40023800 	.word	0x40023800
 80019d8:	00f42400 	.word	0x00f42400
 80019dc:	017d7840 	.word	0x017d7840

080019e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e056      	b.n	8001aa0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d106      	bne.n	8001a12 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7fe ff37 	bl	8000880 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2202      	movs	r2, #2
 8001a16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a28:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	431a      	orrs	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	695b      	ldr	r3, [r3, #20]
 8001a44:	431a      	orrs	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	69db      	ldr	r3, [r3, #28]
 8001a54:	431a      	orrs	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a1b      	ldr	r3, [r3, #32]
 8001a5a:	ea42 0103 	orr.w	r1, r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	430a      	orrs	r2, r1
 8001a68:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	0c1b      	lsrs	r3, r3, #16
 8001a70:	f003 0104 	and.w	r1, r3, #4
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	69da      	ldr	r2, [r3, #28]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a8e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d110      	bne.n	8001ae4 <HAL_SPI_Receive_IT+0x3c>
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001aca:	d10b      	bne.n	8001ae4 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2204      	movs	r2, #4
 8001ad0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	68b9      	ldr	r1, [r7, #8]
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	f000 f87a 	bl	8001bd4 <HAL_SPI_TransmitReceive_IT>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	e06e      	b.n	8001bc2 <HAL_SPI_Receive_IT+0x11a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d101      	bne.n	8001af2 <HAL_SPI_Receive_IT+0x4a>
 8001aee:	2302      	movs	r3, #2
 8001af0:	e067      	b.n	8001bc2 <HAL_SPI_Receive_IT+0x11a>
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2201      	movs	r2, #1
 8001af6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d002      	beq.n	8001b0c <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8001b06:	2302      	movs	r3, #2
 8001b08:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001b0a:	e055      	b.n	8001bb8 <HAL_SPI_Receive_IT+0x110>
  }

  if ((pData == NULL) || (Size == 0U))
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d002      	beq.n	8001b18 <HAL_SPI_Receive_IT+0x70>
 8001b12:	88fb      	ldrh	r3, [r7, #6]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d102      	bne.n	8001b1e <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001b1c:	e04c      	b.n	8001bb8 <HAL_SPI_Receive_IT+0x110>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2204      	movs	r2, #4
 8001b22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	68ba      	ldr	r2, [r7, #8]
 8001b30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	88fa      	ldrh	r2, [r7, #6]
 8001b36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	88fa      	ldrh	r2, [r7, #6]
 8001b3c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2200      	movs	r2, #0
 8001b42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2200      	movs	r2, #0
 8001b48:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2200      	movs	r2, #0
 8001b54:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d003      	beq.n	8001b66 <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	4a1a      	ldr	r2, [pc, #104]	; (8001bcc <HAL_SPI_Receive_IT+0x124>)
 8001b62:	641a      	str	r2, [r3, #64]	; 0x40
 8001b64:	e002      	b.n	8001b6c <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	4a19      	ldr	r2, [pc, #100]	; (8001bd0 <HAL_SPI_Receive_IT+0x128>)
 8001b6a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b74:	d107      	bne.n	8001b86 <HAL_SPI_Receive_IT+0xde>
  {
    SPI_1LINE_RX(hspi);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001b84:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001b94:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ba0:	2b40      	cmp	r3, #64	; 0x40
 8001ba2:	d008      	beq.n	8001bb6 <HAL_SPI_Receive_IT+0x10e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	e000      	b.n	8001bb8 <HAL_SPI_Receive_IT+0x110>
  }

error :
 8001bb6:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001bc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	080020f1 	.word	0x080020f1
 8001bd0:	080020a7 	.word	0x080020a7

08001bd4 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b087      	sub	sp, #28
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
 8001be0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001be2:	2300      	movs	r3, #0
 8001be4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d101      	bne.n	8001bf4 <HAL_SPI_TransmitReceive_IT+0x20>
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	e075      	b.n	8001ce0 <HAL_SPI_TransmitReceive_IT+0x10c>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c02:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001c0a:	7dbb      	ldrb	r3, [r7, #22]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d00d      	beq.n	8001c2c <HAL_SPI_TransmitReceive_IT+0x58>
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c16:	d106      	bne.n	8001c26 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d102      	bne.n	8001c26 <HAL_SPI_TransmitReceive_IT+0x52>
 8001c20:	7dbb      	ldrb	r3, [r7, #22]
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	d002      	beq.n	8001c2c <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8001c26:	2302      	movs	r3, #2
 8001c28:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001c2a:	e054      	b.n	8001cd6 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d005      	beq.n	8001c3e <HAL_SPI_TransmitReceive_IT+0x6a>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d002      	beq.n	8001c3e <HAL_SPI_TransmitReceive_IT+0x6a>
 8001c38:	887b      	ldrh	r3, [r7, #2]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d102      	bne.n	8001c44 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001c42:	e048      	b.n	8001cd6 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b04      	cmp	r3, #4
 8001c4e:	d003      	beq.n	8001c58 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2205      	movs	r2, #5
 8001c54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	68ba      	ldr	r2, [r7, #8]
 8001c62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	887a      	ldrh	r2, [r7, #2]
 8001c68:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	887a      	ldrh	r2, [r7, #2]
 8001c6e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	887a      	ldrh	r2, [r7, #2]
 8001c7a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	887a      	ldrh	r2, [r7, #2]
 8001c80:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d006      	beq.n	8001c98 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	4a17      	ldr	r2, [pc, #92]	; (8001cec <HAL_SPI_TransmitReceive_IT+0x118>)
 8001c8e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4a17      	ldr	r2, [pc, #92]	; (8001cf0 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8001c94:	645a      	str	r2, [r3, #68]	; 0x44
 8001c96:	e005      	b.n	8001ca4 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	4a16      	ldr	r2, [pc, #88]	; (8001cf4 <HAL_SPI_TransmitReceive_IT+0x120>)
 8001c9c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	4a15      	ldr	r2, [pc, #84]	; (8001cf8 <HAL_SPI_TransmitReceive_IT+0x124>)
 8001ca2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	685a      	ldr	r2, [r3, #4]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8001cb2:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cbe:	2b40      	cmp	r3, #64	; 0x40
 8001cc0:	d008      	beq.n	8001cd4 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	e000      	b.n	8001cd6 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8001cd4:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001cde:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	371c      	adds	r7, #28
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	08001fe9 	.word	0x08001fe9
 8001cf0:	08002049 	.word	0x08002049
 8001cf4:	08001f25 	.word	0x08001f25
 8001cf8:	08001f89 	.word	0x08001f89

08001cfc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b088      	sub	sp, #32
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	099b      	lsrs	r3, r3, #6
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d10f      	bne.n	8001d40 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00a      	beq.n	8001d40 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	099b      	lsrs	r3, r3, #6
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d004      	beq.n	8001d40 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	4798      	blx	r3
    return;
 8001d3e:	e0d8      	b.n	8001ef2 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	085b      	lsrs	r3, r3, #1
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d00a      	beq.n	8001d62 <HAL_SPI_IRQHandler+0x66>
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	09db      	lsrs	r3, r3, #7
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d004      	beq.n	8001d62 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	4798      	blx	r3
    return;
 8001d60:	e0c7      	b.n	8001ef2 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	095b      	lsrs	r3, r3, #5
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10c      	bne.n	8001d88 <HAL_SPI_IRQHandler+0x8c>
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	099b      	lsrs	r3, r3, #6
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d106      	bne.n	8001d88 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	0a1b      	lsrs	r3, r3, #8
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f000 80b5 	beq.w	8001ef2 <HAL_SPI_IRQHandler+0x1f6>
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	095b      	lsrs	r3, r3, #5
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	f000 80ae 	beq.w	8001ef2 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	099b      	lsrs	r3, r3, #6
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d023      	beq.n	8001dea <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b03      	cmp	r3, #3
 8001dac:	d011      	beq.n	8001dd2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db2:	f043 0204 	orr.w	r2, r3, #4
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001dba:	2300      	movs	r3, #0
 8001dbc:	617b      	str	r3, [r7, #20]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	617b      	str	r3, [r7, #20]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	617b      	str	r3, [r7, #20]
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	e00b      	b.n	8001dea <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	613b      	str	r3, [r7, #16]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	613b      	str	r3, [r7, #16]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	613b      	str	r3, [r7, #16]
 8001de6:	693b      	ldr	r3, [r7, #16]
        return;
 8001de8:	e083      	b.n	8001ef2 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	095b      	lsrs	r3, r3, #5
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d014      	beq.n	8001e20 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dfa:	f043 0201 	orr.w	r2, r3, #1
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	0a1b      	lsrs	r3, r3, #8
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d00c      	beq.n	8001e46 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e30:	f043 0208 	orr.w	r2, r3, #8
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60bb      	str	r3, [r7, #8]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	60bb      	str	r3, [r7, #8]
 8001e44:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d050      	beq.n	8001ef0 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001e5c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d104      	bne.n	8001e7a <HAL_SPI_IRQHandler+0x17e>
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d034      	beq.n	8001ee4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f022 0203 	bic.w	r2, r2, #3
 8001e88:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d011      	beq.n	8001eb6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e96:	4a18      	ldr	r2, [pc, #96]	; (8001ef8 <HAL_SPI_IRQHandler+0x1fc>)
 8001e98:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7fe ffd9 	bl	8000e56 <HAL_DMA_Abort_IT>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d005      	beq.n	8001eb6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d016      	beq.n	8001eec <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ec2:	4a0d      	ldr	r2, [pc, #52]	; (8001ef8 <HAL_SPI_IRQHandler+0x1fc>)
 8001ec4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7fe ffc3 	bl	8000e56 <HAL_DMA_Abort_IT>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00a      	beq.n	8001eec <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8001ee2:	e003      	b.n	8001eec <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f7fe fc8d 	bl	8000804 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8001eea:	e000      	b.n	8001eee <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8001eec:	bf00      	nop
    return;
 8001eee:	bf00      	nop
 8001ef0:	bf00      	nop
  }
}
 8001ef2:	3720      	adds	r7, #32
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	08001efd 	.word	0x08001efd

08001efc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f08:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2200      	movs	r2, #0
 8001f14:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f7fe fc74 	bl	8000804 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001f1c:	bf00      	nop
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f103 020c 	add.w	r2, r3, #12
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f38:	7812      	ldrb	r2, [r2, #0]
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f42:	1c5a      	adds	r2, r3, #1
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d10f      	bne.n	8001f80 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	685a      	ldr	r2, [r3, #4]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f6e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d102      	bne.n	8001f80 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f9ec 	bl	8002358 <SPI_CloseRxTx_ISR>
    }
  }
}
 8001f80:	bf00      	nop
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	330c      	adds	r3, #12
 8001f9a:	7812      	ldrb	r2, [r2, #0]
 8001f9c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	1c5a      	adds	r2, r3, #1
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d10f      	bne.n	8001fe0 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	685a      	ldr	r2, [r3, #4]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fce:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d102      	bne.n	8001fe0 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f9bc 	bl	8002358 <SPI_CloseRxTx_ISR>
    }
  }
}
 8001fe0:	bf00      	nop
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68da      	ldr	r2, [r3, #12]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ffa:	b292      	uxth	r2, r2
 8001ffc:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002002:	1c9a      	adds	r2, r3, #2
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800200c:	b29b      	uxth	r3, r3
 800200e:	3b01      	subs	r3, #1
 8002010:	b29a      	uxth	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800201a:	b29b      	uxth	r3, r3
 800201c:	2b00      	cmp	r3, #0
 800201e:	d10f      	bne.n	8002040 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800202e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002034:	b29b      	uxth	r3, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d102      	bne.n	8002040 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f98c 	bl	8002358 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002040:	bf00      	nop
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002054:	881a      	ldrh	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002060:	1c9a      	adds	r2, r3, #2
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800206a:	b29b      	uxth	r3, r3
 800206c:	3b01      	subs	r3, #1
 800206e:	b29a      	uxth	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002078:	b29b      	uxth	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10f      	bne.n	800209e <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800208c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002092:	b29b      	uxth	r3, r3
 8002094:	2b00      	cmp	r3, #0
 8002096:	d102      	bne.n	800209e <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 f95d 	bl	8002358 <SPI_CloseRxTx_ISR>
    }
  }
}
 800209e:	bf00      	nop
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b082      	sub	sp, #8
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f103 020c 	add.w	r2, r3, #12
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ba:	7812      	ldrb	r2, [r2, #0]
 80020bc:	b2d2      	uxtb	r2, r2
 80020be:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c4:	1c5a      	adds	r2, r3, #1
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	3b01      	subs	r3, #1
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020dc:	b29b      	uxth	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d102      	bne.n	80020e8 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 f9ac 	bl	8002440 <SPI_CloseRx_ISR>
  }
}
 80020e8:	bf00      	nop
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68da      	ldr	r2, [r3, #12]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002102:	b292      	uxth	r2, r2
 8002104:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800210a:	1c9a      	adds	r2, r3, #2
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002114:	b29b      	uxth	r3, r3
 8002116:	3b01      	subs	r3, #1
 8002118:	b29a      	uxth	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002122:	b29b      	uxth	r3, r3
 8002124:	2b00      	cmp	r3, #0
 8002126:	d102      	bne.n	800212e <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 f989 	bl	8002440 <SPI_CloseRx_ISR>
  }
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b084      	sub	sp, #16
 800213a:	af00      	add	r7, sp, #0
 800213c:	60f8      	str	r0, [r7, #12]
 800213e:	60b9      	str	r1, [r7, #8]
 8002140:	603b      	str	r3, [r7, #0]
 8002142:	4613      	mov	r3, r2
 8002144:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002146:	e04c      	b.n	80021e2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800214e:	d048      	beq.n	80021e2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002150:	f7fe fd42 	bl	8000bd8 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	429a      	cmp	r2, r3
 800215e:	d902      	bls.n	8002166 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d13d      	bne.n	80021e2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002174:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800217e:	d111      	bne.n	80021a4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002188:	d004      	beq.n	8002194 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002192:	d107      	bne.n	80021a4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021ac:	d10f      	bne.n	80021ce <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2201      	movs	r2, #1
 80021d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e00f      	b.n	8002202 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	4013      	ands	r3, r2
 80021ec:	68ba      	ldr	r2, [r7, #8]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	bf0c      	ite	eq
 80021f2:	2301      	moveq	r3, #1
 80021f4:	2300      	movne	r3, #0
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	461a      	mov	r2, r3
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d1a3      	bne.n	8002148 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b086      	sub	sp, #24
 800220e:	af02      	add	r7, sp, #8
 8002210:	60f8      	str	r0, [r7, #12]
 8002212:	60b9      	str	r1, [r7, #8]
 8002214:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800221e:	d111      	bne.n	8002244 <SPI_EndRxTransaction+0x3a>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002228:	d004      	beq.n	8002234 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002232:	d107      	bne.n	8002244 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002242:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800224c:	d12a      	bne.n	80022a4 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002256:	d012      	beq.n	800227e <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	9300      	str	r3, [sp, #0]
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	2200      	movs	r2, #0
 8002260:	2180      	movs	r1, #128	; 0x80
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	f7ff ff67 	bl	8002136 <SPI_WaitFlagStateUntilTimeout>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d02d      	beq.n	80022ca <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002272:	f043 0220 	orr.w	r2, r3, #32
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e026      	b.n	80022cc <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	2200      	movs	r2, #0
 8002286:	2101      	movs	r1, #1
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f7ff ff54 	bl	8002136 <SPI_WaitFlagStateUntilTimeout>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d01a      	beq.n	80022ca <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002298:	f043 0220 	orr.w	r2, r3, #32
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e013      	b.n	80022cc <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	2200      	movs	r2, #0
 80022ac:	2101      	movs	r1, #1
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f7ff ff41 	bl	8002136 <SPI_WaitFlagStateUntilTimeout>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d007      	beq.n	80022ca <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022be:	f043 0220 	orr.w	r2, r3, #32
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e000      	b.n	80022cc <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b088      	sub	sp, #32
 80022d8:	af02      	add	r7, sp, #8
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80022e0:	4b1b      	ldr	r3, [pc, #108]	; (8002350 <SPI_EndRxTxTransaction+0x7c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a1b      	ldr	r2, [pc, #108]	; (8002354 <SPI_EndRxTxTransaction+0x80>)
 80022e6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ea:	0d5b      	lsrs	r3, r3, #21
 80022ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022f0:	fb02 f303 	mul.w	r3, r2, r3
 80022f4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022fe:	d112      	bne.n	8002326 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	2200      	movs	r2, #0
 8002308:	2180      	movs	r1, #128	; 0x80
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f7ff ff13 	bl	8002136 <SPI_WaitFlagStateUntilTimeout>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d016      	beq.n	8002344 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231a:	f043 0220 	orr.w	r2, r3, #32
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e00f      	b.n	8002346 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00a      	beq.n	8002342 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	3b01      	subs	r3, #1
 8002330:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800233c:	2b80      	cmp	r3, #128	; 0x80
 800233e:	d0f2      	beq.n	8002326 <SPI_EndRxTxTransaction+0x52>
 8002340:	e000      	b.n	8002344 <SPI_EndRxTxTransaction+0x70>
        break;
 8002342:	bf00      	nop
  }

  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	20000004 	.word	0x20000004
 8002354:	165e9f81 	.word	0x165e9f81

08002358 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8002360:	4b35      	ldr	r3, [pc, #212]	; (8002438 <SPI_CloseRxTx_ISR+0xe0>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a35      	ldr	r2, [pc, #212]	; (800243c <SPI_CloseRxTx_ISR+0xe4>)
 8002366:	fba2 2303 	umull	r2, r3, r2, r3
 800236a:	0a5b      	lsrs	r3, r3, #9
 800236c:	2264      	movs	r2, #100	; 0x64
 800236e:	fb02 f303 	mul.w	r3, r2, r3
 8002372:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002374:	f7fe fc30 	bl	8000bd8 <HAL_GetTick>
 8002378:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 0220 	bic.w	r2, r2, #32
 8002388:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d106      	bne.n	800239e <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002394:	f043 0220 	orr.w	r2, r3, #32
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800239c:	e009      	b.n	80023b2 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	3b01      	subs	r3, #1
 80023a2:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0eb      	beq.n	800238a <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80023b2:	697a      	ldr	r2, [r7, #20]
 80023b4:	2164      	movs	r1, #100	; 0x64
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7ff ff8c 	bl	80022d4 <SPI_EndRxTxTransaction>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d005      	beq.n	80023ce <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c6:	f043 0220 	orr.w	r2, r3, #32
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10a      	bne.n	80023ec <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023d6:	2300      	movs	r3, #0
 80023d8:	60fb      	str	r3, [r7, #12]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d115      	bne.n	8002420 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	2b04      	cmp	r3, #4
 80023fe:	d107      	bne.n	8002410 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f7fe f9d5 	bl	80007b8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800240e:	e00e      	b.n	800242e <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7fe f9e5 	bl	80007e8 <HAL_SPI_TxRxCpltCallback>
}
 800241e:	e006      	b.n	800242e <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f7fe f9eb 	bl	8000804 <HAL_SPI_ErrorCallback>
}
 800242e:	bf00      	nop
 8002430:	3718      	adds	r7, #24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	20000004 	.word	0x20000004
 800243c:	057619f1 	.word	0x057619f1

08002440 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	685a      	ldr	r2, [r3, #4]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002456:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8002458:	f7fe fbbe 	bl	8000bd8 <HAL_GetTick>
 800245c:	4603      	mov	r3, r0
 800245e:	461a      	mov	r2, r3
 8002460:	2164      	movs	r1, #100	; 0x64
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7ff fed1 	bl	800220a <SPI_EndRxTransaction>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d005      	beq.n	800247a <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002472:	f043 0220 	orr.w	r2, r3, #32
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10a      	bne.n	8002498 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002482:	2300      	movs	r3, #0
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	60fb      	str	r3, [r7, #12]
 8002496:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d103      	bne.n	80024b0 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f7fe f985 	bl	80007b8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80024ae:	e002      	b.n	80024b6 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7fe f9a7 	bl	8000804 <HAL_SPI_ErrorCallback>
}
 80024b6:	bf00      	nop
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
	...

080024c0 <__errno>:
 80024c0:	4b01      	ldr	r3, [pc, #4]	; (80024c8 <__errno+0x8>)
 80024c2:	6818      	ldr	r0, [r3, #0]
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	20000010 	.word	0x20000010

080024cc <__libc_init_array>:
 80024cc:	b570      	push	{r4, r5, r6, lr}
 80024ce:	4e0d      	ldr	r6, [pc, #52]	; (8002504 <__libc_init_array+0x38>)
 80024d0:	4c0d      	ldr	r4, [pc, #52]	; (8002508 <__libc_init_array+0x3c>)
 80024d2:	1ba4      	subs	r4, r4, r6
 80024d4:	10a4      	asrs	r4, r4, #2
 80024d6:	2500      	movs	r5, #0
 80024d8:	42a5      	cmp	r5, r4
 80024da:	d109      	bne.n	80024f0 <__libc_init_array+0x24>
 80024dc:	4e0b      	ldr	r6, [pc, #44]	; (800250c <__libc_init_array+0x40>)
 80024de:	4c0c      	ldr	r4, [pc, #48]	; (8002510 <__libc_init_array+0x44>)
 80024e0:	f000 ff68 	bl	80033b4 <_init>
 80024e4:	1ba4      	subs	r4, r4, r6
 80024e6:	10a4      	asrs	r4, r4, #2
 80024e8:	2500      	movs	r5, #0
 80024ea:	42a5      	cmp	r5, r4
 80024ec:	d105      	bne.n	80024fa <__libc_init_array+0x2e>
 80024ee:	bd70      	pop	{r4, r5, r6, pc}
 80024f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024f4:	4798      	blx	r3
 80024f6:	3501      	adds	r5, #1
 80024f8:	e7ee      	b.n	80024d8 <__libc_init_array+0xc>
 80024fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024fe:	4798      	blx	r3
 8002500:	3501      	adds	r5, #1
 8002502:	e7f2      	b.n	80024ea <__libc_init_array+0x1e>
 8002504:	08003544 	.word	0x08003544
 8002508:	08003544 	.word	0x08003544
 800250c:	08003544 	.word	0x08003544
 8002510:	08003548 	.word	0x08003548

08002514 <memset>:
 8002514:	4402      	add	r2, r0
 8002516:	4603      	mov	r3, r0
 8002518:	4293      	cmp	r3, r2
 800251a:	d100      	bne.n	800251e <memset+0xa>
 800251c:	4770      	bx	lr
 800251e:	f803 1b01 	strb.w	r1, [r3], #1
 8002522:	e7f9      	b.n	8002518 <memset+0x4>

08002524 <iprintf>:
 8002524:	b40f      	push	{r0, r1, r2, r3}
 8002526:	4b0a      	ldr	r3, [pc, #40]	; (8002550 <iprintf+0x2c>)
 8002528:	b513      	push	{r0, r1, r4, lr}
 800252a:	681c      	ldr	r4, [r3, #0]
 800252c:	b124      	cbz	r4, 8002538 <iprintf+0x14>
 800252e:	69a3      	ldr	r3, [r4, #24]
 8002530:	b913      	cbnz	r3, 8002538 <iprintf+0x14>
 8002532:	4620      	mov	r0, r4
 8002534:	f000 fa22 	bl	800297c <__sinit>
 8002538:	ab05      	add	r3, sp, #20
 800253a:	9a04      	ldr	r2, [sp, #16]
 800253c:	68a1      	ldr	r1, [r4, #8]
 800253e:	9301      	str	r3, [sp, #4]
 8002540:	4620      	mov	r0, r4
 8002542:	f000 fbdb 	bl	8002cfc <_vfiprintf_r>
 8002546:	b002      	add	sp, #8
 8002548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800254c:	b004      	add	sp, #16
 800254e:	4770      	bx	lr
 8002550:	20000010 	.word	0x20000010

08002554 <_puts_r>:
 8002554:	b570      	push	{r4, r5, r6, lr}
 8002556:	460e      	mov	r6, r1
 8002558:	4605      	mov	r5, r0
 800255a:	b118      	cbz	r0, 8002564 <_puts_r+0x10>
 800255c:	6983      	ldr	r3, [r0, #24]
 800255e:	b90b      	cbnz	r3, 8002564 <_puts_r+0x10>
 8002560:	f000 fa0c 	bl	800297c <__sinit>
 8002564:	69ab      	ldr	r3, [r5, #24]
 8002566:	68ac      	ldr	r4, [r5, #8]
 8002568:	b913      	cbnz	r3, 8002570 <_puts_r+0x1c>
 800256a:	4628      	mov	r0, r5
 800256c:	f000 fa06 	bl	800297c <__sinit>
 8002570:	4b23      	ldr	r3, [pc, #140]	; (8002600 <_puts_r+0xac>)
 8002572:	429c      	cmp	r4, r3
 8002574:	d117      	bne.n	80025a6 <_puts_r+0x52>
 8002576:	686c      	ldr	r4, [r5, #4]
 8002578:	89a3      	ldrh	r3, [r4, #12]
 800257a:	071b      	lsls	r3, r3, #28
 800257c:	d51d      	bpl.n	80025ba <_puts_r+0x66>
 800257e:	6923      	ldr	r3, [r4, #16]
 8002580:	b1db      	cbz	r3, 80025ba <_puts_r+0x66>
 8002582:	3e01      	subs	r6, #1
 8002584:	68a3      	ldr	r3, [r4, #8]
 8002586:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800258a:	3b01      	subs	r3, #1
 800258c:	60a3      	str	r3, [r4, #8]
 800258e:	b9e9      	cbnz	r1, 80025cc <_puts_r+0x78>
 8002590:	2b00      	cmp	r3, #0
 8002592:	da2e      	bge.n	80025f2 <_puts_r+0x9e>
 8002594:	4622      	mov	r2, r4
 8002596:	210a      	movs	r1, #10
 8002598:	4628      	mov	r0, r5
 800259a:	f000 f83f 	bl	800261c <__swbuf_r>
 800259e:	3001      	adds	r0, #1
 80025a0:	d011      	beq.n	80025c6 <_puts_r+0x72>
 80025a2:	200a      	movs	r0, #10
 80025a4:	e011      	b.n	80025ca <_puts_r+0x76>
 80025a6:	4b17      	ldr	r3, [pc, #92]	; (8002604 <_puts_r+0xb0>)
 80025a8:	429c      	cmp	r4, r3
 80025aa:	d101      	bne.n	80025b0 <_puts_r+0x5c>
 80025ac:	68ac      	ldr	r4, [r5, #8]
 80025ae:	e7e3      	b.n	8002578 <_puts_r+0x24>
 80025b0:	4b15      	ldr	r3, [pc, #84]	; (8002608 <_puts_r+0xb4>)
 80025b2:	429c      	cmp	r4, r3
 80025b4:	bf08      	it	eq
 80025b6:	68ec      	ldreq	r4, [r5, #12]
 80025b8:	e7de      	b.n	8002578 <_puts_r+0x24>
 80025ba:	4621      	mov	r1, r4
 80025bc:	4628      	mov	r0, r5
 80025be:	f000 f87f 	bl	80026c0 <__swsetup_r>
 80025c2:	2800      	cmp	r0, #0
 80025c4:	d0dd      	beq.n	8002582 <_puts_r+0x2e>
 80025c6:	f04f 30ff 	mov.w	r0, #4294967295
 80025ca:	bd70      	pop	{r4, r5, r6, pc}
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	da04      	bge.n	80025da <_puts_r+0x86>
 80025d0:	69a2      	ldr	r2, [r4, #24]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	dc06      	bgt.n	80025e4 <_puts_r+0x90>
 80025d6:	290a      	cmp	r1, #10
 80025d8:	d004      	beq.n	80025e4 <_puts_r+0x90>
 80025da:	6823      	ldr	r3, [r4, #0]
 80025dc:	1c5a      	adds	r2, r3, #1
 80025de:	6022      	str	r2, [r4, #0]
 80025e0:	7019      	strb	r1, [r3, #0]
 80025e2:	e7cf      	b.n	8002584 <_puts_r+0x30>
 80025e4:	4622      	mov	r2, r4
 80025e6:	4628      	mov	r0, r5
 80025e8:	f000 f818 	bl	800261c <__swbuf_r>
 80025ec:	3001      	adds	r0, #1
 80025ee:	d1c9      	bne.n	8002584 <_puts_r+0x30>
 80025f0:	e7e9      	b.n	80025c6 <_puts_r+0x72>
 80025f2:	6823      	ldr	r3, [r4, #0]
 80025f4:	200a      	movs	r0, #10
 80025f6:	1c5a      	adds	r2, r3, #1
 80025f8:	6022      	str	r2, [r4, #0]
 80025fa:	7018      	strb	r0, [r3, #0]
 80025fc:	e7e5      	b.n	80025ca <_puts_r+0x76>
 80025fe:	bf00      	nop
 8002600:	080034c8 	.word	0x080034c8
 8002604:	080034e8 	.word	0x080034e8
 8002608:	080034a8 	.word	0x080034a8

0800260c <puts>:
 800260c:	4b02      	ldr	r3, [pc, #8]	; (8002618 <puts+0xc>)
 800260e:	4601      	mov	r1, r0
 8002610:	6818      	ldr	r0, [r3, #0]
 8002612:	f7ff bf9f 	b.w	8002554 <_puts_r>
 8002616:	bf00      	nop
 8002618:	20000010 	.word	0x20000010

0800261c <__swbuf_r>:
 800261c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800261e:	460e      	mov	r6, r1
 8002620:	4614      	mov	r4, r2
 8002622:	4605      	mov	r5, r0
 8002624:	b118      	cbz	r0, 800262e <__swbuf_r+0x12>
 8002626:	6983      	ldr	r3, [r0, #24]
 8002628:	b90b      	cbnz	r3, 800262e <__swbuf_r+0x12>
 800262a:	f000 f9a7 	bl	800297c <__sinit>
 800262e:	4b21      	ldr	r3, [pc, #132]	; (80026b4 <__swbuf_r+0x98>)
 8002630:	429c      	cmp	r4, r3
 8002632:	d12a      	bne.n	800268a <__swbuf_r+0x6e>
 8002634:	686c      	ldr	r4, [r5, #4]
 8002636:	69a3      	ldr	r3, [r4, #24]
 8002638:	60a3      	str	r3, [r4, #8]
 800263a:	89a3      	ldrh	r3, [r4, #12]
 800263c:	071a      	lsls	r2, r3, #28
 800263e:	d52e      	bpl.n	800269e <__swbuf_r+0x82>
 8002640:	6923      	ldr	r3, [r4, #16]
 8002642:	b363      	cbz	r3, 800269e <__swbuf_r+0x82>
 8002644:	6923      	ldr	r3, [r4, #16]
 8002646:	6820      	ldr	r0, [r4, #0]
 8002648:	1ac0      	subs	r0, r0, r3
 800264a:	6963      	ldr	r3, [r4, #20]
 800264c:	b2f6      	uxtb	r6, r6
 800264e:	4283      	cmp	r3, r0
 8002650:	4637      	mov	r7, r6
 8002652:	dc04      	bgt.n	800265e <__swbuf_r+0x42>
 8002654:	4621      	mov	r1, r4
 8002656:	4628      	mov	r0, r5
 8002658:	f000 f926 	bl	80028a8 <_fflush_r>
 800265c:	bb28      	cbnz	r0, 80026aa <__swbuf_r+0x8e>
 800265e:	68a3      	ldr	r3, [r4, #8]
 8002660:	3b01      	subs	r3, #1
 8002662:	60a3      	str	r3, [r4, #8]
 8002664:	6823      	ldr	r3, [r4, #0]
 8002666:	1c5a      	adds	r2, r3, #1
 8002668:	6022      	str	r2, [r4, #0]
 800266a:	701e      	strb	r6, [r3, #0]
 800266c:	6963      	ldr	r3, [r4, #20]
 800266e:	3001      	adds	r0, #1
 8002670:	4283      	cmp	r3, r0
 8002672:	d004      	beq.n	800267e <__swbuf_r+0x62>
 8002674:	89a3      	ldrh	r3, [r4, #12]
 8002676:	07db      	lsls	r3, r3, #31
 8002678:	d519      	bpl.n	80026ae <__swbuf_r+0x92>
 800267a:	2e0a      	cmp	r6, #10
 800267c:	d117      	bne.n	80026ae <__swbuf_r+0x92>
 800267e:	4621      	mov	r1, r4
 8002680:	4628      	mov	r0, r5
 8002682:	f000 f911 	bl	80028a8 <_fflush_r>
 8002686:	b190      	cbz	r0, 80026ae <__swbuf_r+0x92>
 8002688:	e00f      	b.n	80026aa <__swbuf_r+0x8e>
 800268a:	4b0b      	ldr	r3, [pc, #44]	; (80026b8 <__swbuf_r+0x9c>)
 800268c:	429c      	cmp	r4, r3
 800268e:	d101      	bne.n	8002694 <__swbuf_r+0x78>
 8002690:	68ac      	ldr	r4, [r5, #8]
 8002692:	e7d0      	b.n	8002636 <__swbuf_r+0x1a>
 8002694:	4b09      	ldr	r3, [pc, #36]	; (80026bc <__swbuf_r+0xa0>)
 8002696:	429c      	cmp	r4, r3
 8002698:	bf08      	it	eq
 800269a:	68ec      	ldreq	r4, [r5, #12]
 800269c:	e7cb      	b.n	8002636 <__swbuf_r+0x1a>
 800269e:	4621      	mov	r1, r4
 80026a0:	4628      	mov	r0, r5
 80026a2:	f000 f80d 	bl	80026c0 <__swsetup_r>
 80026a6:	2800      	cmp	r0, #0
 80026a8:	d0cc      	beq.n	8002644 <__swbuf_r+0x28>
 80026aa:	f04f 37ff 	mov.w	r7, #4294967295
 80026ae:	4638      	mov	r0, r7
 80026b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026b2:	bf00      	nop
 80026b4:	080034c8 	.word	0x080034c8
 80026b8:	080034e8 	.word	0x080034e8
 80026bc:	080034a8 	.word	0x080034a8

080026c0 <__swsetup_r>:
 80026c0:	4b32      	ldr	r3, [pc, #200]	; (800278c <__swsetup_r+0xcc>)
 80026c2:	b570      	push	{r4, r5, r6, lr}
 80026c4:	681d      	ldr	r5, [r3, #0]
 80026c6:	4606      	mov	r6, r0
 80026c8:	460c      	mov	r4, r1
 80026ca:	b125      	cbz	r5, 80026d6 <__swsetup_r+0x16>
 80026cc:	69ab      	ldr	r3, [r5, #24]
 80026ce:	b913      	cbnz	r3, 80026d6 <__swsetup_r+0x16>
 80026d0:	4628      	mov	r0, r5
 80026d2:	f000 f953 	bl	800297c <__sinit>
 80026d6:	4b2e      	ldr	r3, [pc, #184]	; (8002790 <__swsetup_r+0xd0>)
 80026d8:	429c      	cmp	r4, r3
 80026da:	d10f      	bne.n	80026fc <__swsetup_r+0x3c>
 80026dc:	686c      	ldr	r4, [r5, #4]
 80026de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	0715      	lsls	r5, r2, #28
 80026e6:	d42c      	bmi.n	8002742 <__swsetup_r+0x82>
 80026e8:	06d0      	lsls	r0, r2, #27
 80026ea:	d411      	bmi.n	8002710 <__swsetup_r+0x50>
 80026ec:	2209      	movs	r2, #9
 80026ee:	6032      	str	r2, [r6, #0]
 80026f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026f4:	81a3      	strh	r3, [r4, #12]
 80026f6:	f04f 30ff 	mov.w	r0, #4294967295
 80026fa:	e03e      	b.n	800277a <__swsetup_r+0xba>
 80026fc:	4b25      	ldr	r3, [pc, #148]	; (8002794 <__swsetup_r+0xd4>)
 80026fe:	429c      	cmp	r4, r3
 8002700:	d101      	bne.n	8002706 <__swsetup_r+0x46>
 8002702:	68ac      	ldr	r4, [r5, #8]
 8002704:	e7eb      	b.n	80026de <__swsetup_r+0x1e>
 8002706:	4b24      	ldr	r3, [pc, #144]	; (8002798 <__swsetup_r+0xd8>)
 8002708:	429c      	cmp	r4, r3
 800270a:	bf08      	it	eq
 800270c:	68ec      	ldreq	r4, [r5, #12]
 800270e:	e7e6      	b.n	80026de <__swsetup_r+0x1e>
 8002710:	0751      	lsls	r1, r2, #29
 8002712:	d512      	bpl.n	800273a <__swsetup_r+0x7a>
 8002714:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002716:	b141      	cbz	r1, 800272a <__swsetup_r+0x6a>
 8002718:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800271c:	4299      	cmp	r1, r3
 800271e:	d002      	beq.n	8002726 <__swsetup_r+0x66>
 8002720:	4630      	mov	r0, r6
 8002722:	f000 fa19 	bl	8002b58 <_free_r>
 8002726:	2300      	movs	r3, #0
 8002728:	6363      	str	r3, [r4, #52]	; 0x34
 800272a:	89a3      	ldrh	r3, [r4, #12]
 800272c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002730:	81a3      	strh	r3, [r4, #12]
 8002732:	2300      	movs	r3, #0
 8002734:	6063      	str	r3, [r4, #4]
 8002736:	6923      	ldr	r3, [r4, #16]
 8002738:	6023      	str	r3, [r4, #0]
 800273a:	89a3      	ldrh	r3, [r4, #12]
 800273c:	f043 0308 	orr.w	r3, r3, #8
 8002740:	81a3      	strh	r3, [r4, #12]
 8002742:	6923      	ldr	r3, [r4, #16]
 8002744:	b94b      	cbnz	r3, 800275a <__swsetup_r+0x9a>
 8002746:	89a3      	ldrh	r3, [r4, #12]
 8002748:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800274c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002750:	d003      	beq.n	800275a <__swsetup_r+0x9a>
 8002752:	4621      	mov	r1, r4
 8002754:	4630      	mov	r0, r6
 8002756:	f000 f9bf 	bl	8002ad8 <__smakebuf_r>
 800275a:	89a2      	ldrh	r2, [r4, #12]
 800275c:	f012 0301 	ands.w	r3, r2, #1
 8002760:	d00c      	beq.n	800277c <__swsetup_r+0xbc>
 8002762:	2300      	movs	r3, #0
 8002764:	60a3      	str	r3, [r4, #8]
 8002766:	6963      	ldr	r3, [r4, #20]
 8002768:	425b      	negs	r3, r3
 800276a:	61a3      	str	r3, [r4, #24]
 800276c:	6923      	ldr	r3, [r4, #16]
 800276e:	b953      	cbnz	r3, 8002786 <__swsetup_r+0xc6>
 8002770:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002774:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002778:	d1ba      	bne.n	80026f0 <__swsetup_r+0x30>
 800277a:	bd70      	pop	{r4, r5, r6, pc}
 800277c:	0792      	lsls	r2, r2, #30
 800277e:	bf58      	it	pl
 8002780:	6963      	ldrpl	r3, [r4, #20]
 8002782:	60a3      	str	r3, [r4, #8]
 8002784:	e7f2      	b.n	800276c <__swsetup_r+0xac>
 8002786:	2000      	movs	r0, #0
 8002788:	e7f7      	b.n	800277a <__swsetup_r+0xba>
 800278a:	bf00      	nop
 800278c:	20000010 	.word	0x20000010
 8002790:	080034c8 	.word	0x080034c8
 8002794:	080034e8 	.word	0x080034e8
 8002798:	080034a8 	.word	0x080034a8

0800279c <__sflush_r>:
 800279c:	898a      	ldrh	r2, [r1, #12]
 800279e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027a2:	4605      	mov	r5, r0
 80027a4:	0710      	lsls	r0, r2, #28
 80027a6:	460c      	mov	r4, r1
 80027a8:	d458      	bmi.n	800285c <__sflush_r+0xc0>
 80027aa:	684b      	ldr	r3, [r1, #4]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	dc05      	bgt.n	80027bc <__sflush_r+0x20>
 80027b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	dc02      	bgt.n	80027bc <__sflush_r+0x20>
 80027b6:	2000      	movs	r0, #0
 80027b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80027be:	2e00      	cmp	r6, #0
 80027c0:	d0f9      	beq.n	80027b6 <__sflush_r+0x1a>
 80027c2:	2300      	movs	r3, #0
 80027c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80027c8:	682f      	ldr	r7, [r5, #0]
 80027ca:	6a21      	ldr	r1, [r4, #32]
 80027cc:	602b      	str	r3, [r5, #0]
 80027ce:	d032      	beq.n	8002836 <__sflush_r+0x9a>
 80027d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80027d2:	89a3      	ldrh	r3, [r4, #12]
 80027d4:	075a      	lsls	r2, r3, #29
 80027d6:	d505      	bpl.n	80027e4 <__sflush_r+0x48>
 80027d8:	6863      	ldr	r3, [r4, #4]
 80027da:	1ac0      	subs	r0, r0, r3
 80027dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80027de:	b10b      	cbz	r3, 80027e4 <__sflush_r+0x48>
 80027e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80027e2:	1ac0      	subs	r0, r0, r3
 80027e4:	2300      	movs	r3, #0
 80027e6:	4602      	mov	r2, r0
 80027e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80027ea:	6a21      	ldr	r1, [r4, #32]
 80027ec:	4628      	mov	r0, r5
 80027ee:	47b0      	blx	r6
 80027f0:	1c43      	adds	r3, r0, #1
 80027f2:	89a3      	ldrh	r3, [r4, #12]
 80027f4:	d106      	bne.n	8002804 <__sflush_r+0x68>
 80027f6:	6829      	ldr	r1, [r5, #0]
 80027f8:	291d      	cmp	r1, #29
 80027fa:	d848      	bhi.n	800288e <__sflush_r+0xf2>
 80027fc:	4a29      	ldr	r2, [pc, #164]	; (80028a4 <__sflush_r+0x108>)
 80027fe:	40ca      	lsrs	r2, r1
 8002800:	07d6      	lsls	r6, r2, #31
 8002802:	d544      	bpl.n	800288e <__sflush_r+0xf2>
 8002804:	2200      	movs	r2, #0
 8002806:	6062      	str	r2, [r4, #4]
 8002808:	04d9      	lsls	r1, r3, #19
 800280a:	6922      	ldr	r2, [r4, #16]
 800280c:	6022      	str	r2, [r4, #0]
 800280e:	d504      	bpl.n	800281a <__sflush_r+0x7e>
 8002810:	1c42      	adds	r2, r0, #1
 8002812:	d101      	bne.n	8002818 <__sflush_r+0x7c>
 8002814:	682b      	ldr	r3, [r5, #0]
 8002816:	b903      	cbnz	r3, 800281a <__sflush_r+0x7e>
 8002818:	6560      	str	r0, [r4, #84]	; 0x54
 800281a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800281c:	602f      	str	r7, [r5, #0]
 800281e:	2900      	cmp	r1, #0
 8002820:	d0c9      	beq.n	80027b6 <__sflush_r+0x1a>
 8002822:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002826:	4299      	cmp	r1, r3
 8002828:	d002      	beq.n	8002830 <__sflush_r+0x94>
 800282a:	4628      	mov	r0, r5
 800282c:	f000 f994 	bl	8002b58 <_free_r>
 8002830:	2000      	movs	r0, #0
 8002832:	6360      	str	r0, [r4, #52]	; 0x34
 8002834:	e7c0      	b.n	80027b8 <__sflush_r+0x1c>
 8002836:	2301      	movs	r3, #1
 8002838:	4628      	mov	r0, r5
 800283a:	47b0      	blx	r6
 800283c:	1c41      	adds	r1, r0, #1
 800283e:	d1c8      	bne.n	80027d2 <__sflush_r+0x36>
 8002840:	682b      	ldr	r3, [r5, #0]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d0c5      	beq.n	80027d2 <__sflush_r+0x36>
 8002846:	2b1d      	cmp	r3, #29
 8002848:	d001      	beq.n	800284e <__sflush_r+0xb2>
 800284a:	2b16      	cmp	r3, #22
 800284c:	d101      	bne.n	8002852 <__sflush_r+0xb6>
 800284e:	602f      	str	r7, [r5, #0]
 8002850:	e7b1      	b.n	80027b6 <__sflush_r+0x1a>
 8002852:	89a3      	ldrh	r3, [r4, #12]
 8002854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002858:	81a3      	strh	r3, [r4, #12]
 800285a:	e7ad      	b.n	80027b8 <__sflush_r+0x1c>
 800285c:	690f      	ldr	r7, [r1, #16]
 800285e:	2f00      	cmp	r7, #0
 8002860:	d0a9      	beq.n	80027b6 <__sflush_r+0x1a>
 8002862:	0793      	lsls	r3, r2, #30
 8002864:	680e      	ldr	r6, [r1, #0]
 8002866:	bf08      	it	eq
 8002868:	694b      	ldreq	r3, [r1, #20]
 800286a:	600f      	str	r7, [r1, #0]
 800286c:	bf18      	it	ne
 800286e:	2300      	movne	r3, #0
 8002870:	eba6 0807 	sub.w	r8, r6, r7
 8002874:	608b      	str	r3, [r1, #8]
 8002876:	f1b8 0f00 	cmp.w	r8, #0
 800287a:	dd9c      	ble.n	80027b6 <__sflush_r+0x1a>
 800287c:	4643      	mov	r3, r8
 800287e:	463a      	mov	r2, r7
 8002880:	6a21      	ldr	r1, [r4, #32]
 8002882:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002884:	4628      	mov	r0, r5
 8002886:	47b0      	blx	r6
 8002888:	2800      	cmp	r0, #0
 800288a:	dc06      	bgt.n	800289a <__sflush_r+0xfe>
 800288c:	89a3      	ldrh	r3, [r4, #12]
 800288e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002892:	81a3      	strh	r3, [r4, #12]
 8002894:	f04f 30ff 	mov.w	r0, #4294967295
 8002898:	e78e      	b.n	80027b8 <__sflush_r+0x1c>
 800289a:	4407      	add	r7, r0
 800289c:	eba8 0800 	sub.w	r8, r8, r0
 80028a0:	e7e9      	b.n	8002876 <__sflush_r+0xda>
 80028a2:	bf00      	nop
 80028a4:	20400001 	.word	0x20400001

080028a8 <_fflush_r>:
 80028a8:	b538      	push	{r3, r4, r5, lr}
 80028aa:	690b      	ldr	r3, [r1, #16]
 80028ac:	4605      	mov	r5, r0
 80028ae:	460c      	mov	r4, r1
 80028b0:	b1db      	cbz	r3, 80028ea <_fflush_r+0x42>
 80028b2:	b118      	cbz	r0, 80028bc <_fflush_r+0x14>
 80028b4:	6983      	ldr	r3, [r0, #24]
 80028b6:	b90b      	cbnz	r3, 80028bc <_fflush_r+0x14>
 80028b8:	f000 f860 	bl	800297c <__sinit>
 80028bc:	4b0c      	ldr	r3, [pc, #48]	; (80028f0 <_fflush_r+0x48>)
 80028be:	429c      	cmp	r4, r3
 80028c0:	d109      	bne.n	80028d6 <_fflush_r+0x2e>
 80028c2:	686c      	ldr	r4, [r5, #4]
 80028c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80028c8:	b17b      	cbz	r3, 80028ea <_fflush_r+0x42>
 80028ca:	4621      	mov	r1, r4
 80028cc:	4628      	mov	r0, r5
 80028ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80028d2:	f7ff bf63 	b.w	800279c <__sflush_r>
 80028d6:	4b07      	ldr	r3, [pc, #28]	; (80028f4 <_fflush_r+0x4c>)
 80028d8:	429c      	cmp	r4, r3
 80028da:	d101      	bne.n	80028e0 <_fflush_r+0x38>
 80028dc:	68ac      	ldr	r4, [r5, #8]
 80028de:	e7f1      	b.n	80028c4 <_fflush_r+0x1c>
 80028e0:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <_fflush_r+0x50>)
 80028e2:	429c      	cmp	r4, r3
 80028e4:	bf08      	it	eq
 80028e6:	68ec      	ldreq	r4, [r5, #12]
 80028e8:	e7ec      	b.n	80028c4 <_fflush_r+0x1c>
 80028ea:	2000      	movs	r0, #0
 80028ec:	bd38      	pop	{r3, r4, r5, pc}
 80028ee:	bf00      	nop
 80028f0:	080034c8 	.word	0x080034c8
 80028f4:	080034e8 	.word	0x080034e8
 80028f8:	080034a8 	.word	0x080034a8

080028fc <std>:
 80028fc:	2300      	movs	r3, #0
 80028fe:	b510      	push	{r4, lr}
 8002900:	4604      	mov	r4, r0
 8002902:	e9c0 3300 	strd	r3, r3, [r0]
 8002906:	6083      	str	r3, [r0, #8]
 8002908:	8181      	strh	r1, [r0, #12]
 800290a:	6643      	str	r3, [r0, #100]	; 0x64
 800290c:	81c2      	strh	r2, [r0, #14]
 800290e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002912:	6183      	str	r3, [r0, #24]
 8002914:	4619      	mov	r1, r3
 8002916:	2208      	movs	r2, #8
 8002918:	305c      	adds	r0, #92	; 0x5c
 800291a:	f7ff fdfb 	bl	8002514 <memset>
 800291e:	4b05      	ldr	r3, [pc, #20]	; (8002934 <std+0x38>)
 8002920:	6263      	str	r3, [r4, #36]	; 0x24
 8002922:	4b05      	ldr	r3, [pc, #20]	; (8002938 <std+0x3c>)
 8002924:	62a3      	str	r3, [r4, #40]	; 0x28
 8002926:	4b05      	ldr	r3, [pc, #20]	; (800293c <std+0x40>)
 8002928:	62e3      	str	r3, [r4, #44]	; 0x2c
 800292a:	4b05      	ldr	r3, [pc, #20]	; (8002940 <std+0x44>)
 800292c:	6224      	str	r4, [r4, #32]
 800292e:	6323      	str	r3, [r4, #48]	; 0x30
 8002930:	bd10      	pop	{r4, pc}
 8002932:	bf00      	nop
 8002934:	08003259 	.word	0x08003259
 8002938:	0800327b 	.word	0x0800327b
 800293c:	080032b3 	.word	0x080032b3
 8002940:	080032d7 	.word	0x080032d7

08002944 <_cleanup_r>:
 8002944:	4901      	ldr	r1, [pc, #4]	; (800294c <_cleanup_r+0x8>)
 8002946:	f000 b885 	b.w	8002a54 <_fwalk_reent>
 800294a:	bf00      	nop
 800294c:	080028a9 	.word	0x080028a9

08002950 <__sfmoreglue>:
 8002950:	b570      	push	{r4, r5, r6, lr}
 8002952:	1e4a      	subs	r2, r1, #1
 8002954:	2568      	movs	r5, #104	; 0x68
 8002956:	4355      	muls	r5, r2
 8002958:	460e      	mov	r6, r1
 800295a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800295e:	f000 f949 	bl	8002bf4 <_malloc_r>
 8002962:	4604      	mov	r4, r0
 8002964:	b140      	cbz	r0, 8002978 <__sfmoreglue+0x28>
 8002966:	2100      	movs	r1, #0
 8002968:	e9c0 1600 	strd	r1, r6, [r0]
 800296c:	300c      	adds	r0, #12
 800296e:	60a0      	str	r0, [r4, #8]
 8002970:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002974:	f7ff fdce 	bl	8002514 <memset>
 8002978:	4620      	mov	r0, r4
 800297a:	bd70      	pop	{r4, r5, r6, pc}

0800297c <__sinit>:
 800297c:	6983      	ldr	r3, [r0, #24]
 800297e:	b510      	push	{r4, lr}
 8002980:	4604      	mov	r4, r0
 8002982:	bb33      	cbnz	r3, 80029d2 <__sinit+0x56>
 8002984:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002988:	6503      	str	r3, [r0, #80]	; 0x50
 800298a:	4b12      	ldr	r3, [pc, #72]	; (80029d4 <__sinit+0x58>)
 800298c:	4a12      	ldr	r2, [pc, #72]	; (80029d8 <__sinit+0x5c>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6282      	str	r2, [r0, #40]	; 0x28
 8002992:	4298      	cmp	r0, r3
 8002994:	bf04      	itt	eq
 8002996:	2301      	moveq	r3, #1
 8002998:	6183      	streq	r3, [r0, #24]
 800299a:	f000 f81f 	bl	80029dc <__sfp>
 800299e:	6060      	str	r0, [r4, #4]
 80029a0:	4620      	mov	r0, r4
 80029a2:	f000 f81b 	bl	80029dc <__sfp>
 80029a6:	60a0      	str	r0, [r4, #8]
 80029a8:	4620      	mov	r0, r4
 80029aa:	f000 f817 	bl	80029dc <__sfp>
 80029ae:	2200      	movs	r2, #0
 80029b0:	60e0      	str	r0, [r4, #12]
 80029b2:	2104      	movs	r1, #4
 80029b4:	6860      	ldr	r0, [r4, #4]
 80029b6:	f7ff ffa1 	bl	80028fc <std>
 80029ba:	2201      	movs	r2, #1
 80029bc:	2109      	movs	r1, #9
 80029be:	68a0      	ldr	r0, [r4, #8]
 80029c0:	f7ff ff9c 	bl	80028fc <std>
 80029c4:	2202      	movs	r2, #2
 80029c6:	2112      	movs	r1, #18
 80029c8:	68e0      	ldr	r0, [r4, #12]
 80029ca:	f7ff ff97 	bl	80028fc <std>
 80029ce:	2301      	movs	r3, #1
 80029d0:	61a3      	str	r3, [r4, #24]
 80029d2:	bd10      	pop	{r4, pc}
 80029d4:	080034a4 	.word	0x080034a4
 80029d8:	08002945 	.word	0x08002945

080029dc <__sfp>:
 80029dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029de:	4b1b      	ldr	r3, [pc, #108]	; (8002a4c <__sfp+0x70>)
 80029e0:	681e      	ldr	r6, [r3, #0]
 80029e2:	69b3      	ldr	r3, [r6, #24]
 80029e4:	4607      	mov	r7, r0
 80029e6:	b913      	cbnz	r3, 80029ee <__sfp+0x12>
 80029e8:	4630      	mov	r0, r6
 80029ea:	f7ff ffc7 	bl	800297c <__sinit>
 80029ee:	3648      	adds	r6, #72	; 0x48
 80029f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80029f4:	3b01      	subs	r3, #1
 80029f6:	d503      	bpl.n	8002a00 <__sfp+0x24>
 80029f8:	6833      	ldr	r3, [r6, #0]
 80029fa:	b133      	cbz	r3, 8002a0a <__sfp+0x2e>
 80029fc:	6836      	ldr	r6, [r6, #0]
 80029fe:	e7f7      	b.n	80029f0 <__sfp+0x14>
 8002a00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002a04:	b16d      	cbz	r5, 8002a22 <__sfp+0x46>
 8002a06:	3468      	adds	r4, #104	; 0x68
 8002a08:	e7f4      	b.n	80029f4 <__sfp+0x18>
 8002a0a:	2104      	movs	r1, #4
 8002a0c:	4638      	mov	r0, r7
 8002a0e:	f7ff ff9f 	bl	8002950 <__sfmoreglue>
 8002a12:	6030      	str	r0, [r6, #0]
 8002a14:	2800      	cmp	r0, #0
 8002a16:	d1f1      	bne.n	80029fc <__sfp+0x20>
 8002a18:	230c      	movs	r3, #12
 8002a1a:	603b      	str	r3, [r7, #0]
 8002a1c:	4604      	mov	r4, r0
 8002a1e:	4620      	mov	r0, r4
 8002a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a22:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <__sfp+0x74>)
 8002a24:	6665      	str	r5, [r4, #100]	; 0x64
 8002a26:	e9c4 5500 	strd	r5, r5, [r4]
 8002a2a:	60a5      	str	r5, [r4, #8]
 8002a2c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002a30:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002a34:	2208      	movs	r2, #8
 8002a36:	4629      	mov	r1, r5
 8002a38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002a3c:	f7ff fd6a 	bl	8002514 <memset>
 8002a40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002a44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002a48:	e7e9      	b.n	8002a1e <__sfp+0x42>
 8002a4a:	bf00      	nop
 8002a4c:	080034a4 	.word	0x080034a4
 8002a50:	ffff0001 	.word	0xffff0001

08002a54 <_fwalk_reent>:
 8002a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a58:	4680      	mov	r8, r0
 8002a5a:	4689      	mov	r9, r1
 8002a5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002a60:	2600      	movs	r6, #0
 8002a62:	b914      	cbnz	r4, 8002a6a <_fwalk_reent+0x16>
 8002a64:	4630      	mov	r0, r6
 8002a66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a6a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8002a6e:	3f01      	subs	r7, #1
 8002a70:	d501      	bpl.n	8002a76 <_fwalk_reent+0x22>
 8002a72:	6824      	ldr	r4, [r4, #0]
 8002a74:	e7f5      	b.n	8002a62 <_fwalk_reent+0xe>
 8002a76:	89ab      	ldrh	r3, [r5, #12]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d907      	bls.n	8002a8c <_fwalk_reent+0x38>
 8002a7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002a80:	3301      	adds	r3, #1
 8002a82:	d003      	beq.n	8002a8c <_fwalk_reent+0x38>
 8002a84:	4629      	mov	r1, r5
 8002a86:	4640      	mov	r0, r8
 8002a88:	47c8      	blx	r9
 8002a8a:	4306      	orrs	r6, r0
 8002a8c:	3568      	adds	r5, #104	; 0x68
 8002a8e:	e7ee      	b.n	8002a6e <_fwalk_reent+0x1a>

08002a90 <__swhatbuf_r>:
 8002a90:	b570      	push	{r4, r5, r6, lr}
 8002a92:	460e      	mov	r6, r1
 8002a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a98:	2900      	cmp	r1, #0
 8002a9a:	b096      	sub	sp, #88	; 0x58
 8002a9c:	4614      	mov	r4, r2
 8002a9e:	461d      	mov	r5, r3
 8002aa0:	da07      	bge.n	8002ab2 <__swhatbuf_r+0x22>
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	602b      	str	r3, [r5, #0]
 8002aa6:	89b3      	ldrh	r3, [r6, #12]
 8002aa8:	061a      	lsls	r2, r3, #24
 8002aaa:	d410      	bmi.n	8002ace <__swhatbuf_r+0x3e>
 8002aac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ab0:	e00e      	b.n	8002ad0 <__swhatbuf_r+0x40>
 8002ab2:	466a      	mov	r2, sp
 8002ab4:	f000 fc36 	bl	8003324 <_fstat_r>
 8002ab8:	2800      	cmp	r0, #0
 8002aba:	dbf2      	blt.n	8002aa2 <__swhatbuf_r+0x12>
 8002abc:	9a01      	ldr	r2, [sp, #4]
 8002abe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002ac2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002ac6:	425a      	negs	r2, r3
 8002ac8:	415a      	adcs	r2, r3
 8002aca:	602a      	str	r2, [r5, #0]
 8002acc:	e7ee      	b.n	8002aac <__swhatbuf_r+0x1c>
 8002ace:	2340      	movs	r3, #64	; 0x40
 8002ad0:	2000      	movs	r0, #0
 8002ad2:	6023      	str	r3, [r4, #0]
 8002ad4:	b016      	add	sp, #88	; 0x58
 8002ad6:	bd70      	pop	{r4, r5, r6, pc}

08002ad8 <__smakebuf_r>:
 8002ad8:	898b      	ldrh	r3, [r1, #12]
 8002ada:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002adc:	079d      	lsls	r5, r3, #30
 8002ade:	4606      	mov	r6, r0
 8002ae0:	460c      	mov	r4, r1
 8002ae2:	d507      	bpl.n	8002af4 <__smakebuf_r+0x1c>
 8002ae4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002ae8:	6023      	str	r3, [r4, #0]
 8002aea:	6123      	str	r3, [r4, #16]
 8002aec:	2301      	movs	r3, #1
 8002aee:	6163      	str	r3, [r4, #20]
 8002af0:	b002      	add	sp, #8
 8002af2:	bd70      	pop	{r4, r5, r6, pc}
 8002af4:	ab01      	add	r3, sp, #4
 8002af6:	466a      	mov	r2, sp
 8002af8:	f7ff ffca 	bl	8002a90 <__swhatbuf_r>
 8002afc:	9900      	ldr	r1, [sp, #0]
 8002afe:	4605      	mov	r5, r0
 8002b00:	4630      	mov	r0, r6
 8002b02:	f000 f877 	bl	8002bf4 <_malloc_r>
 8002b06:	b948      	cbnz	r0, 8002b1c <__smakebuf_r+0x44>
 8002b08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b0c:	059a      	lsls	r2, r3, #22
 8002b0e:	d4ef      	bmi.n	8002af0 <__smakebuf_r+0x18>
 8002b10:	f023 0303 	bic.w	r3, r3, #3
 8002b14:	f043 0302 	orr.w	r3, r3, #2
 8002b18:	81a3      	strh	r3, [r4, #12]
 8002b1a:	e7e3      	b.n	8002ae4 <__smakebuf_r+0xc>
 8002b1c:	4b0d      	ldr	r3, [pc, #52]	; (8002b54 <__smakebuf_r+0x7c>)
 8002b1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002b20:	89a3      	ldrh	r3, [r4, #12]
 8002b22:	6020      	str	r0, [r4, #0]
 8002b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b28:	81a3      	strh	r3, [r4, #12]
 8002b2a:	9b00      	ldr	r3, [sp, #0]
 8002b2c:	6163      	str	r3, [r4, #20]
 8002b2e:	9b01      	ldr	r3, [sp, #4]
 8002b30:	6120      	str	r0, [r4, #16]
 8002b32:	b15b      	cbz	r3, 8002b4c <__smakebuf_r+0x74>
 8002b34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b38:	4630      	mov	r0, r6
 8002b3a:	f000 fc05 	bl	8003348 <_isatty_r>
 8002b3e:	b128      	cbz	r0, 8002b4c <__smakebuf_r+0x74>
 8002b40:	89a3      	ldrh	r3, [r4, #12]
 8002b42:	f023 0303 	bic.w	r3, r3, #3
 8002b46:	f043 0301 	orr.w	r3, r3, #1
 8002b4a:	81a3      	strh	r3, [r4, #12]
 8002b4c:	89a3      	ldrh	r3, [r4, #12]
 8002b4e:	431d      	orrs	r5, r3
 8002b50:	81a5      	strh	r5, [r4, #12]
 8002b52:	e7cd      	b.n	8002af0 <__smakebuf_r+0x18>
 8002b54:	08002945 	.word	0x08002945

08002b58 <_free_r>:
 8002b58:	b538      	push	{r3, r4, r5, lr}
 8002b5a:	4605      	mov	r5, r0
 8002b5c:	2900      	cmp	r1, #0
 8002b5e:	d045      	beq.n	8002bec <_free_r+0x94>
 8002b60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b64:	1f0c      	subs	r4, r1, #4
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	bfb8      	it	lt
 8002b6a:	18e4      	addlt	r4, r4, r3
 8002b6c:	f000 fc0e 	bl	800338c <__malloc_lock>
 8002b70:	4a1f      	ldr	r2, [pc, #124]	; (8002bf0 <_free_r+0x98>)
 8002b72:	6813      	ldr	r3, [r2, #0]
 8002b74:	4610      	mov	r0, r2
 8002b76:	b933      	cbnz	r3, 8002b86 <_free_r+0x2e>
 8002b78:	6063      	str	r3, [r4, #4]
 8002b7a:	6014      	str	r4, [r2, #0]
 8002b7c:	4628      	mov	r0, r5
 8002b7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b82:	f000 bc04 	b.w	800338e <__malloc_unlock>
 8002b86:	42a3      	cmp	r3, r4
 8002b88:	d90c      	bls.n	8002ba4 <_free_r+0x4c>
 8002b8a:	6821      	ldr	r1, [r4, #0]
 8002b8c:	1862      	adds	r2, r4, r1
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	bf04      	itt	eq
 8002b92:	681a      	ldreq	r2, [r3, #0]
 8002b94:	685b      	ldreq	r3, [r3, #4]
 8002b96:	6063      	str	r3, [r4, #4]
 8002b98:	bf04      	itt	eq
 8002b9a:	1852      	addeq	r2, r2, r1
 8002b9c:	6022      	streq	r2, [r4, #0]
 8002b9e:	6004      	str	r4, [r0, #0]
 8002ba0:	e7ec      	b.n	8002b7c <_free_r+0x24>
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	b10a      	cbz	r2, 8002bac <_free_r+0x54>
 8002ba8:	42a2      	cmp	r2, r4
 8002baa:	d9fa      	bls.n	8002ba2 <_free_r+0x4a>
 8002bac:	6819      	ldr	r1, [r3, #0]
 8002bae:	1858      	adds	r0, r3, r1
 8002bb0:	42a0      	cmp	r0, r4
 8002bb2:	d10b      	bne.n	8002bcc <_free_r+0x74>
 8002bb4:	6820      	ldr	r0, [r4, #0]
 8002bb6:	4401      	add	r1, r0
 8002bb8:	1858      	adds	r0, r3, r1
 8002bba:	4282      	cmp	r2, r0
 8002bbc:	6019      	str	r1, [r3, #0]
 8002bbe:	d1dd      	bne.n	8002b7c <_free_r+0x24>
 8002bc0:	6810      	ldr	r0, [r2, #0]
 8002bc2:	6852      	ldr	r2, [r2, #4]
 8002bc4:	605a      	str	r2, [r3, #4]
 8002bc6:	4401      	add	r1, r0
 8002bc8:	6019      	str	r1, [r3, #0]
 8002bca:	e7d7      	b.n	8002b7c <_free_r+0x24>
 8002bcc:	d902      	bls.n	8002bd4 <_free_r+0x7c>
 8002bce:	230c      	movs	r3, #12
 8002bd0:	602b      	str	r3, [r5, #0]
 8002bd2:	e7d3      	b.n	8002b7c <_free_r+0x24>
 8002bd4:	6820      	ldr	r0, [r4, #0]
 8002bd6:	1821      	adds	r1, r4, r0
 8002bd8:	428a      	cmp	r2, r1
 8002bda:	bf04      	itt	eq
 8002bdc:	6811      	ldreq	r1, [r2, #0]
 8002bde:	6852      	ldreq	r2, [r2, #4]
 8002be0:	6062      	str	r2, [r4, #4]
 8002be2:	bf04      	itt	eq
 8002be4:	1809      	addeq	r1, r1, r0
 8002be6:	6021      	streq	r1, [r4, #0]
 8002be8:	605c      	str	r4, [r3, #4]
 8002bea:	e7c7      	b.n	8002b7c <_free_r+0x24>
 8002bec:	bd38      	pop	{r3, r4, r5, pc}
 8002bee:	bf00      	nop
 8002bf0:	20000094 	.word	0x20000094

08002bf4 <_malloc_r>:
 8002bf4:	b570      	push	{r4, r5, r6, lr}
 8002bf6:	1ccd      	adds	r5, r1, #3
 8002bf8:	f025 0503 	bic.w	r5, r5, #3
 8002bfc:	3508      	adds	r5, #8
 8002bfe:	2d0c      	cmp	r5, #12
 8002c00:	bf38      	it	cc
 8002c02:	250c      	movcc	r5, #12
 8002c04:	2d00      	cmp	r5, #0
 8002c06:	4606      	mov	r6, r0
 8002c08:	db01      	blt.n	8002c0e <_malloc_r+0x1a>
 8002c0a:	42a9      	cmp	r1, r5
 8002c0c:	d903      	bls.n	8002c16 <_malloc_r+0x22>
 8002c0e:	230c      	movs	r3, #12
 8002c10:	6033      	str	r3, [r6, #0]
 8002c12:	2000      	movs	r0, #0
 8002c14:	bd70      	pop	{r4, r5, r6, pc}
 8002c16:	f000 fbb9 	bl	800338c <__malloc_lock>
 8002c1a:	4a21      	ldr	r2, [pc, #132]	; (8002ca0 <_malloc_r+0xac>)
 8002c1c:	6814      	ldr	r4, [r2, #0]
 8002c1e:	4621      	mov	r1, r4
 8002c20:	b991      	cbnz	r1, 8002c48 <_malloc_r+0x54>
 8002c22:	4c20      	ldr	r4, [pc, #128]	; (8002ca4 <_malloc_r+0xb0>)
 8002c24:	6823      	ldr	r3, [r4, #0]
 8002c26:	b91b      	cbnz	r3, 8002c30 <_malloc_r+0x3c>
 8002c28:	4630      	mov	r0, r6
 8002c2a:	f000 fb05 	bl	8003238 <_sbrk_r>
 8002c2e:	6020      	str	r0, [r4, #0]
 8002c30:	4629      	mov	r1, r5
 8002c32:	4630      	mov	r0, r6
 8002c34:	f000 fb00 	bl	8003238 <_sbrk_r>
 8002c38:	1c43      	adds	r3, r0, #1
 8002c3a:	d124      	bne.n	8002c86 <_malloc_r+0x92>
 8002c3c:	230c      	movs	r3, #12
 8002c3e:	6033      	str	r3, [r6, #0]
 8002c40:	4630      	mov	r0, r6
 8002c42:	f000 fba4 	bl	800338e <__malloc_unlock>
 8002c46:	e7e4      	b.n	8002c12 <_malloc_r+0x1e>
 8002c48:	680b      	ldr	r3, [r1, #0]
 8002c4a:	1b5b      	subs	r3, r3, r5
 8002c4c:	d418      	bmi.n	8002c80 <_malloc_r+0x8c>
 8002c4e:	2b0b      	cmp	r3, #11
 8002c50:	d90f      	bls.n	8002c72 <_malloc_r+0x7e>
 8002c52:	600b      	str	r3, [r1, #0]
 8002c54:	50cd      	str	r5, [r1, r3]
 8002c56:	18cc      	adds	r4, r1, r3
 8002c58:	4630      	mov	r0, r6
 8002c5a:	f000 fb98 	bl	800338e <__malloc_unlock>
 8002c5e:	f104 000b 	add.w	r0, r4, #11
 8002c62:	1d23      	adds	r3, r4, #4
 8002c64:	f020 0007 	bic.w	r0, r0, #7
 8002c68:	1ac3      	subs	r3, r0, r3
 8002c6a:	d0d3      	beq.n	8002c14 <_malloc_r+0x20>
 8002c6c:	425a      	negs	r2, r3
 8002c6e:	50e2      	str	r2, [r4, r3]
 8002c70:	e7d0      	b.n	8002c14 <_malloc_r+0x20>
 8002c72:	428c      	cmp	r4, r1
 8002c74:	684b      	ldr	r3, [r1, #4]
 8002c76:	bf16      	itet	ne
 8002c78:	6063      	strne	r3, [r4, #4]
 8002c7a:	6013      	streq	r3, [r2, #0]
 8002c7c:	460c      	movne	r4, r1
 8002c7e:	e7eb      	b.n	8002c58 <_malloc_r+0x64>
 8002c80:	460c      	mov	r4, r1
 8002c82:	6849      	ldr	r1, [r1, #4]
 8002c84:	e7cc      	b.n	8002c20 <_malloc_r+0x2c>
 8002c86:	1cc4      	adds	r4, r0, #3
 8002c88:	f024 0403 	bic.w	r4, r4, #3
 8002c8c:	42a0      	cmp	r0, r4
 8002c8e:	d005      	beq.n	8002c9c <_malloc_r+0xa8>
 8002c90:	1a21      	subs	r1, r4, r0
 8002c92:	4630      	mov	r0, r6
 8002c94:	f000 fad0 	bl	8003238 <_sbrk_r>
 8002c98:	3001      	adds	r0, #1
 8002c9a:	d0cf      	beq.n	8002c3c <_malloc_r+0x48>
 8002c9c:	6025      	str	r5, [r4, #0]
 8002c9e:	e7db      	b.n	8002c58 <_malloc_r+0x64>
 8002ca0:	20000094 	.word	0x20000094
 8002ca4:	20000098 	.word	0x20000098

08002ca8 <__sfputc_r>:
 8002ca8:	6893      	ldr	r3, [r2, #8]
 8002caa:	3b01      	subs	r3, #1
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	b410      	push	{r4}
 8002cb0:	6093      	str	r3, [r2, #8]
 8002cb2:	da08      	bge.n	8002cc6 <__sfputc_r+0x1e>
 8002cb4:	6994      	ldr	r4, [r2, #24]
 8002cb6:	42a3      	cmp	r3, r4
 8002cb8:	db01      	blt.n	8002cbe <__sfputc_r+0x16>
 8002cba:	290a      	cmp	r1, #10
 8002cbc:	d103      	bne.n	8002cc6 <__sfputc_r+0x1e>
 8002cbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002cc2:	f7ff bcab 	b.w	800261c <__swbuf_r>
 8002cc6:	6813      	ldr	r3, [r2, #0]
 8002cc8:	1c58      	adds	r0, r3, #1
 8002cca:	6010      	str	r0, [r2, #0]
 8002ccc:	7019      	strb	r1, [r3, #0]
 8002cce:	4608      	mov	r0, r1
 8002cd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <__sfputs_r>:
 8002cd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cd8:	4606      	mov	r6, r0
 8002cda:	460f      	mov	r7, r1
 8002cdc:	4614      	mov	r4, r2
 8002cde:	18d5      	adds	r5, r2, r3
 8002ce0:	42ac      	cmp	r4, r5
 8002ce2:	d101      	bne.n	8002ce8 <__sfputs_r+0x12>
 8002ce4:	2000      	movs	r0, #0
 8002ce6:	e007      	b.n	8002cf8 <__sfputs_r+0x22>
 8002ce8:	463a      	mov	r2, r7
 8002cea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cee:	4630      	mov	r0, r6
 8002cf0:	f7ff ffda 	bl	8002ca8 <__sfputc_r>
 8002cf4:	1c43      	adds	r3, r0, #1
 8002cf6:	d1f3      	bne.n	8002ce0 <__sfputs_r+0xa>
 8002cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002cfc <_vfiprintf_r>:
 8002cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d00:	460c      	mov	r4, r1
 8002d02:	b09d      	sub	sp, #116	; 0x74
 8002d04:	4617      	mov	r7, r2
 8002d06:	461d      	mov	r5, r3
 8002d08:	4606      	mov	r6, r0
 8002d0a:	b118      	cbz	r0, 8002d14 <_vfiprintf_r+0x18>
 8002d0c:	6983      	ldr	r3, [r0, #24]
 8002d0e:	b90b      	cbnz	r3, 8002d14 <_vfiprintf_r+0x18>
 8002d10:	f7ff fe34 	bl	800297c <__sinit>
 8002d14:	4b7c      	ldr	r3, [pc, #496]	; (8002f08 <_vfiprintf_r+0x20c>)
 8002d16:	429c      	cmp	r4, r3
 8002d18:	d158      	bne.n	8002dcc <_vfiprintf_r+0xd0>
 8002d1a:	6874      	ldr	r4, [r6, #4]
 8002d1c:	89a3      	ldrh	r3, [r4, #12]
 8002d1e:	0718      	lsls	r0, r3, #28
 8002d20:	d55e      	bpl.n	8002de0 <_vfiprintf_r+0xe4>
 8002d22:	6923      	ldr	r3, [r4, #16]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d05b      	beq.n	8002de0 <_vfiprintf_r+0xe4>
 8002d28:	2300      	movs	r3, #0
 8002d2a:	9309      	str	r3, [sp, #36]	; 0x24
 8002d2c:	2320      	movs	r3, #32
 8002d2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d32:	2330      	movs	r3, #48	; 0x30
 8002d34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d38:	9503      	str	r5, [sp, #12]
 8002d3a:	f04f 0b01 	mov.w	fp, #1
 8002d3e:	46b8      	mov	r8, r7
 8002d40:	4645      	mov	r5, r8
 8002d42:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002d46:	b10b      	cbz	r3, 8002d4c <_vfiprintf_r+0x50>
 8002d48:	2b25      	cmp	r3, #37	; 0x25
 8002d4a:	d154      	bne.n	8002df6 <_vfiprintf_r+0xfa>
 8002d4c:	ebb8 0a07 	subs.w	sl, r8, r7
 8002d50:	d00b      	beq.n	8002d6a <_vfiprintf_r+0x6e>
 8002d52:	4653      	mov	r3, sl
 8002d54:	463a      	mov	r2, r7
 8002d56:	4621      	mov	r1, r4
 8002d58:	4630      	mov	r0, r6
 8002d5a:	f7ff ffbc 	bl	8002cd6 <__sfputs_r>
 8002d5e:	3001      	adds	r0, #1
 8002d60:	f000 80c2 	beq.w	8002ee8 <_vfiprintf_r+0x1ec>
 8002d64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d66:	4453      	add	r3, sl
 8002d68:	9309      	str	r3, [sp, #36]	; 0x24
 8002d6a:	f898 3000 	ldrb.w	r3, [r8]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f000 80ba 	beq.w	8002ee8 <_vfiprintf_r+0x1ec>
 8002d74:	2300      	movs	r3, #0
 8002d76:	f04f 32ff 	mov.w	r2, #4294967295
 8002d7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d7e:	9304      	str	r3, [sp, #16]
 8002d80:	9307      	str	r3, [sp, #28]
 8002d82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002d86:	931a      	str	r3, [sp, #104]	; 0x68
 8002d88:	46a8      	mov	r8, r5
 8002d8a:	2205      	movs	r2, #5
 8002d8c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8002d90:	485e      	ldr	r0, [pc, #376]	; (8002f0c <_vfiprintf_r+0x210>)
 8002d92:	f7fd fa1d 	bl	80001d0 <memchr>
 8002d96:	9b04      	ldr	r3, [sp, #16]
 8002d98:	bb78      	cbnz	r0, 8002dfa <_vfiprintf_r+0xfe>
 8002d9a:	06d9      	lsls	r1, r3, #27
 8002d9c:	bf44      	itt	mi
 8002d9e:	2220      	movmi	r2, #32
 8002da0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002da4:	071a      	lsls	r2, r3, #28
 8002da6:	bf44      	itt	mi
 8002da8:	222b      	movmi	r2, #43	; 0x2b
 8002daa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002dae:	782a      	ldrb	r2, [r5, #0]
 8002db0:	2a2a      	cmp	r2, #42	; 0x2a
 8002db2:	d02a      	beq.n	8002e0a <_vfiprintf_r+0x10e>
 8002db4:	9a07      	ldr	r2, [sp, #28]
 8002db6:	46a8      	mov	r8, r5
 8002db8:	2000      	movs	r0, #0
 8002dba:	250a      	movs	r5, #10
 8002dbc:	4641      	mov	r1, r8
 8002dbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002dc2:	3b30      	subs	r3, #48	; 0x30
 8002dc4:	2b09      	cmp	r3, #9
 8002dc6:	d969      	bls.n	8002e9c <_vfiprintf_r+0x1a0>
 8002dc8:	b360      	cbz	r0, 8002e24 <_vfiprintf_r+0x128>
 8002dca:	e024      	b.n	8002e16 <_vfiprintf_r+0x11a>
 8002dcc:	4b50      	ldr	r3, [pc, #320]	; (8002f10 <_vfiprintf_r+0x214>)
 8002dce:	429c      	cmp	r4, r3
 8002dd0:	d101      	bne.n	8002dd6 <_vfiprintf_r+0xda>
 8002dd2:	68b4      	ldr	r4, [r6, #8]
 8002dd4:	e7a2      	b.n	8002d1c <_vfiprintf_r+0x20>
 8002dd6:	4b4f      	ldr	r3, [pc, #316]	; (8002f14 <_vfiprintf_r+0x218>)
 8002dd8:	429c      	cmp	r4, r3
 8002dda:	bf08      	it	eq
 8002ddc:	68f4      	ldreq	r4, [r6, #12]
 8002dde:	e79d      	b.n	8002d1c <_vfiprintf_r+0x20>
 8002de0:	4621      	mov	r1, r4
 8002de2:	4630      	mov	r0, r6
 8002de4:	f7ff fc6c 	bl	80026c0 <__swsetup_r>
 8002de8:	2800      	cmp	r0, #0
 8002dea:	d09d      	beq.n	8002d28 <_vfiprintf_r+0x2c>
 8002dec:	f04f 30ff 	mov.w	r0, #4294967295
 8002df0:	b01d      	add	sp, #116	; 0x74
 8002df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002df6:	46a8      	mov	r8, r5
 8002df8:	e7a2      	b.n	8002d40 <_vfiprintf_r+0x44>
 8002dfa:	4a44      	ldr	r2, [pc, #272]	; (8002f0c <_vfiprintf_r+0x210>)
 8002dfc:	1a80      	subs	r0, r0, r2
 8002dfe:	fa0b f000 	lsl.w	r0, fp, r0
 8002e02:	4318      	orrs	r0, r3
 8002e04:	9004      	str	r0, [sp, #16]
 8002e06:	4645      	mov	r5, r8
 8002e08:	e7be      	b.n	8002d88 <_vfiprintf_r+0x8c>
 8002e0a:	9a03      	ldr	r2, [sp, #12]
 8002e0c:	1d11      	adds	r1, r2, #4
 8002e0e:	6812      	ldr	r2, [r2, #0]
 8002e10:	9103      	str	r1, [sp, #12]
 8002e12:	2a00      	cmp	r2, #0
 8002e14:	db01      	blt.n	8002e1a <_vfiprintf_r+0x11e>
 8002e16:	9207      	str	r2, [sp, #28]
 8002e18:	e004      	b.n	8002e24 <_vfiprintf_r+0x128>
 8002e1a:	4252      	negs	r2, r2
 8002e1c:	f043 0302 	orr.w	r3, r3, #2
 8002e20:	9207      	str	r2, [sp, #28]
 8002e22:	9304      	str	r3, [sp, #16]
 8002e24:	f898 3000 	ldrb.w	r3, [r8]
 8002e28:	2b2e      	cmp	r3, #46	; 0x2e
 8002e2a:	d10e      	bne.n	8002e4a <_vfiprintf_r+0x14e>
 8002e2c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002e30:	2b2a      	cmp	r3, #42	; 0x2a
 8002e32:	d138      	bne.n	8002ea6 <_vfiprintf_r+0x1aa>
 8002e34:	9b03      	ldr	r3, [sp, #12]
 8002e36:	1d1a      	adds	r2, r3, #4
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	9203      	str	r2, [sp, #12]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	bfb8      	it	lt
 8002e40:	f04f 33ff 	movlt.w	r3, #4294967295
 8002e44:	f108 0802 	add.w	r8, r8, #2
 8002e48:	9305      	str	r3, [sp, #20]
 8002e4a:	4d33      	ldr	r5, [pc, #204]	; (8002f18 <_vfiprintf_r+0x21c>)
 8002e4c:	f898 1000 	ldrb.w	r1, [r8]
 8002e50:	2203      	movs	r2, #3
 8002e52:	4628      	mov	r0, r5
 8002e54:	f7fd f9bc 	bl	80001d0 <memchr>
 8002e58:	b140      	cbz	r0, 8002e6c <_vfiprintf_r+0x170>
 8002e5a:	2340      	movs	r3, #64	; 0x40
 8002e5c:	1b40      	subs	r0, r0, r5
 8002e5e:	fa03 f000 	lsl.w	r0, r3, r0
 8002e62:	9b04      	ldr	r3, [sp, #16]
 8002e64:	4303      	orrs	r3, r0
 8002e66:	f108 0801 	add.w	r8, r8, #1
 8002e6a:	9304      	str	r3, [sp, #16]
 8002e6c:	f898 1000 	ldrb.w	r1, [r8]
 8002e70:	482a      	ldr	r0, [pc, #168]	; (8002f1c <_vfiprintf_r+0x220>)
 8002e72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002e76:	2206      	movs	r2, #6
 8002e78:	f108 0701 	add.w	r7, r8, #1
 8002e7c:	f7fd f9a8 	bl	80001d0 <memchr>
 8002e80:	2800      	cmp	r0, #0
 8002e82:	d037      	beq.n	8002ef4 <_vfiprintf_r+0x1f8>
 8002e84:	4b26      	ldr	r3, [pc, #152]	; (8002f20 <_vfiprintf_r+0x224>)
 8002e86:	bb1b      	cbnz	r3, 8002ed0 <_vfiprintf_r+0x1d4>
 8002e88:	9b03      	ldr	r3, [sp, #12]
 8002e8a:	3307      	adds	r3, #7
 8002e8c:	f023 0307 	bic.w	r3, r3, #7
 8002e90:	3308      	adds	r3, #8
 8002e92:	9303      	str	r3, [sp, #12]
 8002e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e96:	444b      	add	r3, r9
 8002e98:	9309      	str	r3, [sp, #36]	; 0x24
 8002e9a:	e750      	b.n	8002d3e <_vfiprintf_r+0x42>
 8002e9c:	fb05 3202 	mla	r2, r5, r2, r3
 8002ea0:	2001      	movs	r0, #1
 8002ea2:	4688      	mov	r8, r1
 8002ea4:	e78a      	b.n	8002dbc <_vfiprintf_r+0xc0>
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	f108 0801 	add.w	r8, r8, #1
 8002eac:	9305      	str	r3, [sp, #20]
 8002eae:	4619      	mov	r1, r3
 8002eb0:	250a      	movs	r5, #10
 8002eb2:	4640      	mov	r0, r8
 8002eb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002eb8:	3a30      	subs	r2, #48	; 0x30
 8002eba:	2a09      	cmp	r2, #9
 8002ebc:	d903      	bls.n	8002ec6 <_vfiprintf_r+0x1ca>
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d0c3      	beq.n	8002e4a <_vfiprintf_r+0x14e>
 8002ec2:	9105      	str	r1, [sp, #20]
 8002ec4:	e7c1      	b.n	8002e4a <_vfiprintf_r+0x14e>
 8002ec6:	fb05 2101 	mla	r1, r5, r1, r2
 8002eca:	2301      	movs	r3, #1
 8002ecc:	4680      	mov	r8, r0
 8002ece:	e7f0      	b.n	8002eb2 <_vfiprintf_r+0x1b6>
 8002ed0:	ab03      	add	r3, sp, #12
 8002ed2:	9300      	str	r3, [sp, #0]
 8002ed4:	4622      	mov	r2, r4
 8002ed6:	4b13      	ldr	r3, [pc, #76]	; (8002f24 <_vfiprintf_r+0x228>)
 8002ed8:	a904      	add	r1, sp, #16
 8002eda:	4630      	mov	r0, r6
 8002edc:	f3af 8000 	nop.w
 8002ee0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002ee4:	4681      	mov	r9, r0
 8002ee6:	d1d5      	bne.n	8002e94 <_vfiprintf_r+0x198>
 8002ee8:	89a3      	ldrh	r3, [r4, #12]
 8002eea:	065b      	lsls	r3, r3, #25
 8002eec:	f53f af7e 	bmi.w	8002dec <_vfiprintf_r+0xf0>
 8002ef0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002ef2:	e77d      	b.n	8002df0 <_vfiprintf_r+0xf4>
 8002ef4:	ab03      	add	r3, sp, #12
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	4622      	mov	r2, r4
 8002efa:	4b0a      	ldr	r3, [pc, #40]	; (8002f24 <_vfiprintf_r+0x228>)
 8002efc:	a904      	add	r1, sp, #16
 8002efe:	4630      	mov	r0, r6
 8002f00:	f000 f888 	bl	8003014 <_printf_i>
 8002f04:	e7ec      	b.n	8002ee0 <_vfiprintf_r+0x1e4>
 8002f06:	bf00      	nop
 8002f08:	080034c8 	.word	0x080034c8
 8002f0c:	08003508 	.word	0x08003508
 8002f10:	080034e8 	.word	0x080034e8
 8002f14:	080034a8 	.word	0x080034a8
 8002f18:	0800350e 	.word	0x0800350e
 8002f1c:	08003512 	.word	0x08003512
 8002f20:	00000000 	.word	0x00000000
 8002f24:	08002cd7 	.word	0x08002cd7

08002f28 <_printf_common>:
 8002f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f2c:	4691      	mov	r9, r2
 8002f2e:	461f      	mov	r7, r3
 8002f30:	688a      	ldr	r2, [r1, #8]
 8002f32:	690b      	ldr	r3, [r1, #16]
 8002f34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	bfb8      	it	lt
 8002f3c:	4613      	movlt	r3, r2
 8002f3e:	f8c9 3000 	str.w	r3, [r9]
 8002f42:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002f46:	4606      	mov	r6, r0
 8002f48:	460c      	mov	r4, r1
 8002f4a:	b112      	cbz	r2, 8002f52 <_printf_common+0x2a>
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	f8c9 3000 	str.w	r3, [r9]
 8002f52:	6823      	ldr	r3, [r4, #0]
 8002f54:	0699      	lsls	r1, r3, #26
 8002f56:	bf42      	ittt	mi
 8002f58:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002f5c:	3302      	addmi	r3, #2
 8002f5e:	f8c9 3000 	strmi.w	r3, [r9]
 8002f62:	6825      	ldr	r5, [r4, #0]
 8002f64:	f015 0506 	ands.w	r5, r5, #6
 8002f68:	d107      	bne.n	8002f7a <_printf_common+0x52>
 8002f6a:	f104 0a19 	add.w	sl, r4, #25
 8002f6e:	68e3      	ldr	r3, [r4, #12]
 8002f70:	f8d9 2000 	ldr.w	r2, [r9]
 8002f74:	1a9b      	subs	r3, r3, r2
 8002f76:	42ab      	cmp	r3, r5
 8002f78:	dc28      	bgt.n	8002fcc <_printf_common+0xa4>
 8002f7a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002f7e:	6822      	ldr	r2, [r4, #0]
 8002f80:	3300      	adds	r3, #0
 8002f82:	bf18      	it	ne
 8002f84:	2301      	movne	r3, #1
 8002f86:	0692      	lsls	r2, r2, #26
 8002f88:	d42d      	bmi.n	8002fe6 <_printf_common+0xbe>
 8002f8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f8e:	4639      	mov	r1, r7
 8002f90:	4630      	mov	r0, r6
 8002f92:	47c0      	blx	r8
 8002f94:	3001      	adds	r0, #1
 8002f96:	d020      	beq.n	8002fda <_printf_common+0xb2>
 8002f98:	6823      	ldr	r3, [r4, #0]
 8002f9a:	68e5      	ldr	r5, [r4, #12]
 8002f9c:	f8d9 2000 	ldr.w	r2, [r9]
 8002fa0:	f003 0306 	and.w	r3, r3, #6
 8002fa4:	2b04      	cmp	r3, #4
 8002fa6:	bf08      	it	eq
 8002fa8:	1aad      	subeq	r5, r5, r2
 8002faa:	68a3      	ldr	r3, [r4, #8]
 8002fac:	6922      	ldr	r2, [r4, #16]
 8002fae:	bf0c      	ite	eq
 8002fb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002fb4:	2500      	movne	r5, #0
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	bfc4      	itt	gt
 8002fba:	1a9b      	subgt	r3, r3, r2
 8002fbc:	18ed      	addgt	r5, r5, r3
 8002fbe:	f04f 0900 	mov.w	r9, #0
 8002fc2:	341a      	adds	r4, #26
 8002fc4:	454d      	cmp	r5, r9
 8002fc6:	d11a      	bne.n	8002ffe <_printf_common+0xd6>
 8002fc8:	2000      	movs	r0, #0
 8002fca:	e008      	b.n	8002fde <_printf_common+0xb6>
 8002fcc:	2301      	movs	r3, #1
 8002fce:	4652      	mov	r2, sl
 8002fd0:	4639      	mov	r1, r7
 8002fd2:	4630      	mov	r0, r6
 8002fd4:	47c0      	blx	r8
 8002fd6:	3001      	adds	r0, #1
 8002fd8:	d103      	bne.n	8002fe2 <_printf_common+0xba>
 8002fda:	f04f 30ff 	mov.w	r0, #4294967295
 8002fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fe2:	3501      	adds	r5, #1
 8002fe4:	e7c3      	b.n	8002f6e <_printf_common+0x46>
 8002fe6:	18e1      	adds	r1, r4, r3
 8002fe8:	1c5a      	adds	r2, r3, #1
 8002fea:	2030      	movs	r0, #48	; 0x30
 8002fec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002ff0:	4422      	add	r2, r4
 8002ff2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002ff6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002ffa:	3302      	adds	r3, #2
 8002ffc:	e7c5      	b.n	8002f8a <_printf_common+0x62>
 8002ffe:	2301      	movs	r3, #1
 8003000:	4622      	mov	r2, r4
 8003002:	4639      	mov	r1, r7
 8003004:	4630      	mov	r0, r6
 8003006:	47c0      	blx	r8
 8003008:	3001      	adds	r0, #1
 800300a:	d0e6      	beq.n	8002fda <_printf_common+0xb2>
 800300c:	f109 0901 	add.w	r9, r9, #1
 8003010:	e7d8      	b.n	8002fc4 <_printf_common+0x9c>
	...

08003014 <_printf_i>:
 8003014:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003018:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800301c:	460c      	mov	r4, r1
 800301e:	7e09      	ldrb	r1, [r1, #24]
 8003020:	b085      	sub	sp, #20
 8003022:	296e      	cmp	r1, #110	; 0x6e
 8003024:	4617      	mov	r7, r2
 8003026:	4606      	mov	r6, r0
 8003028:	4698      	mov	r8, r3
 800302a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800302c:	f000 80b3 	beq.w	8003196 <_printf_i+0x182>
 8003030:	d822      	bhi.n	8003078 <_printf_i+0x64>
 8003032:	2963      	cmp	r1, #99	; 0x63
 8003034:	d036      	beq.n	80030a4 <_printf_i+0x90>
 8003036:	d80a      	bhi.n	800304e <_printf_i+0x3a>
 8003038:	2900      	cmp	r1, #0
 800303a:	f000 80b9 	beq.w	80031b0 <_printf_i+0x19c>
 800303e:	2958      	cmp	r1, #88	; 0x58
 8003040:	f000 8083 	beq.w	800314a <_printf_i+0x136>
 8003044:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003048:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800304c:	e032      	b.n	80030b4 <_printf_i+0xa0>
 800304e:	2964      	cmp	r1, #100	; 0x64
 8003050:	d001      	beq.n	8003056 <_printf_i+0x42>
 8003052:	2969      	cmp	r1, #105	; 0x69
 8003054:	d1f6      	bne.n	8003044 <_printf_i+0x30>
 8003056:	6820      	ldr	r0, [r4, #0]
 8003058:	6813      	ldr	r3, [r2, #0]
 800305a:	0605      	lsls	r5, r0, #24
 800305c:	f103 0104 	add.w	r1, r3, #4
 8003060:	d52a      	bpl.n	80030b8 <_printf_i+0xa4>
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6011      	str	r1, [r2, #0]
 8003066:	2b00      	cmp	r3, #0
 8003068:	da03      	bge.n	8003072 <_printf_i+0x5e>
 800306a:	222d      	movs	r2, #45	; 0x2d
 800306c:	425b      	negs	r3, r3
 800306e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003072:	486f      	ldr	r0, [pc, #444]	; (8003230 <_printf_i+0x21c>)
 8003074:	220a      	movs	r2, #10
 8003076:	e039      	b.n	80030ec <_printf_i+0xd8>
 8003078:	2973      	cmp	r1, #115	; 0x73
 800307a:	f000 809d 	beq.w	80031b8 <_printf_i+0x1a4>
 800307e:	d808      	bhi.n	8003092 <_printf_i+0x7e>
 8003080:	296f      	cmp	r1, #111	; 0x6f
 8003082:	d020      	beq.n	80030c6 <_printf_i+0xb2>
 8003084:	2970      	cmp	r1, #112	; 0x70
 8003086:	d1dd      	bne.n	8003044 <_printf_i+0x30>
 8003088:	6823      	ldr	r3, [r4, #0]
 800308a:	f043 0320 	orr.w	r3, r3, #32
 800308e:	6023      	str	r3, [r4, #0]
 8003090:	e003      	b.n	800309a <_printf_i+0x86>
 8003092:	2975      	cmp	r1, #117	; 0x75
 8003094:	d017      	beq.n	80030c6 <_printf_i+0xb2>
 8003096:	2978      	cmp	r1, #120	; 0x78
 8003098:	d1d4      	bne.n	8003044 <_printf_i+0x30>
 800309a:	2378      	movs	r3, #120	; 0x78
 800309c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80030a0:	4864      	ldr	r0, [pc, #400]	; (8003234 <_printf_i+0x220>)
 80030a2:	e055      	b.n	8003150 <_printf_i+0x13c>
 80030a4:	6813      	ldr	r3, [r2, #0]
 80030a6:	1d19      	adds	r1, r3, #4
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6011      	str	r1, [r2, #0]
 80030ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80030b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80030b4:	2301      	movs	r3, #1
 80030b6:	e08c      	b.n	80031d2 <_printf_i+0x1be>
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6011      	str	r1, [r2, #0]
 80030bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80030c0:	bf18      	it	ne
 80030c2:	b21b      	sxthne	r3, r3
 80030c4:	e7cf      	b.n	8003066 <_printf_i+0x52>
 80030c6:	6813      	ldr	r3, [r2, #0]
 80030c8:	6825      	ldr	r5, [r4, #0]
 80030ca:	1d18      	adds	r0, r3, #4
 80030cc:	6010      	str	r0, [r2, #0]
 80030ce:	0628      	lsls	r0, r5, #24
 80030d0:	d501      	bpl.n	80030d6 <_printf_i+0xc2>
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	e002      	b.n	80030dc <_printf_i+0xc8>
 80030d6:	0668      	lsls	r0, r5, #25
 80030d8:	d5fb      	bpl.n	80030d2 <_printf_i+0xbe>
 80030da:	881b      	ldrh	r3, [r3, #0]
 80030dc:	4854      	ldr	r0, [pc, #336]	; (8003230 <_printf_i+0x21c>)
 80030de:	296f      	cmp	r1, #111	; 0x6f
 80030e0:	bf14      	ite	ne
 80030e2:	220a      	movne	r2, #10
 80030e4:	2208      	moveq	r2, #8
 80030e6:	2100      	movs	r1, #0
 80030e8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80030ec:	6865      	ldr	r5, [r4, #4]
 80030ee:	60a5      	str	r5, [r4, #8]
 80030f0:	2d00      	cmp	r5, #0
 80030f2:	f2c0 8095 	blt.w	8003220 <_printf_i+0x20c>
 80030f6:	6821      	ldr	r1, [r4, #0]
 80030f8:	f021 0104 	bic.w	r1, r1, #4
 80030fc:	6021      	str	r1, [r4, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d13d      	bne.n	800317e <_printf_i+0x16a>
 8003102:	2d00      	cmp	r5, #0
 8003104:	f040 808e 	bne.w	8003224 <_printf_i+0x210>
 8003108:	4665      	mov	r5, ip
 800310a:	2a08      	cmp	r2, #8
 800310c:	d10b      	bne.n	8003126 <_printf_i+0x112>
 800310e:	6823      	ldr	r3, [r4, #0]
 8003110:	07db      	lsls	r3, r3, #31
 8003112:	d508      	bpl.n	8003126 <_printf_i+0x112>
 8003114:	6923      	ldr	r3, [r4, #16]
 8003116:	6862      	ldr	r2, [r4, #4]
 8003118:	429a      	cmp	r2, r3
 800311a:	bfde      	ittt	le
 800311c:	2330      	movle	r3, #48	; 0x30
 800311e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003122:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003126:	ebac 0305 	sub.w	r3, ip, r5
 800312a:	6123      	str	r3, [r4, #16]
 800312c:	f8cd 8000 	str.w	r8, [sp]
 8003130:	463b      	mov	r3, r7
 8003132:	aa03      	add	r2, sp, #12
 8003134:	4621      	mov	r1, r4
 8003136:	4630      	mov	r0, r6
 8003138:	f7ff fef6 	bl	8002f28 <_printf_common>
 800313c:	3001      	adds	r0, #1
 800313e:	d14d      	bne.n	80031dc <_printf_i+0x1c8>
 8003140:	f04f 30ff 	mov.w	r0, #4294967295
 8003144:	b005      	add	sp, #20
 8003146:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800314a:	4839      	ldr	r0, [pc, #228]	; (8003230 <_printf_i+0x21c>)
 800314c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003150:	6813      	ldr	r3, [r2, #0]
 8003152:	6821      	ldr	r1, [r4, #0]
 8003154:	1d1d      	adds	r5, r3, #4
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6015      	str	r5, [r2, #0]
 800315a:	060a      	lsls	r2, r1, #24
 800315c:	d50b      	bpl.n	8003176 <_printf_i+0x162>
 800315e:	07ca      	lsls	r2, r1, #31
 8003160:	bf44      	itt	mi
 8003162:	f041 0120 	orrmi.w	r1, r1, #32
 8003166:	6021      	strmi	r1, [r4, #0]
 8003168:	b91b      	cbnz	r3, 8003172 <_printf_i+0x15e>
 800316a:	6822      	ldr	r2, [r4, #0]
 800316c:	f022 0220 	bic.w	r2, r2, #32
 8003170:	6022      	str	r2, [r4, #0]
 8003172:	2210      	movs	r2, #16
 8003174:	e7b7      	b.n	80030e6 <_printf_i+0xd2>
 8003176:	064d      	lsls	r5, r1, #25
 8003178:	bf48      	it	mi
 800317a:	b29b      	uxthmi	r3, r3
 800317c:	e7ef      	b.n	800315e <_printf_i+0x14a>
 800317e:	4665      	mov	r5, ip
 8003180:	fbb3 f1f2 	udiv	r1, r3, r2
 8003184:	fb02 3311 	mls	r3, r2, r1, r3
 8003188:	5cc3      	ldrb	r3, [r0, r3]
 800318a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800318e:	460b      	mov	r3, r1
 8003190:	2900      	cmp	r1, #0
 8003192:	d1f5      	bne.n	8003180 <_printf_i+0x16c>
 8003194:	e7b9      	b.n	800310a <_printf_i+0xf6>
 8003196:	6813      	ldr	r3, [r2, #0]
 8003198:	6825      	ldr	r5, [r4, #0]
 800319a:	6961      	ldr	r1, [r4, #20]
 800319c:	1d18      	adds	r0, r3, #4
 800319e:	6010      	str	r0, [r2, #0]
 80031a0:	0628      	lsls	r0, r5, #24
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	d501      	bpl.n	80031aa <_printf_i+0x196>
 80031a6:	6019      	str	r1, [r3, #0]
 80031a8:	e002      	b.n	80031b0 <_printf_i+0x19c>
 80031aa:	066a      	lsls	r2, r5, #25
 80031ac:	d5fb      	bpl.n	80031a6 <_printf_i+0x192>
 80031ae:	8019      	strh	r1, [r3, #0]
 80031b0:	2300      	movs	r3, #0
 80031b2:	6123      	str	r3, [r4, #16]
 80031b4:	4665      	mov	r5, ip
 80031b6:	e7b9      	b.n	800312c <_printf_i+0x118>
 80031b8:	6813      	ldr	r3, [r2, #0]
 80031ba:	1d19      	adds	r1, r3, #4
 80031bc:	6011      	str	r1, [r2, #0]
 80031be:	681d      	ldr	r5, [r3, #0]
 80031c0:	6862      	ldr	r2, [r4, #4]
 80031c2:	2100      	movs	r1, #0
 80031c4:	4628      	mov	r0, r5
 80031c6:	f7fd f803 	bl	80001d0 <memchr>
 80031ca:	b108      	cbz	r0, 80031d0 <_printf_i+0x1bc>
 80031cc:	1b40      	subs	r0, r0, r5
 80031ce:	6060      	str	r0, [r4, #4]
 80031d0:	6863      	ldr	r3, [r4, #4]
 80031d2:	6123      	str	r3, [r4, #16]
 80031d4:	2300      	movs	r3, #0
 80031d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031da:	e7a7      	b.n	800312c <_printf_i+0x118>
 80031dc:	6923      	ldr	r3, [r4, #16]
 80031de:	462a      	mov	r2, r5
 80031e0:	4639      	mov	r1, r7
 80031e2:	4630      	mov	r0, r6
 80031e4:	47c0      	blx	r8
 80031e6:	3001      	adds	r0, #1
 80031e8:	d0aa      	beq.n	8003140 <_printf_i+0x12c>
 80031ea:	6823      	ldr	r3, [r4, #0]
 80031ec:	079b      	lsls	r3, r3, #30
 80031ee:	d413      	bmi.n	8003218 <_printf_i+0x204>
 80031f0:	68e0      	ldr	r0, [r4, #12]
 80031f2:	9b03      	ldr	r3, [sp, #12]
 80031f4:	4298      	cmp	r0, r3
 80031f6:	bfb8      	it	lt
 80031f8:	4618      	movlt	r0, r3
 80031fa:	e7a3      	b.n	8003144 <_printf_i+0x130>
 80031fc:	2301      	movs	r3, #1
 80031fe:	464a      	mov	r2, r9
 8003200:	4639      	mov	r1, r7
 8003202:	4630      	mov	r0, r6
 8003204:	47c0      	blx	r8
 8003206:	3001      	adds	r0, #1
 8003208:	d09a      	beq.n	8003140 <_printf_i+0x12c>
 800320a:	3501      	adds	r5, #1
 800320c:	68e3      	ldr	r3, [r4, #12]
 800320e:	9a03      	ldr	r2, [sp, #12]
 8003210:	1a9b      	subs	r3, r3, r2
 8003212:	42ab      	cmp	r3, r5
 8003214:	dcf2      	bgt.n	80031fc <_printf_i+0x1e8>
 8003216:	e7eb      	b.n	80031f0 <_printf_i+0x1dc>
 8003218:	2500      	movs	r5, #0
 800321a:	f104 0919 	add.w	r9, r4, #25
 800321e:	e7f5      	b.n	800320c <_printf_i+0x1f8>
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1ac      	bne.n	800317e <_printf_i+0x16a>
 8003224:	7803      	ldrb	r3, [r0, #0]
 8003226:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800322a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800322e:	e76c      	b.n	800310a <_printf_i+0xf6>
 8003230:	08003519 	.word	0x08003519
 8003234:	0800352a 	.word	0x0800352a

08003238 <_sbrk_r>:
 8003238:	b538      	push	{r3, r4, r5, lr}
 800323a:	4c06      	ldr	r4, [pc, #24]	; (8003254 <_sbrk_r+0x1c>)
 800323c:	2300      	movs	r3, #0
 800323e:	4605      	mov	r5, r0
 8003240:	4608      	mov	r0, r1
 8003242:	6023      	str	r3, [r4, #0]
 8003244:	f7fd fbf6 	bl	8000a34 <_sbrk>
 8003248:	1c43      	adds	r3, r0, #1
 800324a:	d102      	bne.n	8003252 <_sbrk_r+0x1a>
 800324c:	6823      	ldr	r3, [r4, #0]
 800324e:	b103      	cbz	r3, 8003252 <_sbrk_r+0x1a>
 8003250:	602b      	str	r3, [r5, #0]
 8003252:	bd38      	pop	{r3, r4, r5, pc}
 8003254:	200000f8 	.word	0x200000f8

08003258 <__sread>:
 8003258:	b510      	push	{r4, lr}
 800325a:	460c      	mov	r4, r1
 800325c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003260:	f000 f896 	bl	8003390 <_read_r>
 8003264:	2800      	cmp	r0, #0
 8003266:	bfab      	itete	ge
 8003268:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800326a:	89a3      	ldrhlt	r3, [r4, #12]
 800326c:	181b      	addge	r3, r3, r0
 800326e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003272:	bfac      	ite	ge
 8003274:	6563      	strge	r3, [r4, #84]	; 0x54
 8003276:	81a3      	strhlt	r3, [r4, #12]
 8003278:	bd10      	pop	{r4, pc}

0800327a <__swrite>:
 800327a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800327e:	461f      	mov	r7, r3
 8003280:	898b      	ldrh	r3, [r1, #12]
 8003282:	05db      	lsls	r3, r3, #23
 8003284:	4605      	mov	r5, r0
 8003286:	460c      	mov	r4, r1
 8003288:	4616      	mov	r6, r2
 800328a:	d505      	bpl.n	8003298 <__swrite+0x1e>
 800328c:	2302      	movs	r3, #2
 800328e:	2200      	movs	r2, #0
 8003290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003294:	f000 f868 	bl	8003368 <_lseek_r>
 8003298:	89a3      	ldrh	r3, [r4, #12]
 800329a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800329e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032a2:	81a3      	strh	r3, [r4, #12]
 80032a4:	4632      	mov	r2, r6
 80032a6:	463b      	mov	r3, r7
 80032a8:	4628      	mov	r0, r5
 80032aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80032ae:	f000 b817 	b.w	80032e0 <_write_r>

080032b2 <__sseek>:
 80032b2:	b510      	push	{r4, lr}
 80032b4:	460c      	mov	r4, r1
 80032b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032ba:	f000 f855 	bl	8003368 <_lseek_r>
 80032be:	1c43      	adds	r3, r0, #1
 80032c0:	89a3      	ldrh	r3, [r4, #12]
 80032c2:	bf15      	itete	ne
 80032c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80032c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80032ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80032ce:	81a3      	strheq	r3, [r4, #12]
 80032d0:	bf18      	it	ne
 80032d2:	81a3      	strhne	r3, [r4, #12]
 80032d4:	bd10      	pop	{r4, pc}

080032d6 <__sclose>:
 80032d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032da:	f000 b813 	b.w	8003304 <_close_r>
	...

080032e0 <_write_r>:
 80032e0:	b538      	push	{r3, r4, r5, lr}
 80032e2:	4c07      	ldr	r4, [pc, #28]	; (8003300 <_write_r+0x20>)
 80032e4:	4605      	mov	r5, r0
 80032e6:	4608      	mov	r0, r1
 80032e8:	4611      	mov	r1, r2
 80032ea:	2200      	movs	r2, #0
 80032ec:	6022      	str	r2, [r4, #0]
 80032ee:	461a      	mov	r2, r3
 80032f0:	f7fd fa44 	bl	800077c <_write>
 80032f4:	1c43      	adds	r3, r0, #1
 80032f6:	d102      	bne.n	80032fe <_write_r+0x1e>
 80032f8:	6823      	ldr	r3, [r4, #0]
 80032fa:	b103      	cbz	r3, 80032fe <_write_r+0x1e>
 80032fc:	602b      	str	r3, [r5, #0]
 80032fe:	bd38      	pop	{r3, r4, r5, pc}
 8003300:	200000f8 	.word	0x200000f8

08003304 <_close_r>:
 8003304:	b538      	push	{r3, r4, r5, lr}
 8003306:	4c06      	ldr	r4, [pc, #24]	; (8003320 <_close_r+0x1c>)
 8003308:	2300      	movs	r3, #0
 800330a:	4605      	mov	r5, r0
 800330c:	4608      	mov	r0, r1
 800330e:	6023      	str	r3, [r4, #0]
 8003310:	f7fd fb5b 	bl	80009ca <_close>
 8003314:	1c43      	adds	r3, r0, #1
 8003316:	d102      	bne.n	800331e <_close_r+0x1a>
 8003318:	6823      	ldr	r3, [r4, #0]
 800331a:	b103      	cbz	r3, 800331e <_close_r+0x1a>
 800331c:	602b      	str	r3, [r5, #0]
 800331e:	bd38      	pop	{r3, r4, r5, pc}
 8003320:	200000f8 	.word	0x200000f8

08003324 <_fstat_r>:
 8003324:	b538      	push	{r3, r4, r5, lr}
 8003326:	4c07      	ldr	r4, [pc, #28]	; (8003344 <_fstat_r+0x20>)
 8003328:	2300      	movs	r3, #0
 800332a:	4605      	mov	r5, r0
 800332c:	4608      	mov	r0, r1
 800332e:	4611      	mov	r1, r2
 8003330:	6023      	str	r3, [r4, #0]
 8003332:	f7fd fb56 	bl	80009e2 <_fstat>
 8003336:	1c43      	adds	r3, r0, #1
 8003338:	d102      	bne.n	8003340 <_fstat_r+0x1c>
 800333a:	6823      	ldr	r3, [r4, #0]
 800333c:	b103      	cbz	r3, 8003340 <_fstat_r+0x1c>
 800333e:	602b      	str	r3, [r5, #0]
 8003340:	bd38      	pop	{r3, r4, r5, pc}
 8003342:	bf00      	nop
 8003344:	200000f8 	.word	0x200000f8

08003348 <_isatty_r>:
 8003348:	b538      	push	{r3, r4, r5, lr}
 800334a:	4c06      	ldr	r4, [pc, #24]	; (8003364 <_isatty_r+0x1c>)
 800334c:	2300      	movs	r3, #0
 800334e:	4605      	mov	r5, r0
 8003350:	4608      	mov	r0, r1
 8003352:	6023      	str	r3, [r4, #0]
 8003354:	f7fd fb55 	bl	8000a02 <_isatty>
 8003358:	1c43      	adds	r3, r0, #1
 800335a:	d102      	bne.n	8003362 <_isatty_r+0x1a>
 800335c:	6823      	ldr	r3, [r4, #0]
 800335e:	b103      	cbz	r3, 8003362 <_isatty_r+0x1a>
 8003360:	602b      	str	r3, [r5, #0]
 8003362:	bd38      	pop	{r3, r4, r5, pc}
 8003364:	200000f8 	.word	0x200000f8

08003368 <_lseek_r>:
 8003368:	b538      	push	{r3, r4, r5, lr}
 800336a:	4c07      	ldr	r4, [pc, #28]	; (8003388 <_lseek_r+0x20>)
 800336c:	4605      	mov	r5, r0
 800336e:	4608      	mov	r0, r1
 8003370:	4611      	mov	r1, r2
 8003372:	2200      	movs	r2, #0
 8003374:	6022      	str	r2, [r4, #0]
 8003376:	461a      	mov	r2, r3
 8003378:	f7fd fb4e 	bl	8000a18 <_lseek>
 800337c:	1c43      	adds	r3, r0, #1
 800337e:	d102      	bne.n	8003386 <_lseek_r+0x1e>
 8003380:	6823      	ldr	r3, [r4, #0]
 8003382:	b103      	cbz	r3, 8003386 <_lseek_r+0x1e>
 8003384:	602b      	str	r3, [r5, #0]
 8003386:	bd38      	pop	{r3, r4, r5, pc}
 8003388:	200000f8 	.word	0x200000f8

0800338c <__malloc_lock>:
 800338c:	4770      	bx	lr

0800338e <__malloc_unlock>:
 800338e:	4770      	bx	lr

08003390 <_read_r>:
 8003390:	b538      	push	{r3, r4, r5, lr}
 8003392:	4c07      	ldr	r4, [pc, #28]	; (80033b0 <_read_r+0x20>)
 8003394:	4605      	mov	r5, r0
 8003396:	4608      	mov	r0, r1
 8003398:	4611      	mov	r1, r2
 800339a:	2200      	movs	r2, #0
 800339c:	6022      	str	r2, [r4, #0]
 800339e:	461a      	mov	r2, r3
 80033a0:	f7fd faf6 	bl	8000990 <_read>
 80033a4:	1c43      	adds	r3, r0, #1
 80033a6:	d102      	bne.n	80033ae <_read_r+0x1e>
 80033a8:	6823      	ldr	r3, [r4, #0]
 80033aa:	b103      	cbz	r3, 80033ae <_read_r+0x1e>
 80033ac:	602b      	str	r3, [r5, #0]
 80033ae:	bd38      	pop	{r3, r4, r5, pc}
 80033b0:	200000f8 	.word	0x200000f8

080033b4 <_init>:
 80033b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033b6:	bf00      	nop
 80033b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ba:	bc08      	pop	{r3}
 80033bc:	469e      	mov	lr, r3
 80033be:	4770      	bx	lr

080033c0 <_fini>:
 80033c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033c2:	bf00      	nop
 80033c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033c6:	bc08      	pop	{r3}
 80033c8:	469e      	mov	lr, r3
 80033ca:	4770      	bx	lr
