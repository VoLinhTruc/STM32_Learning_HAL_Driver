
F407VG_PWM_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007324  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  080074b8  080074b8  000174b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077f8  080077f8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080077f8  080077f8  000177f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007800  08007800  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007800  08007800  00017800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007804  08007804  00017804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007808  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  200001dc  080079e4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  080079e4  00020250  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a4ec  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a3d  00000000  00000000  0002a6f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a18  00000000  00000000  0002c138  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000930  00000000  00000000  0002cb50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021e4e  00000000  00000000  0002d480  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000815a  00000000  00000000  0004f2ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9644  00000000  00000000  00057428  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00120a6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ba8  00000000  00000000  00120ae8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800749c 	.word	0x0800749c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800749c 	.word	0x0800749c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	4b1e      	ldr	r3, [pc, #120]	; (800100c <MX_GPIO_Init+0x84>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a1d      	ldr	r2, [pc, #116]	; (800100c <MX_GPIO_Init+0x84>)
 8000f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b1b      	ldr	r3, [pc, #108]	; (800100c <MX_GPIO_Init+0x84>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	4b17      	ldr	r3, [pc, #92]	; (800100c <MX_GPIO_Init+0x84>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a16      	ldr	r2, [pc, #88]	; (800100c <MX_GPIO_Init+0x84>)
 8000fb4:	f043 0308 	orr.w	r3, r3, #8
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b14      	ldr	r3, [pc, #80]	; (800100c <MX_GPIO_Init+0x84>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0308 	and.w	r3, r3, #8
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	4b10      	ldr	r3, [pc, #64]	; (800100c <MX_GPIO_Init+0x84>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a0f      	ldr	r2, [pc, #60]	; (800100c <MX_GPIO_Init+0x84>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b0d      	ldr	r3, [pc, #52]	; (800100c <MX_GPIO_Init+0x84>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	603b      	str	r3, [r7, #0]
 8000fe6:	4b09      	ldr	r3, [pc, #36]	; (800100c <MX_GPIO_Init+0x84>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a08      	ldr	r2, [pc, #32]	; (800100c <MX_GPIO_Init+0x84>)
 8000fec:	f043 0302 	orr.w	r3, r3, #2
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <MX_GPIO_Init+0x84>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	603b      	str	r3, [r7, #0]
 8000ffc:	683b      	ldr	r3, [r7, #0]

}
 8000ffe:	bf00      	nop
 8001000:	3714      	adds	r7, #20
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	40023800 	.word	0x40023800

08001010 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001018:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800101c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	2b00      	cmp	r3, #0
 8001026:	d013      	beq.n	8001050 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001028:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800102c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001030:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001034:	2b00      	cmp	r3, #0
 8001036:	d00b      	beq.n	8001050 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001038:	e000      	b.n	800103c <ITM_SendChar+0x2c>
    {
      __NOP();
 800103a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800103c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d0f9      	beq.n	800103a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001046:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	b2d2      	uxtb	r2, r2
 800104e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001050:	687b      	ldr	r3, [r7, #4]
}
 8001052:	4618      	mov	r0, r3
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
	...

08001060 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001060:	b590      	push	{r4, r7, lr}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001066:	f000 fb23 	bl	80016b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800106a:	f000 f869 	bl	8001140 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800106e:	f7ff ff8b 	bl	8000f88 <MX_GPIO_Init>
  MX_TIM4_Init();
 8001072:	f000 f9dd 	bl	8001430 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001076:	2100      	movs	r1, #0
 8001078:	482c      	ldr	r0, [pc, #176]	; (800112c <main+0xcc>)
 800107a:	f001 fabb 	bl	80025f4 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  static uint16_t value = 0;
	  value = (++value)%1000;
 800107e:	4b2c      	ldr	r3, [pc, #176]	; (8001130 <main+0xd0>)
 8001080:	881b      	ldrh	r3, [r3, #0]
 8001082:	3301      	adds	r3, #1
 8001084:	b29a      	uxth	r2, r3
 8001086:	4b2a      	ldr	r3, [pc, #168]	; (8001130 <main+0xd0>)
 8001088:	801a      	strh	r2, [r3, #0]
 800108a:	4b29      	ldr	r3, [pc, #164]	; (8001130 <main+0xd0>)
 800108c:	881b      	ldrh	r3, [r3, #0]
 800108e:	4a29      	ldr	r2, [pc, #164]	; (8001134 <main+0xd4>)
 8001090:	fba2 1203 	umull	r1, r2, r2, r3
 8001094:	0992      	lsrs	r2, r2, #6
 8001096:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800109a:	fb01 f202 	mul.w	r2, r1, r2
 800109e:	1a9b      	subs	r3, r3, r2
 80010a0:	b29a      	uxth	r2, r3
 80010a2:	4b23      	ldr	r3, [pc, #140]	; (8001130 <main+0xd0>)
 80010a4:	801a      	strh	r2, [r3, #0]

	  float actual_value = ((float)value/1000)*((float)value/1000)*((float)value/1000);
 80010a6:	4b22      	ldr	r3, [pc, #136]	; (8001130 <main+0xd0>)
 80010a8:	881b      	ldrh	r3, [r3, #0]
 80010aa:	ee07 3a90 	vmov	s15, r3
 80010ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010b2:	eddf 6a21 	vldr	s13, [pc, #132]	; 8001138 <main+0xd8>
 80010b6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010ba:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <main+0xd0>)
 80010bc:	881b      	ldrh	r3, [r3, #0]
 80010be:	ee07 3a90 	vmov	s15, r3
 80010c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80010c6:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8001138 <main+0xd8>
 80010ca:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80010ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010d2:	4b17      	ldr	r3, [pc, #92]	; (8001130 <main+0xd0>)
 80010d4:	881b      	ldrh	r3, [r3, #0]
 80010d6:	ee07 3a90 	vmov	s15, r3
 80010da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80010de:	ed9f 6a16 	vldr	s12, [pc, #88]	; 8001138 <main+0xd8>
 80010e2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80010e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010ea:	edc7 7a01 	vstr	s15, [r7, #4]
	  printf("xx: %f \r\n", actual_value);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff fa2a 	bl	8000548 <__aeabi_f2d>
 80010f4:	4603      	mov	r3, r0
 80010f6:	460c      	mov	r4, r1
 80010f8:	461a      	mov	r2, r3
 80010fa:	4623      	mov	r3, r4
 80010fc:	480f      	ldr	r0, [pc, #60]	; (800113c <main+0xdc>)
 80010fe:	f002 fe31 	bl	8003d64 <iprintf>

	  PWMChangePulseValue(&htim4, TIM_CHANNEL_1, actual_value*1000);
 8001102:	edd7 7a01 	vldr	s15, [r7, #4]
 8001106:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001138 <main+0xd8>
 800110a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800110e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001112:	ee17 3a90 	vmov	r3, s15
 8001116:	b29b      	uxth	r3, r3
 8001118:	461a      	mov	r2, r3
 800111a:	2100      	movs	r1, #0
 800111c:	4803      	ldr	r0, [pc, #12]	; (800112c <main+0xcc>)
 800111e:	f000 fa59 	bl	80015d4 <PWMChangePulseValue>
	  HAL_Delay(1);
 8001122:	2001      	movs	r0, #1
 8001124:	f000 fb36 	bl	8001794 <HAL_Delay>
  {
 8001128:	e7a9      	b.n	800107e <main+0x1e>
 800112a:	bf00      	nop
 800112c:	20000208 	.word	0x20000208
 8001130:	200001f8 	.word	0x200001f8
 8001134:	10624dd3 	.word	0x10624dd3
 8001138:	447a0000 	.word	0x447a0000
 800113c:	080074b8 	.word	0x080074b8

08001140 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b094      	sub	sp, #80	; 0x50
 8001144:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001146:	f107 0320 	add.w	r3, r7, #32
 800114a:	2230      	movs	r2, #48	; 0x30
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f001 ffc2 	bl	80030d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001154:	f107 030c 	add.w	r3, r7, #12
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001164:	2300      	movs	r3, #0
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	4b27      	ldr	r3, [pc, #156]	; (8001208 <SystemClock_Config+0xc8>)
 800116a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116c:	4a26      	ldr	r2, [pc, #152]	; (8001208 <SystemClock_Config+0xc8>)
 800116e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001172:	6413      	str	r3, [r2, #64]	; 0x40
 8001174:	4b24      	ldr	r3, [pc, #144]	; (8001208 <SystemClock_Config+0xc8>)
 8001176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001180:	2300      	movs	r3, #0
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	4b21      	ldr	r3, [pc, #132]	; (800120c <SystemClock_Config+0xcc>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a20      	ldr	r2, [pc, #128]	; (800120c <SystemClock_Config+0xcc>)
 800118a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800118e:	6013      	str	r3, [r2, #0]
 8001190:	4b1e      	ldr	r3, [pc, #120]	; (800120c <SystemClock_Config+0xcc>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800119c:	2301      	movs	r3, #1
 800119e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a6:	2302      	movs	r3, #2
 80011a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011b0:	2304      	movs	r3, #4
 80011b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80011b4:	2340      	movs	r3, #64	; 0x40
 80011b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011b8:	2302      	movs	r3, #2
 80011ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011bc:	2304      	movs	r3, #4
 80011be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c0:	f107 0320 	add.w	r3, r7, #32
 80011c4:	4618      	mov	r0, r3
 80011c6:	f000 fd87 	bl	8001cd8 <HAL_RCC_OscConfig>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011d0:	f000 f83c 	bl	800124c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d4:	230f      	movs	r3, #15
 80011d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d8:	2302      	movs	r3, #2
 80011da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80011dc:	2390      	movs	r3, #144	; 0x90
 80011de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011e8:	f107 030c 	add.w	r3, r7, #12
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 ffe2 	bl	80021b8 <HAL_RCC_ClockConfig>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80011fa:	f000 f827 	bl	800124c <Error_Handler>
  }
}
 80011fe:	bf00      	nop
 8001200:	3750      	adds	r7, #80	; 0x50
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40023800 	.word	0x40023800
 800120c:	40007000 	.word	0x40007000

08001210 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
 8001224:	e009      	b.n	800123a <_write+0x2a>
    ITM_SendChar((*ptr++));
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	1c5a      	adds	r2, r3, #1
 800122a:	60ba      	str	r2, [r7, #8]
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff feee 	bl	8001010 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	3301      	adds	r3, #1
 8001238:	617b      	str	r3, [r7, #20]
 800123a:	697a      	ldr	r2, [r7, #20]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	429a      	cmp	r2, r3
 8001240:	dbf1      	blt.n	8001226 <_write+0x16>
  return len;
 8001242:	687b      	ldr	r3, [r7, #4]
}
 8001244:	4618      	mov	r0, r3
 8001246:	3718      	adds	r7, #24
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
	...

0800125c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <HAL_MspInit+0x4c>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	4a0f      	ldr	r2, [pc, #60]	; (80012a8 <HAL_MspInit+0x4c>)
 800126c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001270:	6453      	str	r3, [r2, #68]	; 0x44
 8001272:	4b0d      	ldr	r3, [pc, #52]	; (80012a8 <HAL_MspInit+0x4c>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001276:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	603b      	str	r3, [r7, #0]
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <HAL_MspInit+0x4c>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	4a08      	ldr	r2, [pc, #32]	; (80012a8 <HAL_MspInit+0x4c>)
 8001288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800128c:	6413      	str	r3, [r2, #64]	; 0x40
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <HAL_MspInit+0x4c>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001296:	603b      	str	r3, [r7, #0]
 8001298:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	40023800 	.word	0x40023800

080012ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012be:	e7fe      	b.n	80012be <HardFault_Handler+0x4>

080012c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <MemManage_Handler+0x4>

080012c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ca:	e7fe      	b.n	80012ca <BusFault_Handler+0x4>

080012cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d0:	e7fe      	b.n	80012d0 <UsageFault_Handler+0x4>

080012d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001300:	f000 fa28 	bl	8001754 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001304:	bf00      	nop
 8001306:	bd80      	pop	{r7, pc}

08001308 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	e00a      	b.n	8001330 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800131a:	f3af 8000 	nop.w
 800131e:	4601      	mov	r1, r0
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	1c5a      	adds	r2, r3, #1
 8001324:	60ba      	str	r2, [r7, #8]
 8001326:	b2ca      	uxtb	r2, r1
 8001328:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	3301      	adds	r3, #1
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	697a      	ldr	r2, [r7, #20]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	429a      	cmp	r2, r3
 8001336:	dbf0      	blt.n	800131a <_read+0x12>
	}

return len;
 8001338:	687b      	ldr	r3, [r7, #4]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001342:	b480      	push	{r7}
 8001344:	b083      	sub	sp, #12
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
	return -1;
 800134a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800134e:	4618      	mov	r0, r3
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
 8001362:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800136a:	605a      	str	r2, [r3, #4]
	return 0;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <_isatty>:

int _isatty(int file)
{
 800137a:	b480      	push	{r7}
 800137c:	b083      	sub	sp, #12
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
	return 1;
 8001382:	2301      	movs	r3, #1
}
 8001384:	4618      	mov	r0, r3
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
	return 0;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3714      	adds	r7, #20
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
	...

080013ac <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80013b4:	4b11      	ldr	r3, [pc, #68]	; (80013fc <_sbrk+0x50>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d102      	bne.n	80013c2 <_sbrk+0x16>
		heap_end = &end;
 80013bc:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <_sbrk+0x50>)
 80013be:	4a10      	ldr	r2, [pc, #64]	; (8001400 <_sbrk+0x54>)
 80013c0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80013c2:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <_sbrk+0x50>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80013c8:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <_sbrk+0x50>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4413      	add	r3, r2
 80013d0:	466a      	mov	r2, sp
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d907      	bls.n	80013e6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80013d6:	f001 fe55 	bl	8003084 <__errno>
 80013da:	4602      	mov	r2, r0
 80013dc:	230c      	movs	r3, #12
 80013de:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80013e0:	f04f 33ff 	mov.w	r3, #4294967295
 80013e4:	e006      	b.n	80013f4 <_sbrk+0x48>
	}

	heap_end += incr;
 80013e6:	4b05      	ldr	r3, [pc, #20]	; (80013fc <_sbrk+0x50>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	4a03      	ldr	r2, [pc, #12]	; (80013fc <_sbrk+0x50>)
 80013f0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80013f2:	68fb      	ldr	r3, [r7, #12]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	200001fc 	.word	0x200001fc
 8001400:	20000250 	.word	0x20000250

08001404 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001408:	4b08      	ldr	r3, [pc, #32]	; (800142c <SystemInit+0x28>)
 800140a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800140e:	4a07      	ldr	r2, [pc, #28]	; (800142c <SystemInit+0x28>)
 8001410:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001414:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001418:	4b04      	ldr	r3, [pc, #16]	; (800142c <SystemInit+0x28>)
 800141a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800141e:	609a      	str	r2, [r3, #8]
#endif
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08e      	sub	sp, #56	; 0x38
 8001434:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001436:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001444:	f107 0320 	add.w	r3, r7, #32
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
 800145c:	615a      	str	r2, [r3, #20]
 800145e:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8001460:	4b2c      	ldr	r3, [pc, #176]	; (8001514 <MX_TIM4_Init+0xe4>)
 8001462:	4a2d      	ldr	r2, [pc, #180]	; (8001518 <MX_TIM4_Init+0xe8>)
 8001464:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16;
 8001466:	4b2b      	ldr	r3, [pc, #172]	; (8001514 <MX_TIM4_Init+0xe4>)
 8001468:	2210      	movs	r2, #16
 800146a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800146c:	4b29      	ldr	r3, [pc, #164]	; (8001514 <MX_TIM4_Init+0xe4>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8001472:	4b28      	ldr	r3, [pc, #160]	; (8001514 <MX_TIM4_Init+0xe4>)
 8001474:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001478:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800147a:	4b26      	ldr	r3, [pc, #152]	; (8001514 <MX_TIM4_Init+0xe4>)
 800147c:	2200      	movs	r2, #0
 800147e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001480:	4b24      	ldr	r3, [pc, #144]	; (8001514 <MX_TIM4_Init+0xe4>)
 8001482:	2200      	movs	r2, #0
 8001484:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001486:	4823      	ldr	r0, [pc, #140]	; (8001514 <MX_TIM4_Init+0xe4>)
 8001488:	f001 f854 	bl	8002534 <HAL_TIM_Base_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001492:	f7ff fedb 	bl	800124c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001496:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800149a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800149c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014a0:	4619      	mov	r1, r3
 80014a2:	481c      	ldr	r0, [pc, #112]	; (8001514 <MX_TIM4_Init+0xe4>)
 80014a4:	f001 f9aa 	bl	80027fc <HAL_TIM_ConfigClockSource>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80014ae:	f7ff fecd 	bl	800124c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80014b2:	4818      	ldr	r0, [pc, #96]	; (8001514 <MX_TIM4_Init+0xe4>)
 80014b4:	f001 f869 	bl	800258a <HAL_TIM_PWM_Init>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80014be:	f7ff fec5 	bl	800124c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c2:	2300      	movs	r3, #0
 80014c4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c6:	2300      	movs	r3, #0
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014ca:	f107 0320 	add.w	r3, r7, #32
 80014ce:	4619      	mov	r1, r3
 80014d0:	4810      	ldr	r0, [pc, #64]	; (8001514 <MX_TIM4_Init+0xe4>)
 80014d2:	f001 fd5b 	bl	8002f8c <HAL_TIMEx_MasterConfigSynchronization>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80014dc:	f7ff feb6 	bl	800124c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014e0:	2360      	movs	r3, #96	; 0x60
 80014e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014e4:	2300      	movs	r3, #0
 80014e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80014ec:	2304      	movs	r3, #4
 80014ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014f0:	1d3b      	adds	r3, r7, #4
 80014f2:	2200      	movs	r2, #0
 80014f4:	4619      	mov	r1, r3
 80014f6:	4807      	ldr	r0, [pc, #28]	; (8001514 <MX_TIM4_Init+0xe4>)
 80014f8:	f001 f8ba 	bl	8002670 <HAL_TIM_PWM_ConfigChannel>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001502:	f7ff fea3 	bl	800124c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8001506:	4803      	ldr	r0, [pc, #12]	; (8001514 <MX_TIM4_Init+0xe4>)
 8001508:	f000 f82a 	bl	8001560 <HAL_TIM_MspPostInit>

}
 800150c:	bf00      	nop
 800150e:	3738      	adds	r7, #56	; 0x38
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000208 	.word	0x20000208
 8001518:	40000800 	.word	0x40000800

0800151c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a0b      	ldr	r2, [pc, #44]	; (8001558 <HAL_TIM_Base_MspInit+0x3c>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d10d      	bne.n	800154a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	4b0a      	ldr	r3, [pc, #40]	; (800155c <HAL_TIM_Base_MspInit+0x40>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	4a09      	ldr	r2, [pc, #36]	; (800155c <HAL_TIM_Base_MspInit+0x40>)
 8001538:	f043 0304 	orr.w	r3, r3, #4
 800153c:	6413      	str	r3, [r2, #64]	; 0x40
 800153e:	4b07      	ldr	r3, [pc, #28]	; (800155c <HAL_TIM_Base_MspInit+0x40>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f003 0304 	and.w	r3, r3, #4
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800154a:	bf00      	nop
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	40000800 	.word	0x40000800
 800155c:	40023800 	.word	0x40023800

08001560 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b088      	sub	sp, #32
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 030c 	add.w	r3, r7, #12
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a12      	ldr	r2, [pc, #72]	; (80015c8 <HAL_TIM_MspPostInit+0x68>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d11e      	bne.n	80015c0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	4b11      	ldr	r3, [pc, #68]	; (80015cc <HAL_TIM_MspPostInit+0x6c>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4a10      	ldr	r2, [pc, #64]	; (80015cc <HAL_TIM_MspPostInit+0x6c>)
 800158c:	f043 0308 	orr.w	r3, r3, #8
 8001590:	6313      	str	r3, [r2, #48]	; 0x30
 8001592:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <HAL_TIM_MspPostInit+0x6c>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	f003 0308 	and.w	r3, r3, #8
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration    
    PD12     ------> TIM4_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800159e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a4:	2302      	movs	r3, #2
 80015a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80015b0:	2302      	movs	r3, #2
 80015b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015b4:	f107 030c 	add.w	r3, r7, #12
 80015b8:	4619      	mov	r1, r3
 80015ba:	4805      	ldr	r0, [pc, #20]	; (80015d0 <HAL_TIM_MspPostInit+0x70>)
 80015bc:	f000 f9f2 	bl	80019a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80015c0:	bf00      	nop
 80015c2:	3720      	adds	r7, #32
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40000800 	.word	0x40000800
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40020c00 	.word	0x40020c00

080015d4 <PWMChangePulseValue>:

/* USER CODE BEGIN 1 */


void PWMChangePulseValue(TIM_HandleTypeDef *htim, uint32_t Channel, uint16_t value)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	4613      	mov	r3, r2
 80015e0:	80fb      	strh	r3, [r7, #6]
  switch (Channel)
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	2b0c      	cmp	r3, #12
 80015e6:	d831      	bhi.n	800164c <PWMChangePulseValue+0x78>
 80015e8:	a201      	add	r2, pc, #4	; (adr r2, 80015f0 <PWMChangePulseValue+0x1c>)
 80015ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ee:	bf00      	nop
 80015f0:	08001625 	.word	0x08001625
 80015f4:	0800164d 	.word	0x0800164d
 80015f8:	0800164d 	.word	0x0800164d
 80015fc:	0800164d 	.word	0x0800164d
 8001600:	0800162f 	.word	0x0800162f
 8001604:	0800164d 	.word	0x0800164d
 8001608:	0800164d 	.word	0x0800164d
 800160c:	0800164d 	.word	0x0800164d
 8001610:	08001639 	.word	0x08001639
 8001614:	0800164d 	.word	0x0800164d
 8001618:	0800164d 	.word	0x0800164d
 800161c:	0800164d 	.word	0x0800164d
 8001620:	08001643 	.word	0x08001643
  {
	case TIM_CHANNEL_1:
	{
		htim->Instance->CCR1 = value;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	88fa      	ldrh	r2, [r7, #6]
 800162a:	635a      	str	r2, [r3, #52]	; 0x34
	  break;
 800162c:	e00f      	b.n	800164e <PWMChangePulseValue+0x7a>
	}

	case TIM_CHANNEL_2:
	{
		htim->Instance->CCR1 = value;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	88fa      	ldrh	r2, [r7, #6]
 8001634:	635a      	str	r2, [r3, #52]	; 0x34
	  break;
 8001636:	e00a      	b.n	800164e <PWMChangePulseValue+0x7a>
	}

	case TIM_CHANNEL_3:
	{
		htim->Instance->CCR1 = value;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	88fa      	ldrh	r2, [r7, #6]
 800163e:	635a      	str	r2, [r3, #52]	; 0x34
	  break;
 8001640:	e005      	b.n	800164e <PWMChangePulseValue+0x7a>
	}

	case TIM_CHANNEL_4:
	{
		htim->Instance->CCR1 = value;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	88fa      	ldrh	r2, [r7, #6]
 8001648:	635a      	str	r2, [r3, #52]	; 0x34
	  break;
 800164a:	e000      	b.n	800164e <PWMChangePulseValue+0x7a>
	}

	default:
	  break;
 800164c:	bf00      	nop
  }
}
 800164e:	bf00      	nop
 8001650:	3714      	adds	r7, #20
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop

0800165c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800165c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001694 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001660:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001662:	e003      	b.n	800166c <LoopCopyDataInit>

08001664 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001666:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001668:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800166a:	3104      	adds	r1, #4

0800166c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800166c:	480b      	ldr	r0, [pc, #44]	; (800169c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800166e:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001670:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001672:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001674:	d3f6      	bcc.n	8001664 <CopyDataInit>
  ldr  r2, =_sbss
 8001676:	4a0b      	ldr	r2, [pc, #44]	; (80016a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001678:	e002      	b.n	8001680 <LoopFillZerobss>

0800167a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800167a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800167c:	f842 3b04 	str.w	r3, [r2], #4

08001680 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001680:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001682:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001684:	d3f9      	bcc.n	800167a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001686:	f7ff febd 	bl	8001404 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800168a:	f001 fd01 	bl	8003090 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800168e:	f7ff fce7 	bl	8001060 <main>
  bx  lr    
 8001692:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001694:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001698:	08007808 	.word	0x08007808
  ldr  r0, =_sdata
 800169c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80016a0:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 80016a4:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 80016a8:	20000250 	.word	0x20000250

080016ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016ac:	e7fe      	b.n	80016ac <ADC_IRQHandler>
	...

080016b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016b4:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <HAL_Init+0x40>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a0d      	ldr	r2, [pc, #52]	; (80016f0 <HAL_Init+0x40>)
 80016ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016c0:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <HAL_Init+0x40>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <HAL_Init+0x40>)
 80016c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016cc:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <HAL_Init+0x40>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a07      	ldr	r2, [pc, #28]	; (80016f0 <HAL_Init+0x40>)
 80016d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d8:	2003      	movs	r0, #3
 80016da:	f000 f92f 	bl	800193c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016de:	2000      	movs	r0, #0
 80016e0:	f000 f808 	bl	80016f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016e4:	f7ff fdba 	bl	800125c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40023c00 	.word	0x40023c00

080016f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016fc:	4b12      	ldr	r3, [pc, #72]	; (8001748 <HAL_InitTick+0x54>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b12      	ldr	r3, [pc, #72]	; (800174c <HAL_InitTick+0x58>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	4619      	mov	r1, r3
 8001706:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800170a:	fbb3 f3f1 	udiv	r3, r3, r1
 800170e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001712:	4618      	mov	r0, r3
 8001714:	f000 f939 	bl	800198a <HAL_SYSTICK_Config>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e00e      	b.n	8001740 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b0f      	cmp	r3, #15
 8001726:	d80a      	bhi.n	800173e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001728:	2200      	movs	r2, #0
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	f04f 30ff 	mov.w	r0, #4294967295
 8001730:	f000 f90f 	bl	8001952 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001734:	4a06      	ldr	r2, [pc, #24]	; (8001750 <HAL_InitTick+0x5c>)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800173a:	2300      	movs	r3, #0
 800173c:	e000      	b.n	8001740 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
}
 8001740:	4618      	mov	r0, r3
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000000 	.word	0x20000000
 800174c:	20000008 	.word	0x20000008
 8001750:	20000004 	.word	0x20000004

08001754 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <HAL_IncTick+0x20>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	461a      	mov	r2, r3
 800175e:	4b06      	ldr	r3, [pc, #24]	; (8001778 <HAL_IncTick+0x24>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4413      	add	r3, r2
 8001764:	4a04      	ldr	r2, [pc, #16]	; (8001778 <HAL_IncTick+0x24>)
 8001766:	6013      	str	r3, [r2, #0]
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	20000008 	.word	0x20000008
 8001778:	20000248 	.word	0x20000248

0800177c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  return uwTick;
 8001780:	4b03      	ldr	r3, [pc, #12]	; (8001790 <HAL_GetTick+0x14>)
 8001782:	681b      	ldr	r3, [r3, #0]
}
 8001784:	4618      	mov	r0, r3
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	20000248 	.word	0x20000248

08001794 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800179c:	f7ff ffee 	bl	800177c <HAL_GetTick>
 80017a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ac:	d005      	beq.n	80017ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ae:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <HAL_Delay+0x40>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	461a      	mov	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	4413      	add	r3, r2
 80017b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017ba:	bf00      	nop
 80017bc:	f7ff ffde 	bl	800177c <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d8f7      	bhi.n	80017bc <HAL_Delay+0x28>
  {
  }
}
 80017cc:	bf00      	nop
 80017ce:	3710      	adds	r7, #16
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20000008 	.word	0x20000008

080017d8 <__NVIC_SetPriorityGrouping>:
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e8:	4b0c      	ldr	r3, [pc, #48]	; (800181c <__NVIC_SetPriorityGrouping+0x44>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ee:	68ba      	ldr	r2, [r7, #8]
 80017f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f4:	4013      	ands	r3, r2
 80017f6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001800:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001808:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800180a:	4a04      	ldr	r2, [pc, #16]	; (800181c <__NVIC_SetPriorityGrouping+0x44>)
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	60d3      	str	r3, [r2, #12]
}
 8001810:	bf00      	nop
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <__NVIC_GetPriorityGrouping>:
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001824:	4b04      	ldr	r3, [pc, #16]	; (8001838 <__NVIC_GetPriorityGrouping+0x18>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	0a1b      	lsrs	r3, r3, #8
 800182a:	f003 0307 	and.w	r3, r3, #7
}
 800182e:	4618      	mov	r0, r3
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <__NVIC_SetPriority>:
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	6039      	str	r1, [r7, #0]
 8001846:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184c:	2b00      	cmp	r3, #0
 800184e:	db0a      	blt.n	8001866 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	b2da      	uxtb	r2, r3
 8001854:	490c      	ldr	r1, [pc, #48]	; (8001888 <__NVIC_SetPriority+0x4c>)
 8001856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185a:	0112      	lsls	r2, r2, #4
 800185c:	b2d2      	uxtb	r2, r2
 800185e:	440b      	add	r3, r1
 8001860:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001864:	e00a      	b.n	800187c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	b2da      	uxtb	r2, r3
 800186a:	4908      	ldr	r1, [pc, #32]	; (800188c <__NVIC_SetPriority+0x50>)
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	f003 030f 	and.w	r3, r3, #15
 8001872:	3b04      	subs	r3, #4
 8001874:	0112      	lsls	r2, r2, #4
 8001876:	b2d2      	uxtb	r2, r2
 8001878:	440b      	add	r3, r1
 800187a:	761a      	strb	r2, [r3, #24]
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	e000e100 	.word	0xe000e100
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <NVIC_EncodePriority>:
{
 8001890:	b480      	push	{r7}
 8001892:	b089      	sub	sp, #36	; 0x24
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	f1c3 0307 	rsb	r3, r3, #7
 80018aa:	2b04      	cmp	r3, #4
 80018ac:	bf28      	it	cs
 80018ae:	2304      	movcs	r3, #4
 80018b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	3304      	adds	r3, #4
 80018b6:	2b06      	cmp	r3, #6
 80018b8:	d902      	bls.n	80018c0 <NVIC_EncodePriority+0x30>
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	3b03      	subs	r3, #3
 80018be:	e000      	b.n	80018c2 <NVIC_EncodePriority+0x32>
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c4:	f04f 32ff 	mov.w	r2, #4294967295
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43da      	mvns	r2, r3
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	401a      	ands	r2, r3
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d8:	f04f 31ff 	mov.w	r1, #4294967295
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	fa01 f303 	lsl.w	r3, r1, r3
 80018e2:	43d9      	mvns	r1, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e8:	4313      	orrs	r3, r2
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3724      	adds	r7, #36	; 0x24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
	...

080018f8 <SysTick_Config>:
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3b01      	subs	r3, #1
 8001904:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001908:	d301      	bcc.n	800190e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800190a:	2301      	movs	r3, #1
 800190c:	e00f      	b.n	800192e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800190e:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <SysTick_Config+0x40>)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3b01      	subs	r3, #1
 8001914:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001916:	210f      	movs	r1, #15
 8001918:	f04f 30ff 	mov.w	r0, #4294967295
 800191c:	f7ff ff8e 	bl	800183c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001920:	4b05      	ldr	r3, [pc, #20]	; (8001938 <SysTick_Config+0x40>)
 8001922:	2200      	movs	r2, #0
 8001924:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001926:	4b04      	ldr	r3, [pc, #16]	; (8001938 <SysTick_Config+0x40>)
 8001928:	2207      	movs	r2, #7
 800192a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	e000e010 	.word	0xe000e010

0800193c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff ff47 	bl	80017d8 <__NVIC_SetPriorityGrouping>
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001952:	b580      	push	{r7, lr}
 8001954:	b086      	sub	sp, #24
 8001956:	af00      	add	r7, sp, #0
 8001958:	4603      	mov	r3, r0
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	607a      	str	r2, [r7, #4]
 800195e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001964:	f7ff ff5c 	bl	8001820 <__NVIC_GetPriorityGrouping>
 8001968:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	68b9      	ldr	r1, [r7, #8]
 800196e:	6978      	ldr	r0, [r7, #20]
 8001970:	f7ff ff8e 	bl	8001890 <NVIC_EncodePriority>
 8001974:	4602      	mov	r2, r0
 8001976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800197a:	4611      	mov	r1, r2
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff5d 	bl	800183c <__NVIC_SetPriority>
}
 8001982:	bf00      	nop
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f7ff ffb0 	bl	80018f8 <SysTick_Config>
 8001998:	4603      	mov	r3, r0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
	...

080019a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b089      	sub	sp, #36	; 0x24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019b2:	2300      	movs	r3, #0
 80019b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]
 80019be:	e16b      	b.n	8001c98 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019c0:	2201      	movs	r2, #1
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	4013      	ands	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	429a      	cmp	r2, r3
 80019da:	f040 815a 	bne.w	8001c92 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d00b      	beq.n	80019fe <HAL_GPIO_Init+0x5a>
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d007      	beq.n	80019fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019f2:	2b11      	cmp	r3, #17
 80019f4:	d003      	beq.n	80019fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b12      	cmp	r3, #18
 80019fc:	d130      	bne.n	8001a60 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	2203      	movs	r2, #3
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4013      	ands	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	68da      	ldr	r2, [r3, #12]
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a34:	2201      	movs	r2, #1
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4013      	ands	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	091b      	lsrs	r3, r3, #4
 8001a4a:	f003 0201 	and.w	r2, r3, #1
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	2203      	movs	r2, #3
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	689a      	ldr	r2, [r3, #8]
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d003      	beq.n	8001aa0 <HAL_GPIO_Init+0xfc>
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b12      	cmp	r3, #18
 8001a9e:	d123      	bne.n	8001ae8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	08da      	lsrs	r2, r3, #3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3208      	adds	r2, #8
 8001aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	f003 0307 	and.w	r3, r3, #7
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	220f      	movs	r2, #15
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	691a      	ldr	r2, [r3, #16]
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	08da      	lsrs	r2, r3, #3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	3208      	adds	r2, #8
 8001ae2:	69b9      	ldr	r1, [r7, #24]
 8001ae4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	2203      	movs	r2, #3
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 0203 	and.w	r2, r3, #3
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f000 80b4 	beq.w	8001c92 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	4b5f      	ldr	r3, [pc, #380]	; (8001cac <HAL_GPIO_Init+0x308>)
 8001b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b32:	4a5e      	ldr	r2, [pc, #376]	; (8001cac <HAL_GPIO_Init+0x308>)
 8001b34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b38:	6453      	str	r3, [r2, #68]	; 0x44
 8001b3a:	4b5c      	ldr	r3, [pc, #368]	; (8001cac <HAL_GPIO_Init+0x308>)
 8001b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b46:	4a5a      	ldr	r2, [pc, #360]	; (8001cb0 <HAL_GPIO_Init+0x30c>)
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	089b      	lsrs	r3, r3, #2
 8001b4c:	3302      	adds	r3, #2
 8001b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	220f      	movs	r2, #15
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43db      	mvns	r3, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4013      	ands	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a51      	ldr	r2, [pc, #324]	; (8001cb4 <HAL_GPIO_Init+0x310>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d02b      	beq.n	8001bca <HAL_GPIO_Init+0x226>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a50      	ldr	r2, [pc, #320]	; (8001cb8 <HAL_GPIO_Init+0x314>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d025      	beq.n	8001bc6 <HAL_GPIO_Init+0x222>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a4f      	ldr	r2, [pc, #316]	; (8001cbc <HAL_GPIO_Init+0x318>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d01f      	beq.n	8001bc2 <HAL_GPIO_Init+0x21e>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a4e      	ldr	r2, [pc, #312]	; (8001cc0 <HAL_GPIO_Init+0x31c>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d019      	beq.n	8001bbe <HAL_GPIO_Init+0x21a>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a4d      	ldr	r2, [pc, #308]	; (8001cc4 <HAL_GPIO_Init+0x320>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d013      	beq.n	8001bba <HAL_GPIO_Init+0x216>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a4c      	ldr	r2, [pc, #304]	; (8001cc8 <HAL_GPIO_Init+0x324>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d00d      	beq.n	8001bb6 <HAL_GPIO_Init+0x212>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a4b      	ldr	r2, [pc, #300]	; (8001ccc <HAL_GPIO_Init+0x328>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d007      	beq.n	8001bb2 <HAL_GPIO_Init+0x20e>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a4a      	ldr	r2, [pc, #296]	; (8001cd0 <HAL_GPIO_Init+0x32c>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d101      	bne.n	8001bae <HAL_GPIO_Init+0x20a>
 8001baa:	2307      	movs	r3, #7
 8001bac:	e00e      	b.n	8001bcc <HAL_GPIO_Init+0x228>
 8001bae:	2308      	movs	r3, #8
 8001bb0:	e00c      	b.n	8001bcc <HAL_GPIO_Init+0x228>
 8001bb2:	2306      	movs	r3, #6
 8001bb4:	e00a      	b.n	8001bcc <HAL_GPIO_Init+0x228>
 8001bb6:	2305      	movs	r3, #5
 8001bb8:	e008      	b.n	8001bcc <HAL_GPIO_Init+0x228>
 8001bba:	2304      	movs	r3, #4
 8001bbc:	e006      	b.n	8001bcc <HAL_GPIO_Init+0x228>
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e004      	b.n	8001bcc <HAL_GPIO_Init+0x228>
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	e002      	b.n	8001bcc <HAL_GPIO_Init+0x228>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <HAL_GPIO_Init+0x228>
 8001bca:	2300      	movs	r3, #0
 8001bcc:	69fa      	ldr	r2, [r7, #28]
 8001bce:	f002 0203 	and.w	r2, r2, #3
 8001bd2:	0092      	lsls	r2, r2, #2
 8001bd4:	4093      	lsls	r3, r2
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bdc:	4934      	ldr	r1, [pc, #208]	; (8001cb0 <HAL_GPIO_Init+0x30c>)
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	089b      	lsrs	r3, r3, #2
 8001be2:	3302      	adds	r3, #2
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bea:	4b3a      	ldr	r3, [pc, #232]	; (8001cd4 <HAL_GPIO_Init+0x330>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c0e:	4a31      	ldr	r2, [pc, #196]	; (8001cd4 <HAL_GPIO_Init+0x330>)
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c14:	4b2f      	ldr	r3, [pc, #188]	; (8001cd4 <HAL_GPIO_Init+0x330>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4013      	ands	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d003      	beq.n	8001c38 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c38:	4a26      	ldr	r2, [pc, #152]	; (8001cd4 <HAL_GPIO_Init+0x330>)
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c3e:	4b25      	ldr	r3, [pc, #148]	; (8001cd4 <HAL_GPIO_Init+0x330>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	43db      	mvns	r3, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c62:	4a1c      	ldr	r2, [pc, #112]	; (8001cd4 <HAL_GPIO_Init+0x330>)
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c68:	4b1a      	ldr	r3, [pc, #104]	; (8001cd4 <HAL_GPIO_Init+0x330>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	43db      	mvns	r3, r3
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4013      	ands	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d003      	beq.n	8001c8c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c8c:	4a11      	ldr	r2, [pc, #68]	; (8001cd4 <HAL_GPIO_Init+0x330>)
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3301      	adds	r3, #1
 8001c96:	61fb      	str	r3, [r7, #28]
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	2b0f      	cmp	r3, #15
 8001c9c:	f67f ae90 	bls.w	80019c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ca0:	bf00      	nop
 8001ca2:	3724      	adds	r7, #36	; 0x24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	40013800 	.word	0x40013800
 8001cb4:	40020000 	.word	0x40020000
 8001cb8:	40020400 	.word	0x40020400
 8001cbc:	40020800 	.word	0x40020800
 8001cc0:	40020c00 	.word	0x40020c00
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	40021400 	.word	0x40021400
 8001ccc:	40021800 	.word	0x40021800
 8001cd0:	40021c00 	.word	0x40021c00
 8001cd4:	40013c00 	.word	0x40013c00

08001cd8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e25b      	b.n	80021a2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d075      	beq.n	8001de2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cf6:	4ba3      	ldr	r3, [pc, #652]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 030c 	and.w	r3, r3, #12
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	d00c      	beq.n	8001d1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d02:	4ba0      	ldr	r3, [pc, #640]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d0a:	2b08      	cmp	r3, #8
 8001d0c:	d112      	bne.n	8001d34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d0e:	4b9d      	ldr	r3, [pc, #628]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d1a:	d10b      	bne.n	8001d34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d1c:	4b99      	ldr	r3, [pc, #612]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d05b      	beq.n	8001de0 <HAL_RCC_OscConfig+0x108>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d157      	bne.n	8001de0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e236      	b.n	80021a2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d3c:	d106      	bne.n	8001d4c <HAL_RCC_OscConfig+0x74>
 8001d3e:	4b91      	ldr	r3, [pc, #580]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a90      	ldr	r2, [pc, #576]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d48:	6013      	str	r3, [r2, #0]
 8001d4a:	e01d      	b.n	8001d88 <HAL_RCC_OscConfig+0xb0>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d54:	d10c      	bne.n	8001d70 <HAL_RCC_OscConfig+0x98>
 8001d56:	4b8b      	ldr	r3, [pc, #556]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a8a      	ldr	r2, [pc, #552]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001d5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d60:	6013      	str	r3, [r2, #0]
 8001d62:	4b88      	ldr	r3, [pc, #544]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a87      	ldr	r2, [pc, #540]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d6c:	6013      	str	r3, [r2, #0]
 8001d6e:	e00b      	b.n	8001d88 <HAL_RCC_OscConfig+0xb0>
 8001d70:	4b84      	ldr	r3, [pc, #528]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a83      	ldr	r2, [pc, #524]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001d76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d7a:	6013      	str	r3, [r2, #0]
 8001d7c:	4b81      	ldr	r3, [pc, #516]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a80      	ldr	r2, [pc, #512]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001d82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d013      	beq.n	8001db8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d90:	f7ff fcf4 	bl	800177c <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d98:	f7ff fcf0 	bl	800177c <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b64      	cmp	r3, #100	; 0x64
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e1fb      	b.n	80021a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001daa:	4b76      	ldr	r3, [pc, #472]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0f0      	beq.n	8001d98 <HAL_RCC_OscConfig+0xc0>
 8001db6:	e014      	b.n	8001de2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db8:	f7ff fce0 	bl	800177c <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dc0:	f7ff fcdc 	bl	800177c <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b64      	cmp	r3, #100	; 0x64
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e1e7      	b.n	80021a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dd2:	4b6c      	ldr	r3, [pc, #432]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f0      	bne.n	8001dc0 <HAL_RCC_OscConfig+0xe8>
 8001dde:	e000      	b.n	8001de2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d063      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001dee:	4b65      	ldr	r3, [pc, #404]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f003 030c 	and.w	r3, r3, #12
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00b      	beq.n	8001e12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dfa:	4b62      	ldr	r3, [pc, #392]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e02:	2b08      	cmp	r3, #8
 8001e04:	d11c      	bne.n	8001e40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e06:	4b5f      	ldr	r3, [pc, #380]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d116      	bne.n	8001e40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e12:	4b5c      	ldr	r3, [pc, #368]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d005      	beq.n	8001e2a <HAL_RCC_OscConfig+0x152>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d001      	beq.n	8001e2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e1bb      	b.n	80021a2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e2a:	4b56      	ldr	r3, [pc, #344]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	4952      	ldr	r1, [pc, #328]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e3e:	e03a      	b.n	8001eb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d020      	beq.n	8001e8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e48:	4b4f      	ldr	r3, [pc, #316]	; (8001f88 <HAL_RCC_OscConfig+0x2b0>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4e:	f7ff fc95 	bl	800177c <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e56:	f7ff fc91 	bl	800177c <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e19c      	b.n	80021a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e68:	4b46      	ldr	r3, [pc, #280]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d0f0      	beq.n	8001e56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e74:	4b43      	ldr	r3, [pc, #268]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	4940      	ldr	r1, [pc, #256]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	600b      	str	r3, [r1, #0]
 8001e88:	e015      	b.n	8001eb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e8a:	4b3f      	ldr	r3, [pc, #252]	; (8001f88 <HAL_RCC_OscConfig+0x2b0>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e90:	f7ff fc74 	bl	800177c <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e98:	f7ff fc70 	bl	800177c <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e17b      	b.n	80021a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eaa:	4b36      	ldr	r3, [pc, #216]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f0      	bne.n	8001e98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0308 	and.w	r3, r3, #8
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d030      	beq.n	8001f24 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d016      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eca:	4b30      	ldr	r3, [pc, #192]	; (8001f8c <HAL_RCC_OscConfig+0x2b4>)
 8001ecc:	2201      	movs	r2, #1
 8001ece:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed0:	f7ff fc54 	bl	800177c <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ed8:	f7ff fc50 	bl	800177c <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e15b      	b.n	80021a2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eea:	4b26      	ldr	r3, [pc, #152]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001eec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d0f0      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x200>
 8001ef6:	e015      	b.n	8001f24 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ef8:	4b24      	ldr	r3, [pc, #144]	; (8001f8c <HAL_RCC_OscConfig+0x2b4>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001efe:	f7ff fc3d 	bl	800177c <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f04:	e008      	b.n	8001f18 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f06:	f7ff fc39 	bl	800177c <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e144      	b.n	80021a2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f18:	4b1a      	ldr	r3, [pc, #104]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001f1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1f0      	bne.n	8001f06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f000 80a0 	beq.w	8002072 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f32:	2300      	movs	r3, #0
 8001f34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f36:	4b13      	ldr	r3, [pc, #76]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10f      	bne.n	8001f62 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	4b0f      	ldr	r3, [pc, #60]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	4a0e      	ldr	r2, [pc, #56]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f50:	6413      	str	r3, [r2, #64]	; 0x40
 8001f52:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5a:	60bb      	str	r3, [r7, #8]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f62:	4b0b      	ldr	r3, [pc, #44]	; (8001f90 <HAL_RCC_OscConfig+0x2b8>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d121      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f6e:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <HAL_RCC_OscConfig+0x2b8>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a07      	ldr	r2, [pc, #28]	; (8001f90 <HAL_RCC_OscConfig+0x2b8>)
 8001f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f7a:	f7ff fbff 	bl	800177c <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f80:	e011      	b.n	8001fa6 <HAL_RCC_OscConfig+0x2ce>
 8001f82:	bf00      	nop
 8001f84:	40023800 	.word	0x40023800
 8001f88:	42470000 	.word	0x42470000
 8001f8c:	42470e80 	.word	0x42470e80
 8001f90:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f94:	f7ff fbf2 	bl	800177c <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e0fd      	b.n	80021a2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa6:	4b81      	ldr	r3, [pc, #516]	; (80021ac <HAL_RCC_OscConfig+0x4d4>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d0f0      	beq.n	8001f94 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d106      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x2f0>
 8001fba:	4b7d      	ldr	r3, [pc, #500]	; (80021b0 <HAL_RCC_OscConfig+0x4d8>)
 8001fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fbe:	4a7c      	ldr	r2, [pc, #496]	; (80021b0 <HAL_RCC_OscConfig+0x4d8>)
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	6713      	str	r3, [r2, #112]	; 0x70
 8001fc6:	e01c      	b.n	8002002 <HAL_RCC_OscConfig+0x32a>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	2b05      	cmp	r3, #5
 8001fce:	d10c      	bne.n	8001fea <HAL_RCC_OscConfig+0x312>
 8001fd0:	4b77      	ldr	r3, [pc, #476]	; (80021b0 <HAL_RCC_OscConfig+0x4d8>)
 8001fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd4:	4a76      	ldr	r2, [pc, #472]	; (80021b0 <HAL_RCC_OscConfig+0x4d8>)
 8001fd6:	f043 0304 	orr.w	r3, r3, #4
 8001fda:	6713      	str	r3, [r2, #112]	; 0x70
 8001fdc:	4b74      	ldr	r3, [pc, #464]	; (80021b0 <HAL_RCC_OscConfig+0x4d8>)
 8001fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe0:	4a73      	ldr	r2, [pc, #460]	; (80021b0 <HAL_RCC_OscConfig+0x4d8>)
 8001fe2:	f043 0301 	orr.w	r3, r3, #1
 8001fe6:	6713      	str	r3, [r2, #112]	; 0x70
 8001fe8:	e00b      	b.n	8002002 <HAL_RCC_OscConfig+0x32a>
 8001fea:	4b71      	ldr	r3, [pc, #452]	; (80021b0 <HAL_RCC_OscConfig+0x4d8>)
 8001fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fee:	4a70      	ldr	r2, [pc, #448]	; (80021b0 <HAL_RCC_OscConfig+0x4d8>)
 8001ff0:	f023 0301 	bic.w	r3, r3, #1
 8001ff4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff6:	4b6e      	ldr	r3, [pc, #440]	; (80021b0 <HAL_RCC_OscConfig+0x4d8>)
 8001ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffa:	4a6d      	ldr	r2, [pc, #436]	; (80021b0 <HAL_RCC_OscConfig+0x4d8>)
 8001ffc:	f023 0304 	bic.w	r3, r3, #4
 8002000:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d015      	beq.n	8002036 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800200a:	f7ff fbb7 	bl	800177c <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002010:	e00a      	b.n	8002028 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002012:	f7ff fbb3 	bl	800177c <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002020:	4293      	cmp	r3, r2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e0bc      	b.n	80021a2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002028:	4b61      	ldr	r3, [pc, #388]	; (80021b0 <HAL_RCC_OscConfig+0x4d8>)
 800202a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d0ee      	beq.n	8002012 <HAL_RCC_OscConfig+0x33a>
 8002034:	e014      	b.n	8002060 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002036:	f7ff fba1 	bl	800177c <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800203c:	e00a      	b.n	8002054 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800203e:	f7ff fb9d 	bl	800177c <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	f241 3288 	movw	r2, #5000	; 0x1388
 800204c:	4293      	cmp	r3, r2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e0a6      	b.n	80021a2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002054:	4b56      	ldr	r3, [pc, #344]	; (80021b0 <HAL_RCC_OscConfig+0x4d8>)
 8002056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1ee      	bne.n	800203e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002060:	7dfb      	ldrb	r3, [r7, #23]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d105      	bne.n	8002072 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002066:	4b52      	ldr	r3, [pc, #328]	; (80021b0 <HAL_RCC_OscConfig+0x4d8>)
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	4a51      	ldr	r2, [pc, #324]	; (80021b0 <HAL_RCC_OscConfig+0x4d8>)
 800206c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002070:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	2b00      	cmp	r3, #0
 8002078:	f000 8092 	beq.w	80021a0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800207c:	4b4c      	ldr	r3, [pc, #304]	; (80021b0 <HAL_RCC_OscConfig+0x4d8>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f003 030c 	and.w	r3, r3, #12
 8002084:	2b08      	cmp	r3, #8
 8002086:	d05c      	beq.n	8002142 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	2b02      	cmp	r3, #2
 800208e:	d141      	bne.n	8002114 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002090:	4b48      	ldr	r3, [pc, #288]	; (80021b4 <HAL_RCC_OscConfig+0x4dc>)
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002096:	f7ff fb71 	bl	800177c <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800209c:	e008      	b.n	80020b0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800209e:	f7ff fb6d 	bl	800177c <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e078      	b.n	80021a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020b0:	4b3f      	ldr	r3, [pc, #252]	; (80021b0 <HAL_RCC_OscConfig+0x4d8>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1f0      	bne.n	800209e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	69da      	ldr	r2, [r3, #28]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	431a      	orrs	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ca:	019b      	lsls	r3, r3, #6
 80020cc:	431a      	orrs	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d2:	085b      	lsrs	r3, r3, #1
 80020d4:	3b01      	subs	r3, #1
 80020d6:	041b      	lsls	r3, r3, #16
 80020d8:	431a      	orrs	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020de:	061b      	lsls	r3, r3, #24
 80020e0:	4933      	ldr	r1, [pc, #204]	; (80021b0 <HAL_RCC_OscConfig+0x4d8>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020e6:	4b33      	ldr	r3, [pc, #204]	; (80021b4 <HAL_RCC_OscConfig+0x4dc>)
 80020e8:	2201      	movs	r2, #1
 80020ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ec:	f7ff fb46 	bl	800177c <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020f4:	f7ff fb42 	bl	800177c <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e04d      	b.n	80021a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002106:	4b2a      	ldr	r3, [pc, #168]	; (80021b0 <HAL_RCC_OscConfig+0x4d8>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d0f0      	beq.n	80020f4 <HAL_RCC_OscConfig+0x41c>
 8002112:	e045      	b.n	80021a0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002114:	4b27      	ldr	r3, [pc, #156]	; (80021b4 <HAL_RCC_OscConfig+0x4dc>)
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211a:	f7ff fb2f 	bl	800177c <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002122:	f7ff fb2b 	bl	800177c <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e036      	b.n	80021a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002134:	4b1e      	ldr	r3, [pc, #120]	; (80021b0 <HAL_RCC_OscConfig+0x4d8>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1f0      	bne.n	8002122 <HAL_RCC_OscConfig+0x44a>
 8002140:	e02e      	b.n	80021a0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d101      	bne.n	800214e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e029      	b.n	80021a2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800214e:	4b18      	ldr	r3, [pc, #96]	; (80021b0 <HAL_RCC_OscConfig+0x4d8>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	429a      	cmp	r2, r3
 8002160:	d11c      	bne.n	800219c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800216c:	429a      	cmp	r2, r3
 800216e:	d115      	bne.n	800219c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002176:	4013      	ands	r3, r2
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800217c:	4293      	cmp	r3, r2
 800217e:	d10d      	bne.n	800219c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800218a:	429a      	cmp	r2, r3
 800218c:	d106      	bne.n	800219c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002198:	429a      	cmp	r2, r3
 800219a:	d001      	beq.n	80021a0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e000      	b.n	80021a2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3718      	adds	r7, #24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40007000 	.word	0x40007000
 80021b0:	40023800 	.word	0x40023800
 80021b4:	42470060 	.word	0x42470060

080021b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d101      	bne.n	80021cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e0cc      	b.n	8002366 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021cc:	4b68      	ldr	r3, [pc, #416]	; (8002370 <HAL_RCC_ClockConfig+0x1b8>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 030f 	and.w	r3, r3, #15
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d90c      	bls.n	80021f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021da:	4b65      	ldr	r3, [pc, #404]	; (8002370 <HAL_RCC_ClockConfig+0x1b8>)
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	b2d2      	uxtb	r2, r2
 80021e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021e2:	4b63      	ldr	r3, [pc, #396]	; (8002370 <HAL_RCC_ClockConfig+0x1b8>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d001      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e0b8      	b.n	8002366 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d020      	beq.n	8002242 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0304 	and.w	r3, r3, #4
 8002208:	2b00      	cmp	r3, #0
 800220a:	d005      	beq.n	8002218 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800220c:	4b59      	ldr	r3, [pc, #356]	; (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	4a58      	ldr	r2, [pc, #352]	; (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 8002212:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002216:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0308 	and.w	r3, r3, #8
 8002220:	2b00      	cmp	r3, #0
 8002222:	d005      	beq.n	8002230 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002224:	4b53      	ldr	r3, [pc, #332]	; (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	4a52      	ldr	r2, [pc, #328]	; (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 800222a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800222e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002230:	4b50      	ldr	r3, [pc, #320]	; (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	494d      	ldr	r1, [pc, #308]	; (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 800223e:	4313      	orrs	r3, r2
 8002240:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b00      	cmp	r3, #0
 800224c:	d044      	beq.n	80022d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d107      	bne.n	8002266 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002256:	4b47      	ldr	r3, [pc, #284]	; (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d119      	bne.n	8002296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e07f      	b.n	8002366 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b02      	cmp	r3, #2
 800226c:	d003      	beq.n	8002276 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002272:	2b03      	cmp	r3, #3
 8002274:	d107      	bne.n	8002286 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002276:	4b3f      	ldr	r3, [pc, #252]	; (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d109      	bne.n	8002296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e06f      	b.n	8002366 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002286:	4b3b      	ldr	r3, [pc, #236]	; (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e067      	b.n	8002366 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002296:	4b37      	ldr	r3, [pc, #220]	; (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f023 0203 	bic.w	r2, r3, #3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	4934      	ldr	r1, [pc, #208]	; (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022a8:	f7ff fa68 	bl	800177c <HAL_GetTick>
 80022ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ae:	e00a      	b.n	80022c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022b0:	f7ff fa64 	bl	800177c <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80022be:	4293      	cmp	r3, r2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e04f      	b.n	8002366 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c6:	4b2b      	ldr	r3, [pc, #172]	; (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f003 020c 	and.w	r2, r3, #12
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d1eb      	bne.n	80022b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022d8:	4b25      	ldr	r3, [pc, #148]	; (8002370 <HAL_RCC_ClockConfig+0x1b8>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 030f 	and.w	r3, r3, #15
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d20c      	bcs.n	8002300 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022e6:	4b22      	ldr	r3, [pc, #136]	; (8002370 <HAL_RCC_ClockConfig+0x1b8>)
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ee:	4b20      	ldr	r3, [pc, #128]	; (8002370 <HAL_RCC_ClockConfig+0x1b8>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 030f 	and.w	r3, r3, #15
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d001      	beq.n	8002300 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e032      	b.n	8002366 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b00      	cmp	r3, #0
 800230a:	d008      	beq.n	800231e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800230c:	4b19      	ldr	r3, [pc, #100]	; (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	4916      	ldr	r1, [pc, #88]	; (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 800231a:	4313      	orrs	r3, r2
 800231c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0308 	and.w	r3, r3, #8
 8002326:	2b00      	cmp	r3, #0
 8002328:	d009      	beq.n	800233e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800232a:	4b12      	ldr	r3, [pc, #72]	; (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	490e      	ldr	r1, [pc, #56]	; (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 800233a:	4313      	orrs	r3, r2
 800233c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800233e:	f000 f821 	bl	8002384 <HAL_RCC_GetSysClockFreq>
 8002342:	4601      	mov	r1, r0
 8002344:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	091b      	lsrs	r3, r3, #4
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	4a0a      	ldr	r2, [pc, #40]	; (8002378 <HAL_RCC_ClockConfig+0x1c0>)
 8002350:	5cd3      	ldrb	r3, [r2, r3]
 8002352:	fa21 f303 	lsr.w	r3, r1, r3
 8002356:	4a09      	ldr	r2, [pc, #36]	; (800237c <HAL_RCC_ClockConfig+0x1c4>)
 8002358:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800235a:	4b09      	ldr	r3, [pc, #36]	; (8002380 <HAL_RCC_ClockConfig+0x1c8>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff f9c8 	bl	80016f4 <HAL_InitTick>

  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	40023c00 	.word	0x40023c00
 8002374:	40023800 	.word	0x40023800
 8002378:	080074c4 	.word	0x080074c4
 800237c:	20000000 	.word	0x20000000
 8002380:	20000004 	.word	0x20000004

08002384 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800238a:	2300      	movs	r3, #0
 800238c:	607b      	str	r3, [r7, #4]
 800238e:	2300      	movs	r3, #0
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	2300      	movs	r3, #0
 8002394:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002396:	2300      	movs	r3, #0
 8002398:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800239a:	4b63      	ldr	r3, [pc, #396]	; (8002528 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 030c 	and.w	r3, r3, #12
 80023a2:	2b04      	cmp	r3, #4
 80023a4:	d007      	beq.n	80023b6 <HAL_RCC_GetSysClockFreq+0x32>
 80023a6:	2b08      	cmp	r3, #8
 80023a8:	d008      	beq.n	80023bc <HAL_RCC_GetSysClockFreq+0x38>
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f040 80b4 	bne.w	8002518 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023b0:	4b5e      	ldr	r3, [pc, #376]	; (800252c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80023b2:	60bb      	str	r3, [r7, #8]
       break;
 80023b4:	e0b3      	b.n	800251e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023b6:	4b5e      	ldr	r3, [pc, #376]	; (8002530 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80023b8:	60bb      	str	r3, [r7, #8]
      break;
 80023ba:	e0b0      	b.n	800251e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023bc:	4b5a      	ldr	r3, [pc, #360]	; (8002528 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023c4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023c6:	4b58      	ldr	r3, [pc, #352]	; (8002528 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d04a      	beq.n	8002468 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023d2:	4b55      	ldr	r3, [pc, #340]	; (8002528 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	099b      	lsrs	r3, r3, #6
 80023d8:	f04f 0400 	mov.w	r4, #0
 80023dc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80023e0:	f04f 0200 	mov.w	r2, #0
 80023e4:	ea03 0501 	and.w	r5, r3, r1
 80023e8:	ea04 0602 	and.w	r6, r4, r2
 80023ec:	4629      	mov	r1, r5
 80023ee:	4632      	mov	r2, r6
 80023f0:	f04f 0300 	mov.w	r3, #0
 80023f4:	f04f 0400 	mov.w	r4, #0
 80023f8:	0154      	lsls	r4, r2, #5
 80023fa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80023fe:	014b      	lsls	r3, r1, #5
 8002400:	4619      	mov	r1, r3
 8002402:	4622      	mov	r2, r4
 8002404:	1b49      	subs	r1, r1, r5
 8002406:	eb62 0206 	sbc.w	r2, r2, r6
 800240a:	f04f 0300 	mov.w	r3, #0
 800240e:	f04f 0400 	mov.w	r4, #0
 8002412:	0194      	lsls	r4, r2, #6
 8002414:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002418:	018b      	lsls	r3, r1, #6
 800241a:	1a5b      	subs	r3, r3, r1
 800241c:	eb64 0402 	sbc.w	r4, r4, r2
 8002420:	f04f 0100 	mov.w	r1, #0
 8002424:	f04f 0200 	mov.w	r2, #0
 8002428:	00e2      	lsls	r2, r4, #3
 800242a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800242e:	00d9      	lsls	r1, r3, #3
 8002430:	460b      	mov	r3, r1
 8002432:	4614      	mov	r4, r2
 8002434:	195b      	adds	r3, r3, r5
 8002436:	eb44 0406 	adc.w	r4, r4, r6
 800243a:	f04f 0100 	mov.w	r1, #0
 800243e:	f04f 0200 	mov.w	r2, #0
 8002442:	0262      	lsls	r2, r4, #9
 8002444:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002448:	0259      	lsls	r1, r3, #9
 800244a:	460b      	mov	r3, r1
 800244c:	4614      	mov	r4, r2
 800244e:	4618      	mov	r0, r3
 8002450:	4621      	mov	r1, r4
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f04f 0400 	mov.w	r4, #0
 8002458:	461a      	mov	r2, r3
 800245a:	4623      	mov	r3, r4
 800245c:	f7fe fc14 	bl	8000c88 <__aeabi_uldivmod>
 8002460:	4603      	mov	r3, r0
 8002462:	460c      	mov	r4, r1
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	e049      	b.n	80024fc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002468:	4b2f      	ldr	r3, [pc, #188]	; (8002528 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	099b      	lsrs	r3, r3, #6
 800246e:	f04f 0400 	mov.w	r4, #0
 8002472:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002476:	f04f 0200 	mov.w	r2, #0
 800247a:	ea03 0501 	and.w	r5, r3, r1
 800247e:	ea04 0602 	and.w	r6, r4, r2
 8002482:	4629      	mov	r1, r5
 8002484:	4632      	mov	r2, r6
 8002486:	f04f 0300 	mov.w	r3, #0
 800248a:	f04f 0400 	mov.w	r4, #0
 800248e:	0154      	lsls	r4, r2, #5
 8002490:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002494:	014b      	lsls	r3, r1, #5
 8002496:	4619      	mov	r1, r3
 8002498:	4622      	mov	r2, r4
 800249a:	1b49      	subs	r1, r1, r5
 800249c:	eb62 0206 	sbc.w	r2, r2, r6
 80024a0:	f04f 0300 	mov.w	r3, #0
 80024a4:	f04f 0400 	mov.w	r4, #0
 80024a8:	0194      	lsls	r4, r2, #6
 80024aa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80024ae:	018b      	lsls	r3, r1, #6
 80024b0:	1a5b      	subs	r3, r3, r1
 80024b2:	eb64 0402 	sbc.w	r4, r4, r2
 80024b6:	f04f 0100 	mov.w	r1, #0
 80024ba:	f04f 0200 	mov.w	r2, #0
 80024be:	00e2      	lsls	r2, r4, #3
 80024c0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80024c4:	00d9      	lsls	r1, r3, #3
 80024c6:	460b      	mov	r3, r1
 80024c8:	4614      	mov	r4, r2
 80024ca:	195b      	adds	r3, r3, r5
 80024cc:	eb44 0406 	adc.w	r4, r4, r6
 80024d0:	f04f 0100 	mov.w	r1, #0
 80024d4:	f04f 0200 	mov.w	r2, #0
 80024d8:	02a2      	lsls	r2, r4, #10
 80024da:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80024de:	0299      	lsls	r1, r3, #10
 80024e0:	460b      	mov	r3, r1
 80024e2:	4614      	mov	r4, r2
 80024e4:	4618      	mov	r0, r3
 80024e6:	4621      	mov	r1, r4
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f04f 0400 	mov.w	r4, #0
 80024ee:	461a      	mov	r2, r3
 80024f0:	4623      	mov	r3, r4
 80024f2:	f7fe fbc9 	bl	8000c88 <__aeabi_uldivmod>
 80024f6:	4603      	mov	r3, r0
 80024f8:	460c      	mov	r4, r1
 80024fa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024fc:	4b0a      	ldr	r3, [pc, #40]	; (8002528 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	0c1b      	lsrs	r3, r3, #16
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	3301      	adds	r3, #1
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	fbb2 f3f3 	udiv	r3, r2, r3
 8002514:	60bb      	str	r3, [r7, #8]
      break;
 8002516:	e002      	b.n	800251e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002518:	4b04      	ldr	r3, [pc, #16]	; (800252c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800251a:	60bb      	str	r3, [r7, #8]
      break;
 800251c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800251e:	68bb      	ldr	r3, [r7, #8]
}
 8002520:	4618      	mov	r0, r3
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002528:	40023800 	.word	0x40023800
 800252c:	00f42400 	.word	0x00f42400
 8002530:	007a1200 	.word	0x007a1200

08002534 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e01d      	b.n	8002582 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d106      	bne.n	8002560 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7fe ffde 	bl	800151c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2202      	movs	r2, #2
 8002564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	3304      	adds	r3, #4
 8002570:	4619      	mov	r1, r3
 8002572:	4610      	mov	r0, r2
 8002574:	f000 f9fa 	bl	800296c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b082      	sub	sp, #8
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e01d      	b.n	80025d8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d106      	bne.n	80025b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f000 f815 	bl	80025e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2202      	movs	r2, #2
 80025ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	3304      	adds	r3, #4
 80025c6:	4619      	mov	r1, r3
 80025c8:	4610      	mov	r0, r2
 80025ca:	f000 f9cf 	bl	800296c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2201      	movs	r2, #1
 8002604:	6839      	ldr	r1, [r7, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f000 fc9a 	bl	8002f40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a15      	ldr	r2, [pc, #84]	; (8002668 <HAL_TIM_PWM_Start+0x74>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d004      	beq.n	8002620 <HAL_TIM_PWM_Start+0x2c>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a14      	ldr	r2, [pc, #80]	; (800266c <HAL_TIM_PWM_Start+0x78>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d101      	bne.n	8002624 <HAL_TIM_PWM_Start+0x30>
 8002620:	2301      	movs	r3, #1
 8002622:	e000      	b.n	8002626 <HAL_TIM_PWM_Start+0x32>
 8002624:	2300      	movs	r3, #0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d007      	beq.n	800263a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002638:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2b06      	cmp	r3, #6
 800264a:	d007      	beq.n	800265c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f042 0201 	orr.w	r2, r2, #1
 800265a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	40010000 	.word	0x40010000
 800266c:	40010400 	.word	0x40010400

08002670 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002682:	2b01      	cmp	r3, #1
 8002684:	d101      	bne.n	800268a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002686:	2302      	movs	r3, #2
 8002688:	e0b4      	b.n	80027f4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2202      	movs	r2, #2
 8002696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2b0c      	cmp	r3, #12
 800269e:	f200 809f 	bhi.w	80027e0 <HAL_TIM_PWM_ConfigChannel+0x170>
 80026a2:	a201      	add	r2, pc, #4	; (adr r2, 80026a8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80026a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026a8:	080026dd 	.word	0x080026dd
 80026ac:	080027e1 	.word	0x080027e1
 80026b0:	080027e1 	.word	0x080027e1
 80026b4:	080027e1 	.word	0x080027e1
 80026b8:	0800271d 	.word	0x0800271d
 80026bc:	080027e1 	.word	0x080027e1
 80026c0:	080027e1 	.word	0x080027e1
 80026c4:	080027e1 	.word	0x080027e1
 80026c8:	0800275f 	.word	0x0800275f
 80026cc:	080027e1 	.word	0x080027e1
 80026d0:	080027e1 	.word	0x080027e1
 80026d4:	080027e1 	.word	0x080027e1
 80026d8:	0800279f 	.word	0x0800279f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68b9      	ldr	r1, [r7, #8]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f000 f9e2 	bl	8002aac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	699a      	ldr	r2, [r3, #24]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f042 0208 	orr.w	r2, r2, #8
 80026f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	699a      	ldr	r2, [r3, #24]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 0204 	bic.w	r2, r2, #4
 8002706:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6999      	ldr	r1, [r3, #24]
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	691a      	ldr	r2, [r3, #16]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	619a      	str	r2, [r3, #24]
      break;
 800271a:	e062      	b.n	80027e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68b9      	ldr	r1, [r7, #8]
 8002722:	4618      	mov	r0, r3
 8002724:	f000 fa32 	bl	8002b8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	699a      	ldr	r2, [r3, #24]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002736:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	699a      	ldr	r2, [r3, #24]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002746:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6999      	ldr	r1, [r3, #24]
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	021a      	lsls	r2, r3, #8
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	430a      	orrs	r2, r1
 800275a:	619a      	str	r2, [r3, #24]
      break;
 800275c:	e041      	b.n	80027e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68b9      	ldr	r1, [r7, #8]
 8002764:	4618      	mov	r0, r3
 8002766:	f000 fa87 	bl	8002c78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	69da      	ldr	r2, [r3, #28]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f042 0208 	orr.w	r2, r2, #8
 8002778:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	69da      	ldr	r2, [r3, #28]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 0204 	bic.w	r2, r2, #4
 8002788:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	69d9      	ldr	r1, [r3, #28]
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	691a      	ldr	r2, [r3, #16]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	430a      	orrs	r2, r1
 800279a:	61da      	str	r2, [r3, #28]
      break;
 800279c:	e021      	b.n	80027e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68b9      	ldr	r1, [r7, #8]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f000 fadb 	bl	8002d60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	69da      	ldr	r2, [r3, #28]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	69da      	ldr	r2, [r3, #28]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	69d9      	ldr	r1, [r3, #28]
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	021a      	lsls	r2, r3, #8
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	430a      	orrs	r2, r1
 80027dc:	61da      	str	r2, [r3, #28]
      break;
 80027de:	e000      	b.n	80027e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80027e0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800280c:	2b01      	cmp	r3, #1
 800280e:	d101      	bne.n	8002814 <HAL_TIM_ConfigClockSource+0x18>
 8002810:	2302      	movs	r3, #2
 8002812:	e0a6      	b.n	8002962 <HAL_TIM_ConfigClockSource+0x166>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2202      	movs	r2, #2
 8002820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002832:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800283a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2b40      	cmp	r3, #64	; 0x40
 800284a:	d067      	beq.n	800291c <HAL_TIM_ConfigClockSource+0x120>
 800284c:	2b40      	cmp	r3, #64	; 0x40
 800284e:	d80b      	bhi.n	8002868 <HAL_TIM_ConfigClockSource+0x6c>
 8002850:	2b10      	cmp	r3, #16
 8002852:	d073      	beq.n	800293c <HAL_TIM_ConfigClockSource+0x140>
 8002854:	2b10      	cmp	r3, #16
 8002856:	d802      	bhi.n	800285e <HAL_TIM_ConfigClockSource+0x62>
 8002858:	2b00      	cmp	r3, #0
 800285a:	d06f      	beq.n	800293c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800285c:	e078      	b.n	8002950 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800285e:	2b20      	cmp	r3, #32
 8002860:	d06c      	beq.n	800293c <HAL_TIM_ConfigClockSource+0x140>
 8002862:	2b30      	cmp	r3, #48	; 0x30
 8002864:	d06a      	beq.n	800293c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002866:	e073      	b.n	8002950 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002868:	2b70      	cmp	r3, #112	; 0x70
 800286a:	d00d      	beq.n	8002888 <HAL_TIM_ConfigClockSource+0x8c>
 800286c:	2b70      	cmp	r3, #112	; 0x70
 800286e:	d804      	bhi.n	800287a <HAL_TIM_ConfigClockSource+0x7e>
 8002870:	2b50      	cmp	r3, #80	; 0x50
 8002872:	d033      	beq.n	80028dc <HAL_TIM_ConfigClockSource+0xe0>
 8002874:	2b60      	cmp	r3, #96	; 0x60
 8002876:	d041      	beq.n	80028fc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002878:	e06a      	b.n	8002950 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800287a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800287e:	d066      	beq.n	800294e <HAL_TIM_ConfigClockSource+0x152>
 8002880:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002884:	d017      	beq.n	80028b6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002886:	e063      	b.n	8002950 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6818      	ldr	r0, [r3, #0]
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	6899      	ldr	r1, [r3, #8]
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	f000 fb32 	bl	8002f00 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028aa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	609a      	str	r2, [r3, #8]
      break;
 80028b4:	e04c      	b.n	8002950 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6818      	ldr	r0, [r3, #0]
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	6899      	ldr	r1, [r3, #8]
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	f000 fb1b 	bl	8002f00 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028d8:	609a      	str	r2, [r3, #8]
      break;
 80028da:	e039      	b.n	8002950 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6818      	ldr	r0, [r3, #0]
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	6859      	ldr	r1, [r3, #4]
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	461a      	mov	r2, r3
 80028ea:	f000 fa8f 	bl	8002e0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2150      	movs	r1, #80	; 0x50
 80028f4:	4618      	mov	r0, r3
 80028f6:	f000 fae8 	bl	8002eca <TIM_ITRx_SetConfig>
      break;
 80028fa:	e029      	b.n	8002950 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6818      	ldr	r0, [r3, #0]
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	6859      	ldr	r1, [r3, #4]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	461a      	mov	r2, r3
 800290a:	f000 faae 	bl	8002e6a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2160      	movs	r1, #96	; 0x60
 8002914:	4618      	mov	r0, r3
 8002916:	f000 fad8 	bl	8002eca <TIM_ITRx_SetConfig>
      break;
 800291a:	e019      	b.n	8002950 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6818      	ldr	r0, [r3, #0]
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	6859      	ldr	r1, [r3, #4]
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	461a      	mov	r2, r3
 800292a:	f000 fa6f 	bl	8002e0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2140      	movs	r1, #64	; 0x40
 8002934:	4618      	mov	r0, r3
 8002936:	f000 fac8 	bl	8002eca <TIM_ITRx_SetConfig>
      break;
 800293a:	e009      	b.n	8002950 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4619      	mov	r1, r3
 8002946:	4610      	mov	r0, r2
 8002948:	f000 fabf 	bl	8002eca <TIM_ITRx_SetConfig>
      break;
 800294c:	e000      	b.n	8002950 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800294e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
	...

0800296c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a40      	ldr	r2, [pc, #256]	; (8002a80 <TIM_Base_SetConfig+0x114>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d013      	beq.n	80029ac <TIM_Base_SetConfig+0x40>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800298a:	d00f      	beq.n	80029ac <TIM_Base_SetConfig+0x40>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a3d      	ldr	r2, [pc, #244]	; (8002a84 <TIM_Base_SetConfig+0x118>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d00b      	beq.n	80029ac <TIM_Base_SetConfig+0x40>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a3c      	ldr	r2, [pc, #240]	; (8002a88 <TIM_Base_SetConfig+0x11c>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d007      	beq.n	80029ac <TIM_Base_SetConfig+0x40>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a3b      	ldr	r2, [pc, #236]	; (8002a8c <TIM_Base_SetConfig+0x120>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d003      	beq.n	80029ac <TIM_Base_SetConfig+0x40>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a3a      	ldr	r2, [pc, #232]	; (8002a90 <TIM_Base_SetConfig+0x124>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d108      	bne.n	80029be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a2f      	ldr	r2, [pc, #188]	; (8002a80 <TIM_Base_SetConfig+0x114>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d02b      	beq.n	8002a1e <TIM_Base_SetConfig+0xb2>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029cc:	d027      	beq.n	8002a1e <TIM_Base_SetConfig+0xb2>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a2c      	ldr	r2, [pc, #176]	; (8002a84 <TIM_Base_SetConfig+0x118>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d023      	beq.n	8002a1e <TIM_Base_SetConfig+0xb2>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a2b      	ldr	r2, [pc, #172]	; (8002a88 <TIM_Base_SetConfig+0x11c>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d01f      	beq.n	8002a1e <TIM_Base_SetConfig+0xb2>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a2a      	ldr	r2, [pc, #168]	; (8002a8c <TIM_Base_SetConfig+0x120>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d01b      	beq.n	8002a1e <TIM_Base_SetConfig+0xb2>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a29      	ldr	r2, [pc, #164]	; (8002a90 <TIM_Base_SetConfig+0x124>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d017      	beq.n	8002a1e <TIM_Base_SetConfig+0xb2>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a28      	ldr	r2, [pc, #160]	; (8002a94 <TIM_Base_SetConfig+0x128>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d013      	beq.n	8002a1e <TIM_Base_SetConfig+0xb2>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a27      	ldr	r2, [pc, #156]	; (8002a98 <TIM_Base_SetConfig+0x12c>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d00f      	beq.n	8002a1e <TIM_Base_SetConfig+0xb2>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a26      	ldr	r2, [pc, #152]	; (8002a9c <TIM_Base_SetConfig+0x130>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d00b      	beq.n	8002a1e <TIM_Base_SetConfig+0xb2>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a25      	ldr	r2, [pc, #148]	; (8002aa0 <TIM_Base_SetConfig+0x134>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d007      	beq.n	8002a1e <TIM_Base_SetConfig+0xb2>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a24      	ldr	r2, [pc, #144]	; (8002aa4 <TIM_Base_SetConfig+0x138>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d003      	beq.n	8002a1e <TIM_Base_SetConfig+0xb2>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a23      	ldr	r2, [pc, #140]	; (8002aa8 <TIM_Base_SetConfig+0x13c>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d108      	bne.n	8002a30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a0a      	ldr	r2, [pc, #40]	; (8002a80 <TIM_Base_SetConfig+0x114>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d003      	beq.n	8002a64 <TIM_Base_SetConfig+0xf8>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a0c      	ldr	r2, [pc, #48]	; (8002a90 <TIM_Base_SetConfig+0x124>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d103      	bne.n	8002a6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	691a      	ldr	r2, [r3, #16]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	615a      	str	r2, [r3, #20]
}
 8002a72:	bf00      	nop
 8002a74:	3714      	adds	r7, #20
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	40010000 	.word	0x40010000
 8002a84:	40000400 	.word	0x40000400
 8002a88:	40000800 	.word	0x40000800
 8002a8c:	40000c00 	.word	0x40000c00
 8002a90:	40010400 	.word	0x40010400
 8002a94:	40014000 	.word	0x40014000
 8002a98:	40014400 	.word	0x40014400
 8002a9c:	40014800 	.word	0x40014800
 8002aa0:	40001800 	.word	0x40001800
 8002aa4:	40001c00 	.word	0x40001c00
 8002aa8:	40002000 	.word	0x40002000

08002aac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b087      	sub	sp, #28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	f023 0201 	bic.w	r2, r3, #1
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f023 0303 	bic.w	r3, r3, #3
 8002ae2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	f023 0302 	bic.w	r3, r3, #2
 8002af4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a20      	ldr	r2, [pc, #128]	; (8002b84 <TIM_OC1_SetConfig+0xd8>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d003      	beq.n	8002b10 <TIM_OC1_SetConfig+0x64>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a1f      	ldr	r2, [pc, #124]	; (8002b88 <TIM_OC1_SetConfig+0xdc>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d10c      	bne.n	8002b2a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	f023 0308 	bic.w	r3, r3, #8
 8002b16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	f023 0304 	bic.w	r3, r3, #4
 8002b28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a15      	ldr	r2, [pc, #84]	; (8002b84 <TIM_OC1_SetConfig+0xd8>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d003      	beq.n	8002b3a <TIM_OC1_SetConfig+0x8e>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a14      	ldr	r2, [pc, #80]	; (8002b88 <TIM_OC1_SetConfig+0xdc>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d111      	bne.n	8002b5e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685a      	ldr	r2, [r3, #4]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	621a      	str	r2, [r3, #32]
}
 8002b78:	bf00      	nop
 8002b7a:	371c      	adds	r7, #28
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	40010000 	.word	0x40010000
 8002b88:	40010400 	.word	0x40010400

08002b8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b087      	sub	sp, #28
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	f023 0210 	bic.w	r2, r3, #16
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	021b      	lsls	r3, r3, #8
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	f023 0320 	bic.w	r3, r3, #32
 8002bd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	011b      	lsls	r3, r3, #4
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a22      	ldr	r2, [pc, #136]	; (8002c70 <TIM_OC2_SetConfig+0xe4>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d003      	beq.n	8002bf4 <TIM_OC2_SetConfig+0x68>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a21      	ldr	r2, [pc, #132]	; (8002c74 <TIM_OC2_SetConfig+0xe8>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d10d      	bne.n	8002c10 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	011b      	lsls	r3, r3, #4
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c0e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a17      	ldr	r2, [pc, #92]	; (8002c70 <TIM_OC2_SetConfig+0xe4>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d003      	beq.n	8002c20 <TIM_OC2_SetConfig+0x94>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a16      	ldr	r2, [pc, #88]	; (8002c74 <TIM_OC2_SetConfig+0xe8>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d113      	bne.n	8002c48 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	621a      	str	r2, [r3, #32]
}
 8002c62:	bf00      	nop
 8002c64:	371c      	adds	r7, #28
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	40010000 	.word	0x40010000
 8002c74:	40010400 	.word	0x40010400

08002c78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b087      	sub	sp, #28
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	69db      	ldr	r3, [r3, #28]
 8002c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ca6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f023 0303 	bic.w	r3, r3, #3
 8002cae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002cc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	021b      	lsls	r3, r3, #8
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a21      	ldr	r2, [pc, #132]	; (8002d58 <TIM_OC3_SetConfig+0xe0>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d003      	beq.n	8002cde <TIM_OC3_SetConfig+0x66>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a20      	ldr	r2, [pc, #128]	; (8002d5c <TIM_OC3_SetConfig+0xe4>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d10d      	bne.n	8002cfa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ce4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	021b      	lsls	r3, r3, #8
 8002cec:	697a      	ldr	r2, [r7, #20]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002cf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a16      	ldr	r2, [pc, #88]	; (8002d58 <TIM_OC3_SetConfig+0xe0>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d003      	beq.n	8002d0a <TIM_OC3_SetConfig+0x92>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a15      	ldr	r2, [pc, #84]	; (8002d5c <TIM_OC3_SetConfig+0xe4>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d113      	bne.n	8002d32 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	011b      	lsls	r3, r3, #4
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	011b      	lsls	r3, r3, #4
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685a      	ldr	r2, [r3, #4]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	621a      	str	r2, [r3, #32]
}
 8002d4c:	bf00      	nop
 8002d4e:	371c      	adds	r7, #28
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr
 8002d58:	40010000 	.word	0x40010000
 8002d5c:	40010400 	.word	0x40010400

08002d60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b087      	sub	sp, #28
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	021b      	lsls	r3, r3, #8
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002daa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	031b      	lsls	r3, r3, #12
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a12      	ldr	r2, [pc, #72]	; (8002e04 <TIM_OC4_SetConfig+0xa4>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d003      	beq.n	8002dc8 <TIM_OC4_SetConfig+0x68>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a11      	ldr	r2, [pc, #68]	; (8002e08 <TIM_OC4_SetConfig+0xa8>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d109      	bne.n	8002ddc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002dce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	019b      	lsls	r3, r3, #6
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	621a      	str	r2, [r3, #32]
}
 8002df6:	bf00      	nop
 8002df8:	371c      	adds	r7, #28
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	40010000 	.word	0x40010000
 8002e08:	40010400 	.word	0x40010400

08002e0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b087      	sub	sp, #28
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	f023 0201 	bic.w	r2, r3, #1
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	011b      	lsls	r3, r3, #4
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	f023 030a 	bic.w	r3, r3, #10
 8002e48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	621a      	str	r2, [r3, #32]
}
 8002e5e:	bf00      	nop
 8002e60:	371c      	adds	r7, #28
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b087      	sub	sp, #28
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	60f8      	str	r0, [r7, #12]
 8002e72:	60b9      	str	r1, [r7, #8]
 8002e74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	f023 0210 	bic.w	r2, r3, #16
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	031b      	lsls	r3, r3, #12
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ea6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	011b      	lsls	r3, r3, #4
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	621a      	str	r2, [r3, #32]
}
 8002ebe:	bf00      	nop
 8002ec0:	371c      	adds	r7, #28
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b085      	sub	sp, #20
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
 8002ed2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ee0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	f043 0307 	orr.w	r3, r3, #7
 8002eec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	609a      	str	r2, [r3, #8]
}
 8002ef4:	bf00      	nop
 8002ef6:	3714      	adds	r7, #20
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b087      	sub	sp, #28
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
 8002f0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	021a      	lsls	r2, r3, #8
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	431a      	orrs	r2, r3
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	609a      	str	r2, [r3, #8]
}
 8002f34:	bf00      	nop
 8002f36:	371c      	adds	r7, #28
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b087      	sub	sp, #28
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	f003 031f 	and.w	r3, r3, #31
 8002f52:	2201      	movs	r2, #1
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6a1a      	ldr	r2, [r3, #32]
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	43db      	mvns	r3, r3
 8002f62:	401a      	ands	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6a1a      	ldr	r2, [r3, #32]
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	f003 031f 	and.w	r3, r3, #31
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	fa01 f303 	lsl.w	r3, r1, r3
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	621a      	str	r2, [r3, #32]
}
 8002f7e:	bf00      	nop
 8002f80:	371c      	adds	r7, #28
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
	...

08002f8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d101      	bne.n	8002fa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	e05a      	b.n	800305a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a21      	ldr	r2, [pc, #132]	; (8003068 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d022      	beq.n	800302e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ff0:	d01d      	beq.n	800302e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a1d      	ldr	r2, [pc, #116]	; (800306c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d018      	beq.n	800302e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a1b      	ldr	r2, [pc, #108]	; (8003070 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d013      	beq.n	800302e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a1a      	ldr	r2, [pc, #104]	; (8003074 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d00e      	beq.n	800302e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a18      	ldr	r2, [pc, #96]	; (8003078 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d009      	beq.n	800302e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a17      	ldr	r2, [pc, #92]	; (800307c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d004      	beq.n	800302e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a15      	ldr	r2, [pc, #84]	; (8003080 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d10c      	bne.n	8003048 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003034:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	4313      	orrs	r3, r2
 800303e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3714      	adds	r7, #20
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	40010000 	.word	0x40010000
 800306c:	40000400 	.word	0x40000400
 8003070:	40000800 	.word	0x40000800
 8003074:	40000c00 	.word	0x40000c00
 8003078:	40010400 	.word	0x40010400
 800307c:	40014000 	.word	0x40014000
 8003080:	40001800 	.word	0x40001800

08003084 <__errno>:
 8003084:	4b01      	ldr	r3, [pc, #4]	; (800308c <__errno+0x8>)
 8003086:	6818      	ldr	r0, [r3, #0]
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	2000000c 	.word	0x2000000c

08003090 <__libc_init_array>:
 8003090:	b570      	push	{r4, r5, r6, lr}
 8003092:	4e0d      	ldr	r6, [pc, #52]	; (80030c8 <__libc_init_array+0x38>)
 8003094:	4c0d      	ldr	r4, [pc, #52]	; (80030cc <__libc_init_array+0x3c>)
 8003096:	1ba4      	subs	r4, r4, r6
 8003098:	10a4      	asrs	r4, r4, #2
 800309a:	2500      	movs	r5, #0
 800309c:	42a5      	cmp	r5, r4
 800309e:	d109      	bne.n	80030b4 <__libc_init_array+0x24>
 80030a0:	4e0b      	ldr	r6, [pc, #44]	; (80030d0 <__libc_init_array+0x40>)
 80030a2:	4c0c      	ldr	r4, [pc, #48]	; (80030d4 <__libc_init_array+0x44>)
 80030a4:	f004 f9fa 	bl	800749c <_init>
 80030a8:	1ba4      	subs	r4, r4, r6
 80030aa:	10a4      	asrs	r4, r4, #2
 80030ac:	2500      	movs	r5, #0
 80030ae:	42a5      	cmp	r5, r4
 80030b0:	d105      	bne.n	80030be <__libc_init_array+0x2e>
 80030b2:	bd70      	pop	{r4, r5, r6, pc}
 80030b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030b8:	4798      	blx	r3
 80030ba:	3501      	adds	r5, #1
 80030bc:	e7ee      	b.n	800309c <__libc_init_array+0xc>
 80030be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030c2:	4798      	blx	r3
 80030c4:	3501      	adds	r5, #1
 80030c6:	e7f2      	b.n	80030ae <__libc_init_array+0x1e>
 80030c8:	08007800 	.word	0x08007800
 80030cc:	08007800 	.word	0x08007800
 80030d0:	08007800 	.word	0x08007800
 80030d4:	08007804 	.word	0x08007804

080030d8 <memset>:
 80030d8:	4402      	add	r2, r0
 80030da:	4603      	mov	r3, r0
 80030dc:	4293      	cmp	r3, r2
 80030de:	d100      	bne.n	80030e2 <memset+0xa>
 80030e0:	4770      	bx	lr
 80030e2:	f803 1b01 	strb.w	r1, [r3], #1
 80030e6:	e7f9      	b.n	80030dc <memset+0x4>

080030e8 <__cvt>:
 80030e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80030ec:	ec55 4b10 	vmov	r4, r5, d0
 80030f0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80030f2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80030f6:	2d00      	cmp	r5, #0
 80030f8:	460e      	mov	r6, r1
 80030fa:	4691      	mov	r9, r2
 80030fc:	4619      	mov	r1, r3
 80030fe:	bfb8      	it	lt
 8003100:	4622      	movlt	r2, r4
 8003102:	462b      	mov	r3, r5
 8003104:	f027 0720 	bic.w	r7, r7, #32
 8003108:	bfbb      	ittet	lt
 800310a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800310e:	461d      	movlt	r5, r3
 8003110:	2300      	movge	r3, #0
 8003112:	232d      	movlt	r3, #45	; 0x2d
 8003114:	bfb8      	it	lt
 8003116:	4614      	movlt	r4, r2
 8003118:	2f46      	cmp	r7, #70	; 0x46
 800311a:	700b      	strb	r3, [r1, #0]
 800311c:	d004      	beq.n	8003128 <__cvt+0x40>
 800311e:	2f45      	cmp	r7, #69	; 0x45
 8003120:	d100      	bne.n	8003124 <__cvt+0x3c>
 8003122:	3601      	adds	r6, #1
 8003124:	2102      	movs	r1, #2
 8003126:	e000      	b.n	800312a <__cvt+0x42>
 8003128:	2103      	movs	r1, #3
 800312a:	ab03      	add	r3, sp, #12
 800312c:	9301      	str	r3, [sp, #4]
 800312e:	ab02      	add	r3, sp, #8
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	4632      	mov	r2, r6
 8003134:	4653      	mov	r3, sl
 8003136:	ec45 4b10 	vmov	d0, r4, r5
 800313a:	f001 fd8d 	bl	8004c58 <_dtoa_r>
 800313e:	2f47      	cmp	r7, #71	; 0x47
 8003140:	4680      	mov	r8, r0
 8003142:	d102      	bne.n	800314a <__cvt+0x62>
 8003144:	f019 0f01 	tst.w	r9, #1
 8003148:	d026      	beq.n	8003198 <__cvt+0xb0>
 800314a:	2f46      	cmp	r7, #70	; 0x46
 800314c:	eb08 0906 	add.w	r9, r8, r6
 8003150:	d111      	bne.n	8003176 <__cvt+0x8e>
 8003152:	f898 3000 	ldrb.w	r3, [r8]
 8003156:	2b30      	cmp	r3, #48	; 0x30
 8003158:	d10a      	bne.n	8003170 <__cvt+0x88>
 800315a:	2200      	movs	r2, #0
 800315c:	2300      	movs	r3, #0
 800315e:	4620      	mov	r0, r4
 8003160:	4629      	mov	r1, r5
 8003162:	f7fd fcb1 	bl	8000ac8 <__aeabi_dcmpeq>
 8003166:	b918      	cbnz	r0, 8003170 <__cvt+0x88>
 8003168:	f1c6 0601 	rsb	r6, r6, #1
 800316c:	f8ca 6000 	str.w	r6, [sl]
 8003170:	f8da 3000 	ldr.w	r3, [sl]
 8003174:	4499      	add	r9, r3
 8003176:	2200      	movs	r2, #0
 8003178:	2300      	movs	r3, #0
 800317a:	4620      	mov	r0, r4
 800317c:	4629      	mov	r1, r5
 800317e:	f7fd fca3 	bl	8000ac8 <__aeabi_dcmpeq>
 8003182:	b938      	cbnz	r0, 8003194 <__cvt+0xac>
 8003184:	2230      	movs	r2, #48	; 0x30
 8003186:	9b03      	ldr	r3, [sp, #12]
 8003188:	454b      	cmp	r3, r9
 800318a:	d205      	bcs.n	8003198 <__cvt+0xb0>
 800318c:	1c59      	adds	r1, r3, #1
 800318e:	9103      	str	r1, [sp, #12]
 8003190:	701a      	strb	r2, [r3, #0]
 8003192:	e7f8      	b.n	8003186 <__cvt+0x9e>
 8003194:	f8cd 900c 	str.w	r9, [sp, #12]
 8003198:	9b03      	ldr	r3, [sp, #12]
 800319a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800319c:	eba3 0308 	sub.w	r3, r3, r8
 80031a0:	4640      	mov	r0, r8
 80031a2:	6013      	str	r3, [r2, #0]
 80031a4:	b004      	add	sp, #16
 80031a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080031aa <__exponent>:
 80031aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80031ac:	2900      	cmp	r1, #0
 80031ae:	4604      	mov	r4, r0
 80031b0:	bfba      	itte	lt
 80031b2:	4249      	neglt	r1, r1
 80031b4:	232d      	movlt	r3, #45	; 0x2d
 80031b6:	232b      	movge	r3, #43	; 0x2b
 80031b8:	2909      	cmp	r1, #9
 80031ba:	f804 2b02 	strb.w	r2, [r4], #2
 80031be:	7043      	strb	r3, [r0, #1]
 80031c0:	dd20      	ble.n	8003204 <__exponent+0x5a>
 80031c2:	f10d 0307 	add.w	r3, sp, #7
 80031c6:	461f      	mov	r7, r3
 80031c8:	260a      	movs	r6, #10
 80031ca:	fb91 f5f6 	sdiv	r5, r1, r6
 80031ce:	fb06 1115 	mls	r1, r6, r5, r1
 80031d2:	3130      	adds	r1, #48	; 0x30
 80031d4:	2d09      	cmp	r5, #9
 80031d6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80031da:	f103 32ff 	add.w	r2, r3, #4294967295
 80031de:	4629      	mov	r1, r5
 80031e0:	dc09      	bgt.n	80031f6 <__exponent+0x4c>
 80031e2:	3130      	adds	r1, #48	; 0x30
 80031e4:	3b02      	subs	r3, #2
 80031e6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80031ea:	42bb      	cmp	r3, r7
 80031ec:	4622      	mov	r2, r4
 80031ee:	d304      	bcc.n	80031fa <__exponent+0x50>
 80031f0:	1a10      	subs	r0, r2, r0
 80031f2:	b003      	add	sp, #12
 80031f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031f6:	4613      	mov	r3, r2
 80031f8:	e7e7      	b.n	80031ca <__exponent+0x20>
 80031fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80031fe:	f804 2b01 	strb.w	r2, [r4], #1
 8003202:	e7f2      	b.n	80031ea <__exponent+0x40>
 8003204:	2330      	movs	r3, #48	; 0x30
 8003206:	4419      	add	r1, r3
 8003208:	7083      	strb	r3, [r0, #2]
 800320a:	1d02      	adds	r2, r0, #4
 800320c:	70c1      	strb	r1, [r0, #3]
 800320e:	e7ef      	b.n	80031f0 <__exponent+0x46>

08003210 <_printf_float>:
 8003210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003214:	b08d      	sub	sp, #52	; 0x34
 8003216:	460c      	mov	r4, r1
 8003218:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800321c:	4616      	mov	r6, r2
 800321e:	461f      	mov	r7, r3
 8003220:	4605      	mov	r5, r0
 8003222:	f002 fec7 	bl	8005fb4 <_localeconv_r>
 8003226:	6803      	ldr	r3, [r0, #0]
 8003228:	9304      	str	r3, [sp, #16]
 800322a:	4618      	mov	r0, r3
 800322c:	f7fc ffd0 	bl	80001d0 <strlen>
 8003230:	2300      	movs	r3, #0
 8003232:	930a      	str	r3, [sp, #40]	; 0x28
 8003234:	f8d8 3000 	ldr.w	r3, [r8]
 8003238:	9005      	str	r0, [sp, #20]
 800323a:	3307      	adds	r3, #7
 800323c:	f023 0307 	bic.w	r3, r3, #7
 8003240:	f103 0208 	add.w	r2, r3, #8
 8003244:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003248:	f8d4 b000 	ldr.w	fp, [r4]
 800324c:	f8c8 2000 	str.w	r2, [r8]
 8003250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003254:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003258:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800325c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003260:	9307      	str	r3, [sp, #28]
 8003262:	f8cd 8018 	str.w	r8, [sp, #24]
 8003266:	f04f 32ff 	mov.w	r2, #4294967295
 800326a:	4ba7      	ldr	r3, [pc, #668]	; (8003508 <_printf_float+0x2f8>)
 800326c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003270:	f7fd fc5c 	bl	8000b2c <__aeabi_dcmpun>
 8003274:	bb70      	cbnz	r0, 80032d4 <_printf_float+0xc4>
 8003276:	f04f 32ff 	mov.w	r2, #4294967295
 800327a:	4ba3      	ldr	r3, [pc, #652]	; (8003508 <_printf_float+0x2f8>)
 800327c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003280:	f7fd fc36 	bl	8000af0 <__aeabi_dcmple>
 8003284:	bb30      	cbnz	r0, 80032d4 <_printf_float+0xc4>
 8003286:	2200      	movs	r2, #0
 8003288:	2300      	movs	r3, #0
 800328a:	4640      	mov	r0, r8
 800328c:	4649      	mov	r1, r9
 800328e:	f7fd fc25 	bl	8000adc <__aeabi_dcmplt>
 8003292:	b110      	cbz	r0, 800329a <_printf_float+0x8a>
 8003294:	232d      	movs	r3, #45	; 0x2d
 8003296:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800329a:	4a9c      	ldr	r2, [pc, #624]	; (800350c <_printf_float+0x2fc>)
 800329c:	4b9c      	ldr	r3, [pc, #624]	; (8003510 <_printf_float+0x300>)
 800329e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80032a2:	bf8c      	ite	hi
 80032a4:	4690      	movhi	r8, r2
 80032a6:	4698      	movls	r8, r3
 80032a8:	2303      	movs	r3, #3
 80032aa:	f02b 0204 	bic.w	r2, fp, #4
 80032ae:	6123      	str	r3, [r4, #16]
 80032b0:	6022      	str	r2, [r4, #0]
 80032b2:	f04f 0900 	mov.w	r9, #0
 80032b6:	9700      	str	r7, [sp, #0]
 80032b8:	4633      	mov	r3, r6
 80032ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80032bc:	4621      	mov	r1, r4
 80032be:	4628      	mov	r0, r5
 80032c0:	f000 f9e6 	bl	8003690 <_printf_common>
 80032c4:	3001      	adds	r0, #1
 80032c6:	f040 808d 	bne.w	80033e4 <_printf_float+0x1d4>
 80032ca:	f04f 30ff 	mov.w	r0, #4294967295
 80032ce:	b00d      	add	sp, #52	; 0x34
 80032d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032d4:	4642      	mov	r2, r8
 80032d6:	464b      	mov	r3, r9
 80032d8:	4640      	mov	r0, r8
 80032da:	4649      	mov	r1, r9
 80032dc:	f7fd fc26 	bl	8000b2c <__aeabi_dcmpun>
 80032e0:	b110      	cbz	r0, 80032e8 <_printf_float+0xd8>
 80032e2:	4a8c      	ldr	r2, [pc, #560]	; (8003514 <_printf_float+0x304>)
 80032e4:	4b8c      	ldr	r3, [pc, #560]	; (8003518 <_printf_float+0x308>)
 80032e6:	e7da      	b.n	800329e <_printf_float+0x8e>
 80032e8:	6861      	ldr	r1, [r4, #4]
 80032ea:	1c4b      	adds	r3, r1, #1
 80032ec:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80032f0:	a80a      	add	r0, sp, #40	; 0x28
 80032f2:	d13e      	bne.n	8003372 <_printf_float+0x162>
 80032f4:	2306      	movs	r3, #6
 80032f6:	6063      	str	r3, [r4, #4]
 80032f8:	2300      	movs	r3, #0
 80032fa:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80032fe:	ab09      	add	r3, sp, #36	; 0x24
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	ec49 8b10 	vmov	d0, r8, r9
 8003306:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800330a:	6022      	str	r2, [r4, #0]
 800330c:	f8cd a004 	str.w	sl, [sp, #4]
 8003310:	6861      	ldr	r1, [r4, #4]
 8003312:	4628      	mov	r0, r5
 8003314:	f7ff fee8 	bl	80030e8 <__cvt>
 8003318:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800331c:	2b47      	cmp	r3, #71	; 0x47
 800331e:	4680      	mov	r8, r0
 8003320:	d109      	bne.n	8003336 <_printf_float+0x126>
 8003322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003324:	1cd8      	adds	r0, r3, #3
 8003326:	db02      	blt.n	800332e <_printf_float+0x11e>
 8003328:	6862      	ldr	r2, [r4, #4]
 800332a:	4293      	cmp	r3, r2
 800332c:	dd47      	ble.n	80033be <_printf_float+0x1ae>
 800332e:	f1aa 0a02 	sub.w	sl, sl, #2
 8003332:	fa5f fa8a 	uxtb.w	sl, sl
 8003336:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800333a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800333c:	d824      	bhi.n	8003388 <_printf_float+0x178>
 800333e:	3901      	subs	r1, #1
 8003340:	4652      	mov	r2, sl
 8003342:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003346:	9109      	str	r1, [sp, #36]	; 0x24
 8003348:	f7ff ff2f 	bl	80031aa <__exponent>
 800334c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800334e:	1813      	adds	r3, r2, r0
 8003350:	2a01      	cmp	r2, #1
 8003352:	4681      	mov	r9, r0
 8003354:	6123      	str	r3, [r4, #16]
 8003356:	dc02      	bgt.n	800335e <_printf_float+0x14e>
 8003358:	6822      	ldr	r2, [r4, #0]
 800335a:	07d1      	lsls	r1, r2, #31
 800335c:	d501      	bpl.n	8003362 <_printf_float+0x152>
 800335e:	3301      	adds	r3, #1
 8003360:	6123      	str	r3, [r4, #16]
 8003362:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003366:	2b00      	cmp	r3, #0
 8003368:	d0a5      	beq.n	80032b6 <_printf_float+0xa6>
 800336a:	232d      	movs	r3, #45	; 0x2d
 800336c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003370:	e7a1      	b.n	80032b6 <_printf_float+0xa6>
 8003372:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8003376:	f000 8177 	beq.w	8003668 <_printf_float+0x458>
 800337a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800337e:	d1bb      	bne.n	80032f8 <_printf_float+0xe8>
 8003380:	2900      	cmp	r1, #0
 8003382:	d1b9      	bne.n	80032f8 <_printf_float+0xe8>
 8003384:	2301      	movs	r3, #1
 8003386:	e7b6      	b.n	80032f6 <_printf_float+0xe6>
 8003388:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800338c:	d119      	bne.n	80033c2 <_printf_float+0x1b2>
 800338e:	2900      	cmp	r1, #0
 8003390:	6863      	ldr	r3, [r4, #4]
 8003392:	dd0c      	ble.n	80033ae <_printf_float+0x19e>
 8003394:	6121      	str	r1, [r4, #16]
 8003396:	b913      	cbnz	r3, 800339e <_printf_float+0x18e>
 8003398:	6822      	ldr	r2, [r4, #0]
 800339a:	07d2      	lsls	r2, r2, #31
 800339c:	d502      	bpl.n	80033a4 <_printf_float+0x194>
 800339e:	3301      	adds	r3, #1
 80033a0:	440b      	add	r3, r1
 80033a2:	6123      	str	r3, [r4, #16]
 80033a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033a6:	65a3      	str	r3, [r4, #88]	; 0x58
 80033a8:	f04f 0900 	mov.w	r9, #0
 80033ac:	e7d9      	b.n	8003362 <_printf_float+0x152>
 80033ae:	b913      	cbnz	r3, 80033b6 <_printf_float+0x1a6>
 80033b0:	6822      	ldr	r2, [r4, #0]
 80033b2:	07d0      	lsls	r0, r2, #31
 80033b4:	d501      	bpl.n	80033ba <_printf_float+0x1aa>
 80033b6:	3302      	adds	r3, #2
 80033b8:	e7f3      	b.n	80033a2 <_printf_float+0x192>
 80033ba:	2301      	movs	r3, #1
 80033bc:	e7f1      	b.n	80033a2 <_printf_float+0x192>
 80033be:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80033c2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80033c6:	4293      	cmp	r3, r2
 80033c8:	db05      	blt.n	80033d6 <_printf_float+0x1c6>
 80033ca:	6822      	ldr	r2, [r4, #0]
 80033cc:	6123      	str	r3, [r4, #16]
 80033ce:	07d1      	lsls	r1, r2, #31
 80033d0:	d5e8      	bpl.n	80033a4 <_printf_float+0x194>
 80033d2:	3301      	adds	r3, #1
 80033d4:	e7e5      	b.n	80033a2 <_printf_float+0x192>
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	bfd4      	ite	le
 80033da:	f1c3 0302 	rsble	r3, r3, #2
 80033de:	2301      	movgt	r3, #1
 80033e0:	4413      	add	r3, r2
 80033e2:	e7de      	b.n	80033a2 <_printf_float+0x192>
 80033e4:	6823      	ldr	r3, [r4, #0]
 80033e6:	055a      	lsls	r2, r3, #21
 80033e8:	d407      	bmi.n	80033fa <_printf_float+0x1ea>
 80033ea:	6923      	ldr	r3, [r4, #16]
 80033ec:	4642      	mov	r2, r8
 80033ee:	4631      	mov	r1, r6
 80033f0:	4628      	mov	r0, r5
 80033f2:	47b8      	blx	r7
 80033f4:	3001      	adds	r0, #1
 80033f6:	d12b      	bne.n	8003450 <_printf_float+0x240>
 80033f8:	e767      	b.n	80032ca <_printf_float+0xba>
 80033fa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80033fe:	f240 80dc 	bls.w	80035ba <_printf_float+0x3aa>
 8003402:	2200      	movs	r2, #0
 8003404:	2300      	movs	r3, #0
 8003406:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800340a:	f7fd fb5d 	bl	8000ac8 <__aeabi_dcmpeq>
 800340e:	2800      	cmp	r0, #0
 8003410:	d033      	beq.n	800347a <_printf_float+0x26a>
 8003412:	2301      	movs	r3, #1
 8003414:	4a41      	ldr	r2, [pc, #260]	; (800351c <_printf_float+0x30c>)
 8003416:	4631      	mov	r1, r6
 8003418:	4628      	mov	r0, r5
 800341a:	47b8      	blx	r7
 800341c:	3001      	adds	r0, #1
 800341e:	f43f af54 	beq.w	80032ca <_printf_float+0xba>
 8003422:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003426:	429a      	cmp	r2, r3
 8003428:	db02      	blt.n	8003430 <_printf_float+0x220>
 800342a:	6823      	ldr	r3, [r4, #0]
 800342c:	07d8      	lsls	r0, r3, #31
 800342e:	d50f      	bpl.n	8003450 <_printf_float+0x240>
 8003430:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003434:	4631      	mov	r1, r6
 8003436:	4628      	mov	r0, r5
 8003438:	47b8      	blx	r7
 800343a:	3001      	adds	r0, #1
 800343c:	f43f af45 	beq.w	80032ca <_printf_float+0xba>
 8003440:	f04f 0800 	mov.w	r8, #0
 8003444:	f104 091a 	add.w	r9, r4, #26
 8003448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800344a:	3b01      	subs	r3, #1
 800344c:	4543      	cmp	r3, r8
 800344e:	dc09      	bgt.n	8003464 <_printf_float+0x254>
 8003450:	6823      	ldr	r3, [r4, #0]
 8003452:	079b      	lsls	r3, r3, #30
 8003454:	f100 8103 	bmi.w	800365e <_printf_float+0x44e>
 8003458:	68e0      	ldr	r0, [r4, #12]
 800345a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800345c:	4298      	cmp	r0, r3
 800345e:	bfb8      	it	lt
 8003460:	4618      	movlt	r0, r3
 8003462:	e734      	b.n	80032ce <_printf_float+0xbe>
 8003464:	2301      	movs	r3, #1
 8003466:	464a      	mov	r2, r9
 8003468:	4631      	mov	r1, r6
 800346a:	4628      	mov	r0, r5
 800346c:	47b8      	blx	r7
 800346e:	3001      	adds	r0, #1
 8003470:	f43f af2b 	beq.w	80032ca <_printf_float+0xba>
 8003474:	f108 0801 	add.w	r8, r8, #1
 8003478:	e7e6      	b.n	8003448 <_printf_float+0x238>
 800347a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800347c:	2b00      	cmp	r3, #0
 800347e:	dc2b      	bgt.n	80034d8 <_printf_float+0x2c8>
 8003480:	2301      	movs	r3, #1
 8003482:	4a26      	ldr	r2, [pc, #152]	; (800351c <_printf_float+0x30c>)
 8003484:	4631      	mov	r1, r6
 8003486:	4628      	mov	r0, r5
 8003488:	47b8      	blx	r7
 800348a:	3001      	adds	r0, #1
 800348c:	f43f af1d 	beq.w	80032ca <_printf_float+0xba>
 8003490:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003492:	b923      	cbnz	r3, 800349e <_printf_float+0x28e>
 8003494:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003496:	b913      	cbnz	r3, 800349e <_printf_float+0x28e>
 8003498:	6823      	ldr	r3, [r4, #0]
 800349a:	07d9      	lsls	r1, r3, #31
 800349c:	d5d8      	bpl.n	8003450 <_printf_float+0x240>
 800349e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80034a2:	4631      	mov	r1, r6
 80034a4:	4628      	mov	r0, r5
 80034a6:	47b8      	blx	r7
 80034a8:	3001      	adds	r0, #1
 80034aa:	f43f af0e 	beq.w	80032ca <_printf_float+0xba>
 80034ae:	f04f 0900 	mov.w	r9, #0
 80034b2:	f104 0a1a 	add.w	sl, r4, #26
 80034b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034b8:	425b      	negs	r3, r3
 80034ba:	454b      	cmp	r3, r9
 80034bc:	dc01      	bgt.n	80034c2 <_printf_float+0x2b2>
 80034be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80034c0:	e794      	b.n	80033ec <_printf_float+0x1dc>
 80034c2:	2301      	movs	r3, #1
 80034c4:	4652      	mov	r2, sl
 80034c6:	4631      	mov	r1, r6
 80034c8:	4628      	mov	r0, r5
 80034ca:	47b8      	blx	r7
 80034cc:	3001      	adds	r0, #1
 80034ce:	f43f aefc 	beq.w	80032ca <_printf_float+0xba>
 80034d2:	f109 0901 	add.w	r9, r9, #1
 80034d6:	e7ee      	b.n	80034b6 <_printf_float+0x2a6>
 80034d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80034da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80034dc:	429a      	cmp	r2, r3
 80034de:	bfa8      	it	ge
 80034e0:	461a      	movge	r2, r3
 80034e2:	2a00      	cmp	r2, #0
 80034e4:	4691      	mov	r9, r2
 80034e6:	dd07      	ble.n	80034f8 <_printf_float+0x2e8>
 80034e8:	4613      	mov	r3, r2
 80034ea:	4631      	mov	r1, r6
 80034ec:	4642      	mov	r2, r8
 80034ee:	4628      	mov	r0, r5
 80034f0:	47b8      	blx	r7
 80034f2:	3001      	adds	r0, #1
 80034f4:	f43f aee9 	beq.w	80032ca <_printf_float+0xba>
 80034f8:	f104 031a 	add.w	r3, r4, #26
 80034fc:	f04f 0b00 	mov.w	fp, #0
 8003500:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003504:	9306      	str	r3, [sp, #24]
 8003506:	e015      	b.n	8003534 <_printf_float+0x324>
 8003508:	7fefffff 	.word	0x7fefffff
 800350c:	080074dc 	.word	0x080074dc
 8003510:	080074d8 	.word	0x080074d8
 8003514:	080074e4 	.word	0x080074e4
 8003518:	080074e0 	.word	0x080074e0
 800351c:	080074e8 	.word	0x080074e8
 8003520:	2301      	movs	r3, #1
 8003522:	9a06      	ldr	r2, [sp, #24]
 8003524:	4631      	mov	r1, r6
 8003526:	4628      	mov	r0, r5
 8003528:	47b8      	blx	r7
 800352a:	3001      	adds	r0, #1
 800352c:	f43f aecd 	beq.w	80032ca <_printf_float+0xba>
 8003530:	f10b 0b01 	add.w	fp, fp, #1
 8003534:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003538:	ebaa 0309 	sub.w	r3, sl, r9
 800353c:	455b      	cmp	r3, fp
 800353e:	dcef      	bgt.n	8003520 <_printf_float+0x310>
 8003540:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003544:	429a      	cmp	r2, r3
 8003546:	44d0      	add	r8, sl
 8003548:	db15      	blt.n	8003576 <_printf_float+0x366>
 800354a:	6823      	ldr	r3, [r4, #0]
 800354c:	07da      	lsls	r2, r3, #31
 800354e:	d412      	bmi.n	8003576 <_printf_float+0x366>
 8003550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003552:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003554:	eba3 020a 	sub.w	r2, r3, sl
 8003558:	eba3 0a01 	sub.w	sl, r3, r1
 800355c:	4592      	cmp	sl, r2
 800355e:	bfa8      	it	ge
 8003560:	4692      	movge	sl, r2
 8003562:	f1ba 0f00 	cmp.w	sl, #0
 8003566:	dc0e      	bgt.n	8003586 <_printf_float+0x376>
 8003568:	f04f 0800 	mov.w	r8, #0
 800356c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003570:	f104 091a 	add.w	r9, r4, #26
 8003574:	e019      	b.n	80035aa <_printf_float+0x39a>
 8003576:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800357a:	4631      	mov	r1, r6
 800357c:	4628      	mov	r0, r5
 800357e:	47b8      	blx	r7
 8003580:	3001      	adds	r0, #1
 8003582:	d1e5      	bne.n	8003550 <_printf_float+0x340>
 8003584:	e6a1      	b.n	80032ca <_printf_float+0xba>
 8003586:	4653      	mov	r3, sl
 8003588:	4642      	mov	r2, r8
 800358a:	4631      	mov	r1, r6
 800358c:	4628      	mov	r0, r5
 800358e:	47b8      	blx	r7
 8003590:	3001      	adds	r0, #1
 8003592:	d1e9      	bne.n	8003568 <_printf_float+0x358>
 8003594:	e699      	b.n	80032ca <_printf_float+0xba>
 8003596:	2301      	movs	r3, #1
 8003598:	464a      	mov	r2, r9
 800359a:	4631      	mov	r1, r6
 800359c:	4628      	mov	r0, r5
 800359e:	47b8      	blx	r7
 80035a0:	3001      	adds	r0, #1
 80035a2:	f43f ae92 	beq.w	80032ca <_printf_float+0xba>
 80035a6:	f108 0801 	add.w	r8, r8, #1
 80035aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80035ae:	1a9b      	subs	r3, r3, r2
 80035b0:	eba3 030a 	sub.w	r3, r3, sl
 80035b4:	4543      	cmp	r3, r8
 80035b6:	dcee      	bgt.n	8003596 <_printf_float+0x386>
 80035b8:	e74a      	b.n	8003450 <_printf_float+0x240>
 80035ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80035bc:	2a01      	cmp	r2, #1
 80035be:	dc01      	bgt.n	80035c4 <_printf_float+0x3b4>
 80035c0:	07db      	lsls	r3, r3, #31
 80035c2:	d53a      	bpl.n	800363a <_printf_float+0x42a>
 80035c4:	2301      	movs	r3, #1
 80035c6:	4642      	mov	r2, r8
 80035c8:	4631      	mov	r1, r6
 80035ca:	4628      	mov	r0, r5
 80035cc:	47b8      	blx	r7
 80035ce:	3001      	adds	r0, #1
 80035d0:	f43f ae7b 	beq.w	80032ca <_printf_float+0xba>
 80035d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80035d8:	4631      	mov	r1, r6
 80035da:	4628      	mov	r0, r5
 80035dc:	47b8      	blx	r7
 80035de:	3001      	adds	r0, #1
 80035e0:	f108 0801 	add.w	r8, r8, #1
 80035e4:	f43f ae71 	beq.w	80032ca <_printf_float+0xba>
 80035e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80035ea:	2200      	movs	r2, #0
 80035ec:	f103 3aff 	add.w	sl, r3, #4294967295
 80035f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80035f4:	2300      	movs	r3, #0
 80035f6:	f7fd fa67 	bl	8000ac8 <__aeabi_dcmpeq>
 80035fa:	b9c8      	cbnz	r0, 8003630 <_printf_float+0x420>
 80035fc:	4653      	mov	r3, sl
 80035fe:	4642      	mov	r2, r8
 8003600:	4631      	mov	r1, r6
 8003602:	4628      	mov	r0, r5
 8003604:	47b8      	blx	r7
 8003606:	3001      	adds	r0, #1
 8003608:	d10e      	bne.n	8003628 <_printf_float+0x418>
 800360a:	e65e      	b.n	80032ca <_printf_float+0xba>
 800360c:	2301      	movs	r3, #1
 800360e:	4652      	mov	r2, sl
 8003610:	4631      	mov	r1, r6
 8003612:	4628      	mov	r0, r5
 8003614:	47b8      	blx	r7
 8003616:	3001      	adds	r0, #1
 8003618:	f43f ae57 	beq.w	80032ca <_printf_float+0xba>
 800361c:	f108 0801 	add.w	r8, r8, #1
 8003620:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003622:	3b01      	subs	r3, #1
 8003624:	4543      	cmp	r3, r8
 8003626:	dcf1      	bgt.n	800360c <_printf_float+0x3fc>
 8003628:	464b      	mov	r3, r9
 800362a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800362e:	e6de      	b.n	80033ee <_printf_float+0x1de>
 8003630:	f04f 0800 	mov.w	r8, #0
 8003634:	f104 0a1a 	add.w	sl, r4, #26
 8003638:	e7f2      	b.n	8003620 <_printf_float+0x410>
 800363a:	2301      	movs	r3, #1
 800363c:	e7df      	b.n	80035fe <_printf_float+0x3ee>
 800363e:	2301      	movs	r3, #1
 8003640:	464a      	mov	r2, r9
 8003642:	4631      	mov	r1, r6
 8003644:	4628      	mov	r0, r5
 8003646:	47b8      	blx	r7
 8003648:	3001      	adds	r0, #1
 800364a:	f43f ae3e 	beq.w	80032ca <_printf_float+0xba>
 800364e:	f108 0801 	add.w	r8, r8, #1
 8003652:	68e3      	ldr	r3, [r4, #12]
 8003654:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003656:	1a9b      	subs	r3, r3, r2
 8003658:	4543      	cmp	r3, r8
 800365a:	dcf0      	bgt.n	800363e <_printf_float+0x42e>
 800365c:	e6fc      	b.n	8003458 <_printf_float+0x248>
 800365e:	f04f 0800 	mov.w	r8, #0
 8003662:	f104 0919 	add.w	r9, r4, #25
 8003666:	e7f4      	b.n	8003652 <_printf_float+0x442>
 8003668:	2900      	cmp	r1, #0
 800366a:	f43f ae8b 	beq.w	8003384 <_printf_float+0x174>
 800366e:	2300      	movs	r3, #0
 8003670:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8003674:	ab09      	add	r3, sp, #36	; 0x24
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	ec49 8b10 	vmov	d0, r8, r9
 800367c:	6022      	str	r2, [r4, #0]
 800367e:	f8cd a004 	str.w	sl, [sp, #4]
 8003682:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003686:	4628      	mov	r0, r5
 8003688:	f7ff fd2e 	bl	80030e8 <__cvt>
 800368c:	4680      	mov	r8, r0
 800368e:	e648      	b.n	8003322 <_printf_float+0x112>

08003690 <_printf_common>:
 8003690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003694:	4691      	mov	r9, r2
 8003696:	461f      	mov	r7, r3
 8003698:	688a      	ldr	r2, [r1, #8]
 800369a:	690b      	ldr	r3, [r1, #16]
 800369c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80036a0:	4293      	cmp	r3, r2
 80036a2:	bfb8      	it	lt
 80036a4:	4613      	movlt	r3, r2
 80036a6:	f8c9 3000 	str.w	r3, [r9]
 80036aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80036ae:	4606      	mov	r6, r0
 80036b0:	460c      	mov	r4, r1
 80036b2:	b112      	cbz	r2, 80036ba <_printf_common+0x2a>
 80036b4:	3301      	adds	r3, #1
 80036b6:	f8c9 3000 	str.w	r3, [r9]
 80036ba:	6823      	ldr	r3, [r4, #0]
 80036bc:	0699      	lsls	r1, r3, #26
 80036be:	bf42      	ittt	mi
 80036c0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80036c4:	3302      	addmi	r3, #2
 80036c6:	f8c9 3000 	strmi.w	r3, [r9]
 80036ca:	6825      	ldr	r5, [r4, #0]
 80036cc:	f015 0506 	ands.w	r5, r5, #6
 80036d0:	d107      	bne.n	80036e2 <_printf_common+0x52>
 80036d2:	f104 0a19 	add.w	sl, r4, #25
 80036d6:	68e3      	ldr	r3, [r4, #12]
 80036d8:	f8d9 2000 	ldr.w	r2, [r9]
 80036dc:	1a9b      	subs	r3, r3, r2
 80036de:	42ab      	cmp	r3, r5
 80036e0:	dc28      	bgt.n	8003734 <_printf_common+0xa4>
 80036e2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80036e6:	6822      	ldr	r2, [r4, #0]
 80036e8:	3300      	adds	r3, #0
 80036ea:	bf18      	it	ne
 80036ec:	2301      	movne	r3, #1
 80036ee:	0692      	lsls	r2, r2, #26
 80036f0:	d42d      	bmi.n	800374e <_printf_common+0xbe>
 80036f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036f6:	4639      	mov	r1, r7
 80036f8:	4630      	mov	r0, r6
 80036fa:	47c0      	blx	r8
 80036fc:	3001      	adds	r0, #1
 80036fe:	d020      	beq.n	8003742 <_printf_common+0xb2>
 8003700:	6823      	ldr	r3, [r4, #0]
 8003702:	68e5      	ldr	r5, [r4, #12]
 8003704:	f8d9 2000 	ldr.w	r2, [r9]
 8003708:	f003 0306 	and.w	r3, r3, #6
 800370c:	2b04      	cmp	r3, #4
 800370e:	bf08      	it	eq
 8003710:	1aad      	subeq	r5, r5, r2
 8003712:	68a3      	ldr	r3, [r4, #8]
 8003714:	6922      	ldr	r2, [r4, #16]
 8003716:	bf0c      	ite	eq
 8003718:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800371c:	2500      	movne	r5, #0
 800371e:	4293      	cmp	r3, r2
 8003720:	bfc4      	itt	gt
 8003722:	1a9b      	subgt	r3, r3, r2
 8003724:	18ed      	addgt	r5, r5, r3
 8003726:	f04f 0900 	mov.w	r9, #0
 800372a:	341a      	adds	r4, #26
 800372c:	454d      	cmp	r5, r9
 800372e:	d11a      	bne.n	8003766 <_printf_common+0xd6>
 8003730:	2000      	movs	r0, #0
 8003732:	e008      	b.n	8003746 <_printf_common+0xb6>
 8003734:	2301      	movs	r3, #1
 8003736:	4652      	mov	r2, sl
 8003738:	4639      	mov	r1, r7
 800373a:	4630      	mov	r0, r6
 800373c:	47c0      	blx	r8
 800373e:	3001      	adds	r0, #1
 8003740:	d103      	bne.n	800374a <_printf_common+0xba>
 8003742:	f04f 30ff 	mov.w	r0, #4294967295
 8003746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800374a:	3501      	adds	r5, #1
 800374c:	e7c3      	b.n	80036d6 <_printf_common+0x46>
 800374e:	18e1      	adds	r1, r4, r3
 8003750:	1c5a      	adds	r2, r3, #1
 8003752:	2030      	movs	r0, #48	; 0x30
 8003754:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003758:	4422      	add	r2, r4
 800375a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800375e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003762:	3302      	adds	r3, #2
 8003764:	e7c5      	b.n	80036f2 <_printf_common+0x62>
 8003766:	2301      	movs	r3, #1
 8003768:	4622      	mov	r2, r4
 800376a:	4639      	mov	r1, r7
 800376c:	4630      	mov	r0, r6
 800376e:	47c0      	blx	r8
 8003770:	3001      	adds	r0, #1
 8003772:	d0e6      	beq.n	8003742 <_printf_common+0xb2>
 8003774:	f109 0901 	add.w	r9, r9, #1
 8003778:	e7d8      	b.n	800372c <_printf_common+0x9c>
	...

0800377c <_printf_i>:
 800377c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003780:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003784:	460c      	mov	r4, r1
 8003786:	7e09      	ldrb	r1, [r1, #24]
 8003788:	b085      	sub	sp, #20
 800378a:	296e      	cmp	r1, #110	; 0x6e
 800378c:	4617      	mov	r7, r2
 800378e:	4606      	mov	r6, r0
 8003790:	4698      	mov	r8, r3
 8003792:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003794:	f000 80b3 	beq.w	80038fe <_printf_i+0x182>
 8003798:	d822      	bhi.n	80037e0 <_printf_i+0x64>
 800379a:	2963      	cmp	r1, #99	; 0x63
 800379c:	d036      	beq.n	800380c <_printf_i+0x90>
 800379e:	d80a      	bhi.n	80037b6 <_printf_i+0x3a>
 80037a0:	2900      	cmp	r1, #0
 80037a2:	f000 80b9 	beq.w	8003918 <_printf_i+0x19c>
 80037a6:	2958      	cmp	r1, #88	; 0x58
 80037a8:	f000 8083 	beq.w	80038b2 <_printf_i+0x136>
 80037ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037b0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80037b4:	e032      	b.n	800381c <_printf_i+0xa0>
 80037b6:	2964      	cmp	r1, #100	; 0x64
 80037b8:	d001      	beq.n	80037be <_printf_i+0x42>
 80037ba:	2969      	cmp	r1, #105	; 0x69
 80037bc:	d1f6      	bne.n	80037ac <_printf_i+0x30>
 80037be:	6820      	ldr	r0, [r4, #0]
 80037c0:	6813      	ldr	r3, [r2, #0]
 80037c2:	0605      	lsls	r5, r0, #24
 80037c4:	f103 0104 	add.w	r1, r3, #4
 80037c8:	d52a      	bpl.n	8003820 <_printf_i+0xa4>
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6011      	str	r1, [r2, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	da03      	bge.n	80037da <_printf_i+0x5e>
 80037d2:	222d      	movs	r2, #45	; 0x2d
 80037d4:	425b      	negs	r3, r3
 80037d6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80037da:	486f      	ldr	r0, [pc, #444]	; (8003998 <_printf_i+0x21c>)
 80037dc:	220a      	movs	r2, #10
 80037de:	e039      	b.n	8003854 <_printf_i+0xd8>
 80037e0:	2973      	cmp	r1, #115	; 0x73
 80037e2:	f000 809d 	beq.w	8003920 <_printf_i+0x1a4>
 80037e6:	d808      	bhi.n	80037fa <_printf_i+0x7e>
 80037e8:	296f      	cmp	r1, #111	; 0x6f
 80037ea:	d020      	beq.n	800382e <_printf_i+0xb2>
 80037ec:	2970      	cmp	r1, #112	; 0x70
 80037ee:	d1dd      	bne.n	80037ac <_printf_i+0x30>
 80037f0:	6823      	ldr	r3, [r4, #0]
 80037f2:	f043 0320 	orr.w	r3, r3, #32
 80037f6:	6023      	str	r3, [r4, #0]
 80037f8:	e003      	b.n	8003802 <_printf_i+0x86>
 80037fa:	2975      	cmp	r1, #117	; 0x75
 80037fc:	d017      	beq.n	800382e <_printf_i+0xb2>
 80037fe:	2978      	cmp	r1, #120	; 0x78
 8003800:	d1d4      	bne.n	80037ac <_printf_i+0x30>
 8003802:	2378      	movs	r3, #120	; 0x78
 8003804:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003808:	4864      	ldr	r0, [pc, #400]	; (800399c <_printf_i+0x220>)
 800380a:	e055      	b.n	80038b8 <_printf_i+0x13c>
 800380c:	6813      	ldr	r3, [r2, #0]
 800380e:	1d19      	adds	r1, r3, #4
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6011      	str	r1, [r2, #0]
 8003814:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003818:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800381c:	2301      	movs	r3, #1
 800381e:	e08c      	b.n	800393a <_printf_i+0x1be>
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	6011      	str	r1, [r2, #0]
 8003824:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003828:	bf18      	it	ne
 800382a:	b21b      	sxthne	r3, r3
 800382c:	e7cf      	b.n	80037ce <_printf_i+0x52>
 800382e:	6813      	ldr	r3, [r2, #0]
 8003830:	6825      	ldr	r5, [r4, #0]
 8003832:	1d18      	adds	r0, r3, #4
 8003834:	6010      	str	r0, [r2, #0]
 8003836:	0628      	lsls	r0, r5, #24
 8003838:	d501      	bpl.n	800383e <_printf_i+0xc2>
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	e002      	b.n	8003844 <_printf_i+0xc8>
 800383e:	0668      	lsls	r0, r5, #25
 8003840:	d5fb      	bpl.n	800383a <_printf_i+0xbe>
 8003842:	881b      	ldrh	r3, [r3, #0]
 8003844:	4854      	ldr	r0, [pc, #336]	; (8003998 <_printf_i+0x21c>)
 8003846:	296f      	cmp	r1, #111	; 0x6f
 8003848:	bf14      	ite	ne
 800384a:	220a      	movne	r2, #10
 800384c:	2208      	moveq	r2, #8
 800384e:	2100      	movs	r1, #0
 8003850:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003854:	6865      	ldr	r5, [r4, #4]
 8003856:	60a5      	str	r5, [r4, #8]
 8003858:	2d00      	cmp	r5, #0
 800385a:	f2c0 8095 	blt.w	8003988 <_printf_i+0x20c>
 800385e:	6821      	ldr	r1, [r4, #0]
 8003860:	f021 0104 	bic.w	r1, r1, #4
 8003864:	6021      	str	r1, [r4, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d13d      	bne.n	80038e6 <_printf_i+0x16a>
 800386a:	2d00      	cmp	r5, #0
 800386c:	f040 808e 	bne.w	800398c <_printf_i+0x210>
 8003870:	4665      	mov	r5, ip
 8003872:	2a08      	cmp	r2, #8
 8003874:	d10b      	bne.n	800388e <_printf_i+0x112>
 8003876:	6823      	ldr	r3, [r4, #0]
 8003878:	07db      	lsls	r3, r3, #31
 800387a:	d508      	bpl.n	800388e <_printf_i+0x112>
 800387c:	6923      	ldr	r3, [r4, #16]
 800387e:	6862      	ldr	r2, [r4, #4]
 8003880:	429a      	cmp	r2, r3
 8003882:	bfde      	ittt	le
 8003884:	2330      	movle	r3, #48	; 0x30
 8003886:	f805 3c01 	strble.w	r3, [r5, #-1]
 800388a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800388e:	ebac 0305 	sub.w	r3, ip, r5
 8003892:	6123      	str	r3, [r4, #16]
 8003894:	f8cd 8000 	str.w	r8, [sp]
 8003898:	463b      	mov	r3, r7
 800389a:	aa03      	add	r2, sp, #12
 800389c:	4621      	mov	r1, r4
 800389e:	4630      	mov	r0, r6
 80038a0:	f7ff fef6 	bl	8003690 <_printf_common>
 80038a4:	3001      	adds	r0, #1
 80038a6:	d14d      	bne.n	8003944 <_printf_i+0x1c8>
 80038a8:	f04f 30ff 	mov.w	r0, #4294967295
 80038ac:	b005      	add	sp, #20
 80038ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80038b2:	4839      	ldr	r0, [pc, #228]	; (8003998 <_printf_i+0x21c>)
 80038b4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80038b8:	6813      	ldr	r3, [r2, #0]
 80038ba:	6821      	ldr	r1, [r4, #0]
 80038bc:	1d1d      	adds	r5, r3, #4
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6015      	str	r5, [r2, #0]
 80038c2:	060a      	lsls	r2, r1, #24
 80038c4:	d50b      	bpl.n	80038de <_printf_i+0x162>
 80038c6:	07ca      	lsls	r2, r1, #31
 80038c8:	bf44      	itt	mi
 80038ca:	f041 0120 	orrmi.w	r1, r1, #32
 80038ce:	6021      	strmi	r1, [r4, #0]
 80038d0:	b91b      	cbnz	r3, 80038da <_printf_i+0x15e>
 80038d2:	6822      	ldr	r2, [r4, #0]
 80038d4:	f022 0220 	bic.w	r2, r2, #32
 80038d8:	6022      	str	r2, [r4, #0]
 80038da:	2210      	movs	r2, #16
 80038dc:	e7b7      	b.n	800384e <_printf_i+0xd2>
 80038de:	064d      	lsls	r5, r1, #25
 80038e0:	bf48      	it	mi
 80038e2:	b29b      	uxthmi	r3, r3
 80038e4:	e7ef      	b.n	80038c6 <_printf_i+0x14a>
 80038e6:	4665      	mov	r5, ip
 80038e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80038ec:	fb02 3311 	mls	r3, r2, r1, r3
 80038f0:	5cc3      	ldrb	r3, [r0, r3]
 80038f2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80038f6:	460b      	mov	r3, r1
 80038f8:	2900      	cmp	r1, #0
 80038fa:	d1f5      	bne.n	80038e8 <_printf_i+0x16c>
 80038fc:	e7b9      	b.n	8003872 <_printf_i+0xf6>
 80038fe:	6813      	ldr	r3, [r2, #0]
 8003900:	6825      	ldr	r5, [r4, #0]
 8003902:	6961      	ldr	r1, [r4, #20]
 8003904:	1d18      	adds	r0, r3, #4
 8003906:	6010      	str	r0, [r2, #0]
 8003908:	0628      	lsls	r0, r5, #24
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	d501      	bpl.n	8003912 <_printf_i+0x196>
 800390e:	6019      	str	r1, [r3, #0]
 8003910:	e002      	b.n	8003918 <_printf_i+0x19c>
 8003912:	066a      	lsls	r2, r5, #25
 8003914:	d5fb      	bpl.n	800390e <_printf_i+0x192>
 8003916:	8019      	strh	r1, [r3, #0]
 8003918:	2300      	movs	r3, #0
 800391a:	6123      	str	r3, [r4, #16]
 800391c:	4665      	mov	r5, ip
 800391e:	e7b9      	b.n	8003894 <_printf_i+0x118>
 8003920:	6813      	ldr	r3, [r2, #0]
 8003922:	1d19      	adds	r1, r3, #4
 8003924:	6011      	str	r1, [r2, #0]
 8003926:	681d      	ldr	r5, [r3, #0]
 8003928:	6862      	ldr	r2, [r4, #4]
 800392a:	2100      	movs	r1, #0
 800392c:	4628      	mov	r0, r5
 800392e:	f7fc fc57 	bl	80001e0 <memchr>
 8003932:	b108      	cbz	r0, 8003938 <_printf_i+0x1bc>
 8003934:	1b40      	subs	r0, r0, r5
 8003936:	6060      	str	r0, [r4, #4]
 8003938:	6863      	ldr	r3, [r4, #4]
 800393a:	6123      	str	r3, [r4, #16]
 800393c:	2300      	movs	r3, #0
 800393e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003942:	e7a7      	b.n	8003894 <_printf_i+0x118>
 8003944:	6923      	ldr	r3, [r4, #16]
 8003946:	462a      	mov	r2, r5
 8003948:	4639      	mov	r1, r7
 800394a:	4630      	mov	r0, r6
 800394c:	47c0      	blx	r8
 800394e:	3001      	adds	r0, #1
 8003950:	d0aa      	beq.n	80038a8 <_printf_i+0x12c>
 8003952:	6823      	ldr	r3, [r4, #0]
 8003954:	079b      	lsls	r3, r3, #30
 8003956:	d413      	bmi.n	8003980 <_printf_i+0x204>
 8003958:	68e0      	ldr	r0, [r4, #12]
 800395a:	9b03      	ldr	r3, [sp, #12]
 800395c:	4298      	cmp	r0, r3
 800395e:	bfb8      	it	lt
 8003960:	4618      	movlt	r0, r3
 8003962:	e7a3      	b.n	80038ac <_printf_i+0x130>
 8003964:	2301      	movs	r3, #1
 8003966:	464a      	mov	r2, r9
 8003968:	4639      	mov	r1, r7
 800396a:	4630      	mov	r0, r6
 800396c:	47c0      	blx	r8
 800396e:	3001      	adds	r0, #1
 8003970:	d09a      	beq.n	80038a8 <_printf_i+0x12c>
 8003972:	3501      	adds	r5, #1
 8003974:	68e3      	ldr	r3, [r4, #12]
 8003976:	9a03      	ldr	r2, [sp, #12]
 8003978:	1a9b      	subs	r3, r3, r2
 800397a:	42ab      	cmp	r3, r5
 800397c:	dcf2      	bgt.n	8003964 <_printf_i+0x1e8>
 800397e:	e7eb      	b.n	8003958 <_printf_i+0x1dc>
 8003980:	2500      	movs	r5, #0
 8003982:	f104 0919 	add.w	r9, r4, #25
 8003986:	e7f5      	b.n	8003974 <_printf_i+0x1f8>
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1ac      	bne.n	80038e6 <_printf_i+0x16a>
 800398c:	7803      	ldrb	r3, [r0, #0]
 800398e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003992:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003996:	e76c      	b.n	8003872 <_printf_i+0xf6>
 8003998:	080074ea 	.word	0x080074ea
 800399c:	080074fb 	.word	0x080074fb

080039a0 <_scanf_float>:
 80039a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039a4:	469a      	mov	sl, r3
 80039a6:	688b      	ldr	r3, [r1, #8]
 80039a8:	4616      	mov	r6, r2
 80039aa:	1e5a      	subs	r2, r3, #1
 80039ac:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80039b0:	b087      	sub	sp, #28
 80039b2:	bf83      	ittte	hi
 80039b4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80039b8:	189b      	addhi	r3, r3, r2
 80039ba:	9301      	strhi	r3, [sp, #4]
 80039bc:	2300      	movls	r3, #0
 80039be:	bf86      	itte	hi
 80039c0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80039c4:	608b      	strhi	r3, [r1, #8]
 80039c6:	9301      	strls	r3, [sp, #4]
 80039c8:	680b      	ldr	r3, [r1, #0]
 80039ca:	4688      	mov	r8, r1
 80039cc:	f04f 0b00 	mov.w	fp, #0
 80039d0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80039d4:	f848 3b1c 	str.w	r3, [r8], #28
 80039d8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80039dc:	4607      	mov	r7, r0
 80039de:	460c      	mov	r4, r1
 80039e0:	4645      	mov	r5, r8
 80039e2:	465a      	mov	r2, fp
 80039e4:	46d9      	mov	r9, fp
 80039e6:	f8cd b008 	str.w	fp, [sp, #8]
 80039ea:	68a1      	ldr	r1, [r4, #8]
 80039ec:	b181      	cbz	r1, 8003a10 <_scanf_float+0x70>
 80039ee:	6833      	ldr	r3, [r6, #0]
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	2b49      	cmp	r3, #73	; 0x49
 80039f4:	d071      	beq.n	8003ada <_scanf_float+0x13a>
 80039f6:	d84d      	bhi.n	8003a94 <_scanf_float+0xf4>
 80039f8:	2b39      	cmp	r3, #57	; 0x39
 80039fa:	d840      	bhi.n	8003a7e <_scanf_float+0xde>
 80039fc:	2b31      	cmp	r3, #49	; 0x31
 80039fe:	f080 8088 	bcs.w	8003b12 <_scanf_float+0x172>
 8003a02:	2b2d      	cmp	r3, #45	; 0x2d
 8003a04:	f000 8090 	beq.w	8003b28 <_scanf_float+0x188>
 8003a08:	d815      	bhi.n	8003a36 <_scanf_float+0x96>
 8003a0a:	2b2b      	cmp	r3, #43	; 0x2b
 8003a0c:	f000 808c 	beq.w	8003b28 <_scanf_float+0x188>
 8003a10:	f1b9 0f00 	cmp.w	r9, #0
 8003a14:	d003      	beq.n	8003a1e <_scanf_float+0x7e>
 8003a16:	6823      	ldr	r3, [r4, #0]
 8003a18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a1c:	6023      	str	r3, [r4, #0]
 8003a1e:	3a01      	subs	r2, #1
 8003a20:	2a01      	cmp	r2, #1
 8003a22:	f200 80ea 	bhi.w	8003bfa <_scanf_float+0x25a>
 8003a26:	4545      	cmp	r5, r8
 8003a28:	f200 80dc 	bhi.w	8003be4 <_scanf_float+0x244>
 8003a2c:	2601      	movs	r6, #1
 8003a2e:	4630      	mov	r0, r6
 8003a30:	b007      	add	sp, #28
 8003a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a36:	2b2e      	cmp	r3, #46	; 0x2e
 8003a38:	f000 809f 	beq.w	8003b7a <_scanf_float+0x1da>
 8003a3c:	2b30      	cmp	r3, #48	; 0x30
 8003a3e:	d1e7      	bne.n	8003a10 <_scanf_float+0x70>
 8003a40:	6820      	ldr	r0, [r4, #0]
 8003a42:	f410 7f80 	tst.w	r0, #256	; 0x100
 8003a46:	d064      	beq.n	8003b12 <_scanf_float+0x172>
 8003a48:	9b01      	ldr	r3, [sp, #4]
 8003a4a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8003a4e:	6020      	str	r0, [r4, #0]
 8003a50:	f109 0901 	add.w	r9, r9, #1
 8003a54:	b11b      	cbz	r3, 8003a5e <_scanf_float+0xbe>
 8003a56:	3b01      	subs	r3, #1
 8003a58:	3101      	adds	r1, #1
 8003a5a:	9301      	str	r3, [sp, #4]
 8003a5c:	60a1      	str	r1, [r4, #8]
 8003a5e:	68a3      	ldr	r3, [r4, #8]
 8003a60:	3b01      	subs	r3, #1
 8003a62:	60a3      	str	r3, [r4, #8]
 8003a64:	6923      	ldr	r3, [r4, #16]
 8003a66:	3301      	adds	r3, #1
 8003a68:	6123      	str	r3, [r4, #16]
 8003a6a:	6873      	ldr	r3, [r6, #4]
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	6073      	str	r3, [r6, #4]
 8003a72:	f340 80ac 	ble.w	8003bce <_scanf_float+0x22e>
 8003a76:	6833      	ldr	r3, [r6, #0]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	6033      	str	r3, [r6, #0]
 8003a7c:	e7b5      	b.n	80039ea <_scanf_float+0x4a>
 8003a7e:	2b45      	cmp	r3, #69	; 0x45
 8003a80:	f000 8085 	beq.w	8003b8e <_scanf_float+0x1ee>
 8003a84:	2b46      	cmp	r3, #70	; 0x46
 8003a86:	d06a      	beq.n	8003b5e <_scanf_float+0x1be>
 8003a88:	2b41      	cmp	r3, #65	; 0x41
 8003a8a:	d1c1      	bne.n	8003a10 <_scanf_float+0x70>
 8003a8c:	2a01      	cmp	r2, #1
 8003a8e:	d1bf      	bne.n	8003a10 <_scanf_float+0x70>
 8003a90:	2202      	movs	r2, #2
 8003a92:	e046      	b.n	8003b22 <_scanf_float+0x182>
 8003a94:	2b65      	cmp	r3, #101	; 0x65
 8003a96:	d07a      	beq.n	8003b8e <_scanf_float+0x1ee>
 8003a98:	d818      	bhi.n	8003acc <_scanf_float+0x12c>
 8003a9a:	2b54      	cmp	r3, #84	; 0x54
 8003a9c:	d066      	beq.n	8003b6c <_scanf_float+0x1cc>
 8003a9e:	d811      	bhi.n	8003ac4 <_scanf_float+0x124>
 8003aa0:	2b4e      	cmp	r3, #78	; 0x4e
 8003aa2:	d1b5      	bne.n	8003a10 <_scanf_float+0x70>
 8003aa4:	2a00      	cmp	r2, #0
 8003aa6:	d146      	bne.n	8003b36 <_scanf_float+0x196>
 8003aa8:	f1b9 0f00 	cmp.w	r9, #0
 8003aac:	d145      	bne.n	8003b3a <_scanf_float+0x19a>
 8003aae:	6821      	ldr	r1, [r4, #0]
 8003ab0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8003ab4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8003ab8:	d13f      	bne.n	8003b3a <_scanf_float+0x19a>
 8003aba:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8003abe:	6021      	str	r1, [r4, #0]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	e02e      	b.n	8003b22 <_scanf_float+0x182>
 8003ac4:	2b59      	cmp	r3, #89	; 0x59
 8003ac6:	d01e      	beq.n	8003b06 <_scanf_float+0x166>
 8003ac8:	2b61      	cmp	r3, #97	; 0x61
 8003aca:	e7de      	b.n	8003a8a <_scanf_float+0xea>
 8003acc:	2b6e      	cmp	r3, #110	; 0x6e
 8003ace:	d0e9      	beq.n	8003aa4 <_scanf_float+0x104>
 8003ad0:	d815      	bhi.n	8003afe <_scanf_float+0x15e>
 8003ad2:	2b66      	cmp	r3, #102	; 0x66
 8003ad4:	d043      	beq.n	8003b5e <_scanf_float+0x1be>
 8003ad6:	2b69      	cmp	r3, #105	; 0x69
 8003ad8:	d19a      	bne.n	8003a10 <_scanf_float+0x70>
 8003ada:	f1bb 0f00 	cmp.w	fp, #0
 8003ade:	d138      	bne.n	8003b52 <_scanf_float+0x1b2>
 8003ae0:	f1b9 0f00 	cmp.w	r9, #0
 8003ae4:	d197      	bne.n	8003a16 <_scanf_float+0x76>
 8003ae6:	6821      	ldr	r1, [r4, #0]
 8003ae8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8003aec:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8003af0:	d195      	bne.n	8003a1e <_scanf_float+0x7e>
 8003af2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8003af6:	6021      	str	r1, [r4, #0]
 8003af8:	f04f 0b01 	mov.w	fp, #1
 8003afc:	e011      	b.n	8003b22 <_scanf_float+0x182>
 8003afe:	2b74      	cmp	r3, #116	; 0x74
 8003b00:	d034      	beq.n	8003b6c <_scanf_float+0x1cc>
 8003b02:	2b79      	cmp	r3, #121	; 0x79
 8003b04:	d184      	bne.n	8003a10 <_scanf_float+0x70>
 8003b06:	f1bb 0f07 	cmp.w	fp, #7
 8003b0a:	d181      	bne.n	8003a10 <_scanf_float+0x70>
 8003b0c:	f04f 0b08 	mov.w	fp, #8
 8003b10:	e007      	b.n	8003b22 <_scanf_float+0x182>
 8003b12:	eb12 0f0b 	cmn.w	r2, fp
 8003b16:	f47f af7b 	bne.w	8003a10 <_scanf_float+0x70>
 8003b1a:	6821      	ldr	r1, [r4, #0]
 8003b1c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8003b20:	6021      	str	r1, [r4, #0]
 8003b22:	702b      	strb	r3, [r5, #0]
 8003b24:	3501      	adds	r5, #1
 8003b26:	e79a      	b.n	8003a5e <_scanf_float+0xbe>
 8003b28:	6821      	ldr	r1, [r4, #0]
 8003b2a:	0608      	lsls	r0, r1, #24
 8003b2c:	f57f af70 	bpl.w	8003a10 <_scanf_float+0x70>
 8003b30:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003b34:	e7f4      	b.n	8003b20 <_scanf_float+0x180>
 8003b36:	2a02      	cmp	r2, #2
 8003b38:	d047      	beq.n	8003bca <_scanf_float+0x22a>
 8003b3a:	f1bb 0f01 	cmp.w	fp, #1
 8003b3e:	d003      	beq.n	8003b48 <_scanf_float+0x1a8>
 8003b40:	f1bb 0f04 	cmp.w	fp, #4
 8003b44:	f47f af64 	bne.w	8003a10 <_scanf_float+0x70>
 8003b48:	f10b 0b01 	add.w	fp, fp, #1
 8003b4c:	fa5f fb8b 	uxtb.w	fp, fp
 8003b50:	e7e7      	b.n	8003b22 <_scanf_float+0x182>
 8003b52:	f1bb 0f03 	cmp.w	fp, #3
 8003b56:	d0f7      	beq.n	8003b48 <_scanf_float+0x1a8>
 8003b58:	f1bb 0f05 	cmp.w	fp, #5
 8003b5c:	e7f2      	b.n	8003b44 <_scanf_float+0x1a4>
 8003b5e:	f1bb 0f02 	cmp.w	fp, #2
 8003b62:	f47f af55 	bne.w	8003a10 <_scanf_float+0x70>
 8003b66:	f04f 0b03 	mov.w	fp, #3
 8003b6a:	e7da      	b.n	8003b22 <_scanf_float+0x182>
 8003b6c:	f1bb 0f06 	cmp.w	fp, #6
 8003b70:	f47f af4e 	bne.w	8003a10 <_scanf_float+0x70>
 8003b74:	f04f 0b07 	mov.w	fp, #7
 8003b78:	e7d3      	b.n	8003b22 <_scanf_float+0x182>
 8003b7a:	6821      	ldr	r1, [r4, #0]
 8003b7c:	0588      	lsls	r0, r1, #22
 8003b7e:	f57f af47 	bpl.w	8003a10 <_scanf_float+0x70>
 8003b82:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8003b86:	6021      	str	r1, [r4, #0]
 8003b88:	f8cd 9008 	str.w	r9, [sp, #8]
 8003b8c:	e7c9      	b.n	8003b22 <_scanf_float+0x182>
 8003b8e:	6821      	ldr	r1, [r4, #0]
 8003b90:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8003b94:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8003b98:	d006      	beq.n	8003ba8 <_scanf_float+0x208>
 8003b9a:	0548      	lsls	r0, r1, #21
 8003b9c:	f57f af38 	bpl.w	8003a10 <_scanf_float+0x70>
 8003ba0:	f1b9 0f00 	cmp.w	r9, #0
 8003ba4:	f43f af3b 	beq.w	8003a1e <_scanf_float+0x7e>
 8003ba8:	0588      	lsls	r0, r1, #22
 8003baa:	bf58      	it	pl
 8003bac:	9802      	ldrpl	r0, [sp, #8]
 8003bae:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8003bb2:	bf58      	it	pl
 8003bb4:	eba9 0000 	subpl.w	r0, r9, r0
 8003bb8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8003bbc:	bf58      	it	pl
 8003bbe:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8003bc2:	6021      	str	r1, [r4, #0]
 8003bc4:	f04f 0900 	mov.w	r9, #0
 8003bc8:	e7ab      	b.n	8003b22 <_scanf_float+0x182>
 8003bca:	2203      	movs	r2, #3
 8003bcc:	e7a9      	b.n	8003b22 <_scanf_float+0x182>
 8003bce:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003bd2:	9205      	str	r2, [sp, #20]
 8003bd4:	4631      	mov	r1, r6
 8003bd6:	4638      	mov	r0, r7
 8003bd8:	4798      	blx	r3
 8003bda:	9a05      	ldr	r2, [sp, #20]
 8003bdc:	2800      	cmp	r0, #0
 8003bde:	f43f af04 	beq.w	80039ea <_scanf_float+0x4a>
 8003be2:	e715      	b.n	8003a10 <_scanf_float+0x70>
 8003be4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003be8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8003bec:	4632      	mov	r2, r6
 8003bee:	4638      	mov	r0, r7
 8003bf0:	4798      	blx	r3
 8003bf2:	6923      	ldr	r3, [r4, #16]
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	6123      	str	r3, [r4, #16]
 8003bf8:	e715      	b.n	8003a26 <_scanf_float+0x86>
 8003bfa:	f10b 33ff 	add.w	r3, fp, #4294967295
 8003bfe:	2b06      	cmp	r3, #6
 8003c00:	d80a      	bhi.n	8003c18 <_scanf_float+0x278>
 8003c02:	f1bb 0f02 	cmp.w	fp, #2
 8003c06:	d968      	bls.n	8003cda <_scanf_float+0x33a>
 8003c08:	f1ab 0b03 	sub.w	fp, fp, #3
 8003c0c:	fa5f fb8b 	uxtb.w	fp, fp
 8003c10:	eba5 0b0b 	sub.w	fp, r5, fp
 8003c14:	455d      	cmp	r5, fp
 8003c16:	d14b      	bne.n	8003cb0 <_scanf_float+0x310>
 8003c18:	6823      	ldr	r3, [r4, #0]
 8003c1a:	05da      	lsls	r2, r3, #23
 8003c1c:	d51f      	bpl.n	8003c5e <_scanf_float+0x2be>
 8003c1e:	055b      	lsls	r3, r3, #21
 8003c20:	d468      	bmi.n	8003cf4 <_scanf_float+0x354>
 8003c22:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8003c26:	6923      	ldr	r3, [r4, #16]
 8003c28:	2965      	cmp	r1, #101	; 0x65
 8003c2a:	f103 33ff 	add.w	r3, r3, #4294967295
 8003c2e:	f105 3bff 	add.w	fp, r5, #4294967295
 8003c32:	6123      	str	r3, [r4, #16]
 8003c34:	d00d      	beq.n	8003c52 <_scanf_float+0x2b2>
 8003c36:	2945      	cmp	r1, #69	; 0x45
 8003c38:	d00b      	beq.n	8003c52 <_scanf_float+0x2b2>
 8003c3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003c3e:	4632      	mov	r2, r6
 8003c40:	4638      	mov	r0, r7
 8003c42:	4798      	blx	r3
 8003c44:	6923      	ldr	r3, [r4, #16]
 8003c46:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	f1a5 0b02 	sub.w	fp, r5, #2
 8003c50:	6123      	str	r3, [r4, #16]
 8003c52:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003c56:	4632      	mov	r2, r6
 8003c58:	4638      	mov	r0, r7
 8003c5a:	4798      	blx	r3
 8003c5c:	465d      	mov	r5, fp
 8003c5e:	6826      	ldr	r6, [r4, #0]
 8003c60:	f016 0610 	ands.w	r6, r6, #16
 8003c64:	d17a      	bne.n	8003d5c <_scanf_float+0x3bc>
 8003c66:	702e      	strb	r6, [r5, #0]
 8003c68:	6823      	ldr	r3, [r4, #0]
 8003c6a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c72:	d142      	bne.n	8003cfa <_scanf_float+0x35a>
 8003c74:	9b02      	ldr	r3, [sp, #8]
 8003c76:	eba9 0303 	sub.w	r3, r9, r3
 8003c7a:	425a      	negs	r2, r3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d149      	bne.n	8003d14 <_scanf_float+0x374>
 8003c80:	2200      	movs	r2, #0
 8003c82:	4641      	mov	r1, r8
 8003c84:	4638      	mov	r0, r7
 8003c86:	f000 febb 	bl	8004a00 <_strtod_r>
 8003c8a:	6825      	ldr	r5, [r4, #0]
 8003c8c:	f8da 3000 	ldr.w	r3, [sl]
 8003c90:	f015 0f02 	tst.w	r5, #2
 8003c94:	f103 0204 	add.w	r2, r3, #4
 8003c98:	ec59 8b10 	vmov	r8, r9, d0
 8003c9c:	f8ca 2000 	str.w	r2, [sl]
 8003ca0:	d043      	beq.n	8003d2a <_scanf_float+0x38a>
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	e9c3 8900 	strd	r8, r9, [r3]
 8003ca8:	68e3      	ldr	r3, [r4, #12]
 8003caa:	3301      	adds	r3, #1
 8003cac:	60e3      	str	r3, [r4, #12]
 8003cae:	e6be      	b.n	8003a2e <_scanf_float+0x8e>
 8003cb0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003cb4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8003cb8:	4632      	mov	r2, r6
 8003cba:	4638      	mov	r0, r7
 8003cbc:	4798      	blx	r3
 8003cbe:	6923      	ldr	r3, [r4, #16]
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	6123      	str	r3, [r4, #16]
 8003cc4:	e7a6      	b.n	8003c14 <_scanf_float+0x274>
 8003cc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003cca:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8003cce:	4632      	mov	r2, r6
 8003cd0:	4638      	mov	r0, r7
 8003cd2:	4798      	blx	r3
 8003cd4:	6923      	ldr	r3, [r4, #16]
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	6123      	str	r3, [r4, #16]
 8003cda:	4545      	cmp	r5, r8
 8003cdc:	d8f3      	bhi.n	8003cc6 <_scanf_float+0x326>
 8003cde:	e6a5      	b.n	8003a2c <_scanf_float+0x8c>
 8003ce0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003ce4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8003ce8:	4632      	mov	r2, r6
 8003cea:	4638      	mov	r0, r7
 8003cec:	4798      	blx	r3
 8003cee:	6923      	ldr	r3, [r4, #16]
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	6123      	str	r3, [r4, #16]
 8003cf4:	4545      	cmp	r5, r8
 8003cf6:	d8f3      	bhi.n	8003ce0 <_scanf_float+0x340>
 8003cf8:	e698      	b.n	8003a2c <_scanf_float+0x8c>
 8003cfa:	9b03      	ldr	r3, [sp, #12]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d0bf      	beq.n	8003c80 <_scanf_float+0x2e0>
 8003d00:	9904      	ldr	r1, [sp, #16]
 8003d02:	230a      	movs	r3, #10
 8003d04:	4632      	mov	r2, r6
 8003d06:	3101      	adds	r1, #1
 8003d08:	4638      	mov	r0, r7
 8003d0a:	f000 ff05 	bl	8004b18 <_strtol_r>
 8003d0e:	9b03      	ldr	r3, [sp, #12]
 8003d10:	9d04      	ldr	r5, [sp, #16]
 8003d12:	1ac2      	subs	r2, r0, r3
 8003d14:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8003d18:	429d      	cmp	r5, r3
 8003d1a:	bf28      	it	cs
 8003d1c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8003d20:	490f      	ldr	r1, [pc, #60]	; (8003d60 <_scanf_float+0x3c0>)
 8003d22:	4628      	mov	r0, r5
 8003d24:	f000 f83c 	bl	8003da0 <siprintf>
 8003d28:	e7aa      	b.n	8003c80 <_scanf_float+0x2e0>
 8003d2a:	f015 0504 	ands.w	r5, r5, #4
 8003d2e:	d1b8      	bne.n	8003ca2 <_scanf_float+0x302>
 8003d30:	681f      	ldr	r7, [r3, #0]
 8003d32:	ee10 2a10 	vmov	r2, s0
 8003d36:	464b      	mov	r3, r9
 8003d38:	ee10 0a10 	vmov	r0, s0
 8003d3c:	4649      	mov	r1, r9
 8003d3e:	f7fc fef5 	bl	8000b2c <__aeabi_dcmpun>
 8003d42:	b128      	cbz	r0, 8003d50 <_scanf_float+0x3b0>
 8003d44:	4628      	mov	r0, r5
 8003d46:	f000 f825 	bl	8003d94 <nanf>
 8003d4a:	ed87 0a00 	vstr	s0, [r7]
 8003d4e:	e7ab      	b.n	8003ca8 <_scanf_float+0x308>
 8003d50:	4640      	mov	r0, r8
 8003d52:	4649      	mov	r1, r9
 8003d54:	f7fc ff48 	bl	8000be8 <__aeabi_d2f>
 8003d58:	6038      	str	r0, [r7, #0]
 8003d5a:	e7a5      	b.n	8003ca8 <_scanf_float+0x308>
 8003d5c:	2600      	movs	r6, #0
 8003d5e:	e666      	b.n	8003a2e <_scanf_float+0x8e>
 8003d60:	0800750c 	.word	0x0800750c

08003d64 <iprintf>:
 8003d64:	b40f      	push	{r0, r1, r2, r3}
 8003d66:	4b0a      	ldr	r3, [pc, #40]	; (8003d90 <iprintf+0x2c>)
 8003d68:	b513      	push	{r0, r1, r4, lr}
 8003d6a:	681c      	ldr	r4, [r3, #0]
 8003d6c:	b124      	cbz	r4, 8003d78 <iprintf+0x14>
 8003d6e:	69a3      	ldr	r3, [r4, #24]
 8003d70:	b913      	cbnz	r3, 8003d78 <iprintf+0x14>
 8003d72:	4620      	mov	r0, r4
 8003d74:	f001 fd68 	bl	8005848 <__sinit>
 8003d78:	ab05      	add	r3, sp, #20
 8003d7a:	9a04      	ldr	r2, [sp, #16]
 8003d7c:	68a1      	ldr	r1, [r4, #8]
 8003d7e:	9301      	str	r3, [sp, #4]
 8003d80:	4620      	mov	r0, r4
 8003d82:	f002 ff7b 	bl	8006c7c <_vfiprintf_r>
 8003d86:	b002      	add	sp, #8
 8003d88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d8c:	b004      	add	sp, #16
 8003d8e:	4770      	bx	lr
 8003d90:	2000000c 	.word	0x2000000c

08003d94 <nanf>:
 8003d94:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8003d9c <nanf+0x8>
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	7fc00000 	.word	0x7fc00000

08003da0 <siprintf>:
 8003da0:	b40e      	push	{r1, r2, r3}
 8003da2:	b500      	push	{lr}
 8003da4:	b09c      	sub	sp, #112	; 0x70
 8003da6:	ab1d      	add	r3, sp, #116	; 0x74
 8003da8:	9002      	str	r0, [sp, #8]
 8003daa:	9006      	str	r0, [sp, #24]
 8003dac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003db0:	4809      	ldr	r0, [pc, #36]	; (8003dd8 <siprintf+0x38>)
 8003db2:	9107      	str	r1, [sp, #28]
 8003db4:	9104      	str	r1, [sp, #16]
 8003db6:	4909      	ldr	r1, [pc, #36]	; (8003ddc <siprintf+0x3c>)
 8003db8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003dbc:	9105      	str	r1, [sp, #20]
 8003dbe:	6800      	ldr	r0, [r0, #0]
 8003dc0:	9301      	str	r3, [sp, #4]
 8003dc2:	a902      	add	r1, sp, #8
 8003dc4:	f002 fe38 	bl	8006a38 <_svfiprintf_r>
 8003dc8:	9b02      	ldr	r3, [sp, #8]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	701a      	strb	r2, [r3, #0]
 8003dce:	b01c      	add	sp, #112	; 0x70
 8003dd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003dd4:	b003      	add	sp, #12
 8003dd6:	4770      	bx	lr
 8003dd8:	2000000c 	.word	0x2000000c
 8003ddc:	ffff0208 	.word	0xffff0208

08003de0 <sulp>:
 8003de0:	b570      	push	{r4, r5, r6, lr}
 8003de2:	4604      	mov	r4, r0
 8003de4:	460d      	mov	r5, r1
 8003de6:	ec45 4b10 	vmov	d0, r4, r5
 8003dea:	4616      	mov	r6, r2
 8003dec:	f002 fbe0 	bl	80065b0 <__ulp>
 8003df0:	ec51 0b10 	vmov	r0, r1, d0
 8003df4:	b17e      	cbz	r6, 8003e16 <sulp+0x36>
 8003df6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8003dfa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	dd09      	ble.n	8003e16 <sulp+0x36>
 8003e02:	051b      	lsls	r3, r3, #20
 8003e04:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003e08:	2400      	movs	r4, #0
 8003e0a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003e0e:	4622      	mov	r2, r4
 8003e10:	462b      	mov	r3, r5
 8003e12:	f7fc fbf1 	bl	80005f8 <__aeabi_dmul>
 8003e16:	bd70      	pop	{r4, r5, r6, pc}

08003e18 <_strtod_l>:
 8003e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e1c:	461f      	mov	r7, r3
 8003e1e:	b0a1      	sub	sp, #132	; 0x84
 8003e20:	2300      	movs	r3, #0
 8003e22:	4681      	mov	r9, r0
 8003e24:	4638      	mov	r0, r7
 8003e26:	460e      	mov	r6, r1
 8003e28:	9217      	str	r2, [sp, #92]	; 0x5c
 8003e2a:	931c      	str	r3, [sp, #112]	; 0x70
 8003e2c:	f002 f8bf 	bl	8005fae <__localeconv_l>
 8003e30:	4680      	mov	r8, r0
 8003e32:	6800      	ldr	r0, [r0, #0]
 8003e34:	f7fc f9cc 	bl	80001d0 <strlen>
 8003e38:	f04f 0a00 	mov.w	sl, #0
 8003e3c:	4604      	mov	r4, r0
 8003e3e:	f04f 0b00 	mov.w	fp, #0
 8003e42:	961b      	str	r6, [sp, #108]	; 0x6c
 8003e44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003e46:	781a      	ldrb	r2, [r3, #0]
 8003e48:	2a0d      	cmp	r2, #13
 8003e4a:	d832      	bhi.n	8003eb2 <_strtod_l+0x9a>
 8003e4c:	2a09      	cmp	r2, #9
 8003e4e:	d236      	bcs.n	8003ebe <_strtod_l+0xa6>
 8003e50:	2a00      	cmp	r2, #0
 8003e52:	d03e      	beq.n	8003ed2 <_strtod_l+0xba>
 8003e54:	2300      	movs	r3, #0
 8003e56:	930d      	str	r3, [sp, #52]	; 0x34
 8003e58:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8003e5a:	782b      	ldrb	r3, [r5, #0]
 8003e5c:	2b30      	cmp	r3, #48	; 0x30
 8003e5e:	f040 80ac 	bne.w	8003fba <_strtod_l+0x1a2>
 8003e62:	786b      	ldrb	r3, [r5, #1]
 8003e64:	2b58      	cmp	r3, #88	; 0x58
 8003e66:	d001      	beq.n	8003e6c <_strtod_l+0x54>
 8003e68:	2b78      	cmp	r3, #120	; 0x78
 8003e6a:	d167      	bne.n	8003f3c <_strtod_l+0x124>
 8003e6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003e6e:	9301      	str	r3, [sp, #4]
 8003e70:	ab1c      	add	r3, sp, #112	; 0x70
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	9702      	str	r7, [sp, #8]
 8003e76:	ab1d      	add	r3, sp, #116	; 0x74
 8003e78:	4a88      	ldr	r2, [pc, #544]	; (800409c <_strtod_l+0x284>)
 8003e7a:	a91b      	add	r1, sp, #108	; 0x6c
 8003e7c:	4648      	mov	r0, r9
 8003e7e:	f001 fdbc 	bl	80059fa <__gethex>
 8003e82:	f010 0407 	ands.w	r4, r0, #7
 8003e86:	4606      	mov	r6, r0
 8003e88:	d005      	beq.n	8003e96 <_strtod_l+0x7e>
 8003e8a:	2c06      	cmp	r4, #6
 8003e8c:	d12b      	bne.n	8003ee6 <_strtod_l+0xce>
 8003e8e:	3501      	adds	r5, #1
 8003e90:	2300      	movs	r3, #0
 8003e92:	951b      	str	r5, [sp, #108]	; 0x6c
 8003e94:	930d      	str	r3, [sp, #52]	; 0x34
 8003e96:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f040 859a 	bne.w	80049d2 <_strtod_l+0xbba>
 8003e9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003ea0:	b1e3      	cbz	r3, 8003edc <_strtod_l+0xc4>
 8003ea2:	4652      	mov	r2, sl
 8003ea4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8003ea8:	ec43 2b10 	vmov	d0, r2, r3
 8003eac:	b021      	add	sp, #132	; 0x84
 8003eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eb2:	2a2b      	cmp	r2, #43	; 0x2b
 8003eb4:	d015      	beq.n	8003ee2 <_strtod_l+0xca>
 8003eb6:	2a2d      	cmp	r2, #45	; 0x2d
 8003eb8:	d004      	beq.n	8003ec4 <_strtod_l+0xac>
 8003eba:	2a20      	cmp	r2, #32
 8003ebc:	d1ca      	bne.n	8003e54 <_strtod_l+0x3c>
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	931b      	str	r3, [sp, #108]	; 0x6c
 8003ec2:	e7bf      	b.n	8003e44 <_strtod_l+0x2c>
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	920d      	str	r2, [sp, #52]	; 0x34
 8003ec8:	1c5a      	adds	r2, r3, #1
 8003eca:	921b      	str	r2, [sp, #108]	; 0x6c
 8003ecc:	785b      	ldrb	r3, [r3, #1]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1c2      	bne.n	8003e58 <_strtod_l+0x40>
 8003ed2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003ed4:	961b      	str	r6, [sp, #108]	; 0x6c
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f040 8579 	bne.w	80049ce <_strtod_l+0xbb6>
 8003edc:	4652      	mov	r2, sl
 8003ede:	465b      	mov	r3, fp
 8003ee0:	e7e2      	b.n	8003ea8 <_strtod_l+0x90>
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	e7ef      	b.n	8003ec6 <_strtod_l+0xae>
 8003ee6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8003ee8:	b13a      	cbz	r2, 8003efa <_strtod_l+0xe2>
 8003eea:	2135      	movs	r1, #53	; 0x35
 8003eec:	a81e      	add	r0, sp, #120	; 0x78
 8003eee:	f002 fc57 	bl	80067a0 <__copybits>
 8003ef2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003ef4:	4648      	mov	r0, r9
 8003ef6:	f002 f8c4 	bl	8006082 <_Bfree>
 8003efa:	3c01      	subs	r4, #1
 8003efc:	2c04      	cmp	r4, #4
 8003efe:	d806      	bhi.n	8003f0e <_strtod_l+0xf6>
 8003f00:	e8df f004 	tbb	[pc, r4]
 8003f04:	1714030a 	.word	0x1714030a
 8003f08:	0a          	.byte	0x0a
 8003f09:	00          	.byte	0x00
 8003f0a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8003f0e:	0730      	lsls	r0, r6, #28
 8003f10:	d5c1      	bpl.n	8003e96 <_strtod_l+0x7e>
 8003f12:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8003f16:	e7be      	b.n	8003e96 <_strtod_l+0x7e>
 8003f18:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8003f1c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8003f1e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003f22:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8003f26:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8003f2a:	e7f0      	b.n	8003f0e <_strtod_l+0xf6>
 8003f2c:	f8df b170 	ldr.w	fp, [pc, #368]	; 80040a0 <_strtod_l+0x288>
 8003f30:	e7ed      	b.n	8003f0e <_strtod_l+0xf6>
 8003f32:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8003f36:	f04f 3aff 	mov.w	sl, #4294967295
 8003f3a:	e7e8      	b.n	8003f0e <_strtod_l+0xf6>
 8003f3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003f3e:	1c5a      	adds	r2, r3, #1
 8003f40:	921b      	str	r2, [sp, #108]	; 0x6c
 8003f42:	785b      	ldrb	r3, [r3, #1]
 8003f44:	2b30      	cmp	r3, #48	; 0x30
 8003f46:	d0f9      	beq.n	8003f3c <_strtod_l+0x124>
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d0a4      	beq.n	8003e96 <_strtod_l+0x7e>
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	2500      	movs	r5, #0
 8003f50:	9306      	str	r3, [sp, #24]
 8003f52:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003f54:	9308      	str	r3, [sp, #32]
 8003f56:	9507      	str	r5, [sp, #28]
 8003f58:	9505      	str	r5, [sp, #20]
 8003f5a:	220a      	movs	r2, #10
 8003f5c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8003f5e:	7807      	ldrb	r7, [r0, #0]
 8003f60:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8003f64:	b2d9      	uxtb	r1, r3
 8003f66:	2909      	cmp	r1, #9
 8003f68:	d929      	bls.n	8003fbe <_strtod_l+0x1a6>
 8003f6a:	4622      	mov	r2, r4
 8003f6c:	f8d8 1000 	ldr.w	r1, [r8]
 8003f70:	f002 ffed 	bl	8006f4e <strncmp>
 8003f74:	2800      	cmp	r0, #0
 8003f76:	d031      	beq.n	8003fdc <_strtod_l+0x1c4>
 8003f78:	2000      	movs	r0, #0
 8003f7a:	9c05      	ldr	r4, [sp, #20]
 8003f7c:	9004      	str	r0, [sp, #16]
 8003f7e:	463b      	mov	r3, r7
 8003f80:	4602      	mov	r2, r0
 8003f82:	2b65      	cmp	r3, #101	; 0x65
 8003f84:	d001      	beq.n	8003f8a <_strtod_l+0x172>
 8003f86:	2b45      	cmp	r3, #69	; 0x45
 8003f88:	d114      	bne.n	8003fb4 <_strtod_l+0x19c>
 8003f8a:	b924      	cbnz	r4, 8003f96 <_strtod_l+0x17e>
 8003f8c:	b910      	cbnz	r0, 8003f94 <_strtod_l+0x17c>
 8003f8e:	9b06      	ldr	r3, [sp, #24]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d09e      	beq.n	8003ed2 <_strtod_l+0xba>
 8003f94:	2400      	movs	r4, #0
 8003f96:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8003f98:	1c73      	adds	r3, r6, #1
 8003f9a:	931b      	str	r3, [sp, #108]	; 0x6c
 8003f9c:	7873      	ldrb	r3, [r6, #1]
 8003f9e:	2b2b      	cmp	r3, #43	; 0x2b
 8003fa0:	d078      	beq.n	8004094 <_strtod_l+0x27c>
 8003fa2:	2b2d      	cmp	r3, #45	; 0x2d
 8003fa4:	d070      	beq.n	8004088 <_strtod_l+0x270>
 8003fa6:	f04f 0c00 	mov.w	ip, #0
 8003faa:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8003fae:	2f09      	cmp	r7, #9
 8003fb0:	d97c      	bls.n	80040ac <_strtod_l+0x294>
 8003fb2:	961b      	str	r6, [sp, #108]	; 0x6c
 8003fb4:	f04f 0e00 	mov.w	lr, #0
 8003fb8:	e09a      	b.n	80040f0 <_strtod_l+0x2d8>
 8003fba:	2300      	movs	r3, #0
 8003fbc:	e7c7      	b.n	8003f4e <_strtod_l+0x136>
 8003fbe:	9905      	ldr	r1, [sp, #20]
 8003fc0:	2908      	cmp	r1, #8
 8003fc2:	bfdd      	ittte	le
 8003fc4:	9907      	ldrle	r1, [sp, #28]
 8003fc6:	fb02 3301 	mlale	r3, r2, r1, r3
 8003fca:	9307      	strle	r3, [sp, #28]
 8003fcc:	fb02 3505 	mlagt	r5, r2, r5, r3
 8003fd0:	9b05      	ldr	r3, [sp, #20]
 8003fd2:	3001      	adds	r0, #1
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	9305      	str	r3, [sp, #20]
 8003fd8:	901b      	str	r0, [sp, #108]	; 0x6c
 8003fda:	e7bf      	b.n	8003f5c <_strtod_l+0x144>
 8003fdc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003fde:	191a      	adds	r2, r3, r4
 8003fe0:	921b      	str	r2, [sp, #108]	; 0x6c
 8003fe2:	9a05      	ldr	r2, [sp, #20]
 8003fe4:	5d1b      	ldrb	r3, [r3, r4]
 8003fe6:	2a00      	cmp	r2, #0
 8003fe8:	d037      	beq.n	800405a <_strtod_l+0x242>
 8003fea:	9c05      	ldr	r4, [sp, #20]
 8003fec:	4602      	mov	r2, r0
 8003fee:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8003ff2:	2909      	cmp	r1, #9
 8003ff4:	d913      	bls.n	800401e <_strtod_l+0x206>
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	9104      	str	r1, [sp, #16]
 8003ffa:	e7c2      	b.n	8003f82 <_strtod_l+0x16a>
 8003ffc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003ffe:	1c5a      	adds	r2, r3, #1
 8004000:	921b      	str	r2, [sp, #108]	; 0x6c
 8004002:	785b      	ldrb	r3, [r3, #1]
 8004004:	3001      	adds	r0, #1
 8004006:	2b30      	cmp	r3, #48	; 0x30
 8004008:	d0f8      	beq.n	8003ffc <_strtod_l+0x1e4>
 800400a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800400e:	2a08      	cmp	r2, #8
 8004010:	f200 84e4 	bhi.w	80049dc <_strtod_l+0xbc4>
 8004014:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004016:	9208      	str	r2, [sp, #32]
 8004018:	4602      	mov	r2, r0
 800401a:	2000      	movs	r0, #0
 800401c:	4604      	mov	r4, r0
 800401e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8004022:	f100 0101 	add.w	r1, r0, #1
 8004026:	d012      	beq.n	800404e <_strtod_l+0x236>
 8004028:	440a      	add	r2, r1
 800402a:	eb00 0c04 	add.w	ip, r0, r4
 800402e:	4621      	mov	r1, r4
 8004030:	270a      	movs	r7, #10
 8004032:	458c      	cmp	ip, r1
 8004034:	d113      	bne.n	800405e <_strtod_l+0x246>
 8004036:	1821      	adds	r1, r4, r0
 8004038:	2908      	cmp	r1, #8
 800403a:	f104 0401 	add.w	r4, r4, #1
 800403e:	4404      	add	r4, r0
 8004040:	dc19      	bgt.n	8004076 <_strtod_l+0x25e>
 8004042:	9b07      	ldr	r3, [sp, #28]
 8004044:	210a      	movs	r1, #10
 8004046:	fb01 e303 	mla	r3, r1, r3, lr
 800404a:	9307      	str	r3, [sp, #28]
 800404c:	2100      	movs	r1, #0
 800404e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004050:	1c58      	adds	r0, r3, #1
 8004052:	901b      	str	r0, [sp, #108]	; 0x6c
 8004054:	785b      	ldrb	r3, [r3, #1]
 8004056:	4608      	mov	r0, r1
 8004058:	e7c9      	b.n	8003fee <_strtod_l+0x1d6>
 800405a:	9805      	ldr	r0, [sp, #20]
 800405c:	e7d3      	b.n	8004006 <_strtod_l+0x1ee>
 800405e:	2908      	cmp	r1, #8
 8004060:	f101 0101 	add.w	r1, r1, #1
 8004064:	dc03      	bgt.n	800406e <_strtod_l+0x256>
 8004066:	9b07      	ldr	r3, [sp, #28]
 8004068:	437b      	muls	r3, r7
 800406a:	9307      	str	r3, [sp, #28]
 800406c:	e7e1      	b.n	8004032 <_strtod_l+0x21a>
 800406e:	2910      	cmp	r1, #16
 8004070:	bfd8      	it	le
 8004072:	437d      	mulle	r5, r7
 8004074:	e7dd      	b.n	8004032 <_strtod_l+0x21a>
 8004076:	2c10      	cmp	r4, #16
 8004078:	bfdc      	itt	le
 800407a:	210a      	movle	r1, #10
 800407c:	fb01 e505 	mlale	r5, r1, r5, lr
 8004080:	e7e4      	b.n	800404c <_strtod_l+0x234>
 8004082:	2301      	movs	r3, #1
 8004084:	9304      	str	r3, [sp, #16]
 8004086:	e781      	b.n	8003f8c <_strtod_l+0x174>
 8004088:	f04f 0c01 	mov.w	ip, #1
 800408c:	1cb3      	adds	r3, r6, #2
 800408e:	931b      	str	r3, [sp, #108]	; 0x6c
 8004090:	78b3      	ldrb	r3, [r6, #2]
 8004092:	e78a      	b.n	8003faa <_strtod_l+0x192>
 8004094:	f04f 0c00 	mov.w	ip, #0
 8004098:	e7f8      	b.n	800408c <_strtod_l+0x274>
 800409a:	bf00      	nop
 800409c:	08007514 	.word	0x08007514
 80040a0:	7ff00000 	.word	0x7ff00000
 80040a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80040a6:	1c5f      	adds	r7, r3, #1
 80040a8:	971b      	str	r7, [sp, #108]	; 0x6c
 80040aa:	785b      	ldrb	r3, [r3, #1]
 80040ac:	2b30      	cmp	r3, #48	; 0x30
 80040ae:	d0f9      	beq.n	80040a4 <_strtod_l+0x28c>
 80040b0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80040b4:	2f08      	cmp	r7, #8
 80040b6:	f63f af7d 	bhi.w	8003fb4 <_strtod_l+0x19c>
 80040ba:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80040be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80040c0:	930a      	str	r3, [sp, #40]	; 0x28
 80040c2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80040c4:	1c5f      	adds	r7, r3, #1
 80040c6:	971b      	str	r7, [sp, #108]	; 0x6c
 80040c8:	785b      	ldrb	r3, [r3, #1]
 80040ca:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80040ce:	f1b8 0f09 	cmp.w	r8, #9
 80040d2:	d937      	bls.n	8004144 <_strtod_l+0x32c>
 80040d4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80040d6:	1a7f      	subs	r7, r7, r1
 80040d8:	2f08      	cmp	r7, #8
 80040da:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80040de:	dc37      	bgt.n	8004150 <_strtod_l+0x338>
 80040e0:	45be      	cmp	lr, r7
 80040e2:	bfa8      	it	ge
 80040e4:	46be      	movge	lr, r7
 80040e6:	f1bc 0f00 	cmp.w	ip, #0
 80040ea:	d001      	beq.n	80040f0 <_strtod_l+0x2d8>
 80040ec:	f1ce 0e00 	rsb	lr, lr, #0
 80040f0:	2c00      	cmp	r4, #0
 80040f2:	d151      	bne.n	8004198 <_strtod_l+0x380>
 80040f4:	2800      	cmp	r0, #0
 80040f6:	f47f aece 	bne.w	8003e96 <_strtod_l+0x7e>
 80040fa:	9a06      	ldr	r2, [sp, #24]
 80040fc:	2a00      	cmp	r2, #0
 80040fe:	f47f aeca 	bne.w	8003e96 <_strtod_l+0x7e>
 8004102:	9a04      	ldr	r2, [sp, #16]
 8004104:	2a00      	cmp	r2, #0
 8004106:	f47f aee4 	bne.w	8003ed2 <_strtod_l+0xba>
 800410a:	2b4e      	cmp	r3, #78	; 0x4e
 800410c:	d027      	beq.n	800415e <_strtod_l+0x346>
 800410e:	dc21      	bgt.n	8004154 <_strtod_l+0x33c>
 8004110:	2b49      	cmp	r3, #73	; 0x49
 8004112:	f47f aede 	bne.w	8003ed2 <_strtod_l+0xba>
 8004116:	49a0      	ldr	r1, [pc, #640]	; (8004398 <_strtod_l+0x580>)
 8004118:	a81b      	add	r0, sp, #108	; 0x6c
 800411a:	f001 fea1 	bl	8005e60 <__match>
 800411e:	2800      	cmp	r0, #0
 8004120:	f43f aed7 	beq.w	8003ed2 <_strtod_l+0xba>
 8004124:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004126:	499d      	ldr	r1, [pc, #628]	; (800439c <_strtod_l+0x584>)
 8004128:	3b01      	subs	r3, #1
 800412a:	a81b      	add	r0, sp, #108	; 0x6c
 800412c:	931b      	str	r3, [sp, #108]	; 0x6c
 800412e:	f001 fe97 	bl	8005e60 <__match>
 8004132:	b910      	cbnz	r0, 800413a <_strtod_l+0x322>
 8004134:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004136:	3301      	adds	r3, #1
 8004138:	931b      	str	r3, [sp, #108]	; 0x6c
 800413a:	f8df b274 	ldr.w	fp, [pc, #628]	; 80043b0 <_strtod_l+0x598>
 800413e:	f04f 0a00 	mov.w	sl, #0
 8004142:	e6a8      	b.n	8003e96 <_strtod_l+0x7e>
 8004144:	210a      	movs	r1, #10
 8004146:	fb01 3e0e 	mla	lr, r1, lr, r3
 800414a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800414e:	e7b8      	b.n	80040c2 <_strtod_l+0x2aa>
 8004150:	46be      	mov	lr, r7
 8004152:	e7c8      	b.n	80040e6 <_strtod_l+0x2ce>
 8004154:	2b69      	cmp	r3, #105	; 0x69
 8004156:	d0de      	beq.n	8004116 <_strtod_l+0x2fe>
 8004158:	2b6e      	cmp	r3, #110	; 0x6e
 800415a:	f47f aeba 	bne.w	8003ed2 <_strtod_l+0xba>
 800415e:	4990      	ldr	r1, [pc, #576]	; (80043a0 <_strtod_l+0x588>)
 8004160:	a81b      	add	r0, sp, #108	; 0x6c
 8004162:	f001 fe7d 	bl	8005e60 <__match>
 8004166:	2800      	cmp	r0, #0
 8004168:	f43f aeb3 	beq.w	8003ed2 <_strtod_l+0xba>
 800416c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	2b28      	cmp	r3, #40	; 0x28
 8004172:	d10e      	bne.n	8004192 <_strtod_l+0x37a>
 8004174:	aa1e      	add	r2, sp, #120	; 0x78
 8004176:	498b      	ldr	r1, [pc, #556]	; (80043a4 <_strtod_l+0x58c>)
 8004178:	a81b      	add	r0, sp, #108	; 0x6c
 800417a:	f001 fe85 	bl	8005e88 <__hexnan>
 800417e:	2805      	cmp	r0, #5
 8004180:	d107      	bne.n	8004192 <_strtod_l+0x37a>
 8004182:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004184:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8004188:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800418c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8004190:	e681      	b.n	8003e96 <_strtod_l+0x7e>
 8004192:	f8df b224 	ldr.w	fp, [pc, #548]	; 80043b8 <_strtod_l+0x5a0>
 8004196:	e7d2      	b.n	800413e <_strtod_l+0x326>
 8004198:	ebae 0302 	sub.w	r3, lr, r2
 800419c:	9306      	str	r3, [sp, #24]
 800419e:	9b05      	ldr	r3, [sp, #20]
 80041a0:	9807      	ldr	r0, [sp, #28]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	bf08      	it	eq
 80041a6:	4623      	moveq	r3, r4
 80041a8:	2c10      	cmp	r4, #16
 80041aa:	9305      	str	r3, [sp, #20]
 80041ac:	46a0      	mov	r8, r4
 80041ae:	bfa8      	it	ge
 80041b0:	f04f 0810 	movge.w	r8, #16
 80041b4:	f7fc f9a6 	bl	8000504 <__aeabi_ui2d>
 80041b8:	2c09      	cmp	r4, #9
 80041ba:	4682      	mov	sl, r0
 80041bc:	468b      	mov	fp, r1
 80041be:	dc13      	bgt.n	80041e8 <_strtod_l+0x3d0>
 80041c0:	9b06      	ldr	r3, [sp, #24]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f43f ae67 	beq.w	8003e96 <_strtod_l+0x7e>
 80041c8:	9b06      	ldr	r3, [sp, #24]
 80041ca:	dd7a      	ble.n	80042c2 <_strtod_l+0x4aa>
 80041cc:	2b16      	cmp	r3, #22
 80041ce:	dc61      	bgt.n	8004294 <_strtod_l+0x47c>
 80041d0:	4a75      	ldr	r2, [pc, #468]	; (80043a8 <_strtod_l+0x590>)
 80041d2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80041d6:	e9de 0100 	ldrd	r0, r1, [lr]
 80041da:	4652      	mov	r2, sl
 80041dc:	465b      	mov	r3, fp
 80041de:	f7fc fa0b 	bl	80005f8 <__aeabi_dmul>
 80041e2:	4682      	mov	sl, r0
 80041e4:	468b      	mov	fp, r1
 80041e6:	e656      	b.n	8003e96 <_strtod_l+0x7e>
 80041e8:	4b6f      	ldr	r3, [pc, #444]	; (80043a8 <_strtod_l+0x590>)
 80041ea:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80041ee:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80041f2:	f7fc fa01 	bl	80005f8 <__aeabi_dmul>
 80041f6:	4606      	mov	r6, r0
 80041f8:	4628      	mov	r0, r5
 80041fa:	460f      	mov	r7, r1
 80041fc:	f7fc f982 	bl	8000504 <__aeabi_ui2d>
 8004200:	4602      	mov	r2, r0
 8004202:	460b      	mov	r3, r1
 8004204:	4630      	mov	r0, r6
 8004206:	4639      	mov	r1, r7
 8004208:	f7fc f840 	bl	800028c <__adddf3>
 800420c:	2c0f      	cmp	r4, #15
 800420e:	4682      	mov	sl, r0
 8004210:	468b      	mov	fp, r1
 8004212:	ddd5      	ble.n	80041c0 <_strtod_l+0x3a8>
 8004214:	9b06      	ldr	r3, [sp, #24]
 8004216:	eba4 0808 	sub.w	r8, r4, r8
 800421a:	4498      	add	r8, r3
 800421c:	f1b8 0f00 	cmp.w	r8, #0
 8004220:	f340 8096 	ble.w	8004350 <_strtod_l+0x538>
 8004224:	f018 030f 	ands.w	r3, r8, #15
 8004228:	d00a      	beq.n	8004240 <_strtod_l+0x428>
 800422a:	495f      	ldr	r1, [pc, #380]	; (80043a8 <_strtod_l+0x590>)
 800422c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004230:	4652      	mov	r2, sl
 8004232:	465b      	mov	r3, fp
 8004234:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004238:	f7fc f9de 	bl	80005f8 <__aeabi_dmul>
 800423c:	4682      	mov	sl, r0
 800423e:	468b      	mov	fp, r1
 8004240:	f038 080f 	bics.w	r8, r8, #15
 8004244:	d073      	beq.n	800432e <_strtod_l+0x516>
 8004246:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800424a:	dd47      	ble.n	80042dc <_strtod_l+0x4c4>
 800424c:	2400      	movs	r4, #0
 800424e:	46a0      	mov	r8, r4
 8004250:	9407      	str	r4, [sp, #28]
 8004252:	9405      	str	r4, [sp, #20]
 8004254:	2322      	movs	r3, #34	; 0x22
 8004256:	f8df b158 	ldr.w	fp, [pc, #344]	; 80043b0 <_strtod_l+0x598>
 800425a:	f8c9 3000 	str.w	r3, [r9]
 800425e:	f04f 0a00 	mov.w	sl, #0
 8004262:	9b07      	ldr	r3, [sp, #28]
 8004264:	2b00      	cmp	r3, #0
 8004266:	f43f ae16 	beq.w	8003e96 <_strtod_l+0x7e>
 800426a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800426c:	4648      	mov	r0, r9
 800426e:	f001 ff08 	bl	8006082 <_Bfree>
 8004272:	9905      	ldr	r1, [sp, #20]
 8004274:	4648      	mov	r0, r9
 8004276:	f001 ff04 	bl	8006082 <_Bfree>
 800427a:	4641      	mov	r1, r8
 800427c:	4648      	mov	r0, r9
 800427e:	f001 ff00 	bl	8006082 <_Bfree>
 8004282:	9907      	ldr	r1, [sp, #28]
 8004284:	4648      	mov	r0, r9
 8004286:	f001 fefc 	bl	8006082 <_Bfree>
 800428a:	4621      	mov	r1, r4
 800428c:	4648      	mov	r0, r9
 800428e:	f001 fef8 	bl	8006082 <_Bfree>
 8004292:	e600      	b.n	8003e96 <_strtod_l+0x7e>
 8004294:	9a06      	ldr	r2, [sp, #24]
 8004296:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800429a:	4293      	cmp	r3, r2
 800429c:	dbba      	blt.n	8004214 <_strtod_l+0x3fc>
 800429e:	4d42      	ldr	r5, [pc, #264]	; (80043a8 <_strtod_l+0x590>)
 80042a0:	f1c4 040f 	rsb	r4, r4, #15
 80042a4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80042a8:	4652      	mov	r2, sl
 80042aa:	465b      	mov	r3, fp
 80042ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80042b0:	f7fc f9a2 	bl	80005f8 <__aeabi_dmul>
 80042b4:	9b06      	ldr	r3, [sp, #24]
 80042b6:	1b1c      	subs	r4, r3, r4
 80042b8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80042bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80042c0:	e78d      	b.n	80041de <_strtod_l+0x3c6>
 80042c2:	f113 0f16 	cmn.w	r3, #22
 80042c6:	dba5      	blt.n	8004214 <_strtod_l+0x3fc>
 80042c8:	4a37      	ldr	r2, [pc, #220]	; (80043a8 <_strtod_l+0x590>)
 80042ca:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80042ce:	e9d2 2300 	ldrd	r2, r3, [r2]
 80042d2:	4650      	mov	r0, sl
 80042d4:	4659      	mov	r1, fp
 80042d6:	f7fc fab9 	bl	800084c <__aeabi_ddiv>
 80042da:	e782      	b.n	80041e2 <_strtod_l+0x3ca>
 80042dc:	2300      	movs	r3, #0
 80042de:	4e33      	ldr	r6, [pc, #204]	; (80043ac <_strtod_l+0x594>)
 80042e0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80042e4:	4650      	mov	r0, sl
 80042e6:	4659      	mov	r1, fp
 80042e8:	461d      	mov	r5, r3
 80042ea:	f1b8 0f01 	cmp.w	r8, #1
 80042ee:	dc21      	bgt.n	8004334 <_strtod_l+0x51c>
 80042f0:	b10b      	cbz	r3, 80042f6 <_strtod_l+0x4de>
 80042f2:	4682      	mov	sl, r0
 80042f4:	468b      	mov	fp, r1
 80042f6:	4b2d      	ldr	r3, [pc, #180]	; (80043ac <_strtod_l+0x594>)
 80042f8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80042fc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004300:	4652      	mov	r2, sl
 8004302:	465b      	mov	r3, fp
 8004304:	e9d5 0100 	ldrd	r0, r1, [r5]
 8004308:	f7fc f976 	bl	80005f8 <__aeabi_dmul>
 800430c:	4b28      	ldr	r3, [pc, #160]	; (80043b0 <_strtod_l+0x598>)
 800430e:	460a      	mov	r2, r1
 8004310:	400b      	ands	r3, r1
 8004312:	4928      	ldr	r1, [pc, #160]	; (80043b4 <_strtod_l+0x59c>)
 8004314:	428b      	cmp	r3, r1
 8004316:	4682      	mov	sl, r0
 8004318:	d898      	bhi.n	800424c <_strtod_l+0x434>
 800431a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800431e:	428b      	cmp	r3, r1
 8004320:	bf86      	itte	hi
 8004322:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80043bc <_strtod_l+0x5a4>
 8004326:	f04f 3aff 	movhi.w	sl, #4294967295
 800432a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800432e:	2300      	movs	r3, #0
 8004330:	9304      	str	r3, [sp, #16]
 8004332:	e077      	b.n	8004424 <_strtod_l+0x60c>
 8004334:	f018 0f01 	tst.w	r8, #1
 8004338:	d006      	beq.n	8004348 <_strtod_l+0x530>
 800433a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800433e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004342:	f7fc f959 	bl	80005f8 <__aeabi_dmul>
 8004346:	2301      	movs	r3, #1
 8004348:	3501      	adds	r5, #1
 800434a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800434e:	e7cc      	b.n	80042ea <_strtod_l+0x4d2>
 8004350:	d0ed      	beq.n	800432e <_strtod_l+0x516>
 8004352:	f1c8 0800 	rsb	r8, r8, #0
 8004356:	f018 020f 	ands.w	r2, r8, #15
 800435a:	d00a      	beq.n	8004372 <_strtod_l+0x55a>
 800435c:	4b12      	ldr	r3, [pc, #72]	; (80043a8 <_strtod_l+0x590>)
 800435e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004362:	4650      	mov	r0, sl
 8004364:	4659      	mov	r1, fp
 8004366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436a:	f7fc fa6f 	bl	800084c <__aeabi_ddiv>
 800436e:	4682      	mov	sl, r0
 8004370:	468b      	mov	fp, r1
 8004372:	ea5f 1828 	movs.w	r8, r8, asr #4
 8004376:	d0da      	beq.n	800432e <_strtod_l+0x516>
 8004378:	f1b8 0f1f 	cmp.w	r8, #31
 800437c:	dd20      	ble.n	80043c0 <_strtod_l+0x5a8>
 800437e:	2400      	movs	r4, #0
 8004380:	46a0      	mov	r8, r4
 8004382:	9407      	str	r4, [sp, #28]
 8004384:	9405      	str	r4, [sp, #20]
 8004386:	2322      	movs	r3, #34	; 0x22
 8004388:	f04f 0a00 	mov.w	sl, #0
 800438c:	f04f 0b00 	mov.w	fp, #0
 8004390:	f8c9 3000 	str.w	r3, [r9]
 8004394:	e765      	b.n	8004262 <_strtod_l+0x44a>
 8004396:	bf00      	nop
 8004398:	080074dd 	.word	0x080074dd
 800439c:	0800756b 	.word	0x0800756b
 80043a0:	080074e5 	.word	0x080074e5
 80043a4:	08007528 	.word	0x08007528
 80043a8:	08007610 	.word	0x08007610
 80043ac:	080075e8 	.word	0x080075e8
 80043b0:	7ff00000 	.word	0x7ff00000
 80043b4:	7ca00000 	.word	0x7ca00000
 80043b8:	fff80000 	.word	0xfff80000
 80043bc:	7fefffff 	.word	0x7fefffff
 80043c0:	f018 0310 	ands.w	r3, r8, #16
 80043c4:	bf18      	it	ne
 80043c6:	236a      	movne	r3, #106	; 0x6a
 80043c8:	4da0      	ldr	r5, [pc, #640]	; (800464c <_strtod_l+0x834>)
 80043ca:	9304      	str	r3, [sp, #16]
 80043cc:	4650      	mov	r0, sl
 80043ce:	4659      	mov	r1, fp
 80043d0:	2300      	movs	r3, #0
 80043d2:	f1b8 0f00 	cmp.w	r8, #0
 80043d6:	f300 810a 	bgt.w	80045ee <_strtod_l+0x7d6>
 80043da:	b10b      	cbz	r3, 80043e0 <_strtod_l+0x5c8>
 80043dc:	4682      	mov	sl, r0
 80043de:	468b      	mov	fp, r1
 80043e0:	9b04      	ldr	r3, [sp, #16]
 80043e2:	b1bb      	cbz	r3, 8004414 <_strtod_l+0x5fc>
 80043e4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80043e8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	4659      	mov	r1, fp
 80043f0:	dd10      	ble.n	8004414 <_strtod_l+0x5fc>
 80043f2:	2b1f      	cmp	r3, #31
 80043f4:	f340 8107 	ble.w	8004606 <_strtod_l+0x7ee>
 80043f8:	2b34      	cmp	r3, #52	; 0x34
 80043fa:	bfde      	ittt	le
 80043fc:	3b20      	suble	r3, #32
 80043fe:	f04f 32ff 	movle.w	r2, #4294967295
 8004402:	fa02 f303 	lslle.w	r3, r2, r3
 8004406:	f04f 0a00 	mov.w	sl, #0
 800440a:	bfcc      	ite	gt
 800440c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8004410:	ea03 0b01 	andle.w	fp, r3, r1
 8004414:	2200      	movs	r2, #0
 8004416:	2300      	movs	r3, #0
 8004418:	4650      	mov	r0, sl
 800441a:	4659      	mov	r1, fp
 800441c:	f7fc fb54 	bl	8000ac8 <__aeabi_dcmpeq>
 8004420:	2800      	cmp	r0, #0
 8004422:	d1ac      	bne.n	800437e <_strtod_l+0x566>
 8004424:	9b07      	ldr	r3, [sp, #28]
 8004426:	9300      	str	r3, [sp, #0]
 8004428:	9a05      	ldr	r2, [sp, #20]
 800442a:	9908      	ldr	r1, [sp, #32]
 800442c:	4623      	mov	r3, r4
 800442e:	4648      	mov	r0, r9
 8004430:	f001 fe79 	bl	8006126 <__s2b>
 8004434:	9007      	str	r0, [sp, #28]
 8004436:	2800      	cmp	r0, #0
 8004438:	f43f af08 	beq.w	800424c <_strtod_l+0x434>
 800443c:	9a06      	ldr	r2, [sp, #24]
 800443e:	9b06      	ldr	r3, [sp, #24]
 8004440:	2a00      	cmp	r2, #0
 8004442:	f1c3 0300 	rsb	r3, r3, #0
 8004446:	bfa8      	it	ge
 8004448:	2300      	movge	r3, #0
 800444a:	930e      	str	r3, [sp, #56]	; 0x38
 800444c:	2400      	movs	r4, #0
 800444e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8004452:	9316      	str	r3, [sp, #88]	; 0x58
 8004454:	46a0      	mov	r8, r4
 8004456:	9b07      	ldr	r3, [sp, #28]
 8004458:	4648      	mov	r0, r9
 800445a:	6859      	ldr	r1, [r3, #4]
 800445c:	f001 fddd 	bl	800601a <_Balloc>
 8004460:	9005      	str	r0, [sp, #20]
 8004462:	2800      	cmp	r0, #0
 8004464:	f43f aef6 	beq.w	8004254 <_strtod_l+0x43c>
 8004468:	9b07      	ldr	r3, [sp, #28]
 800446a:	691a      	ldr	r2, [r3, #16]
 800446c:	3202      	adds	r2, #2
 800446e:	f103 010c 	add.w	r1, r3, #12
 8004472:	0092      	lsls	r2, r2, #2
 8004474:	300c      	adds	r0, #12
 8004476:	f001 fdc5 	bl	8006004 <memcpy>
 800447a:	aa1e      	add	r2, sp, #120	; 0x78
 800447c:	a91d      	add	r1, sp, #116	; 0x74
 800447e:	ec4b ab10 	vmov	d0, sl, fp
 8004482:	4648      	mov	r0, r9
 8004484:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8004488:	f002 f908 	bl	800669c <__d2b>
 800448c:	901c      	str	r0, [sp, #112]	; 0x70
 800448e:	2800      	cmp	r0, #0
 8004490:	f43f aee0 	beq.w	8004254 <_strtod_l+0x43c>
 8004494:	2101      	movs	r1, #1
 8004496:	4648      	mov	r0, r9
 8004498:	f001 fed1 	bl	800623e <__i2b>
 800449c:	4680      	mov	r8, r0
 800449e:	2800      	cmp	r0, #0
 80044a0:	f43f aed8 	beq.w	8004254 <_strtod_l+0x43c>
 80044a4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80044a6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80044a8:	2e00      	cmp	r6, #0
 80044aa:	bfab      	itete	ge
 80044ac:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80044ae:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80044b0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80044b2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80044b4:	bfac      	ite	ge
 80044b6:	18f7      	addge	r7, r6, r3
 80044b8:	1b9d      	sublt	r5, r3, r6
 80044ba:	9b04      	ldr	r3, [sp, #16]
 80044bc:	1af6      	subs	r6, r6, r3
 80044be:	4416      	add	r6, r2
 80044c0:	4b63      	ldr	r3, [pc, #396]	; (8004650 <_strtod_l+0x838>)
 80044c2:	3e01      	subs	r6, #1
 80044c4:	429e      	cmp	r6, r3
 80044c6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80044ca:	f280 80af 	bge.w	800462c <_strtod_l+0x814>
 80044ce:	1b9b      	subs	r3, r3, r6
 80044d0:	2b1f      	cmp	r3, #31
 80044d2:	eba2 0203 	sub.w	r2, r2, r3
 80044d6:	f04f 0101 	mov.w	r1, #1
 80044da:	f300 809b 	bgt.w	8004614 <_strtod_l+0x7fc>
 80044de:	fa01 f303 	lsl.w	r3, r1, r3
 80044e2:	930f      	str	r3, [sp, #60]	; 0x3c
 80044e4:	2300      	movs	r3, #0
 80044e6:	930a      	str	r3, [sp, #40]	; 0x28
 80044e8:	18be      	adds	r6, r7, r2
 80044ea:	9b04      	ldr	r3, [sp, #16]
 80044ec:	42b7      	cmp	r7, r6
 80044ee:	4415      	add	r5, r2
 80044f0:	441d      	add	r5, r3
 80044f2:	463b      	mov	r3, r7
 80044f4:	bfa8      	it	ge
 80044f6:	4633      	movge	r3, r6
 80044f8:	42ab      	cmp	r3, r5
 80044fa:	bfa8      	it	ge
 80044fc:	462b      	movge	r3, r5
 80044fe:	2b00      	cmp	r3, #0
 8004500:	bfc2      	ittt	gt
 8004502:	1af6      	subgt	r6, r6, r3
 8004504:	1aed      	subgt	r5, r5, r3
 8004506:	1aff      	subgt	r7, r7, r3
 8004508:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800450a:	b1bb      	cbz	r3, 800453c <_strtod_l+0x724>
 800450c:	4641      	mov	r1, r8
 800450e:	461a      	mov	r2, r3
 8004510:	4648      	mov	r0, r9
 8004512:	f001 ff33 	bl	800637c <__pow5mult>
 8004516:	4680      	mov	r8, r0
 8004518:	2800      	cmp	r0, #0
 800451a:	f43f ae9b 	beq.w	8004254 <_strtod_l+0x43c>
 800451e:	4601      	mov	r1, r0
 8004520:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004522:	4648      	mov	r0, r9
 8004524:	f001 fe94 	bl	8006250 <__multiply>
 8004528:	900c      	str	r0, [sp, #48]	; 0x30
 800452a:	2800      	cmp	r0, #0
 800452c:	f43f ae92 	beq.w	8004254 <_strtod_l+0x43c>
 8004530:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004532:	4648      	mov	r0, r9
 8004534:	f001 fda5 	bl	8006082 <_Bfree>
 8004538:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800453a:	931c      	str	r3, [sp, #112]	; 0x70
 800453c:	2e00      	cmp	r6, #0
 800453e:	dc7a      	bgt.n	8004636 <_strtod_l+0x81e>
 8004540:	9b06      	ldr	r3, [sp, #24]
 8004542:	2b00      	cmp	r3, #0
 8004544:	dd08      	ble.n	8004558 <_strtod_l+0x740>
 8004546:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004548:	9905      	ldr	r1, [sp, #20]
 800454a:	4648      	mov	r0, r9
 800454c:	f001 ff16 	bl	800637c <__pow5mult>
 8004550:	9005      	str	r0, [sp, #20]
 8004552:	2800      	cmp	r0, #0
 8004554:	f43f ae7e 	beq.w	8004254 <_strtod_l+0x43c>
 8004558:	2d00      	cmp	r5, #0
 800455a:	dd08      	ble.n	800456e <_strtod_l+0x756>
 800455c:	462a      	mov	r2, r5
 800455e:	9905      	ldr	r1, [sp, #20]
 8004560:	4648      	mov	r0, r9
 8004562:	f001 ff59 	bl	8006418 <__lshift>
 8004566:	9005      	str	r0, [sp, #20]
 8004568:	2800      	cmp	r0, #0
 800456a:	f43f ae73 	beq.w	8004254 <_strtod_l+0x43c>
 800456e:	2f00      	cmp	r7, #0
 8004570:	dd08      	ble.n	8004584 <_strtod_l+0x76c>
 8004572:	4641      	mov	r1, r8
 8004574:	463a      	mov	r2, r7
 8004576:	4648      	mov	r0, r9
 8004578:	f001 ff4e 	bl	8006418 <__lshift>
 800457c:	4680      	mov	r8, r0
 800457e:	2800      	cmp	r0, #0
 8004580:	f43f ae68 	beq.w	8004254 <_strtod_l+0x43c>
 8004584:	9a05      	ldr	r2, [sp, #20]
 8004586:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004588:	4648      	mov	r0, r9
 800458a:	f001 ffb3 	bl	80064f4 <__mdiff>
 800458e:	4604      	mov	r4, r0
 8004590:	2800      	cmp	r0, #0
 8004592:	f43f ae5f 	beq.w	8004254 <_strtod_l+0x43c>
 8004596:	68c3      	ldr	r3, [r0, #12]
 8004598:	930c      	str	r3, [sp, #48]	; 0x30
 800459a:	2300      	movs	r3, #0
 800459c:	60c3      	str	r3, [r0, #12]
 800459e:	4641      	mov	r1, r8
 80045a0:	f001 ff8e 	bl	80064c0 <__mcmp>
 80045a4:	2800      	cmp	r0, #0
 80045a6:	da55      	bge.n	8004654 <_strtod_l+0x83c>
 80045a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80045aa:	b9e3      	cbnz	r3, 80045e6 <_strtod_l+0x7ce>
 80045ac:	f1ba 0f00 	cmp.w	sl, #0
 80045b0:	d119      	bne.n	80045e6 <_strtod_l+0x7ce>
 80045b2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80045b6:	b9b3      	cbnz	r3, 80045e6 <_strtod_l+0x7ce>
 80045b8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80045bc:	0d1b      	lsrs	r3, r3, #20
 80045be:	051b      	lsls	r3, r3, #20
 80045c0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80045c4:	d90f      	bls.n	80045e6 <_strtod_l+0x7ce>
 80045c6:	6963      	ldr	r3, [r4, #20]
 80045c8:	b913      	cbnz	r3, 80045d0 <_strtod_l+0x7b8>
 80045ca:	6923      	ldr	r3, [r4, #16]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	dd0a      	ble.n	80045e6 <_strtod_l+0x7ce>
 80045d0:	4621      	mov	r1, r4
 80045d2:	2201      	movs	r2, #1
 80045d4:	4648      	mov	r0, r9
 80045d6:	f001 ff1f 	bl	8006418 <__lshift>
 80045da:	4641      	mov	r1, r8
 80045dc:	4604      	mov	r4, r0
 80045de:	f001 ff6f 	bl	80064c0 <__mcmp>
 80045e2:	2800      	cmp	r0, #0
 80045e4:	dc67      	bgt.n	80046b6 <_strtod_l+0x89e>
 80045e6:	9b04      	ldr	r3, [sp, #16]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d171      	bne.n	80046d0 <_strtod_l+0x8b8>
 80045ec:	e63d      	b.n	800426a <_strtod_l+0x452>
 80045ee:	f018 0f01 	tst.w	r8, #1
 80045f2:	d004      	beq.n	80045fe <_strtod_l+0x7e6>
 80045f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80045f8:	f7fb fffe 	bl	80005f8 <__aeabi_dmul>
 80045fc:	2301      	movs	r3, #1
 80045fe:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004602:	3508      	adds	r5, #8
 8004604:	e6e5      	b.n	80043d2 <_strtod_l+0x5ba>
 8004606:	f04f 32ff 	mov.w	r2, #4294967295
 800460a:	fa02 f303 	lsl.w	r3, r2, r3
 800460e:	ea03 0a0a 	and.w	sl, r3, sl
 8004612:	e6ff      	b.n	8004414 <_strtod_l+0x5fc>
 8004614:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8004618:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800461c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8004620:	36e2      	adds	r6, #226	; 0xe2
 8004622:	fa01 f306 	lsl.w	r3, r1, r6
 8004626:	930a      	str	r3, [sp, #40]	; 0x28
 8004628:	910f      	str	r1, [sp, #60]	; 0x3c
 800462a:	e75d      	b.n	80044e8 <_strtod_l+0x6d0>
 800462c:	2300      	movs	r3, #0
 800462e:	930a      	str	r3, [sp, #40]	; 0x28
 8004630:	2301      	movs	r3, #1
 8004632:	930f      	str	r3, [sp, #60]	; 0x3c
 8004634:	e758      	b.n	80044e8 <_strtod_l+0x6d0>
 8004636:	4632      	mov	r2, r6
 8004638:	991c      	ldr	r1, [sp, #112]	; 0x70
 800463a:	4648      	mov	r0, r9
 800463c:	f001 feec 	bl	8006418 <__lshift>
 8004640:	901c      	str	r0, [sp, #112]	; 0x70
 8004642:	2800      	cmp	r0, #0
 8004644:	f47f af7c 	bne.w	8004540 <_strtod_l+0x728>
 8004648:	e604      	b.n	8004254 <_strtod_l+0x43c>
 800464a:	bf00      	nop
 800464c:	08007540 	.word	0x08007540
 8004650:	fffffc02 	.word	0xfffffc02
 8004654:	465d      	mov	r5, fp
 8004656:	f040 8086 	bne.w	8004766 <_strtod_l+0x94e>
 800465a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800465c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004660:	b32a      	cbz	r2, 80046ae <_strtod_l+0x896>
 8004662:	4aaf      	ldr	r2, [pc, #700]	; (8004920 <_strtod_l+0xb08>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d153      	bne.n	8004710 <_strtod_l+0x8f8>
 8004668:	9b04      	ldr	r3, [sp, #16]
 800466a:	4650      	mov	r0, sl
 800466c:	b1d3      	cbz	r3, 80046a4 <_strtod_l+0x88c>
 800466e:	4aad      	ldr	r2, [pc, #692]	; (8004924 <_strtod_l+0xb0c>)
 8004670:	402a      	ands	r2, r5
 8004672:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8004676:	f04f 31ff 	mov.w	r1, #4294967295
 800467a:	d816      	bhi.n	80046aa <_strtod_l+0x892>
 800467c:	0d12      	lsrs	r2, r2, #20
 800467e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004682:	fa01 f303 	lsl.w	r3, r1, r3
 8004686:	4298      	cmp	r0, r3
 8004688:	d142      	bne.n	8004710 <_strtod_l+0x8f8>
 800468a:	4ba7      	ldr	r3, [pc, #668]	; (8004928 <_strtod_l+0xb10>)
 800468c:	429d      	cmp	r5, r3
 800468e:	d102      	bne.n	8004696 <_strtod_l+0x87e>
 8004690:	3001      	adds	r0, #1
 8004692:	f43f addf 	beq.w	8004254 <_strtod_l+0x43c>
 8004696:	4ba3      	ldr	r3, [pc, #652]	; (8004924 <_strtod_l+0xb0c>)
 8004698:	402b      	ands	r3, r5
 800469a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800469e:	f04f 0a00 	mov.w	sl, #0
 80046a2:	e7a0      	b.n	80045e6 <_strtod_l+0x7ce>
 80046a4:	f04f 33ff 	mov.w	r3, #4294967295
 80046a8:	e7ed      	b.n	8004686 <_strtod_l+0x86e>
 80046aa:	460b      	mov	r3, r1
 80046ac:	e7eb      	b.n	8004686 <_strtod_l+0x86e>
 80046ae:	bb7b      	cbnz	r3, 8004710 <_strtod_l+0x8f8>
 80046b0:	f1ba 0f00 	cmp.w	sl, #0
 80046b4:	d12c      	bne.n	8004710 <_strtod_l+0x8f8>
 80046b6:	9904      	ldr	r1, [sp, #16]
 80046b8:	4a9a      	ldr	r2, [pc, #616]	; (8004924 <_strtod_l+0xb0c>)
 80046ba:	465b      	mov	r3, fp
 80046bc:	b1f1      	cbz	r1, 80046fc <_strtod_l+0x8e4>
 80046be:	ea02 010b 	and.w	r1, r2, fp
 80046c2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80046c6:	dc19      	bgt.n	80046fc <_strtod_l+0x8e4>
 80046c8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80046cc:	f77f ae5b 	ble.w	8004386 <_strtod_l+0x56e>
 80046d0:	4a96      	ldr	r2, [pc, #600]	; (800492c <_strtod_l+0xb14>)
 80046d2:	2300      	movs	r3, #0
 80046d4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80046d8:	4650      	mov	r0, sl
 80046da:	4659      	mov	r1, fp
 80046dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80046e0:	f7fb ff8a 	bl	80005f8 <__aeabi_dmul>
 80046e4:	4682      	mov	sl, r0
 80046e6:	468b      	mov	fp, r1
 80046e8:	2900      	cmp	r1, #0
 80046ea:	f47f adbe 	bne.w	800426a <_strtod_l+0x452>
 80046ee:	2800      	cmp	r0, #0
 80046f0:	f47f adbb 	bne.w	800426a <_strtod_l+0x452>
 80046f4:	2322      	movs	r3, #34	; 0x22
 80046f6:	f8c9 3000 	str.w	r3, [r9]
 80046fa:	e5b6      	b.n	800426a <_strtod_l+0x452>
 80046fc:	4013      	ands	r3, r2
 80046fe:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004702:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8004706:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800470a:	f04f 3aff 	mov.w	sl, #4294967295
 800470e:	e76a      	b.n	80045e6 <_strtod_l+0x7ce>
 8004710:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004712:	b193      	cbz	r3, 800473a <_strtod_l+0x922>
 8004714:	422b      	tst	r3, r5
 8004716:	f43f af66 	beq.w	80045e6 <_strtod_l+0x7ce>
 800471a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800471c:	9a04      	ldr	r2, [sp, #16]
 800471e:	4650      	mov	r0, sl
 8004720:	4659      	mov	r1, fp
 8004722:	b173      	cbz	r3, 8004742 <_strtod_l+0x92a>
 8004724:	f7ff fb5c 	bl	8003de0 <sulp>
 8004728:	4602      	mov	r2, r0
 800472a:	460b      	mov	r3, r1
 800472c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004730:	f7fb fdac 	bl	800028c <__adddf3>
 8004734:	4682      	mov	sl, r0
 8004736:	468b      	mov	fp, r1
 8004738:	e755      	b.n	80045e6 <_strtod_l+0x7ce>
 800473a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800473c:	ea13 0f0a 	tst.w	r3, sl
 8004740:	e7e9      	b.n	8004716 <_strtod_l+0x8fe>
 8004742:	f7ff fb4d 	bl	8003de0 <sulp>
 8004746:	4602      	mov	r2, r0
 8004748:	460b      	mov	r3, r1
 800474a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800474e:	f7fb fd9b 	bl	8000288 <__aeabi_dsub>
 8004752:	2200      	movs	r2, #0
 8004754:	2300      	movs	r3, #0
 8004756:	4682      	mov	sl, r0
 8004758:	468b      	mov	fp, r1
 800475a:	f7fc f9b5 	bl	8000ac8 <__aeabi_dcmpeq>
 800475e:	2800      	cmp	r0, #0
 8004760:	f47f ae11 	bne.w	8004386 <_strtod_l+0x56e>
 8004764:	e73f      	b.n	80045e6 <_strtod_l+0x7ce>
 8004766:	4641      	mov	r1, r8
 8004768:	4620      	mov	r0, r4
 800476a:	f001 ffe6 	bl	800673a <__ratio>
 800476e:	ec57 6b10 	vmov	r6, r7, d0
 8004772:	2200      	movs	r2, #0
 8004774:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004778:	ee10 0a10 	vmov	r0, s0
 800477c:	4639      	mov	r1, r7
 800477e:	f7fc f9b7 	bl	8000af0 <__aeabi_dcmple>
 8004782:	2800      	cmp	r0, #0
 8004784:	d077      	beq.n	8004876 <_strtod_l+0xa5e>
 8004786:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004788:	2b00      	cmp	r3, #0
 800478a:	d04a      	beq.n	8004822 <_strtod_l+0xa0a>
 800478c:	4b68      	ldr	r3, [pc, #416]	; (8004930 <_strtod_l+0xb18>)
 800478e:	2200      	movs	r2, #0
 8004790:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004794:	4f66      	ldr	r7, [pc, #408]	; (8004930 <_strtod_l+0xb18>)
 8004796:	2600      	movs	r6, #0
 8004798:	4b62      	ldr	r3, [pc, #392]	; (8004924 <_strtod_l+0xb0c>)
 800479a:	402b      	ands	r3, r5
 800479c:	930f      	str	r3, [sp, #60]	; 0x3c
 800479e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80047a0:	4b64      	ldr	r3, [pc, #400]	; (8004934 <_strtod_l+0xb1c>)
 80047a2:	429a      	cmp	r2, r3
 80047a4:	f040 80ce 	bne.w	8004944 <_strtod_l+0xb2c>
 80047a8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80047ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80047b0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80047b4:	ec4b ab10 	vmov	d0, sl, fp
 80047b8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80047bc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80047c0:	f001 fef6 	bl	80065b0 <__ulp>
 80047c4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80047c8:	ec53 2b10 	vmov	r2, r3, d0
 80047cc:	f7fb ff14 	bl	80005f8 <__aeabi_dmul>
 80047d0:	4652      	mov	r2, sl
 80047d2:	465b      	mov	r3, fp
 80047d4:	f7fb fd5a 	bl	800028c <__adddf3>
 80047d8:	460b      	mov	r3, r1
 80047da:	4952      	ldr	r1, [pc, #328]	; (8004924 <_strtod_l+0xb0c>)
 80047dc:	4a56      	ldr	r2, [pc, #344]	; (8004938 <_strtod_l+0xb20>)
 80047de:	4019      	ands	r1, r3
 80047e0:	4291      	cmp	r1, r2
 80047e2:	4682      	mov	sl, r0
 80047e4:	d95b      	bls.n	800489e <_strtod_l+0xa86>
 80047e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047e8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d103      	bne.n	80047f8 <_strtod_l+0x9e0>
 80047f0:	9b08      	ldr	r3, [sp, #32]
 80047f2:	3301      	adds	r3, #1
 80047f4:	f43f ad2e 	beq.w	8004254 <_strtod_l+0x43c>
 80047f8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8004928 <_strtod_l+0xb10>
 80047fc:	f04f 3aff 	mov.w	sl, #4294967295
 8004800:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004802:	4648      	mov	r0, r9
 8004804:	f001 fc3d 	bl	8006082 <_Bfree>
 8004808:	9905      	ldr	r1, [sp, #20]
 800480a:	4648      	mov	r0, r9
 800480c:	f001 fc39 	bl	8006082 <_Bfree>
 8004810:	4641      	mov	r1, r8
 8004812:	4648      	mov	r0, r9
 8004814:	f001 fc35 	bl	8006082 <_Bfree>
 8004818:	4621      	mov	r1, r4
 800481a:	4648      	mov	r0, r9
 800481c:	f001 fc31 	bl	8006082 <_Bfree>
 8004820:	e619      	b.n	8004456 <_strtod_l+0x63e>
 8004822:	f1ba 0f00 	cmp.w	sl, #0
 8004826:	d11a      	bne.n	800485e <_strtod_l+0xa46>
 8004828:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800482c:	b9eb      	cbnz	r3, 800486a <_strtod_l+0xa52>
 800482e:	2200      	movs	r2, #0
 8004830:	4b3f      	ldr	r3, [pc, #252]	; (8004930 <_strtod_l+0xb18>)
 8004832:	4630      	mov	r0, r6
 8004834:	4639      	mov	r1, r7
 8004836:	f7fc f951 	bl	8000adc <__aeabi_dcmplt>
 800483a:	b9c8      	cbnz	r0, 8004870 <_strtod_l+0xa58>
 800483c:	4630      	mov	r0, r6
 800483e:	4639      	mov	r1, r7
 8004840:	2200      	movs	r2, #0
 8004842:	4b3e      	ldr	r3, [pc, #248]	; (800493c <_strtod_l+0xb24>)
 8004844:	f7fb fed8 	bl	80005f8 <__aeabi_dmul>
 8004848:	4606      	mov	r6, r0
 800484a:	460f      	mov	r7, r1
 800484c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8004850:	9618      	str	r6, [sp, #96]	; 0x60
 8004852:	9319      	str	r3, [sp, #100]	; 0x64
 8004854:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8004858:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800485c:	e79c      	b.n	8004798 <_strtod_l+0x980>
 800485e:	f1ba 0f01 	cmp.w	sl, #1
 8004862:	d102      	bne.n	800486a <_strtod_l+0xa52>
 8004864:	2d00      	cmp	r5, #0
 8004866:	f43f ad8e 	beq.w	8004386 <_strtod_l+0x56e>
 800486a:	2200      	movs	r2, #0
 800486c:	4b34      	ldr	r3, [pc, #208]	; (8004940 <_strtod_l+0xb28>)
 800486e:	e78f      	b.n	8004790 <_strtod_l+0x978>
 8004870:	2600      	movs	r6, #0
 8004872:	4f32      	ldr	r7, [pc, #200]	; (800493c <_strtod_l+0xb24>)
 8004874:	e7ea      	b.n	800484c <_strtod_l+0xa34>
 8004876:	4b31      	ldr	r3, [pc, #196]	; (800493c <_strtod_l+0xb24>)
 8004878:	4630      	mov	r0, r6
 800487a:	4639      	mov	r1, r7
 800487c:	2200      	movs	r2, #0
 800487e:	f7fb febb 	bl	80005f8 <__aeabi_dmul>
 8004882:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004884:	4606      	mov	r6, r0
 8004886:	460f      	mov	r7, r1
 8004888:	b933      	cbnz	r3, 8004898 <_strtod_l+0xa80>
 800488a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800488e:	9010      	str	r0, [sp, #64]	; 0x40
 8004890:	9311      	str	r3, [sp, #68]	; 0x44
 8004892:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004896:	e7df      	b.n	8004858 <_strtod_l+0xa40>
 8004898:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800489c:	e7f9      	b.n	8004892 <_strtod_l+0xa7a>
 800489e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80048a2:	9b04      	ldr	r3, [sp, #16]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d1ab      	bne.n	8004800 <_strtod_l+0x9e8>
 80048a8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80048ac:	0d1b      	lsrs	r3, r3, #20
 80048ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80048b0:	051b      	lsls	r3, r3, #20
 80048b2:	429a      	cmp	r2, r3
 80048b4:	465d      	mov	r5, fp
 80048b6:	d1a3      	bne.n	8004800 <_strtod_l+0x9e8>
 80048b8:	4639      	mov	r1, r7
 80048ba:	4630      	mov	r0, r6
 80048bc:	f7fc f94c 	bl	8000b58 <__aeabi_d2iz>
 80048c0:	f7fb fe30 	bl	8000524 <__aeabi_i2d>
 80048c4:	460b      	mov	r3, r1
 80048c6:	4602      	mov	r2, r0
 80048c8:	4639      	mov	r1, r7
 80048ca:	4630      	mov	r0, r6
 80048cc:	f7fb fcdc 	bl	8000288 <__aeabi_dsub>
 80048d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80048d2:	4606      	mov	r6, r0
 80048d4:	460f      	mov	r7, r1
 80048d6:	b933      	cbnz	r3, 80048e6 <_strtod_l+0xace>
 80048d8:	f1ba 0f00 	cmp.w	sl, #0
 80048dc:	d103      	bne.n	80048e6 <_strtod_l+0xace>
 80048de:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80048e2:	2d00      	cmp	r5, #0
 80048e4:	d06d      	beq.n	80049c2 <_strtod_l+0xbaa>
 80048e6:	a30a      	add	r3, pc, #40	; (adr r3, 8004910 <_strtod_l+0xaf8>)
 80048e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ec:	4630      	mov	r0, r6
 80048ee:	4639      	mov	r1, r7
 80048f0:	f7fc f8f4 	bl	8000adc <__aeabi_dcmplt>
 80048f4:	2800      	cmp	r0, #0
 80048f6:	f47f acb8 	bne.w	800426a <_strtod_l+0x452>
 80048fa:	a307      	add	r3, pc, #28	; (adr r3, 8004918 <_strtod_l+0xb00>)
 80048fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004900:	4630      	mov	r0, r6
 8004902:	4639      	mov	r1, r7
 8004904:	f7fc f908 	bl	8000b18 <__aeabi_dcmpgt>
 8004908:	2800      	cmp	r0, #0
 800490a:	f43f af79 	beq.w	8004800 <_strtod_l+0x9e8>
 800490e:	e4ac      	b.n	800426a <_strtod_l+0x452>
 8004910:	94a03595 	.word	0x94a03595
 8004914:	3fdfffff 	.word	0x3fdfffff
 8004918:	35afe535 	.word	0x35afe535
 800491c:	3fe00000 	.word	0x3fe00000
 8004920:	000fffff 	.word	0x000fffff
 8004924:	7ff00000 	.word	0x7ff00000
 8004928:	7fefffff 	.word	0x7fefffff
 800492c:	39500000 	.word	0x39500000
 8004930:	3ff00000 	.word	0x3ff00000
 8004934:	7fe00000 	.word	0x7fe00000
 8004938:	7c9fffff 	.word	0x7c9fffff
 800493c:	3fe00000 	.word	0x3fe00000
 8004940:	bff00000 	.word	0xbff00000
 8004944:	9b04      	ldr	r3, [sp, #16]
 8004946:	b333      	cbz	r3, 8004996 <_strtod_l+0xb7e>
 8004948:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800494a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800494e:	d822      	bhi.n	8004996 <_strtod_l+0xb7e>
 8004950:	a327      	add	r3, pc, #156	; (adr r3, 80049f0 <_strtod_l+0xbd8>)
 8004952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004956:	4630      	mov	r0, r6
 8004958:	4639      	mov	r1, r7
 800495a:	f7fc f8c9 	bl	8000af0 <__aeabi_dcmple>
 800495e:	b1a0      	cbz	r0, 800498a <_strtod_l+0xb72>
 8004960:	4639      	mov	r1, r7
 8004962:	4630      	mov	r0, r6
 8004964:	f7fc f920 	bl	8000ba8 <__aeabi_d2uiz>
 8004968:	2800      	cmp	r0, #0
 800496a:	bf08      	it	eq
 800496c:	2001      	moveq	r0, #1
 800496e:	f7fb fdc9 	bl	8000504 <__aeabi_ui2d>
 8004972:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004974:	4606      	mov	r6, r0
 8004976:	460f      	mov	r7, r1
 8004978:	bb03      	cbnz	r3, 80049bc <_strtod_l+0xba4>
 800497a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800497e:	9012      	str	r0, [sp, #72]	; 0x48
 8004980:	9313      	str	r3, [sp, #76]	; 0x4c
 8004982:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8004986:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800498a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800498c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800498e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8004992:	1a9b      	subs	r3, r3, r2
 8004994:	930b      	str	r3, [sp, #44]	; 0x2c
 8004996:	ed9d 0b08 	vldr	d0, [sp, #32]
 800499a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800499e:	f001 fe07 	bl	80065b0 <__ulp>
 80049a2:	4650      	mov	r0, sl
 80049a4:	ec53 2b10 	vmov	r2, r3, d0
 80049a8:	4659      	mov	r1, fp
 80049aa:	f7fb fe25 	bl	80005f8 <__aeabi_dmul>
 80049ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80049b2:	f7fb fc6b 	bl	800028c <__adddf3>
 80049b6:	4682      	mov	sl, r0
 80049b8:	468b      	mov	fp, r1
 80049ba:	e772      	b.n	80048a2 <_strtod_l+0xa8a>
 80049bc:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80049c0:	e7df      	b.n	8004982 <_strtod_l+0xb6a>
 80049c2:	a30d      	add	r3, pc, #52	; (adr r3, 80049f8 <_strtod_l+0xbe0>)
 80049c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c8:	f7fc f888 	bl	8000adc <__aeabi_dcmplt>
 80049cc:	e79c      	b.n	8004908 <_strtod_l+0xaf0>
 80049ce:	2300      	movs	r3, #0
 80049d0:	930d      	str	r3, [sp, #52]	; 0x34
 80049d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80049d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80049d6:	6013      	str	r3, [r2, #0]
 80049d8:	f7ff ba61 	b.w	8003e9e <_strtod_l+0x86>
 80049dc:	2b65      	cmp	r3, #101	; 0x65
 80049de:	f04f 0200 	mov.w	r2, #0
 80049e2:	f43f ab4e 	beq.w	8004082 <_strtod_l+0x26a>
 80049e6:	2101      	movs	r1, #1
 80049e8:	4614      	mov	r4, r2
 80049ea:	9104      	str	r1, [sp, #16]
 80049ec:	f7ff bacb 	b.w	8003f86 <_strtod_l+0x16e>
 80049f0:	ffc00000 	.word	0xffc00000
 80049f4:	41dfffff 	.word	0x41dfffff
 80049f8:	94a03595 	.word	0x94a03595
 80049fc:	3fcfffff 	.word	0x3fcfffff

08004a00 <_strtod_r>:
 8004a00:	4b05      	ldr	r3, [pc, #20]	; (8004a18 <_strtod_r+0x18>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	b410      	push	{r4}
 8004a06:	6a1b      	ldr	r3, [r3, #32]
 8004a08:	4c04      	ldr	r4, [pc, #16]	; (8004a1c <_strtod_r+0x1c>)
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	bf08      	it	eq
 8004a0e:	4623      	moveq	r3, r4
 8004a10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a14:	f7ff ba00 	b.w	8003e18 <_strtod_l>
 8004a18:	2000000c 	.word	0x2000000c
 8004a1c:	20000070 	.word	0x20000070

08004a20 <_strtol_l.isra.0>:
 8004a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a24:	4680      	mov	r8, r0
 8004a26:	4689      	mov	r9, r1
 8004a28:	4692      	mov	sl, r2
 8004a2a:	461e      	mov	r6, r3
 8004a2c:	460f      	mov	r7, r1
 8004a2e:	463d      	mov	r5, r7
 8004a30:	9808      	ldr	r0, [sp, #32]
 8004a32:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004a36:	f001 fab7 	bl	8005fa8 <__locale_ctype_ptr_l>
 8004a3a:	4420      	add	r0, r4
 8004a3c:	7843      	ldrb	r3, [r0, #1]
 8004a3e:	f013 0308 	ands.w	r3, r3, #8
 8004a42:	d132      	bne.n	8004aaa <_strtol_l.isra.0+0x8a>
 8004a44:	2c2d      	cmp	r4, #45	; 0x2d
 8004a46:	d132      	bne.n	8004aae <_strtol_l.isra.0+0x8e>
 8004a48:	787c      	ldrb	r4, [r7, #1]
 8004a4a:	1cbd      	adds	r5, r7, #2
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	2e00      	cmp	r6, #0
 8004a50:	d05d      	beq.n	8004b0e <_strtol_l.isra.0+0xee>
 8004a52:	2e10      	cmp	r6, #16
 8004a54:	d109      	bne.n	8004a6a <_strtol_l.isra.0+0x4a>
 8004a56:	2c30      	cmp	r4, #48	; 0x30
 8004a58:	d107      	bne.n	8004a6a <_strtol_l.isra.0+0x4a>
 8004a5a:	782b      	ldrb	r3, [r5, #0]
 8004a5c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004a60:	2b58      	cmp	r3, #88	; 0x58
 8004a62:	d14f      	bne.n	8004b04 <_strtol_l.isra.0+0xe4>
 8004a64:	786c      	ldrb	r4, [r5, #1]
 8004a66:	2610      	movs	r6, #16
 8004a68:	3502      	adds	r5, #2
 8004a6a:	2a00      	cmp	r2, #0
 8004a6c:	bf14      	ite	ne
 8004a6e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8004a72:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8004a76:	2700      	movs	r7, #0
 8004a78:	fbb1 fcf6 	udiv	ip, r1, r6
 8004a7c:	4638      	mov	r0, r7
 8004a7e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8004a82:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8004a86:	2b09      	cmp	r3, #9
 8004a88:	d817      	bhi.n	8004aba <_strtol_l.isra.0+0x9a>
 8004a8a:	461c      	mov	r4, r3
 8004a8c:	42a6      	cmp	r6, r4
 8004a8e:	dd23      	ble.n	8004ad8 <_strtol_l.isra.0+0xb8>
 8004a90:	1c7b      	adds	r3, r7, #1
 8004a92:	d007      	beq.n	8004aa4 <_strtol_l.isra.0+0x84>
 8004a94:	4584      	cmp	ip, r0
 8004a96:	d31c      	bcc.n	8004ad2 <_strtol_l.isra.0+0xb2>
 8004a98:	d101      	bne.n	8004a9e <_strtol_l.isra.0+0x7e>
 8004a9a:	45a6      	cmp	lr, r4
 8004a9c:	db19      	blt.n	8004ad2 <_strtol_l.isra.0+0xb2>
 8004a9e:	fb00 4006 	mla	r0, r0, r6, r4
 8004aa2:	2701      	movs	r7, #1
 8004aa4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004aa8:	e7eb      	b.n	8004a82 <_strtol_l.isra.0+0x62>
 8004aaa:	462f      	mov	r7, r5
 8004aac:	e7bf      	b.n	8004a2e <_strtol_l.isra.0+0xe>
 8004aae:	2c2b      	cmp	r4, #43	; 0x2b
 8004ab0:	bf04      	itt	eq
 8004ab2:	1cbd      	addeq	r5, r7, #2
 8004ab4:	787c      	ldrbeq	r4, [r7, #1]
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	e7c9      	b.n	8004a4e <_strtol_l.isra.0+0x2e>
 8004aba:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8004abe:	2b19      	cmp	r3, #25
 8004ac0:	d801      	bhi.n	8004ac6 <_strtol_l.isra.0+0xa6>
 8004ac2:	3c37      	subs	r4, #55	; 0x37
 8004ac4:	e7e2      	b.n	8004a8c <_strtol_l.isra.0+0x6c>
 8004ac6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8004aca:	2b19      	cmp	r3, #25
 8004acc:	d804      	bhi.n	8004ad8 <_strtol_l.isra.0+0xb8>
 8004ace:	3c57      	subs	r4, #87	; 0x57
 8004ad0:	e7dc      	b.n	8004a8c <_strtol_l.isra.0+0x6c>
 8004ad2:	f04f 37ff 	mov.w	r7, #4294967295
 8004ad6:	e7e5      	b.n	8004aa4 <_strtol_l.isra.0+0x84>
 8004ad8:	1c7b      	adds	r3, r7, #1
 8004ada:	d108      	bne.n	8004aee <_strtol_l.isra.0+0xce>
 8004adc:	2322      	movs	r3, #34	; 0x22
 8004ade:	f8c8 3000 	str.w	r3, [r8]
 8004ae2:	4608      	mov	r0, r1
 8004ae4:	f1ba 0f00 	cmp.w	sl, #0
 8004ae8:	d107      	bne.n	8004afa <_strtol_l.isra.0+0xda>
 8004aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aee:	b102      	cbz	r2, 8004af2 <_strtol_l.isra.0+0xd2>
 8004af0:	4240      	negs	r0, r0
 8004af2:	f1ba 0f00 	cmp.w	sl, #0
 8004af6:	d0f8      	beq.n	8004aea <_strtol_l.isra.0+0xca>
 8004af8:	b10f      	cbz	r7, 8004afe <_strtol_l.isra.0+0xde>
 8004afa:	f105 39ff 	add.w	r9, r5, #4294967295
 8004afe:	f8ca 9000 	str.w	r9, [sl]
 8004b02:	e7f2      	b.n	8004aea <_strtol_l.isra.0+0xca>
 8004b04:	2430      	movs	r4, #48	; 0x30
 8004b06:	2e00      	cmp	r6, #0
 8004b08:	d1af      	bne.n	8004a6a <_strtol_l.isra.0+0x4a>
 8004b0a:	2608      	movs	r6, #8
 8004b0c:	e7ad      	b.n	8004a6a <_strtol_l.isra.0+0x4a>
 8004b0e:	2c30      	cmp	r4, #48	; 0x30
 8004b10:	d0a3      	beq.n	8004a5a <_strtol_l.isra.0+0x3a>
 8004b12:	260a      	movs	r6, #10
 8004b14:	e7a9      	b.n	8004a6a <_strtol_l.isra.0+0x4a>
	...

08004b18 <_strtol_r>:
 8004b18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b1a:	4c06      	ldr	r4, [pc, #24]	; (8004b34 <_strtol_r+0x1c>)
 8004b1c:	4d06      	ldr	r5, [pc, #24]	; (8004b38 <_strtol_r+0x20>)
 8004b1e:	6824      	ldr	r4, [r4, #0]
 8004b20:	6a24      	ldr	r4, [r4, #32]
 8004b22:	2c00      	cmp	r4, #0
 8004b24:	bf08      	it	eq
 8004b26:	462c      	moveq	r4, r5
 8004b28:	9400      	str	r4, [sp, #0]
 8004b2a:	f7ff ff79 	bl	8004a20 <_strtol_l.isra.0>
 8004b2e:	b003      	add	sp, #12
 8004b30:	bd30      	pop	{r4, r5, pc}
 8004b32:	bf00      	nop
 8004b34:	2000000c 	.word	0x2000000c
 8004b38:	20000070 	.word	0x20000070

08004b3c <quorem>:
 8004b3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b40:	6903      	ldr	r3, [r0, #16]
 8004b42:	690c      	ldr	r4, [r1, #16]
 8004b44:	42a3      	cmp	r3, r4
 8004b46:	4680      	mov	r8, r0
 8004b48:	f2c0 8082 	blt.w	8004c50 <quorem+0x114>
 8004b4c:	3c01      	subs	r4, #1
 8004b4e:	f101 0714 	add.w	r7, r1, #20
 8004b52:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004b56:	f100 0614 	add.w	r6, r0, #20
 8004b5a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004b5e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004b62:	eb06 030c 	add.w	r3, r6, ip
 8004b66:	3501      	adds	r5, #1
 8004b68:	eb07 090c 	add.w	r9, r7, ip
 8004b6c:	9301      	str	r3, [sp, #4]
 8004b6e:	fbb0 f5f5 	udiv	r5, r0, r5
 8004b72:	b395      	cbz	r5, 8004bda <quorem+0x9e>
 8004b74:	f04f 0a00 	mov.w	sl, #0
 8004b78:	4638      	mov	r0, r7
 8004b7a:	46b6      	mov	lr, r6
 8004b7c:	46d3      	mov	fp, sl
 8004b7e:	f850 2b04 	ldr.w	r2, [r0], #4
 8004b82:	b293      	uxth	r3, r2
 8004b84:	fb05 a303 	mla	r3, r5, r3, sl
 8004b88:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	ebab 0303 	sub.w	r3, fp, r3
 8004b92:	0c12      	lsrs	r2, r2, #16
 8004b94:	f8de b000 	ldr.w	fp, [lr]
 8004b98:	fb05 a202 	mla	r2, r5, r2, sl
 8004b9c:	fa13 f38b 	uxtah	r3, r3, fp
 8004ba0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004ba4:	fa1f fb82 	uxth.w	fp, r2
 8004ba8:	f8de 2000 	ldr.w	r2, [lr]
 8004bac:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004bb0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004bba:	4581      	cmp	r9, r0
 8004bbc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004bc0:	f84e 3b04 	str.w	r3, [lr], #4
 8004bc4:	d2db      	bcs.n	8004b7e <quorem+0x42>
 8004bc6:	f856 300c 	ldr.w	r3, [r6, ip]
 8004bca:	b933      	cbnz	r3, 8004bda <quorem+0x9e>
 8004bcc:	9b01      	ldr	r3, [sp, #4]
 8004bce:	3b04      	subs	r3, #4
 8004bd0:	429e      	cmp	r6, r3
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	d330      	bcc.n	8004c38 <quorem+0xfc>
 8004bd6:	f8c8 4010 	str.w	r4, [r8, #16]
 8004bda:	4640      	mov	r0, r8
 8004bdc:	f001 fc70 	bl	80064c0 <__mcmp>
 8004be0:	2800      	cmp	r0, #0
 8004be2:	db25      	blt.n	8004c30 <quorem+0xf4>
 8004be4:	3501      	adds	r5, #1
 8004be6:	4630      	mov	r0, r6
 8004be8:	f04f 0c00 	mov.w	ip, #0
 8004bec:	f857 2b04 	ldr.w	r2, [r7], #4
 8004bf0:	f8d0 e000 	ldr.w	lr, [r0]
 8004bf4:	b293      	uxth	r3, r2
 8004bf6:	ebac 0303 	sub.w	r3, ip, r3
 8004bfa:	0c12      	lsrs	r2, r2, #16
 8004bfc:	fa13 f38e 	uxtah	r3, r3, lr
 8004c00:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004c04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c0e:	45b9      	cmp	r9, r7
 8004c10:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004c14:	f840 3b04 	str.w	r3, [r0], #4
 8004c18:	d2e8      	bcs.n	8004bec <quorem+0xb0>
 8004c1a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004c1e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004c22:	b92a      	cbnz	r2, 8004c30 <quorem+0xf4>
 8004c24:	3b04      	subs	r3, #4
 8004c26:	429e      	cmp	r6, r3
 8004c28:	461a      	mov	r2, r3
 8004c2a:	d30b      	bcc.n	8004c44 <quorem+0x108>
 8004c2c:	f8c8 4010 	str.w	r4, [r8, #16]
 8004c30:	4628      	mov	r0, r5
 8004c32:	b003      	add	sp, #12
 8004c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c38:	6812      	ldr	r2, [r2, #0]
 8004c3a:	3b04      	subs	r3, #4
 8004c3c:	2a00      	cmp	r2, #0
 8004c3e:	d1ca      	bne.n	8004bd6 <quorem+0x9a>
 8004c40:	3c01      	subs	r4, #1
 8004c42:	e7c5      	b.n	8004bd0 <quorem+0x94>
 8004c44:	6812      	ldr	r2, [r2, #0]
 8004c46:	3b04      	subs	r3, #4
 8004c48:	2a00      	cmp	r2, #0
 8004c4a:	d1ef      	bne.n	8004c2c <quorem+0xf0>
 8004c4c:	3c01      	subs	r4, #1
 8004c4e:	e7ea      	b.n	8004c26 <quorem+0xea>
 8004c50:	2000      	movs	r0, #0
 8004c52:	e7ee      	b.n	8004c32 <quorem+0xf6>
 8004c54:	0000      	movs	r0, r0
	...

08004c58 <_dtoa_r>:
 8004c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c5c:	ec57 6b10 	vmov	r6, r7, d0
 8004c60:	b097      	sub	sp, #92	; 0x5c
 8004c62:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004c64:	9106      	str	r1, [sp, #24]
 8004c66:	4604      	mov	r4, r0
 8004c68:	920b      	str	r2, [sp, #44]	; 0x2c
 8004c6a:	9312      	str	r3, [sp, #72]	; 0x48
 8004c6c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004c70:	e9cd 6700 	strd	r6, r7, [sp]
 8004c74:	b93d      	cbnz	r5, 8004c86 <_dtoa_r+0x2e>
 8004c76:	2010      	movs	r0, #16
 8004c78:	f001 f9aa 	bl	8005fd0 <malloc>
 8004c7c:	6260      	str	r0, [r4, #36]	; 0x24
 8004c7e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004c82:	6005      	str	r5, [r0, #0]
 8004c84:	60c5      	str	r5, [r0, #12]
 8004c86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c88:	6819      	ldr	r1, [r3, #0]
 8004c8a:	b151      	cbz	r1, 8004ca2 <_dtoa_r+0x4a>
 8004c8c:	685a      	ldr	r2, [r3, #4]
 8004c8e:	604a      	str	r2, [r1, #4]
 8004c90:	2301      	movs	r3, #1
 8004c92:	4093      	lsls	r3, r2
 8004c94:	608b      	str	r3, [r1, #8]
 8004c96:	4620      	mov	r0, r4
 8004c98:	f001 f9f3 	bl	8006082 <_Bfree>
 8004c9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	601a      	str	r2, [r3, #0]
 8004ca2:	1e3b      	subs	r3, r7, #0
 8004ca4:	bfbb      	ittet	lt
 8004ca6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004caa:	9301      	strlt	r3, [sp, #4]
 8004cac:	2300      	movge	r3, #0
 8004cae:	2201      	movlt	r2, #1
 8004cb0:	bfac      	ite	ge
 8004cb2:	f8c8 3000 	strge.w	r3, [r8]
 8004cb6:	f8c8 2000 	strlt.w	r2, [r8]
 8004cba:	4baf      	ldr	r3, [pc, #700]	; (8004f78 <_dtoa_r+0x320>)
 8004cbc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004cc0:	ea33 0308 	bics.w	r3, r3, r8
 8004cc4:	d114      	bne.n	8004cf0 <_dtoa_r+0x98>
 8004cc6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004cc8:	f242 730f 	movw	r3, #9999	; 0x270f
 8004ccc:	6013      	str	r3, [r2, #0]
 8004cce:	9b00      	ldr	r3, [sp, #0]
 8004cd0:	b923      	cbnz	r3, 8004cdc <_dtoa_r+0x84>
 8004cd2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004cd6:	2800      	cmp	r0, #0
 8004cd8:	f000 8542 	beq.w	8005760 <_dtoa_r+0xb08>
 8004cdc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004cde:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8004f8c <_dtoa_r+0x334>
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	f000 8544 	beq.w	8005770 <_dtoa_r+0xb18>
 8004ce8:	f10b 0303 	add.w	r3, fp, #3
 8004cec:	f000 bd3e 	b.w	800576c <_dtoa_r+0xb14>
 8004cf0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	4630      	mov	r0, r6
 8004cfa:	4639      	mov	r1, r7
 8004cfc:	f7fb fee4 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d00:	4681      	mov	r9, r0
 8004d02:	b168      	cbz	r0, 8004d20 <_dtoa_r+0xc8>
 8004d04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004d06:	2301      	movs	r3, #1
 8004d08:	6013      	str	r3, [r2, #0]
 8004d0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f000 8524 	beq.w	800575a <_dtoa_r+0xb02>
 8004d12:	4b9a      	ldr	r3, [pc, #616]	; (8004f7c <_dtoa_r+0x324>)
 8004d14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004d16:	f103 3bff 	add.w	fp, r3, #4294967295
 8004d1a:	6013      	str	r3, [r2, #0]
 8004d1c:	f000 bd28 	b.w	8005770 <_dtoa_r+0xb18>
 8004d20:	aa14      	add	r2, sp, #80	; 0x50
 8004d22:	a915      	add	r1, sp, #84	; 0x54
 8004d24:	ec47 6b10 	vmov	d0, r6, r7
 8004d28:	4620      	mov	r0, r4
 8004d2a:	f001 fcb7 	bl	800669c <__d2b>
 8004d2e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004d32:	9004      	str	r0, [sp, #16]
 8004d34:	2d00      	cmp	r5, #0
 8004d36:	d07c      	beq.n	8004e32 <_dtoa_r+0x1da>
 8004d38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004d3c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8004d40:	46b2      	mov	sl, r6
 8004d42:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8004d46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004d4a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8004d4e:	2200      	movs	r2, #0
 8004d50:	4b8b      	ldr	r3, [pc, #556]	; (8004f80 <_dtoa_r+0x328>)
 8004d52:	4650      	mov	r0, sl
 8004d54:	4659      	mov	r1, fp
 8004d56:	f7fb fa97 	bl	8000288 <__aeabi_dsub>
 8004d5a:	a381      	add	r3, pc, #516	; (adr r3, 8004f60 <_dtoa_r+0x308>)
 8004d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d60:	f7fb fc4a 	bl	80005f8 <__aeabi_dmul>
 8004d64:	a380      	add	r3, pc, #512	; (adr r3, 8004f68 <_dtoa_r+0x310>)
 8004d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6a:	f7fb fa8f 	bl	800028c <__adddf3>
 8004d6e:	4606      	mov	r6, r0
 8004d70:	4628      	mov	r0, r5
 8004d72:	460f      	mov	r7, r1
 8004d74:	f7fb fbd6 	bl	8000524 <__aeabi_i2d>
 8004d78:	a37d      	add	r3, pc, #500	; (adr r3, 8004f70 <_dtoa_r+0x318>)
 8004d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7e:	f7fb fc3b 	bl	80005f8 <__aeabi_dmul>
 8004d82:	4602      	mov	r2, r0
 8004d84:	460b      	mov	r3, r1
 8004d86:	4630      	mov	r0, r6
 8004d88:	4639      	mov	r1, r7
 8004d8a:	f7fb fa7f 	bl	800028c <__adddf3>
 8004d8e:	4606      	mov	r6, r0
 8004d90:	460f      	mov	r7, r1
 8004d92:	f7fb fee1 	bl	8000b58 <__aeabi_d2iz>
 8004d96:	2200      	movs	r2, #0
 8004d98:	4682      	mov	sl, r0
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	4630      	mov	r0, r6
 8004d9e:	4639      	mov	r1, r7
 8004da0:	f7fb fe9c 	bl	8000adc <__aeabi_dcmplt>
 8004da4:	b148      	cbz	r0, 8004dba <_dtoa_r+0x162>
 8004da6:	4650      	mov	r0, sl
 8004da8:	f7fb fbbc 	bl	8000524 <__aeabi_i2d>
 8004dac:	4632      	mov	r2, r6
 8004dae:	463b      	mov	r3, r7
 8004db0:	f7fb fe8a 	bl	8000ac8 <__aeabi_dcmpeq>
 8004db4:	b908      	cbnz	r0, 8004dba <_dtoa_r+0x162>
 8004db6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004dba:	f1ba 0f16 	cmp.w	sl, #22
 8004dbe:	d859      	bhi.n	8004e74 <_dtoa_r+0x21c>
 8004dc0:	4970      	ldr	r1, [pc, #448]	; (8004f84 <_dtoa_r+0x32c>)
 8004dc2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004dc6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004dca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004dce:	f7fb fea3 	bl	8000b18 <__aeabi_dcmpgt>
 8004dd2:	2800      	cmp	r0, #0
 8004dd4:	d050      	beq.n	8004e78 <_dtoa_r+0x220>
 8004dd6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004dda:	2300      	movs	r3, #0
 8004ddc:	930f      	str	r3, [sp, #60]	; 0x3c
 8004dde:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004de0:	1b5d      	subs	r5, r3, r5
 8004de2:	f1b5 0801 	subs.w	r8, r5, #1
 8004de6:	bf49      	itett	mi
 8004de8:	f1c5 0301 	rsbmi	r3, r5, #1
 8004dec:	2300      	movpl	r3, #0
 8004dee:	9305      	strmi	r3, [sp, #20]
 8004df0:	f04f 0800 	movmi.w	r8, #0
 8004df4:	bf58      	it	pl
 8004df6:	9305      	strpl	r3, [sp, #20]
 8004df8:	f1ba 0f00 	cmp.w	sl, #0
 8004dfc:	db3e      	blt.n	8004e7c <_dtoa_r+0x224>
 8004dfe:	2300      	movs	r3, #0
 8004e00:	44d0      	add	r8, sl
 8004e02:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004e06:	9307      	str	r3, [sp, #28]
 8004e08:	9b06      	ldr	r3, [sp, #24]
 8004e0a:	2b09      	cmp	r3, #9
 8004e0c:	f200 8090 	bhi.w	8004f30 <_dtoa_r+0x2d8>
 8004e10:	2b05      	cmp	r3, #5
 8004e12:	bfc4      	itt	gt
 8004e14:	3b04      	subgt	r3, #4
 8004e16:	9306      	strgt	r3, [sp, #24]
 8004e18:	9b06      	ldr	r3, [sp, #24]
 8004e1a:	f1a3 0302 	sub.w	r3, r3, #2
 8004e1e:	bfcc      	ite	gt
 8004e20:	2500      	movgt	r5, #0
 8004e22:	2501      	movle	r5, #1
 8004e24:	2b03      	cmp	r3, #3
 8004e26:	f200 808f 	bhi.w	8004f48 <_dtoa_r+0x2f0>
 8004e2a:	e8df f003 	tbb	[pc, r3]
 8004e2e:	7f7d      	.short	0x7f7d
 8004e30:	7131      	.short	0x7131
 8004e32:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8004e36:	441d      	add	r5, r3
 8004e38:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004e3c:	2820      	cmp	r0, #32
 8004e3e:	dd13      	ble.n	8004e68 <_dtoa_r+0x210>
 8004e40:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004e44:	9b00      	ldr	r3, [sp, #0]
 8004e46:	fa08 f800 	lsl.w	r8, r8, r0
 8004e4a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004e4e:	fa23 f000 	lsr.w	r0, r3, r0
 8004e52:	ea48 0000 	orr.w	r0, r8, r0
 8004e56:	f7fb fb55 	bl	8000504 <__aeabi_ui2d>
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	4682      	mov	sl, r0
 8004e5e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8004e62:	3d01      	subs	r5, #1
 8004e64:	9313      	str	r3, [sp, #76]	; 0x4c
 8004e66:	e772      	b.n	8004d4e <_dtoa_r+0xf6>
 8004e68:	9b00      	ldr	r3, [sp, #0]
 8004e6a:	f1c0 0020 	rsb	r0, r0, #32
 8004e6e:	fa03 f000 	lsl.w	r0, r3, r0
 8004e72:	e7f0      	b.n	8004e56 <_dtoa_r+0x1fe>
 8004e74:	2301      	movs	r3, #1
 8004e76:	e7b1      	b.n	8004ddc <_dtoa_r+0x184>
 8004e78:	900f      	str	r0, [sp, #60]	; 0x3c
 8004e7a:	e7b0      	b.n	8004dde <_dtoa_r+0x186>
 8004e7c:	9b05      	ldr	r3, [sp, #20]
 8004e7e:	eba3 030a 	sub.w	r3, r3, sl
 8004e82:	9305      	str	r3, [sp, #20]
 8004e84:	f1ca 0300 	rsb	r3, sl, #0
 8004e88:	9307      	str	r3, [sp, #28]
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	930e      	str	r3, [sp, #56]	; 0x38
 8004e8e:	e7bb      	b.n	8004e08 <_dtoa_r+0x1b0>
 8004e90:	2301      	movs	r3, #1
 8004e92:	930a      	str	r3, [sp, #40]	; 0x28
 8004e94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	dd59      	ble.n	8004f4e <_dtoa_r+0x2f6>
 8004e9a:	9302      	str	r3, [sp, #8]
 8004e9c:	4699      	mov	r9, r3
 8004e9e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	6072      	str	r2, [r6, #4]
 8004ea4:	2204      	movs	r2, #4
 8004ea6:	f102 0014 	add.w	r0, r2, #20
 8004eaa:	4298      	cmp	r0, r3
 8004eac:	6871      	ldr	r1, [r6, #4]
 8004eae:	d953      	bls.n	8004f58 <_dtoa_r+0x300>
 8004eb0:	4620      	mov	r0, r4
 8004eb2:	f001 f8b2 	bl	800601a <_Balloc>
 8004eb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004eb8:	6030      	str	r0, [r6, #0]
 8004eba:	f1b9 0f0e 	cmp.w	r9, #14
 8004ebe:	f8d3 b000 	ldr.w	fp, [r3]
 8004ec2:	f200 80e6 	bhi.w	8005092 <_dtoa_r+0x43a>
 8004ec6:	2d00      	cmp	r5, #0
 8004ec8:	f000 80e3 	beq.w	8005092 <_dtoa_r+0x43a>
 8004ecc:	ed9d 7b00 	vldr	d7, [sp]
 8004ed0:	f1ba 0f00 	cmp.w	sl, #0
 8004ed4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004ed8:	dd74      	ble.n	8004fc4 <_dtoa_r+0x36c>
 8004eda:	4a2a      	ldr	r2, [pc, #168]	; (8004f84 <_dtoa_r+0x32c>)
 8004edc:	f00a 030f 	and.w	r3, sl, #15
 8004ee0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004ee4:	ed93 7b00 	vldr	d7, [r3]
 8004ee8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004eec:	06f0      	lsls	r0, r6, #27
 8004eee:	ed8d 7b08 	vstr	d7, [sp, #32]
 8004ef2:	d565      	bpl.n	8004fc0 <_dtoa_r+0x368>
 8004ef4:	4b24      	ldr	r3, [pc, #144]	; (8004f88 <_dtoa_r+0x330>)
 8004ef6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004efa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004efe:	f7fb fca5 	bl	800084c <__aeabi_ddiv>
 8004f02:	e9cd 0100 	strd	r0, r1, [sp]
 8004f06:	f006 060f 	and.w	r6, r6, #15
 8004f0a:	2503      	movs	r5, #3
 8004f0c:	4f1e      	ldr	r7, [pc, #120]	; (8004f88 <_dtoa_r+0x330>)
 8004f0e:	e04c      	b.n	8004faa <_dtoa_r+0x352>
 8004f10:	2301      	movs	r3, #1
 8004f12:	930a      	str	r3, [sp, #40]	; 0x28
 8004f14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f16:	4453      	add	r3, sl
 8004f18:	f103 0901 	add.w	r9, r3, #1
 8004f1c:	9302      	str	r3, [sp, #8]
 8004f1e:	464b      	mov	r3, r9
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	bfb8      	it	lt
 8004f24:	2301      	movlt	r3, #1
 8004f26:	e7ba      	b.n	8004e9e <_dtoa_r+0x246>
 8004f28:	2300      	movs	r3, #0
 8004f2a:	e7b2      	b.n	8004e92 <_dtoa_r+0x23a>
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	e7f0      	b.n	8004f12 <_dtoa_r+0x2ba>
 8004f30:	2501      	movs	r5, #1
 8004f32:	2300      	movs	r3, #0
 8004f34:	9306      	str	r3, [sp, #24]
 8004f36:	950a      	str	r5, [sp, #40]	; 0x28
 8004f38:	f04f 33ff 	mov.w	r3, #4294967295
 8004f3c:	9302      	str	r3, [sp, #8]
 8004f3e:	4699      	mov	r9, r3
 8004f40:	2200      	movs	r2, #0
 8004f42:	2312      	movs	r3, #18
 8004f44:	920b      	str	r2, [sp, #44]	; 0x2c
 8004f46:	e7aa      	b.n	8004e9e <_dtoa_r+0x246>
 8004f48:	2301      	movs	r3, #1
 8004f4a:	930a      	str	r3, [sp, #40]	; 0x28
 8004f4c:	e7f4      	b.n	8004f38 <_dtoa_r+0x2e0>
 8004f4e:	2301      	movs	r3, #1
 8004f50:	9302      	str	r3, [sp, #8]
 8004f52:	4699      	mov	r9, r3
 8004f54:	461a      	mov	r2, r3
 8004f56:	e7f5      	b.n	8004f44 <_dtoa_r+0x2ec>
 8004f58:	3101      	adds	r1, #1
 8004f5a:	6071      	str	r1, [r6, #4]
 8004f5c:	0052      	lsls	r2, r2, #1
 8004f5e:	e7a2      	b.n	8004ea6 <_dtoa_r+0x24e>
 8004f60:	636f4361 	.word	0x636f4361
 8004f64:	3fd287a7 	.word	0x3fd287a7
 8004f68:	8b60c8b3 	.word	0x8b60c8b3
 8004f6c:	3fc68a28 	.word	0x3fc68a28
 8004f70:	509f79fb 	.word	0x509f79fb
 8004f74:	3fd34413 	.word	0x3fd34413
 8004f78:	7ff00000 	.word	0x7ff00000
 8004f7c:	080074e9 	.word	0x080074e9
 8004f80:	3ff80000 	.word	0x3ff80000
 8004f84:	08007610 	.word	0x08007610
 8004f88:	080075e8 	.word	0x080075e8
 8004f8c:	08007571 	.word	0x08007571
 8004f90:	07f1      	lsls	r1, r6, #31
 8004f92:	d508      	bpl.n	8004fa6 <_dtoa_r+0x34e>
 8004f94:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004f98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f9c:	f7fb fb2c 	bl	80005f8 <__aeabi_dmul>
 8004fa0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004fa4:	3501      	adds	r5, #1
 8004fa6:	1076      	asrs	r6, r6, #1
 8004fa8:	3708      	adds	r7, #8
 8004faa:	2e00      	cmp	r6, #0
 8004fac:	d1f0      	bne.n	8004f90 <_dtoa_r+0x338>
 8004fae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004fb2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004fb6:	f7fb fc49 	bl	800084c <__aeabi_ddiv>
 8004fba:	e9cd 0100 	strd	r0, r1, [sp]
 8004fbe:	e01a      	b.n	8004ff6 <_dtoa_r+0x39e>
 8004fc0:	2502      	movs	r5, #2
 8004fc2:	e7a3      	b.n	8004f0c <_dtoa_r+0x2b4>
 8004fc4:	f000 80a0 	beq.w	8005108 <_dtoa_r+0x4b0>
 8004fc8:	f1ca 0600 	rsb	r6, sl, #0
 8004fcc:	4b9f      	ldr	r3, [pc, #636]	; (800524c <_dtoa_r+0x5f4>)
 8004fce:	4fa0      	ldr	r7, [pc, #640]	; (8005250 <_dtoa_r+0x5f8>)
 8004fd0:	f006 020f 	and.w	r2, r6, #15
 8004fd4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fdc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004fe0:	f7fb fb0a 	bl	80005f8 <__aeabi_dmul>
 8004fe4:	e9cd 0100 	strd	r0, r1, [sp]
 8004fe8:	1136      	asrs	r6, r6, #4
 8004fea:	2300      	movs	r3, #0
 8004fec:	2502      	movs	r5, #2
 8004fee:	2e00      	cmp	r6, #0
 8004ff0:	d17f      	bne.n	80050f2 <_dtoa_r+0x49a>
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1e1      	bne.n	8004fba <_dtoa_r+0x362>
 8004ff6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f000 8087 	beq.w	800510c <_dtoa_r+0x4b4>
 8004ffe:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005002:	2200      	movs	r2, #0
 8005004:	4b93      	ldr	r3, [pc, #588]	; (8005254 <_dtoa_r+0x5fc>)
 8005006:	4630      	mov	r0, r6
 8005008:	4639      	mov	r1, r7
 800500a:	f7fb fd67 	bl	8000adc <__aeabi_dcmplt>
 800500e:	2800      	cmp	r0, #0
 8005010:	d07c      	beq.n	800510c <_dtoa_r+0x4b4>
 8005012:	f1b9 0f00 	cmp.w	r9, #0
 8005016:	d079      	beq.n	800510c <_dtoa_r+0x4b4>
 8005018:	9b02      	ldr	r3, [sp, #8]
 800501a:	2b00      	cmp	r3, #0
 800501c:	dd35      	ble.n	800508a <_dtoa_r+0x432>
 800501e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005022:	9308      	str	r3, [sp, #32]
 8005024:	4639      	mov	r1, r7
 8005026:	2200      	movs	r2, #0
 8005028:	4b8b      	ldr	r3, [pc, #556]	; (8005258 <_dtoa_r+0x600>)
 800502a:	4630      	mov	r0, r6
 800502c:	f7fb fae4 	bl	80005f8 <__aeabi_dmul>
 8005030:	e9cd 0100 	strd	r0, r1, [sp]
 8005034:	9f02      	ldr	r7, [sp, #8]
 8005036:	3501      	adds	r5, #1
 8005038:	4628      	mov	r0, r5
 800503a:	f7fb fa73 	bl	8000524 <__aeabi_i2d>
 800503e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005042:	f7fb fad9 	bl	80005f8 <__aeabi_dmul>
 8005046:	2200      	movs	r2, #0
 8005048:	4b84      	ldr	r3, [pc, #528]	; (800525c <_dtoa_r+0x604>)
 800504a:	f7fb f91f 	bl	800028c <__adddf3>
 800504e:	4605      	mov	r5, r0
 8005050:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005054:	2f00      	cmp	r7, #0
 8005056:	d15d      	bne.n	8005114 <_dtoa_r+0x4bc>
 8005058:	2200      	movs	r2, #0
 800505a:	4b81      	ldr	r3, [pc, #516]	; (8005260 <_dtoa_r+0x608>)
 800505c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005060:	f7fb f912 	bl	8000288 <__aeabi_dsub>
 8005064:	462a      	mov	r2, r5
 8005066:	4633      	mov	r3, r6
 8005068:	e9cd 0100 	strd	r0, r1, [sp]
 800506c:	f7fb fd54 	bl	8000b18 <__aeabi_dcmpgt>
 8005070:	2800      	cmp	r0, #0
 8005072:	f040 8288 	bne.w	8005586 <_dtoa_r+0x92e>
 8005076:	462a      	mov	r2, r5
 8005078:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800507c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005080:	f7fb fd2c 	bl	8000adc <__aeabi_dcmplt>
 8005084:	2800      	cmp	r0, #0
 8005086:	f040 827c 	bne.w	8005582 <_dtoa_r+0x92a>
 800508a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800508e:	e9cd 2300 	strd	r2, r3, [sp]
 8005092:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005094:	2b00      	cmp	r3, #0
 8005096:	f2c0 8150 	blt.w	800533a <_dtoa_r+0x6e2>
 800509a:	f1ba 0f0e 	cmp.w	sl, #14
 800509e:	f300 814c 	bgt.w	800533a <_dtoa_r+0x6e2>
 80050a2:	4b6a      	ldr	r3, [pc, #424]	; (800524c <_dtoa_r+0x5f4>)
 80050a4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80050a8:	ed93 7b00 	vldr	d7, [r3]
 80050ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80050b4:	f280 80d8 	bge.w	8005268 <_dtoa_r+0x610>
 80050b8:	f1b9 0f00 	cmp.w	r9, #0
 80050bc:	f300 80d4 	bgt.w	8005268 <_dtoa_r+0x610>
 80050c0:	f040 825e 	bne.w	8005580 <_dtoa_r+0x928>
 80050c4:	2200      	movs	r2, #0
 80050c6:	4b66      	ldr	r3, [pc, #408]	; (8005260 <_dtoa_r+0x608>)
 80050c8:	ec51 0b17 	vmov	r0, r1, d7
 80050cc:	f7fb fa94 	bl	80005f8 <__aeabi_dmul>
 80050d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80050d4:	f7fb fd16 	bl	8000b04 <__aeabi_dcmpge>
 80050d8:	464f      	mov	r7, r9
 80050da:	464e      	mov	r6, r9
 80050dc:	2800      	cmp	r0, #0
 80050de:	f040 8234 	bne.w	800554a <_dtoa_r+0x8f2>
 80050e2:	2331      	movs	r3, #49	; 0x31
 80050e4:	f10b 0501 	add.w	r5, fp, #1
 80050e8:	f88b 3000 	strb.w	r3, [fp]
 80050ec:	f10a 0a01 	add.w	sl, sl, #1
 80050f0:	e22f      	b.n	8005552 <_dtoa_r+0x8fa>
 80050f2:	07f2      	lsls	r2, r6, #31
 80050f4:	d505      	bpl.n	8005102 <_dtoa_r+0x4aa>
 80050f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050fa:	f7fb fa7d 	bl	80005f8 <__aeabi_dmul>
 80050fe:	3501      	adds	r5, #1
 8005100:	2301      	movs	r3, #1
 8005102:	1076      	asrs	r6, r6, #1
 8005104:	3708      	adds	r7, #8
 8005106:	e772      	b.n	8004fee <_dtoa_r+0x396>
 8005108:	2502      	movs	r5, #2
 800510a:	e774      	b.n	8004ff6 <_dtoa_r+0x39e>
 800510c:	f8cd a020 	str.w	sl, [sp, #32]
 8005110:	464f      	mov	r7, r9
 8005112:	e791      	b.n	8005038 <_dtoa_r+0x3e0>
 8005114:	4b4d      	ldr	r3, [pc, #308]	; (800524c <_dtoa_r+0x5f4>)
 8005116:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800511a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800511e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005120:	2b00      	cmp	r3, #0
 8005122:	d047      	beq.n	80051b4 <_dtoa_r+0x55c>
 8005124:	4602      	mov	r2, r0
 8005126:	460b      	mov	r3, r1
 8005128:	2000      	movs	r0, #0
 800512a:	494e      	ldr	r1, [pc, #312]	; (8005264 <_dtoa_r+0x60c>)
 800512c:	f7fb fb8e 	bl	800084c <__aeabi_ddiv>
 8005130:	462a      	mov	r2, r5
 8005132:	4633      	mov	r3, r6
 8005134:	f7fb f8a8 	bl	8000288 <__aeabi_dsub>
 8005138:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800513c:	465d      	mov	r5, fp
 800513e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005142:	f7fb fd09 	bl	8000b58 <__aeabi_d2iz>
 8005146:	4606      	mov	r6, r0
 8005148:	f7fb f9ec 	bl	8000524 <__aeabi_i2d>
 800514c:	4602      	mov	r2, r0
 800514e:	460b      	mov	r3, r1
 8005150:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005154:	f7fb f898 	bl	8000288 <__aeabi_dsub>
 8005158:	3630      	adds	r6, #48	; 0x30
 800515a:	f805 6b01 	strb.w	r6, [r5], #1
 800515e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005162:	e9cd 0100 	strd	r0, r1, [sp]
 8005166:	f7fb fcb9 	bl	8000adc <__aeabi_dcmplt>
 800516a:	2800      	cmp	r0, #0
 800516c:	d163      	bne.n	8005236 <_dtoa_r+0x5de>
 800516e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005172:	2000      	movs	r0, #0
 8005174:	4937      	ldr	r1, [pc, #220]	; (8005254 <_dtoa_r+0x5fc>)
 8005176:	f7fb f887 	bl	8000288 <__aeabi_dsub>
 800517a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800517e:	f7fb fcad 	bl	8000adc <__aeabi_dcmplt>
 8005182:	2800      	cmp	r0, #0
 8005184:	f040 80b7 	bne.w	80052f6 <_dtoa_r+0x69e>
 8005188:	eba5 030b 	sub.w	r3, r5, fp
 800518c:	429f      	cmp	r7, r3
 800518e:	f77f af7c 	ble.w	800508a <_dtoa_r+0x432>
 8005192:	2200      	movs	r2, #0
 8005194:	4b30      	ldr	r3, [pc, #192]	; (8005258 <_dtoa_r+0x600>)
 8005196:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800519a:	f7fb fa2d 	bl	80005f8 <__aeabi_dmul>
 800519e:	2200      	movs	r2, #0
 80051a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80051a4:	4b2c      	ldr	r3, [pc, #176]	; (8005258 <_dtoa_r+0x600>)
 80051a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051aa:	f7fb fa25 	bl	80005f8 <__aeabi_dmul>
 80051ae:	e9cd 0100 	strd	r0, r1, [sp]
 80051b2:	e7c4      	b.n	800513e <_dtoa_r+0x4e6>
 80051b4:	462a      	mov	r2, r5
 80051b6:	4633      	mov	r3, r6
 80051b8:	f7fb fa1e 	bl	80005f8 <__aeabi_dmul>
 80051bc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80051c0:	eb0b 0507 	add.w	r5, fp, r7
 80051c4:	465e      	mov	r6, fp
 80051c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051ca:	f7fb fcc5 	bl	8000b58 <__aeabi_d2iz>
 80051ce:	4607      	mov	r7, r0
 80051d0:	f7fb f9a8 	bl	8000524 <__aeabi_i2d>
 80051d4:	3730      	adds	r7, #48	; 0x30
 80051d6:	4602      	mov	r2, r0
 80051d8:	460b      	mov	r3, r1
 80051da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051de:	f7fb f853 	bl	8000288 <__aeabi_dsub>
 80051e2:	f806 7b01 	strb.w	r7, [r6], #1
 80051e6:	42ae      	cmp	r6, r5
 80051e8:	e9cd 0100 	strd	r0, r1, [sp]
 80051ec:	f04f 0200 	mov.w	r2, #0
 80051f0:	d126      	bne.n	8005240 <_dtoa_r+0x5e8>
 80051f2:	4b1c      	ldr	r3, [pc, #112]	; (8005264 <_dtoa_r+0x60c>)
 80051f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80051f8:	f7fb f848 	bl	800028c <__adddf3>
 80051fc:	4602      	mov	r2, r0
 80051fe:	460b      	mov	r3, r1
 8005200:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005204:	f7fb fc88 	bl	8000b18 <__aeabi_dcmpgt>
 8005208:	2800      	cmp	r0, #0
 800520a:	d174      	bne.n	80052f6 <_dtoa_r+0x69e>
 800520c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005210:	2000      	movs	r0, #0
 8005212:	4914      	ldr	r1, [pc, #80]	; (8005264 <_dtoa_r+0x60c>)
 8005214:	f7fb f838 	bl	8000288 <__aeabi_dsub>
 8005218:	4602      	mov	r2, r0
 800521a:	460b      	mov	r3, r1
 800521c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005220:	f7fb fc5c 	bl	8000adc <__aeabi_dcmplt>
 8005224:	2800      	cmp	r0, #0
 8005226:	f43f af30 	beq.w	800508a <_dtoa_r+0x432>
 800522a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800522e:	2b30      	cmp	r3, #48	; 0x30
 8005230:	f105 32ff 	add.w	r2, r5, #4294967295
 8005234:	d002      	beq.n	800523c <_dtoa_r+0x5e4>
 8005236:	f8dd a020 	ldr.w	sl, [sp, #32]
 800523a:	e04a      	b.n	80052d2 <_dtoa_r+0x67a>
 800523c:	4615      	mov	r5, r2
 800523e:	e7f4      	b.n	800522a <_dtoa_r+0x5d2>
 8005240:	4b05      	ldr	r3, [pc, #20]	; (8005258 <_dtoa_r+0x600>)
 8005242:	f7fb f9d9 	bl	80005f8 <__aeabi_dmul>
 8005246:	e9cd 0100 	strd	r0, r1, [sp]
 800524a:	e7bc      	b.n	80051c6 <_dtoa_r+0x56e>
 800524c:	08007610 	.word	0x08007610
 8005250:	080075e8 	.word	0x080075e8
 8005254:	3ff00000 	.word	0x3ff00000
 8005258:	40240000 	.word	0x40240000
 800525c:	401c0000 	.word	0x401c0000
 8005260:	40140000 	.word	0x40140000
 8005264:	3fe00000 	.word	0x3fe00000
 8005268:	e9dd 6700 	ldrd	r6, r7, [sp]
 800526c:	465d      	mov	r5, fp
 800526e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005272:	4630      	mov	r0, r6
 8005274:	4639      	mov	r1, r7
 8005276:	f7fb fae9 	bl	800084c <__aeabi_ddiv>
 800527a:	f7fb fc6d 	bl	8000b58 <__aeabi_d2iz>
 800527e:	4680      	mov	r8, r0
 8005280:	f7fb f950 	bl	8000524 <__aeabi_i2d>
 8005284:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005288:	f7fb f9b6 	bl	80005f8 <__aeabi_dmul>
 800528c:	4602      	mov	r2, r0
 800528e:	460b      	mov	r3, r1
 8005290:	4630      	mov	r0, r6
 8005292:	4639      	mov	r1, r7
 8005294:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005298:	f7fa fff6 	bl	8000288 <__aeabi_dsub>
 800529c:	f805 6b01 	strb.w	r6, [r5], #1
 80052a0:	eba5 060b 	sub.w	r6, r5, fp
 80052a4:	45b1      	cmp	r9, r6
 80052a6:	4602      	mov	r2, r0
 80052a8:	460b      	mov	r3, r1
 80052aa:	d139      	bne.n	8005320 <_dtoa_r+0x6c8>
 80052ac:	f7fa ffee 	bl	800028c <__adddf3>
 80052b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80052b4:	4606      	mov	r6, r0
 80052b6:	460f      	mov	r7, r1
 80052b8:	f7fb fc2e 	bl	8000b18 <__aeabi_dcmpgt>
 80052bc:	b9c8      	cbnz	r0, 80052f2 <_dtoa_r+0x69a>
 80052be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80052c2:	4630      	mov	r0, r6
 80052c4:	4639      	mov	r1, r7
 80052c6:	f7fb fbff 	bl	8000ac8 <__aeabi_dcmpeq>
 80052ca:	b110      	cbz	r0, 80052d2 <_dtoa_r+0x67a>
 80052cc:	f018 0f01 	tst.w	r8, #1
 80052d0:	d10f      	bne.n	80052f2 <_dtoa_r+0x69a>
 80052d2:	9904      	ldr	r1, [sp, #16]
 80052d4:	4620      	mov	r0, r4
 80052d6:	f000 fed4 	bl	8006082 <_Bfree>
 80052da:	2300      	movs	r3, #0
 80052dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80052de:	702b      	strb	r3, [r5, #0]
 80052e0:	f10a 0301 	add.w	r3, sl, #1
 80052e4:	6013      	str	r3, [r2, #0]
 80052e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	f000 8241 	beq.w	8005770 <_dtoa_r+0xb18>
 80052ee:	601d      	str	r5, [r3, #0]
 80052f0:	e23e      	b.n	8005770 <_dtoa_r+0xb18>
 80052f2:	f8cd a020 	str.w	sl, [sp, #32]
 80052f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80052fa:	2a39      	cmp	r2, #57	; 0x39
 80052fc:	f105 33ff 	add.w	r3, r5, #4294967295
 8005300:	d108      	bne.n	8005314 <_dtoa_r+0x6bc>
 8005302:	459b      	cmp	fp, r3
 8005304:	d10a      	bne.n	800531c <_dtoa_r+0x6c4>
 8005306:	9b08      	ldr	r3, [sp, #32]
 8005308:	3301      	adds	r3, #1
 800530a:	9308      	str	r3, [sp, #32]
 800530c:	2330      	movs	r3, #48	; 0x30
 800530e:	f88b 3000 	strb.w	r3, [fp]
 8005312:	465b      	mov	r3, fp
 8005314:	781a      	ldrb	r2, [r3, #0]
 8005316:	3201      	adds	r2, #1
 8005318:	701a      	strb	r2, [r3, #0]
 800531a:	e78c      	b.n	8005236 <_dtoa_r+0x5de>
 800531c:	461d      	mov	r5, r3
 800531e:	e7ea      	b.n	80052f6 <_dtoa_r+0x69e>
 8005320:	2200      	movs	r2, #0
 8005322:	4b9b      	ldr	r3, [pc, #620]	; (8005590 <_dtoa_r+0x938>)
 8005324:	f7fb f968 	bl	80005f8 <__aeabi_dmul>
 8005328:	2200      	movs	r2, #0
 800532a:	2300      	movs	r3, #0
 800532c:	4606      	mov	r6, r0
 800532e:	460f      	mov	r7, r1
 8005330:	f7fb fbca 	bl	8000ac8 <__aeabi_dcmpeq>
 8005334:	2800      	cmp	r0, #0
 8005336:	d09a      	beq.n	800526e <_dtoa_r+0x616>
 8005338:	e7cb      	b.n	80052d2 <_dtoa_r+0x67a>
 800533a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800533c:	2a00      	cmp	r2, #0
 800533e:	f000 808b 	beq.w	8005458 <_dtoa_r+0x800>
 8005342:	9a06      	ldr	r2, [sp, #24]
 8005344:	2a01      	cmp	r2, #1
 8005346:	dc6e      	bgt.n	8005426 <_dtoa_r+0x7ce>
 8005348:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800534a:	2a00      	cmp	r2, #0
 800534c:	d067      	beq.n	800541e <_dtoa_r+0x7c6>
 800534e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005352:	9f07      	ldr	r7, [sp, #28]
 8005354:	9d05      	ldr	r5, [sp, #20]
 8005356:	9a05      	ldr	r2, [sp, #20]
 8005358:	2101      	movs	r1, #1
 800535a:	441a      	add	r2, r3
 800535c:	4620      	mov	r0, r4
 800535e:	9205      	str	r2, [sp, #20]
 8005360:	4498      	add	r8, r3
 8005362:	f000 ff6c 	bl	800623e <__i2b>
 8005366:	4606      	mov	r6, r0
 8005368:	2d00      	cmp	r5, #0
 800536a:	dd0c      	ble.n	8005386 <_dtoa_r+0x72e>
 800536c:	f1b8 0f00 	cmp.w	r8, #0
 8005370:	dd09      	ble.n	8005386 <_dtoa_r+0x72e>
 8005372:	4545      	cmp	r5, r8
 8005374:	9a05      	ldr	r2, [sp, #20]
 8005376:	462b      	mov	r3, r5
 8005378:	bfa8      	it	ge
 800537a:	4643      	movge	r3, r8
 800537c:	1ad2      	subs	r2, r2, r3
 800537e:	9205      	str	r2, [sp, #20]
 8005380:	1aed      	subs	r5, r5, r3
 8005382:	eba8 0803 	sub.w	r8, r8, r3
 8005386:	9b07      	ldr	r3, [sp, #28]
 8005388:	b1eb      	cbz	r3, 80053c6 <_dtoa_r+0x76e>
 800538a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800538c:	2b00      	cmp	r3, #0
 800538e:	d067      	beq.n	8005460 <_dtoa_r+0x808>
 8005390:	b18f      	cbz	r7, 80053b6 <_dtoa_r+0x75e>
 8005392:	4631      	mov	r1, r6
 8005394:	463a      	mov	r2, r7
 8005396:	4620      	mov	r0, r4
 8005398:	f000 fff0 	bl	800637c <__pow5mult>
 800539c:	9a04      	ldr	r2, [sp, #16]
 800539e:	4601      	mov	r1, r0
 80053a0:	4606      	mov	r6, r0
 80053a2:	4620      	mov	r0, r4
 80053a4:	f000 ff54 	bl	8006250 <__multiply>
 80053a8:	9904      	ldr	r1, [sp, #16]
 80053aa:	9008      	str	r0, [sp, #32]
 80053ac:	4620      	mov	r0, r4
 80053ae:	f000 fe68 	bl	8006082 <_Bfree>
 80053b2:	9b08      	ldr	r3, [sp, #32]
 80053b4:	9304      	str	r3, [sp, #16]
 80053b6:	9b07      	ldr	r3, [sp, #28]
 80053b8:	1bda      	subs	r2, r3, r7
 80053ba:	d004      	beq.n	80053c6 <_dtoa_r+0x76e>
 80053bc:	9904      	ldr	r1, [sp, #16]
 80053be:	4620      	mov	r0, r4
 80053c0:	f000 ffdc 	bl	800637c <__pow5mult>
 80053c4:	9004      	str	r0, [sp, #16]
 80053c6:	2101      	movs	r1, #1
 80053c8:	4620      	mov	r0, r4
 80053ca:	f000 ff38 	bl	800623e <__i2b>
 80053ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053d0:	4607      	mov	r7, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f000 81d0 	beq.w	8005778 <_dtoa_r+0xb20>
 80053d8:	461a      	mov	r2, r3
 80053da:	4601      	mov	r1, r0
 80053dc:	4620      	mov	r0, r4
 80053de:	f000 ffcd 	bl	800637c <__pow5mult>
 80053e2:	9b06      	ldr	r3, [sp, #24]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	4607      	mov	r7, r0
 80053e8:	dc40      	bgt.n	800546c <_dtoa_r+0x814>
 80053ea:	9b00      	ldr	r3, [sp, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d139      	bne.n	8005464 <_dtoa_r+0x80c>
 80053f0:	9b01      	ldr	r3, [sp, #4]
 80053f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d136      	bne.n	8005468 <_dtoa_r+0x810>
 80053fa:	9b01      	ldr	r3, [sp, #4]
 80053fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005400:	0d1b      	lsrs	r3, r3, #20
 8005402:	051b      	lsls	r3, r3, #20
 8005404:	b12b      	cbz	r3, 8005412 <_dtoa_r+0x7ba>
 8005406:	9b05      	ldr	r3, [sp, #20]
 8005408:	3301      	adds	r3, #1
 800540a:	9305      	str	r3, [sp, #20]
 800540c:	f108 0801 	add.w	r8, r8, #1
 8005410:	2301      	movs	r3, #1
 8005412:	9307      	str	r3, [sp, #28]
 8005414:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005416:	2b00      	cmp	r3, #0
 8005418:	d12a      	bne.n	8005470 <_dtoa_r+0x818>
 800541a:	2001      	movs	r0, #1
 800541c:	e030      	b.n	8005480 <_dtoa_r+0x828>
 800541e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005420:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005424:	e795      	b.n	8005352 <_dtoa_r+0x6fa>
 8005426:	9b07      	ldr	r3, [sp, #28]
 8005428:	f109 37ff 	add.w	r7, r9, #4294967295
 800542c:	42bb      	cmp	r3, r7
 800542e:	bfbf      	itttt	lt
 8005430:	9b07      	ldrlt	r3, [sp, #28]
 8005432:	9707      	strlt	r7, [sp, #28]
 8005434:	1afa      	sublt	r2, r7, r3
 8005436:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005438:	bfbb      	ittet	lt
 800543a:	189b      	addlt	r3, r3, r2
 800543c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800543e:	1bdf      	subge	r7, r3, r7
 8005440:	2700      	movlt	r7, #0
 8005442:	f1b9 0f00 	cmp.w	r9, #0
 8005446:	bfb5      	itete	lt
 8005448:	9b05      	ldrlt	r3, [sp, #20]
 800544a:	9d05      	ldrge	r5, [sp, #20]
 800544c:	eba3 0509 	sublt.w	r5, r3, r9
 8005450:	464b      	movge	r3, r9
 8005452:	bfb8      	it	lt
 8005454:	2300      	movlt	r3, #0
 8005456:	e77e      	b.n	8005356 <_dtoa_r+0x6fe>
 8005458:	9f07      	ldr	r7, [sp, #28]
 800545a:	9d05      	ldr	r5, [sp, #20]
 800545c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800545e:	e783      	b.n	8005368 <_dtoa_r+0x710>
 8005460:	9a07      	ldr	r2, [sp, #28]
 8005462:	e7ab      	b.n	80053bc <_dtoa_r+0x764>
 8005464:	2300      	movs	r3, #0
 8005466:	e7d4      	b.n	8005412 <_dtoa_r+0x7ba>
 8005468:	9b00      	ldr	r3, [sp, #0]
 800546a:	e7d2      	b.n	8005412 <_dtoa_r+0x7ba>
 800546c:	2300      	movs	r3, #0
 800546e:	9307      	str	r3, [sp, #28]
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005476:	6918      	ldr	r0, [r3, #16]
 8005478:	f000 fe93 	bl	80061a2 <__hi0bits>
 800547c:	f1c0 0020 	rsb	r0, r0, #32
 8005480:	4440      	add	r0, r8
 8005482:	f010 001f 	ands.w	r0, r0, #31
 8005486:	d047      	beq.n	8005518 <_dtoa_r+0x8c0>
 8005488:	f1c0 0320 	rsb	r3, r0, #32
 800548c:	2b04      	cmp	r3, #4
 800548e:	dd3b      	ble.n	8005508 <_dtoa_r+0x8b0>
 8005490:	9b05      	ldr	r3, [sp, #20]
 8005492:	f1c0 001c 	rsb	r0, r0, #28
 8005496:	4403      	add	r3, r0
 8005498:	9305      	str	r3, [sp, #20]
 800549a:	4405      	add	r5, r0
 800549c:	4480      	add	r8, r0
 800549e:	9b05      	ldr	r3, [sp, #20]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	dd05      	ble.n	80054b0 <_dtoa_r+0x858>
 80054a4:	461a      	mov	r2, r3
 80054a6:	9904      	ldr	r1, [sp, #16]
 80054a8:	4620      	mov	r0, r4
 80054aa:	f000 ffb5 	bl	8006418 <__lshift>
 80054ae:	9004      	str	r0, [sp, #16]
 80054b0:	f1b8 0f00 	cmp.w	r8, #0
 80054b4:	dd05      	ble.n	80054c2 <_dtoa_r+0x86a>
 80054b6:	4639      	mov	r1, r7
 80054b8:	4642      	mov	r2, r8
 80054ba:	4620      	mov	r0, r4
 80054bc:	f000 ffac 	bl	8006418 <__lshift>
 80054c0:	4607      	mov	r7, r0
 80054c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80054c4:	b353      	cbz	r3, 800551c <_dtoa_r+0x8c4>
 80054c6:	4639      	mov	r1, r7
 80054c8:	9804      	ldr	r0, [sp, #16]
 80054ca:	f000 fff9 	bl	80064c0 <__mcmp>
 80054ce:	2800      	cmp	r0, #0
 80054d0:	da24      	bge.n	800551c <_dtoa_r+0x8c4>
 80054d2:	2300      	movs	r3, #0
 80054d4:	220a      	movs	r2, #10
 80054d6:	9904      	ldr	r1, [sp, #16]
 80054d8:	4620      	mov	r0, r4
 80054da:	f000 fde9 	bl	80060b0 <__multadd>
 80054de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054e0:	9004      	str	r0, [sp, #16]
 80054e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	f000 814d 	beq.w	8005786 <_dtoa_r+0xb2e>
 80054ec:	2300      	movs	r3, #0
 80054ee:	4631      	mov	r1, r6
 80054f0:	220a      	movs	r2, #10
 80054f2:	4620      	mov	r0, r4
 80054f4:	f000 fddc 	bl	80060b0 <__multadd>
 80054f8:	9b02      	ldr	r3, [sp, #8]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	4606      	mov	r6, r0
 80054fe:	dc4f      	bgt.n	80055a0 <_dtoa_r+0x948>
 8005500:	9b06      	ldr	r3, [sp, #24]
 8005502:	2b02      	cmp	r3, #2
 8005504:	dd4c      	ble.n	80055a0 <_dtoa_r+0x948>
 8005506:	e011      	b.n	800552c <_dtoa_r+0x8d4>
 8005508:	d0c9      	beq.n	800549e <_dtoa_r+0x846>
 800550a:	9a05      	ldr	r2, [sp, #20]
 800550c:	331c      	adds	r3, #28
 800550e:	441a      	add	r2, r3
 8005510:	9205      	str	r2, [sp, #20]
 8005512:	441d      	add	r5, r3
 8005514:	4498      	add	r8, r3
 8005516:	e7c2      	b.n	800549e <_dtoa_r+0x846>
 8005518:	4603      	mov	r3, r0
 800551a:	e7f6      	b.n	800550a <_dtoa_r+0x8b2>
 800551c:	f1b9 0f00 	cmp.w	r9, #0
 8005520:	dc38      	bgt.n	8005594 <_dtoa_r+0x93c>
 8005522:	9b06      	ldr	r3, [sp, #24]
 8005524:	2b02      	cmp	r3, #2
 8005526:	dd35      	ble.n	8005594 <_dtoa_r+0x93c>
 8005528:	f8cd 9008 	str.w	r9, [sp, #8]
 800552c:	9b02      	ldr	r3, [sp, #8]
 800552e:	b963      	cbnz	r3, 800554a <_dtoa_r+0x8f2>
 8005530:	4639      	mov	r1, r7
 8005532:	2205      	movs	r2, #5
 8005534:	4620      	mov	r0, r4
 8005536:	f000 fdbb 	bl	80060b0 <__multadd>
 800553a:	4601      	mov	r1, r0
 800553c:	4607      	mov	r7, r0
 800553e:	9804      	ldr	r0, [sp, #16]
 8005540:	f000 ffbe 	bl	80064c0 <__mcmp>
 8005544:	2800      	cmp	r0, #0
 8005546:	f73f adcc 	bgt.w	80050e2 <_dtoa_r+0x48a>
 800554a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800554c:	465d      	mov	r5, fp
 800554e:	ea6f 0a03 	mvn.w	sl, r3
 8005552:	f04f 0900 	mov.w	r9, #0
 8005556:	4639      	mov	r1, r7
 8005558:	4620      	mov	r0, r4
 800555a:	f000 fd92 	bl	8006082 <_Bfree>
 800555e:	2e00      	cmp	r6, #0
 8005560:	f43f aeb7 	beq.w	80052d2 <_dtoa_r+0x67a>
 8005564:	f1b9 0f00 	cmp.w	r9, #0
 8005568:	d005      	beq.n	8005576 <_dtoa_r+0x91e>
 800556a:	45b1      	cmp	r9, r6
 800556c:	d003      	beq.n	8005576 <_dtoa_r+0x91e>
 800556e:	4649      	mov	r1, r9
 8005570:	4620      	mov	r0, r4
 8005572:	f000 fd86 	bl	8006082 <_Bfree>
 8005576:	4631      	mov	r1, r6
 8005578:	4620      	mov	r0, r4
 800557a:	f000 fd82 	bl	8006082 <_Bfree>
 800557e:	e6a8      	b.n	80052d2 <_dtoa_r+0x67a>
 8005580:	2700      	movs	r7, #0
 8005582:	463e      	mov	r6, r7
 8005584:	e7e1      	b.n	800554a <_dtoa_r+0x8f2>
 8005586:	f8dd a020 	ldr.w	sl, [sp, #32]
 800558a:	463e      	mov	r6, r7
 800558c:	e5a9      	b.n	80050e2 <_dtoa_r+0x48a>
 800558e:	bf00      	nop
 8005590:	40240000 	.word	0x40240000
 8005594:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005596:	f8cd 9008 	str.w	r9, [sp, #8]
 800559a:	2b00      	cmp	r3, #0
 800559c:	f000 80fa 	beq.w	8005794 <_dtoa_r+0xb3c>
 80055a0:	2d00      	cmp	r5, #0
 80055a2:	dd05      	ble.n	80055b0 <_dtoa_r+0x958>
 80055a4:	4631      	mov	r1, r6
 80055a6:	462a      	mov	r2, r5
 80055a8:	4620      	mov	r0, r4
 80055aa:	f000 ff35 	bl	8006418 <__lshift>
 80055ae:	4606      	mov	r6, r0
 80055b0:	9b07      	ldr	r3, [sp, #28]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d04c      	beq.n	8005650 <_dtoa_r+0x9f8>
 80055b6:	6871      	ldr	r1, [r6, #4]
 80055b8:	4620      	mov	r0, r4
 80055ba:	f000 fd2e 	bl	800601a <_Balloc>
 80055be:	6932      	ldr	r2, [r6, #16]
 80055c0:	3202      	adds	r2, #2
 80055c2:	4605      	mov	r5, r0
 80055c4:	0092      	lsls	r2, r2, #2
 80055c6:	f106 010c 	add.w	r1, r6, #12
 80055ca:	300c      	adds	r0, #12
 80055cc:	f000 fd1a 	bl	8006004 <memcpy>
 80055d0:	2201      	movs	r2, #1
 80055d2:	4629      	mov	r1, r5
 80055d4:	4620      	mov	r0, r4
 80055d6:	f000 ff1f 	bl	8006418 <__lshift>
 80055da:	9b00      	ldr	r3, [sp, #0]
 80055dc:	f8cd b014 	str.w	fp, [sp, #20]
 80055e0:	f003 0301 	and.w	r3, r3, #1
 80055e4:	46b1      	mov	r9, r6
 80055e6:	9307      	str	r3, [sp, #28]
 80055e8:	4606      	mov	r6, r0
 80055ea:	4639      	mov	r1, r7
 80055ec:	9804      	ldr	r0, [sp, #16]
 80055ee:	f7ff faa5 	bl	8004b3c <quorem>
 80055f2:	4649      	mov	r1, r9
 80055f4:	4605      	mov	r5, r0
 80055f6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80055fa:	9804      	ldr	r0, [sp, #16]
 80055fc:	f000 ff60 	bl	80064c0 <__mcmp>
 8005600:	4632      	mov	r2, r6
 8005602:	9000      	str	r0, [sp, #0]
 8005604:	4639      	mov	r1, r7
 8005606:	4620      	mov	r0, r4
 8005608:	f000 ff74 	bl	80064f4 <__mdiff>
 800560c:	68c3      	ldr	r3, [r0, #12]
 800560e:	4602      	mov	r2, r0
 8005610:	bb03      	cbnz	r3, 8005654 <_dtoa_r+0x9fc>
 8005612:	4601      	mov	r1, r0
 8005614:	9008      	str	r0, [sp, #32]
 8005616:	9804      	ldr	r0, [sp, #16]
 8005618:	f000 ff52 	bl	80064c0 <__mcmp>
 800561c:	9a08      	ldr	r2, [sp, #32]
 800561e:	4603      	mov	r3, r0
 8005620:	4611      	mov	r1, r2
 8005622:	4620      	mov	r0, r4
 8005624:	9308      	str	r3, [sp, #32]
 8005626:	f000 fd2c 	bl	8006082 <_Bfree>
 800562a:	9b08      	ldr	r3, [sp, #32]
 800562c:	b9a3      	cbnz	r3, 8005658 <_dtoa_r+0xa00>
 800562e:	9a06      	ldr	r2, [sp, #24]
 8005630:	b992      	cbnz	r2, 8005658 <_dtoa_r+0xa00>
 8005632:	9a07      	ldr	r2, [sp, #28]
 8005634:	b982      	cbnz	r2, 8005658 <_dtoa_r+0xa00>
 8005636:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800563a:	d029      	beq.n	8005690 <_dtoa_r+0xa38>
 800563c:	9b00      	ldr	r3, [sp, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	dd01      	ble.n	8005646 <_dtoa_r+0x9ee>
 8005642:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005646:	9b05      	ldr	r3, [sp, #20]
 8005648:	1c5d      	adds	r5, r3, #1
 800564a:	f883 8000 	strb.w	r8, [r3]
 800564e:	e782      	b.n	8005556 <_dtoa_r+0x8fe>
 8005650:	4630      	mov	r0, r6
 8005652:	e7c2      	b.n	80055da <_dtoa_r+0x982>
 8005654:	2301      	movs	r3, #1
 8005656:	e7e3      	b.n	8005620 <_dtoa_r+0x9c8>
 8005658:	9a00      	ldr	r2, [sp, #0]
 800565a:	2a00      	cmp	r2, #0
 800565c:	db04      	blt.n	8005668 <_dtoa_r+0xa10>
 800565e:	d125      	bne.n	80056ac <_dtoa_r+0xa54>
 8005660:	9a06      	ldr	r2, [sp, #24]
 8005662:	bb1a      	cbnz	r2, 80056ac <_dtoa_r+0xa54>
 8005664:	9a07      	ldr	r2, [sp, #28]
 8005666:	bb0a      	cbnz	r2, 80056ac <_dtoa_r+0xa54>
 8005668:	2b00      	cmp	r3, #0
 800566a:	ddec      	ble.n	8005646 <_dtoa_r+0x9ee>
 800566c:	2201      	movs	r2, #1
 800566e:	9904      	ldr	r1, [sp, #16]
 8005670:	4620      	mov	r0, r4
 8005672:	f000 fed1 	bl	8006418 <__lshift>
 8005676:	4639      	mov	r1, r7
 8005678:	9004      	str	r0, [sp, #16]
 800567a:	f000 ff21 	bl	80064c0 <__mcmp>
 800567e:	2800      	cmp	r0, #0
 8005680:	dc03      	bgt.n	800568a <_dtoa_r+0xa32>
 8005682:	d1e0      	bne.n	8005646 <_dtoa_r+0x9ee>
 8005684:	f018 0f01 	tst.w	r8, #1
 8005688:	d0dd      	beq.n	8005646 <_dtoa_r+0x9ee>
 800568a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800568e:	d1d8      	bne.n	8005642 <_dtoa_r+0x9ea>
 8005690:	9b05      	ldr	r3, [sp, #20]
 8005692:	9a05      	ldr	r2, [sp, #20]
 8005694:	1c5d      	adds	r5, r3, #1
 8005696:	2339      	movs	r3, #57	; 0x39
 8005698:	7013      	strb	r3, [r2, #0]
 800569a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800569e:	2b39      	cmp	r3, #57	; 0x39
 80056a0:	f105 32ff 	add.w	r2, r5, #4294967295
 80056a4:	d04f      	beq.n	8005746 <_dtoa_r+0xaee>
 80056a6:	3301      	adds	r3, #1
 80056a8:	7013      	strb	r3, [r2, #0]
 80056aa:	e754      	b.n	8005556 <_dtoa_r+0x8fe>
 80056ac:	9a05      	ldr	r2, [sp, #20]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	f102 0501 	add.w	r5, r2, #1
 80056b4:	dd06      	ble.n	80056c4 <_dtoa_r+0xa6c>
 80056b6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80056ba:	d0e9      	beq.n	8005690 <_dtoa_r+0xa38>
 80056bc:	f108 0801 	add.w	r8, r8, #1
 80056c0:	9b05      	ldr	r3, [sp, #20]
 80056c2:	e7c2      	b.n	800564a <_dtoa_r+0x9f2>
 80056c4:	9a02      	ldr	r2, [sp, #8]
 80056c6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80056ca:	eba5 030b 	sub.w	r3, r5, fp
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d021      	beq.n	8005716 <_dtoa_r+0xabe>
 80056d2:	2300      	movs	r3, #0
 80056d4:	220a      	movs	r2, #10
 80056d6:	9904      	ldr	r1, [sp, #16]
 80056d8:	4620      	mov	r0, r4
 80056da:	f000 fce9 	bl	80060b0 <__multadd>
 80056de:	45b1      	cmp	r9, r6
 80056e0:	9004      	str	r0, [sp, #16]
 80056e2:	f04f 0300 	mov.w	r3, #0
 80056e6:	f04f 020a 	mov.w	r2, #10
 80056ea:	4649      	mov	r1, r9
 80056ec:	4620      	mov	r0, r4
 80056ee:	d105      	bne.n	80056fc <_dtoa_r+0xaa4>
 80056f0:	f000 fcde 	bl	80060b0 <__multadd>
 80056f4:	4681      	mov	r9, r0
 80056f6:	4606      	mov	r6, r0
 80056f8:	9505      	str	r5, [sp, #20]
 80056fa:	e776      	b.n	80055ea <_dtoa_r+0x992>
 80056fc:	f000 fcd8 	bl	80060b0 <__multadd>
 8005700:	4631      	mov	r1, r6
 8005702:	4681      	mov	r9, r0
 8005704:	2300      	movs	r3, #0
 8005706:	220a      	movs	r2, #10
 8005708:	4620      	mov	r0, r4
 800570a:	f000 fcd1 	bl	80060b0 <__multadd>
 800570e:	4606      	mov	r6, r0
 8005710:	e7f2      	b.n	80056f8 <_dtoa_r+0xaa0>
 8005712:	f04f 0900 	mov.w	r9, #0
 8005716:	2201      	movs	r2, #1
 8005718:	9904      	ldr	r1, [sp, #16]
 800571a:	4620      	mov	r0, r4
 800571c:	f000 fe7c 	bl	8006418 <__lshift>
 8005720:	4639      	mov	r1, r7
 8005722:	9004      	str	r0, [sp, #16]
 8005724:	f000 fecc 	bl	80064c0 <__mcmp>
 8005728:	2800      	cmp	r0, #0
 800572a:	dcb6      	bgt.n	800569a <_dtoa_r+0xa42>
 800572c:	d102      	bne.n	8005734 <_dtoa_r+0xadc>
 800572e:	f018 0f01 	tst.w	r8, #1
 8005732:	d1b2      	bne.n	800569a <_dtoa_r+0xa42>
 8005734:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005738:	2b30      	cmp	r3, #48	; 0x30
 800573a:	f105 32ff 	add.w	r2, r5, #4294967295
 800573e:	f47f af0a 	bne.w	8005556 <_dtoa_r+0x8fe>
 8005742:	4615      	mov	r5, r2
 8005744:	e7f6      	b.n	8005734 <_dtoa_r+0xadc>
 8005746:	4593      	cmp	fp, r2
 8005748:	d105      	bne.n	8005756 <_dtoa_r+0xafe>
 800574a:	2331      	movs	r3, #49	; 0x31
 800574c:	f10a 0a01 	add.w	sl, sl, #1
 8005750:	f88b 3000 	strb.w	r3, [fp]
 8005754:	e6ff      	b.n	8005556 <_dtoa_r+0x8fe>
 8005756:	4615      	mov	r5, r2
 8005758:	e79f      	b.n	800569a <_dtoa_r+0xa42>
 800575a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80057c0 <_dtoa_r+0xb68>
 800575e:	e007      	b.n	8005770 <_dtoa_r+0xb18>
 8005760:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005762:	f8df b060 	ldr.w	fp, [pc, #96]	; 80057c4 <_dtoa_r+0xb6c>
 8005766:	b11b      	cbz	r3, 8005770 <_dtoa_r+0xb18>
 8005768:	f10b 0308 	add.w	r3, fp, #8
 800576c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800576e:	6013      	str	r3, [r2, #0]
 8005770:	4658      	mov	r0, fp
 8005772:	b017      	add	sp, #92	; 0x5c
 8005774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005778:	9b06      	ldr	r3, [sp, #24]
 800577a:	2b01      	cmp	r3, #1
 800577c:	f77f ae35 	ble.w	80053ea <_dtoa_r+0x792>
 8005780:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005782:	9307      	str	r3, [sp, #28]
 8005784:	e649      	b.n	800541a <_dtoa_r+0x7c2>
 8005786:	9b02      	ldr	r3, [sp, #8]
 8005788:	2b00      	cmp	r3, #0
 800578a:	dc03      	bgt.n	8005794 <_dtoa_r+0xb3c>
 800578c:	9b06      	ldr	r3, [sp, #24]
 800578e:	2b02      	cmp	r3, #2
 8005790:	f73f aecc 	bgt.w	800552c <_dtoa_r+0x8d4>
 8005794:	465d      	mov	r5, fp
 8005796:	4639      	mov	r1, r7
 8005798:	9804      	ldr	r0, [sp, #16]
 800579a:	f7ff f9cf 	bl	8004b3c <quorem>
 800579e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80057a2:	f805 8b01 	strb.w	r8, [r5], #1
 80057a6:	9a02      	ldr	r2, [sp, #8]
 80057a8:	eba5 030b 	sub.w	r3, r5, fp
 80057ac:	429a      	cmp	r2, r3
 80057ae:	ddb0      	ble.n	8005712 <_dtoa_r+0xaba>
 80057b0:	2300      	movs	r3, #0
 80057b2:	220a      	movs	r2, #10
 80057b4:	9904      	ldr	r1, [sp, #16]
 80057b6:	4620      	mov	r0, r4
 80057b8:	f000 fc7a 	bl	80060b0 <__multadd>
 80057bc:	9004      	str	r0, [sp, #16]
 80057be:	e7ea      	b.n	8005796 <_dtoa_r+0xb3e>
 80057c0:	080074e8 	.word	0x080074e8
 80057c4:	08007568 	.word	0x08007568

080057c8 <std>:
 80057c8:	2300      	movs	r3, #0
 80057ca:	b510      	push	{r4, lr}
 80057cc:	4604      	mov	r4, r0
 80057ce:	e9c0 3300 	strd	r3, r3, [r0]
 80057d2:	6083      	str	r3, [r0, #8]
 80057d4:	8181      	strh	r1, [r0, #12]
 80057d6:	6643      	str	r3, [r0, #100]	; 0x64
 80057d8:	81c2      	strh	r2, [r0, #14]
 80057da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057de:	6183      	str	r3, [r0, #24]
 80057e0:	4619      	mov	r1, r3
 80057e2:	2208      	movs	r2, #8
 80057e4:	305c      	adds	r0, #92	; 0x5c
 80057e6:	f7fd fc77 	bl	80030d8 <memset>
 80057ea:	4b05      	ldr	r3, [pc, #20]	; (8005800 <std+0x38>)
 80057ec:	6263      	str	r3, [r4, #36]	; 0x24
 80057ee:	4b05      	ldr	r3, [pc, #20]	; (8005804 <std+0x3c>)
 80057f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80057f2:	4b05      	ldr	r3, [pc, #20]	; (8005808 <std+0x40>)
 80057f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80057f6:	4b05      	ldr	r3, [pc, #20]	; (800580c <std+0x44>)
 80057f8:	6224      	str	r4, [r4, #32]
 80057fa:	6323      	str	r3, [r4, #48]	; 0x30
 80057fc:	bd10      	pop	{r4, pc}
 80057fe:	bf00      	nop
 8005800:	08006ec9 	.word	0x08006ec9
 8005804:	08006eeb 	.word	0x08006eeb
 8005808:	08006f23 	.word	0x08006f23
 800580c:	08006f47 	.word	0x08006f47

08005810 <_cleanup_r>:
 8005810:	4901      	ldr	r1, [pc, #4]	; (8005818 <_cleanup_r+0x8>)
 8005812:	f000 b885 	b.w	8005920 <_fwalk_reent>
 8005816:	bf00      	nop
 8005818:	08007261 	.word	0x08007261

0800581c <__sfmoreglue>:
 800581c:	b570      	push	{r4, r5, r6, lr}
 800581e:	1e4a      	subs	r2, r1, #1
 8005820:	2568      	movs	r5, #104	; 0x68
 8005822:	4355      	muls	r5, r2
 8005824:	460e      	mov	r6, r1
 8005826:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800582a:	f001 f851 	bl	80068d0 <_malloc_r>
 800582e:	4604      	mov	r4, r0
 8005830:	b140      	cbz	r0, 8005844 <__sfmoreglue+0x28>
 8005832:	2100      	movs	r1, #0
 8005834:	e9c0 1600 	strd	r1, r6, [r0]
 8005838:	300c      	adds	r0, #12
 800583a:	60a0      	str	r0, [r4, #8]
 800583c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005840:	f7fd fc4a 	bl	80030d8 <memset>
 8005844:	4620      	mov	r0, r4
 8005846:	bd70      	pop	{r4, r5, r6, pc}

08005848 <__sinit>:
 8005848:	6983      	ldr	r3, [r0, #24]
 800584a:	b510      	push	{r4, lr}
 800584c:	4604      	mov	r4, r0
 800584e:	bb33      	cbnz	r3, 800589e <__sinit+0x56>
 8005850:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005854:	6503      	str	r3, [r0, #80]	; 0x50
 8005856:	4b12      	ldr	r3, [pc, #72]	; (80058a0 <__sinit+0x58>)
 8005858:	4a12      	ldr	r2, [pc, #72]	; (80058a4 <__sinit+0x5c>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	6282      	str	r2, [r0, #40]	; 0x28
 800585e:	4298      	cmp	r0, r3
 8005860:	bf04      	itt	eq
 8005862:	2301      	moveq	r3, #1
 8005864:	6183      	streq	r3, [r0, #24]
 8005866:	f000 f81f 	bl	80058a8 <__sfp>
 800586a:	6060      	str	r0, [r4, #4]
 800586c:	4620      	mov	r0, r4
 800586e:	f000 f81b 	bl	80058a8 <__sfp>
 8005872:	60a0      	str	r0, [r4, #8]
 8005874:	4620      	mov	r0, r4
 8005876:	f000 f817 	bl	80058a8 <__sfp>
 800587a:	2200      	movs	r2, #0
 800587c:	60e0      	str	r0, [r4, #12]
 800587e:	2104      	movs	r1, #4
 8005880:	6860      	ldr	r0, [r4, #4]
 8005882:	f7ff ffa1 	bl	80057c8 <std>
 8005886:	2201      	movs	r2, #1
 8005888:	2109      	movs	r1, #9
 800588a:	68a0      	ldr	r0, [r4, #8]
 800588c:	f7ff ff9c 	bl	80057c8 <std>
 8005890:	2202      	movs	r2, #2
 8005892:	2112      	movs	r1, #18
 8005894:	68e0      	ldr	r0, [r4, #12]
 8005896:	f7ff ff97 	bl	80057c8 <std>
 800589a:	2301      	movs	r3, #1
 800589c:	61a3      	str	r3, [r4, #24]
 800589e:	bd10      	pop	{r4, pc}
 80058a0:	080074d4 	.word	0x080074d4
 80058a4:	08005811 	.word	0x08005811

080058a8 <__sfp>:
 80058a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058aa:	4b1b      	ldr	r3, [pc, #108]	; (8005918 <__sfp+0x70>)
 80058ac:	681e      	ldr	r6, [r3, #0]
 80058ae:	69b3      	ldr	r3, [r6, #24]
 80058b0:	4607      	mov	r7, r0
 80058b2:	b913      	cbnz	r3, 80058ba <__sfp+0x12>
 80058b4:	4630      	mov	r0, r6
 80058b6:	f7ff ffc7 	bl	8005848 <__sinit>
 80058ba:	3648      	adds	r6, #72	; 0x48
 80058bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80058c0:	3b01      	subs	r3, #1
 80058c2:	d503      	bpl.n	80058cc <__sfp+0x24>
 80058c4:	6833      	ldr	r3, [r6, #0]
 80058c6:	b133      	cbz	r3, 80058d6 <__sfp+0x2e>
 80058c8:	6836      	ldr	r6, [r6, #0]
 80058ca:	e7f7      	b.n	80058bc <__sfp+0x14>
 80058cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80058d0:	b16d      	cbz	r5, 80058ee <__sfp+0x46>
 80058d2:	3468      	adds	r4, #104	; 0x68
 80058d4:	e7f4      	b.n	80058c0 <__sfp+0x18>
 80058d6:	2104      	movs	r1, #4
 80058d8:	4638      	mov	r0, r7
 80058da:	f7ff ff9f 	bl	800581c <__sfmoreglue>
 80058de:	6030      	str	r0, [r6, #0]
 80058e0:	2800      	cmp	r0, #0
 80058e2:	d1f1      	bne.n	80058c8 <__sfp+0x20>
 80058e4:	230c      	movs	r3, #12
 80058e6:	603b      	str	r3, [r7, #0]
 80058e8:	4604      	mov	r4, r0
 80058ea:	4620      	mov	r0, r4
 80058ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058ee:	4b0b      	ldr	r3, [pc, #44]	; (800591c <__sfp+0x74>)
 80058f0:	6665      	str	r5, [r4, #100]	; 0x64
 80058f2:	e9c4 5500 	strd	r5, r5, [r4]
 80058f6:	60a5      	str	r5, [r4, #8]
 80058f8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80058fc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005900:	2208      	movs	r2, #8
 8005902:	4629      	mov	r1, r5
 8005904:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005908:	f7fd fbe6 	bl	80030d8 <memset>
 800590c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005910:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005914:	e7e9      	b.n	80058ea <__sfp+0x42>
 8005916:	bf00      	nop
 8005918:	080074d4 	.word	0x080074d4
 800591c:	ffff0001 	.word	0xffff0001

08005920 <_fwalk_reent>:
 8005920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005924:	4680      	mov	r8, r0
 8005926:	4689      	mov	r9, r1
 8005928:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800592c:	2600      	movs	r6, #0
 800592e:	b914      	cbnz	r4, 8005936 <_fwalk_reent+0x16>
 8005930:	4630      	mov	r0, r6
 8005932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005936:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800593a:	3f01      	subs	r7, #1
 800593c:	d501      	bpl.n	8005942 <_fwalk_reent+0x22>
 800593e:	6824      	ldr	r4, [r4, #0]
 8005940:	e7f5      	b.n	800592e <_fwalk_reent+0xe>
 8005942:	89ab      	ldrh	r3, [r5, #12]
 8005944:	2b01      	cmp	r3, #1
 8005946:	d907      	bls.n	8005958 <_fwalk_reent+0x38>
 8005948:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800594c:	3301      	adds	r3, #1
 800594e:	d003      	beq.n	8005958 <_fwalk_reent+0x38>
 8005950:	4629      	mov	r1, r5
 8005952:	4640      	mov	r0, r8
 8005954:	47c8      	blx	r9
 8005956:	4306      	orrs	r6, r0
 8005958:	3568      	adds	r5, #104	; 0x68
 800595a:	e7ee      	b.n	800593a <_fwalk_reent+0x1a>

0800595c <rshift>:
 800595c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800595e:	6906      	ldr	r6, [r0, #16]
 8005960:	114b      	asrs	r3, r1, #5
 8005962:	429e      	cmp	r6, r3
 8005964:	f100 0414 	add.w	r4, r0, #20
 8005968:	dd30      	ble.n	80059cc <rshift+0x70>
 800596a:	f011 011f 	ands.w	r1, r1, #31
 800596e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8005972:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8005976:	d108      	bne.n	800598a <rshift+0x2e>
 8005978:	4621      	mov	r1, r4
 800597a:	42b2      	cmp	r2, r6
 800597c:	460b      	mov	r3, r1
 800597e:	d211      	bcs.n	80059a4 <rshift+0x48>
 8005980:	f852 3b04 	ldr.w	r3, [r2], #4
 8005984:	f841 3b04 	str.w	r3, [r1], #4
 8005988:	e7f7      	b.n	800597a <rshift+0x1e>
 800598a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800598e:	f1c1 0c20 	rsb	ip, r1, #32
 8005992:	40cd      	lsrs	r5, r1
 8005994:	3204      	adds	r2, #4
 8005996:	4623      	mov	r3, r4
 8005998:	42b2      	cmp	r2, r6
 800599a:	4617      	mov	r7, r2
 800599c:	d30c      	bcc.n	80059b8 <rshift+0x5c>
 800599e:	601d      	str	r5, [r3, #0]
 80059a0:	b105      	cbz	r5, 80059a4 <rshift+0x48>
 80059a2:	3304      	adds	r3, #4
 80059a4:	1b1a      	subs	r2, r3, r4
 80059a6:	42a3      	cmp	r3, r4
 80059a8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80059ac:	bf08      	it	eq
 80059ae:	2300      	moveq	r3, #0
 80059b0:	6102      	str	r2, [r0, #16]
 80059b2:	bf08      	it	eq
 80059b4:	6143      	streq	r3, [r0, #20]
 80059b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059b8:	683f      	ldr	r7, [r7, #0]
 80059ba:	fa07 f70c 	lsl.w	r7, r7, ip
 80059be:	433d      	orrs	r5, r7
 80059c0:	f843 5b04 	str.w	r5, [r3], #4
 80059c4:	f852 5b04 	ldr.w	r5, [r2], #4
 80059c8:	40cd      	lsrs	r5, r1
 80059ca:	e7e5      	b.n	8005998 <rshift+0x3c>
 80059cc:	4623      	mov	r3, r4
 80059ce:	e7e9      	b.n	80059a4 <rshift+0x48>

080059d0 <__hexdig_fun>:
 80059d0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80059d4:	2b09      	cmp	r3, #9
 80059d6:	d802      	bhi.n	80059de <__hexdig_fun+0xe>
 80059d8:	3820      	subs	r0, #32
 80059da:	b2c0      	uxtb	r0, r0
 80059dc:	4770      	bx	lr
 80059de:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80059e2:	2b05      	cmp	r3, #5
 80059e4:	d801      	bhi.n	80059ea <__hexdig_fun+0x1a>
 80059e6:	3847      	subs	r0, #71	; 0x47
 80059e8:	e7f7      	b.n	80059da <__hexdig_fun+0xa>
 80059ea:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80059ee:	2b05      	cmp	r3, #5
 80059f0:	d801      	bhi.n	80059f6 <__hexdig_fun+0x26>
 80059f2:	3827      	subs	r0, #39	; 0x27
 80059f4:	e7f1      	b.n	80059da <__hexdig_fun+0xa>
 80059f6:	2000      	movs	r0, #0
 80059f8:	4770      	bx	lr

080059fa <__gethex>:
 80059fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059fe:	b08b      	sub	sp, #44	; 0x2c
 8005a00:	468a      	mov	sl, r1
 8005a02:	9002      	str	r0, [sp, #8]
 8005a04:	9816      	ldr	r0, [sp, #88]	; 0x58
 8005a06:	9306      	str	r3, [sp, #24]
 8005a08:	4690      	mov	r8, r2
 8005a0a:	f000 fad0 	bl	8005fae <__localeconv_l>
 8005a0e:	6803      	ldr	r3, [r0, #0]
 8005a10:	9303      	str	r3, [sp, #12]
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7fa fbdc 	bl	80001d0 <strlen>
 8005a18:	9b03      	ldr	r3, [sp, #12]
 8005a1a:	9001      	str	r0, [sp, #4]
 8005a1c:	4403      	add	r3, r0
 8005a1e:	f04f 0b00 	mov.w	fp, #0
 8005a22:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005a26:	9307      	str	r3, [sp, #28]
 8005a28:	f8da 3000 	ldr.w	r3, [sl]
 8005a2c:	3302      	adds	r3, #2
 8005a2e:	461f      	mov	r7, r3
 8005a30:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005a34:	2830      	cmp	r0, #48	; 0x30
 8005a36:	d06c      	beq.n	8005b12 <__gethex+0x118>
 8005a38:	f7ff ffca 	bl	80059d0 <__hexdig_fun>
 8005a3c:	4604      	mov	r4, r0
 8005a3e:	2800      	cmp	r0, #0
 8005a40:	d16a      	bne.n	8005b18 <__gethex+0x11e>
 8005a42:	9a01      	ldr	r2, [sp, #4]
 8005a44:	9903      	ldr	r1, [sp, #12]
 8005a46:	4638      	mov	r0, r7
 8005a48:	f001 fa81 	bl	8006f4e <strncmp>
 8005a4c:	2800      	cmp	r0, #0
 8005a4e:	d166      	bne.n	8005b1e <__gethex+0x124>
 8005a50:	9b01      	ldr	r3, [sp, #4]
 8005a52:	5cf8      	ldrb	r0, [r7, r3]
 8005a54:	18fe      	adds	r6, r7, r3
 8005a56:	f7ff ffbb 	bl	80059d0 <__hexdig_fun>
 8005a5a:	2800      	cmp	r0, #0
 8005a5c:	d062      	beq.n	8005b24 <__gethex+0x12a>
 8005a5e:	4633      	mov	r3, r6
 8005a60:	7818      	ldrb	r0, [r3, #0]
 8005a62:	2830      	cmp	r0, #48	; 0x30
 8005a64:	461f      	mov	r7, r3
 8005a66:	f103 0301 	add.w	r3, r3, #1
 8005a6a:	d0f9      	beq.n	8005a60 <__gethex+0x66>
 8005a6c:	f7ff ffb0 	bl	80059d0 <__hexdig_fun>
 8005a70:	fab0 f580 	clz	r5, r0
 8005a74:	096d      	lsrs	r5, r5, #5
 8005a76:	4634      	mov	r4, r6
 8005a78:	f04f 0b01 	mov.w	fp, #1
 8005a7c:	463a      	mov	r2, r7
 8005a7e:	4616      	mov	r6, r2
 8005a80:	3201      	adds	r2, #1
 8005a82:	7830      	ldrb	r0, [r6, #0]
 8005a84:	f7ff ffa4 	bl	80059d0 <__hexdig_fun>
 8005a88:	2800      	cmp	r0, #0
 8005a8a:	d1f8      	bne.n	8005a7e <__gethex+0x84>
 8005a8c:	9a01      	ldr	r2, [sp, #4]
 8005a8e:	9903      	ldr	r1, [sp, #12]
 8005a90:	4630      	mov	r0, r6
 8005a92:	f001 fa5c 	bl	8006f4e <strncmp>
 8005a96:	b950      	cbnz	r0, 8005aae <__gethex+0xb4>
 8005a98:	b954      	cbnz	r4, 8005ab0 <__gethex+0xb6>
 8005a9a:	9b01      	ldr	r3, [sp, #4]
 8005a9c:	18f4      	adds	r4, r6, r3
 8005a9e:	4622      	mov	r2, r4
 8005aa0:	4616      	mov	r6, r2
 8005aa2:	3201      	adds	r2, #1
 8005aa4:	7830      	ldrb	r0, [r6, #0]
 8005aa6:	f7ff ff93 	bl	80059d0 <__hexdig_fun>
 8005aaa:	2800      	cmp	r0, #0
 8005aac:	d1f8      	bne.n	8005aa0 <__gethex+0xa6>
 8005aae:	b10c      	cbz	r4, 8005ab4 <__gethex+0xba>
 8005ab0:	1ba4      	subs	r4, r4, r6
 8005ab2:	00a4      	lsls	r4, r4, #2
 8005ab4:	7833      	ldrb	r3, [r6, #0]
 8005ab6:	2b50      	cmp	r3, #80	; 0x50
 8005ab8:	d001      	beq.n	8005abe <__gethex+0xc4>
 8005aba:	2b70      	cmp	r3, #112	; 0x70
 8005abc:	d140      	bne.n	8005b40 <__gethex+0x146>
 8005abe:	7873      	ldrb	r3, [r6, #1]
 8005ac0:	2b2b      	cmp	r3, #43	; 0x2b
 8005ac2:	d031      	beq.n	8005b28 <__gethex+0x12e>
 8005ac4:	2b2d      	cmp	r3, #45	; 0x2d
 8005ac6:	d033      	beq.n	8005b30 <__gethex+0x136>
 8005ac8:	1c71      	adds	r1, r6, #1
 8005aca:	f04f 0900 	mov.w	r9, #0
 8005ace:	7808      	ldrb	r0, [r1, #0]
 8005ad0:	f7ff ff7e 	bl	80059d0 <__hexdig_fun>
 8005ad4:	1e43      	subs	r3, r0, #1
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	2b18      	cmp	r3, #24
 8005ada:	d831      	bhi.n	8005b40 <__gethex+0x146>
 8005adc:	f1a0 0210 	sub.w	r2, r0, #16
 8005ae0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005ae4:	f7ff ff74 	bl	80059d0 <__hexdig_fun>
 8005ae8:	1e43      	subs	r3, r0, #1
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	2b18      	cmp	r3, #24
 8005aee:	d922      	bls.n	8005b36 <__gethex+0x13c>
 8005af0:	f1b9 0f00 	cmp.w	r9, #0
 8005af4:	d000      	beq.n	8005af8 <__gethex+0xfe>
 8005af6:	4252      	negs	r2, r2
 8005af8:	4414      	add	r4, r2
 8005afa:	f8ca 1000 	str.w	r1, [sl]
 8005afe:	b30d      	cbz	r5, 8005b44 <__gethex+0x14a>
 8005b00:	f1bb 0f00 	cmp.w	fp, #0
 8005b04:	bf0c      	ite	eq
 8005b06:	2706      	moveq	r7, #6
 8005b08:	2700      	movne	r7, #0
 8005b0a:	4638      	mov	r0, r7
 8005b0c:	b00b      	add	sp, #44	; 0x2c
 8005b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b12:	f10b 0b01 	add.w	fp, fp, #1
 8005b16:	e78a      	b.n	8005a2e <__gethex+0x34>
 8005b18:	2500      	movs	r5, #0
 8005b1a:	462c      	mov	r4, r5
 8005b1c:	e7ae      	b.n	8005a7c <__gethex+0x82>
 8005b1e:	463e      	mov	r6, r7
 8005b20:	2501      	movs	r5, #1
 8005b22:	e7c7      	b.n	8005ab4 <__gethex+0xba>
 8005b24:	4604      	mov	r4, r0
 8005b26:	e7fb      	b.n	8005b20 <__gethex+0x126>
 8005b28:	f04f 0900 	mov.w	r9, #0
 8005b2c:	1cb1      	adds	r1, r6, #2
 8005b2e:	e7ce      	b.n	8005ace <__gethex+0xd4>
 8005b30:	f04f 0901 	mov.w	r9, #1
 8005b34:	e7fa      	b.n	8005b2c <__gethex+0x132>
 8005b36:	230a      	movs	r3, #10
 8005b38:	fb03 0202 	mla	r2, r3, r2, r0
 8005b3c:	3a10      	subs	r2, #16
 8005b3e:	e7cf      	b.n	8005ae0 <__gethex+0xe6>
 8005b40:	4631      	mov	r1, r6
 8005b42:	e7da      	b.n	8005afa <__gethex+0x100>
 8005b44:	1bf3      	subs	r3, r6, r7
 8005b46:	3b01      	subs	r3, #1
 8005b48:	4629      	mov	r1, r5
 8005b4a:	2b07      	cmp	r3, #7
 8005b4c:	dc49      	bgt.n	8005be2 <__gethex+0x1e8>
 8005b4e:	9802      	ldr	r0, [sp, #8]
 8005b50:	f000 fa63 	bl	800601a <_Balloc>
 8005b54:	9b01      	ldr	r3, [sp, #4]
 8005b56:	f100 0914 	add.w	r9, r0, #20
 8005b5a:	f04f 0b00 	mov.w	fp, #0
 8005b5e:	f1c3 0301 	rsb	r3, r3, #1
 8005b62:	4605      	mov	r5, r0
 8005b64:	f8cd 9010 	str.w	r9, [sp, #16]
 8005b68:	46da      	mov	sl, fp
 8005b6a:	9308      	str	r3, [sp, #32]
 8005b6c:	42b7      	cmp	r7, r6
 8005b6e:	d33b      	bcc.n	8005be8 <__gethex+0x1ee>
 8005b70:	9804      	ldr	r0, [sp, #16]
 8005b72:	f840 ab04 	str.w	sl, [r0], #4
 8005b76:	eba0 0009 	sub.w	r0, r0, r9
 8005b7a:	1080      	asrs	r0, r0, #2
 8005b7c:	6128      	str	r0, [r5, #16]
 8005b7e:	0147      	lsls	r7, r0, #5
 8005b80:	4650      	mov	r0, sl
 8005b82:	f000 fb0e 	bl	80061a2 <__hi0bits>
 8005b86:	f8d8 6000 	ldr.w	r6, [r8]
 8005b8a:	1a3f      	subs	r7, r7, r0
 8005b8c:	42b7      	cmp	r7, r6
 8005b8e:	dd64      	ble.n	8005c5a <__gethex+0x260>
 8005b90:	1bbf      	subs	r7, r7, r6
 8005b92:	4639      	mov	r1, r7
 8005b94:	4628      	mov	r0, r5
 8005b96:	f000 fe1d 	bl	80067d4 <__any_on>
 8005b9a:	4682      	mov	sl, r0
 8005b9c:	b178      	cbz	r0, 8005bbe <__gethex+0x1c4>
 8005b9e:	1e7b      	subs	r3, r7, #1
 8005ba0:	1159      	asrs	r1, r3, #5
 8005ba2:	f003 021f 	and.w	r2, r3, #31
 8005ba6:	f04f 0a01 	mov.w	sl, #1
 8005baa:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005bae:	fa0a f202 	lsl.w	r2, sl, r2
 8005bb2:	420a      	tst	r2, r1
 8005bb4:	d003      	beq.n	8005bbe <__gethex+0x1c4>
 8005bb6:	4553      	cmp	r3, sl
 8005bb8:	dc46      	bgt.n	8005c48 <__gethex+0x24e>
 8005bba:	f04f 0a02 	mov.w	sl, #2
 8005bbe:	4639      	mov	r1, r7
 8005bc0:	4628      	mov	r0, r5
 8005bc2:	f7ff fecb 	bl	800595c <rshift>
 8005bc6:	443c      	add	r4, r7
 8005bc8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005bcc:	42a3      	cmp	r3, r4
 8005bce:	da52      	bge.n	8005c76 <__gethex+0x27c>
 8005bd0:	4629      	mov	r1, r5
 8005bd2:	9802      	ldr	r0, [sp, #8]
 8005bd4:	f000 fa55 	bl	8006082 <_Bfree>
 8005bd8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005bda:	2300      	movs	r3, #0
 8005bdc:	6013      	str	r3, [r2, #0]
 8005bde:	27a3      	movs	r7, #163	; 0xa3
 8005be0:	e793      	b.n	8005b0a <__gethex+0x110>
 8005be2:	3101      	adds	r1, #1
 8005be4:	105b      	asrs	r3, r3, #1
 8005be6:	e7b0      	b.n	8005b4a <__gethex+0x150>
 8005be8:	1e73      	subs	r3, r6, #1
 8005bea:	9305      	str	r3, [sp, #20]
 8005bec:	9a07      	ldr	r2, [sp, #28]
 8005bee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d018      	beq.n	8005c28 <__gethex+0x22e>
 8005bf6:	f1bb 0f20 	cmp.w	fp, #32
 8005bfa:	d107      	bne.n	8005c0c <__gethex+0x212>
 8005bfc:	9b04      	ldr	r3, [sp, #16]
 8005bfe:	f8c3 a000 	str.w	sl, [r3]
 8005c02:	3304      	adds	r3, #4
 8005c04:	f04f 0a00 	mov.w	sl, #0
 8005c08:	9304      	str	r3, [sp, #16]
 8005c0a:	46d3      	mov	fp, sl
 8005c0c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005c10:	f7ff fede 	bl	80059d0 <__hexdig_fun>
 8005c14:	f000 000f 	and.w	r0, r0, #15
 8005c18:	fa00 f00b 	lsl.w	r0, r0, fp
 8005c1c:	ea4a 0a00 	orr.w	sl, sl, r0
 8005c20:	f10b 0b04 	add.w	fp, fp, #4
 8005c24:	9b05      	ldr	r3, [sp, #20]
 8005c26:	e00d      	b.n	8005c44 <__gethex+0x24a>
 8005c28:	9b05      	ldr	r3, [sp, #20]
 8005c2a:	9a08      	ldr	r2, [sp, #32]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	42bb      	cmp	r3, r7
 8005c30:	d3e1      	bcc.n	8005bf6 <__gethex+0x1fc>
 8005c32:	4618      	mov	r0, r3
 8005c34:	9a01      	ldr	r2, [sp, #4]
 8005c36:	9903      	ldr	r1, [sp, #12]
 8005c38:	9309      	str	r3, [sp, #36]	; 0x24
 8005c3a:	f001 f988 	bl	8006f4e <strncmp>
 8005c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c40:	2800      	cmp	r0, #0
 8005c42:	d1d8      	bne.n	8005bf6 <__gethex+0x1fc>
 8005c44:	461e      	mov	r6, r3
 8005c46:	e791      	b.n	8005b6c <__gethex+0x172>
 8005c48:	1eb9      	subs	r1, r7, #2
 8005c4a:	4628      	mov	r0, r5
 8005c4c:	f000 fdc2 	bl	80067d4 <__any_on>
 8005c50:	2800      	cmp	r0, #0
 8005c52:	d0b2      	beq.n	8005bba <__gethex+0x1c0>
 8005c54:	f04f 0a03 	mov.w	sl, #3
 8005c58:	e7b1      	b.n	8005bbe <__gethex+0x1c4>
 8005c5a:	da09      	bge.n	8005c70 <__gethex+0x276>
 8005c5c:	1bf7      	subs	r7, r6, r7
 8005c5e:	4629      	mov	r1, r5
 8005c60:	463a      	mov	r2, r7
 8005c62:	9802      	ldr	r0, [sp, #8]
 8005c64:	f000 fbd8 	bl	8006418 <__lshift>
 8005c68:	1be4      	subs	r4, r4, r7
 8005c6a:	4605      	mov	r5, r0
 8005c6c:	f100 0914 	add.w	r9, r0, #20
 8005c70:	f04f 0a00 	mov.w	sl, #0
 8005c74:	e7a8      	b.n	8005bc8 <__gethex+0x1ce>
 8005c76:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005c7a:	42a0      	cmp	r0, r4
 8005c7c:	dd6a      	ble.n	8005d54 <__gethex+0x35a>
 8005c7e:	1b04      	subs	r4, r0, r4
 8005c80:	42a6      	cmp	r6, r4
 8005c82:	dc2e      	bgt.n	8005ce2 <__gethex+0x2e8>
 8005c84:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005c88:	2b02      	cmp	r3, #2
 8005c8a:	d022      	beq.n	8005cd2 <__gethex+0x2d8>
 8005c8c:	2b03      	cmp	r3, #3
 8005c8e:	d024      	beq.n	8005cda <__gethex+0x2e0>
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d115      	bne.n	8005cc0 <__gethex+0x2c6>
 8005c94:	42a6      	cmp	r6, r4
 8005c96:	d113      	bne.n	8005cc0 <__gethex+0x2c6>
 8005c98:	2e01      	cmp	r6, #1
 8005c9a:	dc0b      	bgt.n	8005cb4 <__gethex+0x2ba>
 8005c9c:	9a06      	ldr	r2, [sp, #24]
 8005c9e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005ca2:	6013      	str	r3, [r2, #0]
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	612b      	str	r3, [r5, #16]
 8005ca8:	f8c9 3000 	str.w	r3, [r9]
 8005cac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005cae:	2762      	movs	r7, #98	; 0x62
 8005cb0:	601d      	str	r5, [r3, #0]
 8005cb2:	e72a      	b.n	8005b0a <__gethex+0x110>
 8005cb4:	1e71      	subs	r1, r6, #1
 8005cb6:	4628      	mov	r0, r5
 8005cb8:	f000 fd8c 	bl	80067d4 <__any_on>
 8005cbc:	2800      	cmp	r0, #0
 8005cbe:	d1ed      	bne.n	8005c9c <__gethex+0x2a2>
 8005cc0:	4629      	mov	r1, r5
 8005cc2:	9802      	ldr	r0, [sp, #8]
 8005cc4:	f000 f9dd 	bl	8006082 <_Bfree>
 8005cc8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005cca:	2300      	movs	r3, #0
 8005ccc:	6013      	str	r3, [r2, #0]
 8005cce:	2750      	movs	r7, #80	; 0x50
 8005cd0:	e71b      	b.n	8005b0a <__gethex+0x110>
 8005cd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d0e1      	beq.n	8005c9c <__gethex+0x2a2>
 8005cd8:	e7f2      	b.n	8005cc0 <__gethex+0x2c6>
 8005cda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d1dd      	bne.n	8005c9c <__gethex+0x2a2>
 8005ce0:	e7ee      	b.n	8005cc0 <__gethex+0x2c6>
 8005ce2:	1e67      	subs	r7, r4, #1
 8005ce4:	f1ba 0f00 	cmp.w	sl, #0
 8005ce8:	d131      	bne.n	8005d4e <__gethex+0x354>
 8005cea:	b127      	cbz	r7, 8005cf6 <__gethex+0x2fc>
 8005cec:	4639      	mov	r1, r7
 8005cee:	4628      	mov	r0, r5
 8005cf0:	f000 fd70 	bl	80067d4 <__any_on>
 8005cf4:	4682      	mov	sl, r0
 8005cf6:	117a      	asrs	r2, r7, #5
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	f007 071f 	and.w	r7, r7, #31
 8005cfe:	fa03 f707 	lsl.w	r7, r3, r7
 8005d02:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8005d06:	4621      	mov	r1, r4
 8005d08:	421f      	tst	r7, r3
 8005d0a:	4628      	mov	r0, r5
 8005d0c:	bf18      	it	ne
 8005d0e:	f04a 0a02 	orrne.w	sl, sl, #2
 8005d12:	1b36      	subs	r6, r6, r4
 8005d14:	f7ff fe22 	bl	800595c <rshift>
 8005d18:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8005d1c:	2702      	movs	r7, #2
 8005d1e:	f1ba 0f00 	cmp.w	sl, #0
 8005d22:	d048      	beq.n	8005db6 <__gethex+0x3bc>
 8005d24:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d015      	beq.n	8005d58 <__gethex+0x35e>
 8005d2c:	2b03      	cmp	r3, #3
 8005d2e:	d017      	beq.n	8005d60 <__gethex+0x366>
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d109      	bne.n	8005d48 <__gethex+0x34e>
 8005d34:	f01a 0f02 	tst.w	sl, #2
 8005d38:	d006      	beq.n	8005d48 <__gethex+0x34e>
 8005d3a:	f8d9 3000 	ldr.w	r3, [r9]
 8005d3e:	ea4a 0a03 	orr.w	sl, sl, r3
 8005d42:	f01a 0f01 	tst.w	sl, #1
 8005d46:	d10e      	bne.n	8005d66 <__gethex+0x36c>
 8005d48:	f047 0710 	orr.w	r7, r7, #16
 8005d4c:	e033      	b.n	8005db6 <__gethex+0x3bc>
 8005d4e:	f04f 0a01 	mov.w	sl, #1
 8005d52:	e7d0      	b.n	8005cf6 <__gethex+0x2fc>
 8005d54:	2701      	movs	r7, #1
 8005d56:	e7e2      	b.n	8005d1e <__gethex+0x324>
 8005d58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005d5a:	f1c3 0301 	rsb	r3, r3, #1
 8005d5e:	9315      	str	r3, [sp, #84]	; 0x54
 8005d60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d0f0      	beq.n	8005d48 <__gethex+0x34e>
 8005d66:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8005d6a:	f105 0314 	add.w	r3, r5, #20
 8005d6e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8005d72:	eb03 010a 	add.w	r1, r3, sl
 8005d76:	f04f 0c00 	mov.w	ip, #0
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d80:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005d84:	d01c      	beq.n	8005dc0 <__gethex+0x3c6>
 8005d86:	3201      	adds	r2, #1
 8005d88:	6002      	str	r2, [r0, #0]
 8005d8a:	2f02      	cmp	r7, #2
 8005d8c:	f105 0314 	add.w	r3, r5, #20
 8005d90:	d138      	bne.n	8005e04 <__gethex+0x40a>
 8005d92:	f8d8 2000 	ldr.w	r2, [r8]
 8005d96:	3a01      	subs	r2, #1
 8005d98:	42b2      	cmp	r2, r6
 8005d9a:	d10a      	bne.n	8005db2 <__gethex+0x3b8>
 8005d9c:	1171      	asrs	r1, r6, #5
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f006 061f 	and.w	r6, r6, #31
 8005da4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005da8:	fa02 f606 	lsl.w	r6, r2, r6
 8005dac:	421e      	tst	r6, r3
 8005dae:	bf18      	it	ne
 8005db0:	4617      	movne	r7, r2
 8005db2:	f047 0720 	orr.w	r7, r7, #32
 8005db6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005db8:	601d      	str	r5, [r3, #0]
 8005dba:	9b06      	ldr	r3, [sp, #24]
 8005dbc:	601c      	str	r4, [r3, #0]
 8005dbe:	e6a4      	b.n	8005b0a <__gethex+0x110>
 8005dc0:	4299      	cmp	r1, r3
 8005dc2:	f843 cc04 	str.w	ip, [r3, #-4]
 8005dc6:	d8d8      	bhi.n	8005d7a <__gethex+0x380>
 8005dc8:	68ab      	ldr	r3, [r5, #8]
 8005dca:	4599      	cmp	r9, r3
 8005dcc:	db12      	blt.n	8005df4 <__gethex+0x3fa>
 8005dce:	6869      	ldr	r1, [r5, #4]
 8005dd0:	9802      	ldr	r0, [sp, #8]
 8005dd2:	3101      	adds	r1, #1
 8005dd4:	f000 f921 	bl	800601a <_Balloc>
 8005dd8:	692a      	ldr	r2, [r5, #16]
 8005dda:	3202      	adds	r2, #2
 8005ddc:	f105 010c 	add.w	r1, r5, #12
 8005de0:	4683      	mov	fp, r0
 8005de2:	0092      	lsls	r2, r2, #2
 8005de4:	300c      	adds	r0, #12
 8005de6:	f000 f90d 	bl	8006004 <memcpy>
 8005dea:	4629      	mov	r1, r5
 8005dec:	9802      	ldr	r0, [sp, #8]
 8005dee:	f000 f948 	bl	8006082 <_Bfree>
 8005df2:	465d      	mov	r5, fp
 8005df4:	692b      	ldr	r3, [r5, #16]
 8005df6:	1c5a      	adds	r2, r3, #1
 8005df8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005dfc:	612a      	str	r2, [r5, #16]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	615a      	str	r2, [r3, #20]
 8005e02:	e7c2      	b.n	8005d8a <__gethex+0x390>
 8005e04:	692a      	ldr	r2, [r5, #16]
 8005e06:	454a      	cmp	r2, r9
 8005e08:	dd0b      	ble.n	8005e22 <__gethex+0x428>
 8005e0a:	2101      	movs	r1, #1
 8005e0c:	4628      	mov	r0, r5
 8005e0e:	f7ff fda5 	bl	800595c <rshift>
 8005e12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005e16:	3401      	adds	r4, #1
 8005e18:	42a3      	cmp	r3, r4
 8005e1a:	f6ff aed9 	blt.w	8005bd0 <__gethex+0x1d6>
 8005e1e:	2701      	movs	r7, #1
 8005e20:	e7c7      	b.n	8005db2 <__gethex+0x3b8>
 8005e22:	f016 061f 	ands.w	r6, r6, #31
 8005e26:	d0fa      	beq.n	8005e1e <__gethex+0x424>
 8005e28:	449a      	add	sl, r3
 8005e2a:	f1c6 0620 	rsb	r6, r6, #32
 8005e2e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8005e32:	f000 f9b6 	bl	80061a2 <__hi0bits>
 8005e36:	42b0      	cmp	r0, r6
 8005e38:	dbe7      	blt.n	8005e0a <__gethex+0x410>
 8005e3a:	e7f0      	b.n	8005e1e <__gethex+0x424>

08005e3c <L_shift>:
 8005e3c:	f1c2 0208 	rsb	r2, r2, #8
 8005e40:	0092      	lsls	r2, r2, #2
 8005e42:	b570      	push	{r4, r5, r6, lr}
 8005e44:	f1c2 0620 	rsb	r6, r2, #32
 8005e48:	6843      	ldr	r3, [r0, #4]
 8005e4a:	6804      	ldr	r4, [r0, #0]
 8005e4c:	fa03 f506 	lsl.w	r5, r3, r6
 8005e50:	432c      	orrs	r4, r5
 8005e52:	40d3      	lsrs	r3, r2
 8005e54:	6004      	str	r4, [r0, #0]
 8005e56:	f840 3f04 	str.w	r3, [r0, #4]!
 8005e5a:	4288      	cmp	r0, r1
 8005e5c:	d3f4      	bcc.n	8005e48 <L_shift+0xc>
 8005e5e:	bd70      	pop	{r4, r5, r6, pc}

08005e60 <__match>:
 8005e60:	b530      	push	{r4, r5, lr}
 8005e62:	6803      	ldr	r3, [r0, #0]
 8005e64:	3301      	adds	r3, #1
 8005e66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e6a:	b914      	cbnz	r4, 8005e72 <__match+0x12>
 8005e6c:	6003      	str	r3, [r0, #0]
 8005e6e:	2001      	movs	r0, #1
 8005e70:	bd30      	pop	{r4, r5, pc}
 8005e72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e76:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8005e7a:	2d19      	cmp	r5, #25
 8005e7c:	bf98      	it	ls
 8005e7e:	3220      	addls	r2, #32
 8005e80:	42a2      	cmp	r2, r4
 8005e82:	d0f0      	beq.n	8005e66 <__match+0x6>
 8005e84:	2000      	movs	r0, #0
 8005e86:	e7f3      	b.n	8005e70 <__match+0x10>

08005e88 <__hexnan>:
 8005e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e8c:	680b      	ldr	r3, [r1, #0]
 8005e8e:	6801      	ldr	r1, [r0, #0]
 8005e90:	115f      	asrs	r7, r3, #5
 8005e92:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8005e96:	f013 031f 	ands.w	r3, r3, #31
 8005e9a:	b087      	sub	sp, #28
 8005e9c:	bf18      	it	ne
 8005e9e:	3704      	addne	r7, #4
 8005ea0:	2500      	movs	r5, #0
 8005ea2:	1f3e      	subs	r6, r7, #4
 8005ea4:	4682      	mov	sl, r0
 8005ea6:	4690      	mov	r8, r2
 8005ea8:	9301      	str	r3, [sp, #4]
 8005eaa:	f847 5c04 	str.w	r5, [r7, #-4]
 8005eae:	46b1      	mov	r9, r6
 8005eb0:	4634      	mov	r4, r6
 8005eb2:	9502      	str	r5, [sp, #8]
 8005eb4:	46ab      	mov	fp, r5
 8005eb6:	784a      	ldrb	r2, [r1, #1]
 8005eb8:	1c4b      	adds	r3, r1, #1
 8005eba:	9303      	str	r3, [sp, #12]
 8005ebc:	b342      	cbz	r2, 8005f10 <__hexnan+0x88>
 8005ebe:	4610      	mov	r0, r2
 8005ec0:	9105      	str	r1, [sp, #20]
 8005ec2:	9204      	str	r2, [sp, #16]
 8005ec4:	f7ff fd84 	bl	80059d0 <__hexdig_fun>
 8005ec8:	2800      	cmp	r0, #0
 8005eca:	d143      	bne.n	8005f54 <__hexnan+0xcc>
 8005ecc:	9a04      	ldr	r2, [sp, #16]
 8005ece:	9905      	ldr	r1, [sp, #20]
 8005ed0:	2a20      	cmp	r2, #32
 8005ed2:	d818      	bhi.n	8005f06 <__hexnan+0x7e>
 8005ed4:	9b02      	ldr	r3, [sp, #8]
 8005ed6:	459b      	cmp	fp, r3
 8005ed8:	dd13      	ble.n	8005f02 <__hexnan+0x7a>
 8005eda:	454c      	cmp	r4, r9
 8005edc:	d206      	bcs.n	8005eec <__hexnan+0x64>
 8005ede:	2d07      	cmp	r5, #7
 8005ee0:	dc04      	bgt.n	8005eec <__hexnan+0x64>
 8005ee2:	462a      	mov	r2, r5
 8005ee4:	4649      	mov	r1, r9
 8005ee6:	4620      	mov	r0, r4
 8005ee8:	f7ff ffa8 	bl	8005e3c <L_shift>
 8005eec:	4544      	cmp	r4, r8
 8005eee:	d944      	bls.n	8005f7a <__hexnan+0xf2>
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	f1a4 0904 	sub.w	r9, r4, #4
 8005ef6:	f844 3c04 	str.w	r3, [r4, #-4]
 8005efa:	f8cd b008 	str.w	fp, [sp, #8]
 8005efe:	464c      	mov	r4, r9
 8005f00:	461d      	mov	r5, r3
 8005f02:	9903      	ldr	r1, [sp, #12]
 8005f04:	e7d7      	b.n	8005eb6 <__hexnan+0x2e>
 8005f06:	2a29      	cmp	r2, #41	; 0x29
 8005f08:	d14a      	bne.n	8005fa0 <__hexnan+0x118>
 8005f0a:	3102      	adds	r1, #2
 8005f0c:	f8ca 1000 	str.w	r1, [sl]
 8005f10:	f1bb 0f00 	cmp.w	fp, #0
 8005f14:	d044      	beq.n	8005fa0 <__hexnan+0x118>
 8005f16:	454c      	cmp	r4, r9
 8005f18:	d206      	bcs.n	8005f28 <__hexnan+0xa0>
 8005f1a:	2d07      	cmp	r5, #7
 8005f1c:	dc04      	bgt.n	8005f28 <__hexnan+0xa0>
 8005f1e:	462a      	mov	r2, r5
 8005f20:	4649      	mov	r1, r9
 8005f22:	4620      	mov	r0, r4
 8005f24:	f7ff ff8a 	bl	8005e3c <L_shift>
 8005f28:	4544      	cmp	r4, r8
 8005f2a:	d928      	bls.n	8005f7e <__hexnan+0xf6>
 8005f2c:	4643      	mov	r3, r8
 8005f2e:	f854 2b04 	ldr.w	r2, [r4], #4
 8005f32:	f843 2b04 	str.w	r2, [r3], #4
 8005f36:	42a6      	cmp	r6, r4
 8005f38:	d2f9      	bcs.n	8005f2e <__hexnan+0xa6>
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f843 2b04 	str.w	r2, [r3], #4
 8005f40:	429e      	cmp	r6, r3
 8005f42:	d2fb      	bcs.n	8005f3c <__hexnan+0xb4>
 8005f44:	6833      	ldr	r3, [r6, #0]
 8005f46:	b91b      	cbnz	r3, 8005f50 <__hexnan+0xc8>
 8005f48:	4546      	cmp	r6, r8
 8005f4a:	d127      	bne.n	8005f9c <__hexnan+0x114>
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	6033      	str	r3, [r6, #0]
 8005f50:	2005      	movs	r0, #5
 8005f52:	e026      	b.n	8005fa2 <__hexnan+0x11a>
 8005f54:	3501      	adds	r5, #1
 8005f56:	2d08      	cmp	r5, #8
 8005f58:	f10b 0b01 	add.w	fp, fp, #1
 8005f5c:	dd06      	ble.n	8005f6c <__hexnan+0xe4>
 8005f5e:	4544      	cmp	r4, r8
 8005f60:	d9cf      	bls.n	8005f02 <__hexnan+0x7a>
 8005f62:	2300      	movs	r3, #0
 8005f64:	f844 3c04 	str.w	r3, [r4, #-4]
 8005f68:	2501      	movs	r5, #1
 8005f6a:	3c04      	subs	r4, #4
 8005f6c:	6822      	ldr	r2, [r4, #0]
 8005f6e:	f000 000f 	and.w	r0, r0, #15
 8005f72:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8005f76:	6020      	str	r0, [r4, #0]
 8005f78:	e7c3      	b.n	8005f02 <__hexnan+0x7a>
 8005f7a:	2508      	movs	r5, #8
 8005f7c:	e7c1      	b.n	8005f02 <__hexnan+0x7a>
 8005f7e:	9b01      	ldr	r3, [sp, #4]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d0df      	beq.n	8005f44 <__hexnan+0xbc>
 8005f84:	f04f 32ff 	mov.w	r2, #4294967295
 8005f88:	f1c3 0320 	rsb	r3, r3, #32
 8005f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8005f90:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8005f94:	401a      	ands	r2, r3
 8005f96:	f847 2c04 	str.w	r2, [r7, #-4]
 8005f9a:	e7d3      	b.n	8005f44 <__hexnan+0xbc>
 8005f9c:	3e04      	subs	r6, #4
 8005f9e:	e7d1      	b.n	8005f44 <__hexnan+0xbc>
 8005fa0:	2004      	movs	r0, #4
 8005fa2:	b007      	add	sp, #28
 8005fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005fa8 <__locale_ctype_ptr_l>:
 8005fa8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005fac:	4770      	bx	lr

08005fae <__localeconv_l>:
 8005fae:	30f0      	adds	r0, #240	; 0xf0
 8005fb0:	4770      	bx	lr
	...

08005fb4 <_localeconv_r>:
 8005fb4:	4b04      	ldr	r3, [pc, #16]	; (8005fc8 <_localeconv_r+0x14>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	6a18      	ldr	r0, [r3, #32]
 8005fba:	4b04      	ldr	r3, [pc, #16]	; (8005fcc <_localeconv_r+0x18>)
 8005fbc:	2800      	cmp	r0, #0
 8005fbe:	bf08      	it	eq
 8005fc0:	4618      	moveq	r0, r3
 8005fc2:	30f0      	adds	r0, #240	; 0xf0
 8005fc4:	4770      	bx	lr
 8005fc6:	bf00      	nop
 8005fc8:	2000000c 	.word	0x2000000c
 8005fcc:	20000070 	.word	0x20000070

08005fd0 <malloc>:
 8005fd0:	4b02      	ldr	r3, [pc, #8]	; (8005fdc <malloc+0xc>)
 8005fd2:	4601      	mov	r1, r0
 8005fd4:	6818      	ldr	r0, [r3, #0]
 8005fd6:	f000 bc7b 	b.w	80068d0 <_malloc_r>
 8005fda:	bf00      	nop
 8005fdc:	2000000c 	.word	0x2000000c

08005fe0 <__ascii_mbtowc>:
 8005fe0:	b082      	sub	sp, #8
 8005fe2:	b901      	cbnz	r1, 8005fe6 <__ascii_mbtowc+0x6>
 8005fe4:	a901      	add	r1, sp, #4
 8005fe6:	b142      	cbz	r2, 8005ffa <__ascii_mbtowc+0x1a>
 8005fe8:	b14b      	cbz	r3, 8005ffe <__ascii_mbtowc+0x1e>
 8005fea:	7813      	ldrb	r3, [r2, #0]
 8005fec:	600b      	str	r3, [r1, #0]
 8005fee:	7812      	ldrb	r2, [r2, #0]
 8005ff0:	1c10      	adds	r0, r2, #0
 8005ff2:	bf18      	it	ne
 8005ff4:	2001      	movne	r0, #1
 8005ff6:	b002      	add	sp, #8
 8005ff8:	4770      	bx	lr
 8005ffa:	4610      	mov	r0, r2
 8005ffc:	e7fb      	b.n	8005ff6 <__ascii_mbtowc+0x16>
 8005ffe:	f06f 0001 	mvn.w	r0, #1
 8006002:	e7f8      	b.n	8005ff6 <__ascii_mbtowc+0x16>

08006004 <memcpy>:
 8006004:	b510      	push	{r4, lr}
 8006006:	1e43      	subs	r3, r0, #1
 8006008:	440a      	add	r2, r1
 800600a:	4291      	cmp	r1, r2
 800600c:	d100      	bne.n	8006010 <memcpy+0xc>
 800600e:	bd10      	pop	{r4, pc}
 8006010:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006014:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006018:	e7f7      	b.n	800600a <memcpy+0x6>

0800601a <_Balloc>:
 800601a:	b570      	push	{r4, r5, r6, lr}
 800601c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800601e:	4604      	mov	r4, r0
 8006020:	460e      	mov	r6, r1
 8006022:	b93d      	cbnz	r5, 8006034 <_Balloc+0x1a>
 8006024:	2010      	movs	r0, #16
 8006026:	f7ff ffd3 	bl	8005fd0 <malloc>
 800602a:	6260      	str	r0, [r4, #36]	; 0x24
 800602c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006030:	6005      	str	r5, [r0, #0]
 8006032:	60c5      	str	r5, [r0, #12]
 8006034:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006036:	68eb      	ldr	r3, [r5, #12]
 8006038:	b183      	cbz	r3, 800605c <_Balloc+0x42>
 800603a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006042:	b9b8      	cbnz	r0, 8006074 <_Balloc+0x5a>
 8006044:	2101      	movs	r1, #1
 8006046:	fa01 f506 	lsl.w	r5, r1, r6
 800604a:	1d6a      	adds	r2, r5, #5
 800604c:	0092      	lsls	r2, r2, #2
 800604e:	4620      	mov	r0, r4
 8006050:	f000 fbe1 	bl	8006816 <_calloc_r>
 8006054:	b160      	cbz	r0, 8006070 <_Balloc+0x56>
 8006056:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800605a:	e00e      	b.n	800607a <_Balloc+0x60>
 800605c:	2221      	movs	r2, #33	; 0x21
 800605e:	2104      	movs	r1, #4
 8006060:	4620      	mov	r0, r4
 8006062:	f000 fbd8 	bl	8006816 <_calloc_r>
 8006066:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006068:	60e8      	str	r0, [r5, #12]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d1e4      	bne.n	800603a <_Balloc+0x20>
 8006070:	2000      	movs	r0, #0
 8006072:	bd70      	pop	{r4, r5, r6, pc}
 8006074:	6802      	ldr	r2, [r0, #0]
 8006076:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800607a:	2300      	movs	r3, #0
 800607c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006080:	e7f7      	b.n	8006072 <_Balloc+0x58>

08006082 <_Bfree>:
 8006082:	b570      	push	{r4, r5, r6, lr}
 8006084:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006086:	4606      	mov	r6, r0
 8006088:	460d      	mov	r5, r1
 800608a:	b93c      	cbnz	r4, 800609c <_Bfree+0x1a>
 800608c:	2010      	movs	r0, #16
 800608e:	f7ff ff9f 	bl	8005fd0 <malloc>
 8006092:	6270      	str	r0, [r6, #36]	; 0x24
 8006094:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006098:	6004      	str	r4, [r0, #0]
 800609a:	60c4      	str	r4, [r0, #12]
 800609c:	b13d      	cbz	r5, 80060ae <_Bfree+0x2c>
 800609e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80060a0:	686a      	ldr	r2, [r5, #4]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80060a8:	6029      	str	r1, [r5, #0]
 80060aa:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80060ae:	bd70      	pop	{r4, r5, r6, pc}

080060b0 <__multadd>:
 80060b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060b4:	690d      	ldr	r5, [r1, #16]
 80060b6:	461f      	mov	r7, r3
 80060b8:	4606      	mov	r6, r0
 80060ba:	460c      	mov	r4, r1
 80060bc:	f101 0c14 	add.w	ip, r1, #20
 80060c0:	2300      	movs	r3, #0
 80060c2:	f8dc 0000 	ldr.w	r0, [ip]
 80060c6:	b281      	uxth	r1, r0
 80060c8:	fb02 7101 	mla	r1, r2, r1, r7
 80060cc:	0c0f      	lsrs	r7, r1, #16
 80060ce:	0c00      	lsrs	r0, r0, #16
 80060d0:	fb02 7000 	mla	r0, r2, r0, r7
 80060d4:	b289      	uxth	r1, r1
 80060d6:	3301      	adds	r3, #1
 80060d8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80060dc:	429d      	cmp	r5, r3
 80060de:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80060e2:	f84c 1b04 	str.w	r1, [ip], #4
 80060e6:	dcec      	bgt.n	80060c2 <__multadd+0x12>
 80060e8:	b1d7      	cbz	r7, 8006120 <__multadd+0x70>
 80060ea:	68a3      	ldr	r3, [r4, #8]
 80060ec:	42ab      	cmp	r3, r5
 80060ee:	dc12      	bgt.n	8006116 <__multadd+0x66>
 80060f0:	6861      	ldr	r1, [r4, #4]
 80060f2:	4630      	mov	r0, r6
 80060f4:	3101      	adds	r1, #1
 80060f6:	f7ff ff90 	bl	800601a <_Balloc>
 80060fa:	6922      	ldr	r2, [r4, #16]
 80060fc:	3202      	adds	r2, #2
 80060fe:	f104 010c 	add.w	r1, r4, #12
 8006102:	4680      	mov	r8, r0
 8006104:	0092      	lsls	r2, r2, #2
 8006106:	300c      	adds	r0, #12
 8006108:	f7ff ff7c 	bl	8006004 <memcpy>
 800610c:	4621      	mov	r1, r4
 800610e:	4630      	mov	r0, r6
 8006110:	f7ff ffb7 	bl	8006082 <_Bfree>
 8006114:	4644      	mov	r4, r8
 8006116:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800611a:	3501      	adds	r5, #1
 800611c:	615f      	str	r7, [r3, #20]
 800611e:	6125      	str	r5, [r4, #16]
 8006120:	4620      	mov	r0, r4
 8006122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006126 <__s2b>:
 8006126:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800612a:	460c      	mov	r4, r1
 800612c:	4615      	mov	r5, r2
 800612e:	461f      	mov	r7, r3
 8006130:	2209      	movs	r2, #9
 8006132:	3308      	adds	r3, #8
 8006134:	4606      	mov	r6, r0
 8006136:	fb93 f3f2 	sdiv	r3, r3, r2
 800613a:	2100      	movs	r1, #0
 800613c:	2201      	movs	r2, #1
 800613e:	429a      	cmp	r2, r3
 8006140:	db20      	blt.n	8006184 <__s2b+0x5e>
 8006142:	4630      	mov	r0, r6
 8006144:	f7ff ff69 	bl	800601a <_Balloc>
 8006148:	9b08      	ldr	r3, [sp, #32]
 800614a:	6143      	str	r3, [r0, #20]
 800614c:	2d09      	cmp	r5, #9
 800614e:	f04f 0301 	mov.w	r3, #1
 8006152:	6103      	str	r3, [r0, #16]
 8006154:	dd19      	ble.n	800618a <__s2b+0x64>
 8006156:	f104 0809 	add.w	r8, r4, #9
 800615a:	46c1      	mov	r9, r8
 800615c:	442c      	add	r4, r5
 800615e:	f819 3b01 	ldrb.w	r3, [r9], #1
 8006162:	4601      	mov	r1, r0
 8006164:	3b30      	subs	r3, #48	; 0x30
 8006166:	220a      	movs	r2, #10
 8006168:	4630      	mov	r0, r6
 800616a:	f7ff ffa1 	bl	80060b0 <__multadd>
 800616e:	45a1      	cmp	r9, r4
 8006170:	d1f5      	bne.n	800615e <__s2b+0x38>
 8006172:	eb08 0405 	add.w	r4, r8, r5
 8006176:	3c08      	subs	r4, #8
 8006178:	1b2d      	subs	r5, r5, r4
 800617a:	1963      	adds	r3, r4, r5
 800617c:	42bb      	cmp	r3, r7
 800617e:	db07      	blt.n	8006190 <__s2b+0x6a>
 8006180:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006184:	0052      	lsls	r2, r2, #1
 8006186:	3101      	adds	r1, #1
 8006188:	e7d9      	b.n	800613e <__s2b+0x18>
 800618a:	340a      	adds	r4, #10
 800618c:	2509      	movs	r5, #9
 800618e:	e7f3      	b.n	8006178 <__s2b+0x52>
 8006190:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006194:	4601      	mov	r1, r0
 8006196:	3b30      	subs	r3, #48	; 0x30
 8006198:	220a      	movs	r2, #10
 800619a:	4630      	mov	r0, r6
 800619c:	f7ff ff88 	bl	80060b0 <__multadd>
 80061a0:	e7eb      	b.n	800617a <__s2b+0x54>

080061a2 <__hi0bits>:
 80061a2:	0c02      	lsrs	r2, r0, #16
 80061a4:	0412      	lsls	r2, r2, #16
 80061a6:	4603      	mov	r3, r0
 80061a8:	b9b2      	cbnz	r2, 80061d8 <__hi0bits+0x36>
 80061aa:	0403      	lsls	r3, r0, #16
 80061ac:	2010      	movs	r0, #16
 80061ae:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80061b2:	bf04      	itt	eq
 80061b4:	021b      	lsleq	r3, r3, #8
 80061b6:	3008      	addeq	r0, #8
 80061b8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80061bc:	bf04      	itt	eq
 80061be:	011b      	lsleq	r3, r3, #4
 80061c0:	3004      	addeq	r0, #4
 80061c2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80061c6:	bf04      	itt	eq
 80061c8:	009b      	lsleq	r3, r3, #2
 80061ca:	3002      	addeq	r0, #2
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	db06      	blt.n	80061de <__hi0bits+0x3c>
 80061d0:	005b      	lsls	r3, r3, #1
 80061d2:	d503      	bpl.n	80061dc <__hi0bits+0x3a>
 80061d4:	3001      	adds	r0, #1
 80061d6:	4770      	bx	lr
 80061d8:	2000      	movs	r0, #0
 80061da:	e7e8      	b.n	80061ae <__hi0bits+0xc>
 80061dc:	2020      	movs	r0, #32
 80061de:	4770      	bx	lr

080061e0 <__lo0bits>:
 80061e0:	6803      	ldr	r3, [r0, #0]
 80061e2:	f013 0207 	ands.w	r2, r3, #7
 80061e6:	4601      	mov	r1, r0
 80061e8:	d00b      	beq.n	8006202 <__lo0bits+0x22>
 80061ea:	07da      	lsls	r2, r3, #31
 80061ec:	d423      	bmi.n	8006236 <__lo0bits+0x56>
 80061ee:	0798      	lsls	r0, r3, #30
 80061f0:	bf49      	itett	mi
 80061f2:	085b      	lsrmi	r3, r3, #1
 80061f4:	089b      	lsrpl	r3, r3, #2
 80061f6:	2001      	movmi	r0, #1
 80061f8:	600b      	strmi	r3, [r1, #0]
 80061fa:	bf5c      	itt	pl
 80061fc:	600b      	strpl	r3, [r1, #0]
 80061fe:	2002      	movpl	r0, #2
 8006200:	4770      	bx	lr
 8006202:	b298      	uxth	r0, r3
 8006204:	b9a8      	cbnz	r0, 8006232 <__lo0bits+0x52>
 8006206:	0c1b      	lsrs	r3, r3, #16
 8006208:	2010      	movs	r0, #16
 800620a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800620e:	bf04      	itt	eq
 8006210:	0a1b      	lsreq	r3, r3, #8
 8006212:	3008      	addeq	r0, #8
 8006214:	071a      	lsls	r2, r3, #28
 8006216:	bf04      	itt	eq
 8006218:	091b      	lsreq	r3, r3, #4
 800621a:	3004      	addeq	r0, #4
 800621c:	079a      	lsls	r2, r3, #30
 800621e:	bf04      	itt	eq
 8006220:	089b      	lsreq	r3, r3, #2
 8006222:	3002      	addeq	r0, #2
 8006224:	07da      	lsls	r2, r3, #31
 8006226:	d402      	bmi.n	800622e <__lo0bits+0x4e>
 8006228:	085b      	lsrs	r3, r3, #1
 800622a:	d006      	beq.n	800623a <__lo0bits+0x5a>
 800622c:	3001      	adds	r0, #1
 800622e:	600b      	str	r3, [r1, #0]
 8006230:	4770      	bx	lr
 8006232:	4610      	mov	r0, r2
 8006234:	e7e9      	b.n	800620a <__lo0bits+0x2a>
 8006236:	2000      	movs	r0, #0
 8006238:	4770      	bx	lr
 800623a:	2020      	movs	r0, #32
 800623c:	4770      	bx	lr

0800623e <__i2b>:
 800623e:	b510      	push	{r4, lr}
 8006240:	460c      	mov	r4, r1
 8006242:	2101      	movs	r1, #1
 8006244:	f7ff fee9 	bl	800601a <_Balloc>
 8006248:	2201      	movs	r2, #1
 800624a:	6144      	str	r4, [r0, #20]
 800624c:	6102      	str	r2, [r0, #16]
 800624e:	bd10      	pop	{r4, pc}

08006250 <__multiply>:
 8006250:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006254:	4614      	mov	r4, r2
 8006256:	690a      	ldr	r2, [r1, #16]
 8006258:	6923      	ldr	r3, [r4, #16]
 800625a:	429a      	cmp	r2, r3
 800625c:	bfb8      	it	lt
 800625e:	460b      	movlt	r3, r1
 8006260:	4688      	mov	r8, r1
 8006262:	bfbc      	itt	lt
 8006264:	46a0      	movlt	r8, r4
 8006266:	461c      	movlt	r4, r3
 8006268:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800626c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006270:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006274:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006278:	eb07 0609 	add.w	r6, r7, r9
 800627c:	42b3      	cmp	r3, r6
 800627e:	bfb8      	it	lt
 8006280:	3101      	addlt	r1, #1
 8006282:	f7ff feca 	bl	800601a <_Balloc>
 8006286:	f100 0514 	add.w	r5, r0, #20
 800628a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800628e:	462b      	mov	r3, r5
 8006290:	2200      	movs	r2, #0
 8006292:	4573      	cmp	r3, lr
 8006294:	d316      	bcc.n	80062c4 <__multiply+0x74>
 8006296:	f104 0214 	add.w	r2, r4, #20
 800629a:	f108 0114 	add.w	r1, r8, #20
 800629e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80062a2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80062a6:	9300      	str	r3, [sp, #0]
 80062a8:	9b00      	ldr	r3, [sp, #0]
 80062aa:	9201      	str	r2, [sp, #4]
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d80c      	bhi.n	80062ca <__multiply+0x7a>
 80062b0:	2e00      	cmp	r6, #0
 80062b2:	dd03      	ble.n	80062bc <__multiply+0x6c>
 80062b4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d05d      	beq.n	8006378 <__multiply+0x128>
 80062bc:	6106      	str	r6, [r0, #16]
 80062be:	b003      	add	sp, #12
 80062c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062c4:	f843 2b04 	str.w	r2, [r3], #4
 80062c8:	e7e3      	b.n	8006292 <__multiply+0x42>
 80062ca:	f8b2 b000 	ldrh.w	fp, [r2]
 80062ce:	f1bb 0f00 	cmp.w	fp, #0
 80062d2:	d023      	beq.n	800631c <__multiply+0xcc>
 80062d4:	4689      	mov	r9, r1
 80062d6:	46ac      	mov	ip, r5
 80062d8:	f04f 0800 	mov.w	r8, #0
 80062dc:	f859 4b04 	ldr.w	r4, [r9], #4
 80062e0:	f8dc a000 	ldr.w	sl, [ip]
 80062e4:	b2a3      	uxth	r3, r4
 80062e6:	fa1f fa8a 	uxth.w	sl, sl
 80062ea:	fb0b a303 	mla	r3, fp, r3, sl
 80062ee:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80062f2:	f8dc 4000 	ldr.w	r4, [ip]
 80062f6:	4443      	add	r3, r8
 80062f8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80062fc:	fb0b 840a 	mla	r4, fp, sl, r8
 8006300:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006304:	46e2      	mov	sl, ip
 8006306:	b29b      	uxth	r3, r3
 8006308:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800630c:	454f      	cmp	r7, r9
 800630e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006312:	f84a 3b04 	str.w	r3, [sl], #4
 8006316:	d82b      	bhi.n	8006370 <__multiply+0x120>
 8006318:	f8cc 8004 	str.w	r8, [ip, #4]
 800631c:	9b01      	ldr	r3, [sp, #4]
 800631e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006322:	3204      	adds	r2, #4
 8006324:	f1ba 0f00 	cmp.w	sl, #0
 8006328:	d020      	beq.n	800636c <__multiply+0x11c>
 800632a:	682b      	ldr	r3, [r5, #0]
 800632c:	4689      	mov	r9, r1
 800632e:	46a8      	mov	r8, r5
 8006330:	f04f 0b00 	mov.w	fp, #0
 8006334:	f8b9 c000 	ldrh.w	ip, [r9]
 8006338:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800633c:	fb0a 440c 	mla	r4, sl, ip, r4
 8006340:	445c      	add	r4, fp
 8006342:	46c4      	mov	ip, r8
 8006344:	b29b      	uxth	r3, r3
 8006346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800634a:	f84c 3b04 	str.w	r3, [ip], #4
 800634e:	f859 3b04 	ldr.w	r3, [r9], #4
 8006352:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006356:	0c1b      	lsrs	r3, r3, #16
 8006358:	fb0a b303 	mla	r3, sl, r3, fp
 800635c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006360:	454f      	cmp	r7, r9
 8006362:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006366:	d805      	bhi.n	8006374 <__multiply+0x124>
 8006368:	f8c8 3004 	str.w	r3, [r8, #4]
 800636c:	3504      	adds	r5, #4
 800636e:	e79b      	b.n	80062a8 <__multiply+0x58>
 8006370:	46d4      	mov	ip, sl
 8006372:	e7b3      	b.n	80062dc <__multiply+0x8c>
 8006374:	46e0      	mov	r8, ip
 8006376:	e7dd      	b.n	8006334 <__multiply+0xe4>
 8006378:	3e01      	subs	r6, #1
 800637a:	e799      	b.n	80062b0 <__multiply+0x60>

0800637c <__pow5mult>:
 800637c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006380:	4615      	mov	r5, r2
 8006382:	f012 0203 	ands.w	r2, r2, #3
 8006386:	4606      	mov	r6, r0
 8006388:	460f      	mov	r7, r1
 800638a:	d007      	beq.n	800639c <__pow5mult+0x20>
 800638c:	3a01      	subs	r2, #1
 800638e:	4c21      	ldr	r4, [pc, #132]	; (8006414 <__pow5mult+0x98>)
 8006390:	2300      	movs	r3, #0
 8006392:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006396:	f7ff fe8b 	bl	80060b0 <__multadd>
 800639a:	4607      	mov	r7, r0
 800639c:	10ad      	asrs	r5, r5, #2
 800639e:	d035      	beq.n	800640c <__pow5mult+0x90>
 80063a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80063a2:	b93c      	cbnz	r4, 80063b4 <__pow5mult+0x38>
 80063a4:	2010      	movs	r0, #16
 80063a6:	f7ff fe13 	bl	8005fd0 <malloc>
 80063aa:	6270      	str	r0, [r6, #36]	; 0x24
 80063ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80063b0:	6004      	str	r4, [r0, #0]
 80063b2:	60c4      	str	r4, [r0, #12]
 80063b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80063b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80063bc:	b94c      	cbnz	r4, 80063d2 <__pow5mult+0x56>
 80063be:	f240 2171 	movw	r1, #625	; 0x271
 80063c2:	4630      	mov	r0, r6
 80063c4:	f7ff ff3b 	bl	800623e <__i2b>
 80063c8:	2300      	movs	r3, #0
 80063ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80063ce:	4604      	mov	r4, r0
 80063d0:	6003      	str	r3, [r0, #0]
 80063d2:	f04f 0800 	mov.w	r8, #0
 80063d6:	07eb      	lsls	r3, r5, #31
 80063d8:	d50a      	bpl.n	80063f0 <__pow5mult+0x74>
 80063da:	4639      	mov	r1, r7
 80063dc:	4622      	mov	r2, r4
 80063de:	4630      	mov	r0, r6
 80063e0:	f7ff ff36 	bl	8006250 <__multiply>
 80063e4:	4639      	mov	r1, r7
 80063e6:	4681      	mov	r9, r0
 80063e8:	4630      	mov	r0, r6
 80063ea:	f7ff fe4a 	bl	8006082 <_Bfree>
 80063ee:	464f      	mov	r7, r9
 80063f0:	106d      	asrs	r5, r5, #1
 80063f2:	d00b      	beq.n	800640c <__pow5mult+0x90>
 80063f4:	6820      	ldr	r0, [r4, #0]
 80063f6:	b938      	cbnz	r0, 8006408 <__pow5mult+0x8c>
 80063f8:	4622      	mov	r2, r4
 80063fa:	4621      	mov	r1, r4
 80063fc:	4630      	mov	r0, r6
 80063fe:	f7ff ff27 	bl	8006250 <__multiply>
 8006402:	6020      	str	r0, [r4, #0]
 8006404:	f8c0 8000 	str.w	r8, [r0]
 8006408:	4604      	mov	r4, r0
 800640a:	e7e4      	b.n	80063d6 <__pow5mult+0x5a>
 800640c:	4638      	mov	r0, r7
 800640e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006412:	bf00      	nop
 8006414:	080076d8 	.word	0x080076d8

08006418 <__lshift>:
 8006418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800641c:	460c      	mov	r4, r1
 800641e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006422:	6923      	ldr	r3, [r4, #16]
 8006424:	6849      	ldr	r1, [r1, #4]
 8006426:	eb0a 0903 	add.w	r9, sl, r3
 800642a:	68a3      	ldr	r3, [r4, #8]
 800642c:	4607      	mov	r7, r0
 800642e:	4616      	mov	r6, r2
 8006430:	f109 0501 	add.w	r5, r9, #1
 8006434:	42ab      	cmp	r3, r5
 8006436:	db32      	blt.n	800649e <__lshift+0x86>
 8006438:	4638      	mov	r0, r7
 800643a:	f7ff fdee 	bl	800601a <_Balloc>
 800643e:	2300      	movs	r3, #0
 8006440:	4680      	mov	r8, r0
 8006442:	f100 0114 	add.w	r1, r0, #20
 8006446:	461a      	mov	r2, r3
 8006448:	4553      	cmp	r3, sl
 800644a:	db2b      	blt.n	80064a4 <__lshift+0x8c>
 800644c:	6920      	ldr	r0, [r4, #16]
 800644e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006452:	f104 0314 	add.w	r3, r4, #20
 8006456:	f016 021f 	ands.w	r2, r6, #31
 800645a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800645e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006462:	d025      	beq.n	80064b0 <__lshift+0x98>
 8006464:	f1c2 0e20 	rsb	lr, r2, #32
 8006468:	2000      	movs	r0, #0
 800646a:	681e      	ldr	r6, [r3, #0]
 800646c:	468a      	mov	sl, r1
 800646e:	4096      	lsls	r6, r2
 8006470:	4330      	orrs	r0, r6
 8006472:	f84a 0b04 	str.w	r0, [sl], #4
 8006476:	f853 0b04 	ldr.w	r0, [r3], #4
 800647a:	459c      	cmp	ip, r3
 800647c:	fa20 f00e 	lsr.w	r0, r0, lr
 8006480:	d814      	bhi.n	80064ac <__lshift+0x94>
 8006482:	6048      	str	r0, [r1, #4]
 8006484:	b108      	cbz	r0, 800648a <__lshift+0x72>
 8006486:	f109 0502 	add.w	r5, r9, #2
 800648a:	3d01      	subs	r5, #1
 800648c:	4638      	mov	r0, r7
 800648e:	f8c8 5010 	str.w	r5, [r8, #16]
 8006492:	4621      	mov	r1, r4
 8006494:	f7ff fdf5 	bl	8006082 <_Bfree>
 8006498:	4640      	mov	r0, r8
 800649a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800649e:	3101      	adds	r1, #1
 80064a0:	005b      	lsls	r3, r3, #1
 80064a2:	e7c7      	b.n	8006434 <__lshift+0x1c>
 80064a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80064a8:	3301      	adds	r3, #1
 80064aa:	e7cd      	b.n	8006448 <__lshift+0x30>
 80064ac:	4651      	mov	r1, sl
 80064ae:	e7dc      	b.n	800646a <__lshift+0x52>
 80064b0:	3904      	subs	r1, #4
 80064b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80064b6:	f841 2f04 	str.w	r2, [r1, #4]!
 80064ba:	459c      	cmp	ip, r3
 80064bc:	d8f9      	bhi.n	80064b2 <__lshift+0x9a>
 80064be:	e7e4      	b.n	800648a <__lshift+0x72>

080064c0 <__mcmp>:
 80064c0:	6903      	ldr	r3, [r0, #16]
 80064c2:	690a      	ldr	r2, [r1, #16]
 80064c4:	1a9b      	subs	r3, r3, r2
 80064c6:	b530      	push	{r4, r5, lr}
 80064c8:	d10c      	bne.n	80064e4 <__mcmp+0x24>
 80064ca:	0092      	lsls	r2, r2, #2
 80064cc:	3014      	adds	r0, #20
 80064ce:	3114      	adds	r1, #20
 80064d0:	1884      	adds	r4, r0, r2
 80064d2:	4411      	add	r1, r2
 80064d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80064d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80064dc:	4295      	cmp	r5, r2
 80064de:	d003      	beq.n	80064e8 <__mcmp+0x28>
 80064e0:	d305      	bcc.n	80064ee <__mcmp+0x2e>
 80064e2:	2301      	movs	r3, #1
 80064e4:	4618      	mov	r0, r3
 80064e6:	bd30      	pop	{r4, r5, pc}
 80064e8:	42a0      	cmp	r0, r4
 80064ea:	d3f3      	bcc.n	80064d4 <__mcmp+0x14>
 80064ec:	e7fa      	b.n	80064e4 <__mcmp+0x24>
 80064ee:	f04f 33ff 	mov.w	r3, #4294967295
 80064f2:	e7f7      	b.n	80064e4 <__mcmp+0x24>

080064f4 <__mdiff>:
 80064f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064f8:	460d      	mov	r5, r1
 80064fa:	4607      	mov	r7, r0
 80064fc:	4611      	mov	r1, r2
 80064fe:	4628      	mov	r0, r5
 8006500:	4614      	mov	r4, r2
 8006502:	f7ff ffdd 	bl	80064c0 <__mcmp>
 8006506:	1e06      	subs	r6, r0, #0
 8006508:	d108      	bne.n	800651c <__mdiff+0x28>
 800650a:	4631      	mov	r1, r6
 800650c:	4638      	mov	r0, r7
 800650e:	f7ff fd84 	bl	800601a <_Balloc>
 8006512:	2301      	movs	r3, #1
 8006514:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800651c:	bfa4      	itt	ge
 800651e:	4623      	movge	r3, r4
 8006520:	462c      	movge	r4, r5
 8006522:	4638      	mov	r0, r7
 8006524:	6861      	ldr	r1, [r4, #4]
 8006526:	bfa6      	itte	ge
 8006528:	461d      	movge	r5, r3
 800652a:	2600      	movge	r6, #0
 800652c:	2601      	movlt	r6, #1
 800652e:	f7ff fd74 	bl	800601a <_Balloc>
 8006532:	692b      	ldr	r3, [r5, #16]
 8006534:	60c6      	str	r6, [r0, #12]
 8006536:	6926      	ldr	r6, [r4, #16]
 8006538:	f105 0914 	add.w	r9, r5, #20
 800653c:	f104 0214 	add.w	r2, r4, #20
 8006540:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006544:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006548:	f100 0514 	add.w	r5, r0, #20
 800654c:	f04f 0e00 	mov.w	lr, #0
 8006550:	f852 ab04 	ldr.w	sl, [r2], #4
 8006554:	f859 4b04 	ldr.w	r4, [r9], #4
 8006558:	fa1e f18a 	uxtah	r1, lr, sl
 800655c:	b2a3      	uxth	r3, r4
 800655e:	1ac9      	subs	r1, r1, r3
 8006560:	0c23      	lsrs	r3, r4, #16
 8006562:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8006566:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800656a:	b289      	uxth	r1, r1
 800656c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006570:	45c8      	cmp	r8, r9
 8006572:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006576:	4694      	mov	ip, r2
 8006578:	f845 3b04 	str.w	r3, [r5], #4
 800657c:	d8e8      	bhi.n	8006550 <__mdiff+0x5c>
 800657e:	45bc      	cmp	ip, r7
 8006580:	d304      	bcc.n	800658c <__mdiff+0x98>
 8006582:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006586:	b183      	cbz	r3, 80065aa <__mdiff+0xb6>
 8006588:	6106      	str	r6, [r0, #16]
 800658a:	e7c5      	b.n	8006518 <__mdiff+0x24>
 800658c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006590:	fa1e f381 	uxtah	r3, lr, r1
 8006594:	141a      	asrs	r2, r3, #16
 8006596:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800659a:	b29b      	uxth	r3, r3
 800659c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065a0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80065a4:	f845 3b04 	str.w	r3, [r5], #4
 80065a8:	e7e9      	b.n	800657e <__mdiff+0x8a>
 80065aa:	3e01      	subs	r6, #1
 80065ac:	e7e9      	b.n	8006582 <__mdiff+0x8e>
	...

080065b0 <__ulp>:
 80065b0:	4b12      	ldr	r3, [pc, #72]	; (80065fc <__ulp+0x4c>)
 80065b2:	ee10 2a90 	vmov	r2, s1
 80065b6:	401a      	ands	r2, r3
 80065b8:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80065bc:	2b00      	cmp	r3, #0
 80065be:	dd04      	ble.n	80065ca <__ulp+0x1a>
 80065c0:	2000      	movs	r0, #0
 80065c2:	4619      	mov	r1, r3
 80065c4:	ec41 0b10 	vmov	d0, r0, r1
 80065c8:	4770      	bx	lr
 80065ca:	425b      	negs	r3, r3
 80065cc:	151b      	asrs	r3, r3, #20
 80065ce:	2b13      	cmp	r3, #19
 80065d0:	f04f 0000 	mov.w	r0, #0
 80065d4:	f04f 0100 	mov.w	r1, #0
 80065d8:	dc04      	bgt.n	80065e4 <__ulp+0x34>
 80065da:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80065de:	fa42 f103 	asr.w	r1, r2, r3
 80065e2:	e7ef      	b.n	80065c4 <__ulp+0x14>
 80065e4:	3b14      	subs	r3, #20
 80065e6:	2b1e      	cmp	r3, #30
 80065e8:	f04f 0201 	mov.w	r2, #1
 80065ec:	bfda      	itte	le
 80065ee:	f1c3 031f 	rsble	r3, r3, #31
 80065f2:	fa02 f303 	lslle.w	r3, r2, r3
 80065f6:	4613      	movgt	r3, r2
 80065f8:	4618      	mov	r0, r3
 80065fa:	e7e3      	b.n	80065c4 <__ulp+0x14>
 80065fc:	7ff00000 	.word	0x7ff00000

08006600 <__b2d>:
 8006600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006602:	6905      	ldr	r5, [r0, #16]
 8006604:	f100 0714 	add.w	r7, r0, #20
 8006608:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800660c:	1f2e      	subs	r6, r5, #4
 800660e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8006612:	4620      	mov	r0, r4
 8006614:	f7ff fdc5 	bl	80061a2 <__hi0bits>
 8006618:	f1c0 0320 	rsb	r3, r0, #32
 800661c:	280a      	cmp	r0, #10
 800661e:	600b      	str	r3, [r1, #0]
 8006620:	f8df c074 	ldr.w	ip, [pc, #116]	; 8006698 <__b2d+0x98>
 8006624:	dc14      	bgt.n	8006650 <__b2d+0x50>
 8006626:	f1c0 0e0b 	rsb	lr, r0, #11
 800662a:	fa24 f10e 	lsr.w	r1, r4, lr
 800662e:	42b7      	cmp	r7, r6
 8006630:	ea41 030c 	orr.w	r3, r1, ip
 8006634:	bf34      	ite	cc
 8006636:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800663a:	2100      	movcs	r1, #0
 800663c:	3015      	adds	r0, #21
 800663e:	fa04 f000 	lsl.w	r0, r4, r0
 8006642:	fa21 f10e 	lsr.w	r1, r1, lr
 8006646:	ea40 0201 	orr.w	r2, r0, r1
 800664a:	ec43 2b10 	vmov	d0, r2, r3
 800664e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006650:	42b7      	cmp	r7, r6
 8006652:	bf3a      	itte	cc
 8006654:	f1a5 0608 	subcc.w	r6, r5, #8
 8006658:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800665c:	2100      	movcs	r1, #0
 800665e:	380b      	subs	r0, #11
 8006660:	d015      	beq.n	800668e <__b2d+0x8e>
 8006662:	4084      	lsls	r4, r0
 8006664:	f1c0 0520 	rsb	r5, r0, #32
 8006668:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800666c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8006670:	42be      	cmp	r6, r7
 8006672:	fa21 fc05 	lsr.w	ip, r1, r5
 8006676:	ea44 030c 	orr.w	r3, r4, ip
 800667a:	bf8c      	ite	hi
 800667c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8006680:	2400      	movls	r4, #0
 8006682:	fa01 f000 	lsl.w	r0, r1, r0
 8006686:	40ec      	lsrs	r4, r5
 8006688:	ea40 0204 	orr.w	r2, r0, r4
 800668c:	e7dd      	b.n	800664a <__b2d+0x4a>
 800668e:	ea44 030c 	orr.w	r3, r4, ip
 8006692:	460a      	mov	r2, r1
 8006694:	e7d9      	b.n	800664a <__b2d+0x4a>
 8006696:	bf00      	nop
 8006698:	3ff00000 	.word	0x3ff00000

0800669c <__d2b>:
 800669c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80066a0:	460e      	mov	r6, r1
 80066a2:	2101      	movs	r1, #1
 80066a4:	ec59 8b10 	vmov	r8, r9, d0
 80066a8:	4615      	mov	r5, r2
 80066aa:	f7ff fcb6 	bl	800601a <_Balloc>
 80066ae:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80066b2:	4607      	mov	r7, r0
 80066b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80066b8:	bb34      	cbnz	r4, 8006708 <__d2b+0x6c>
 80066ba:	9301      	str	r3, [sp, #4]
 80066bc:	f1b8 0300 	subs.w	r3, r8, #0
 80066c0:	d027      	beq.n	8006712 <__d2b+0x76>
 80066c2:	a802      	add	r0, sp, #8
 80066c4:	f840 3d08 	str.w	r3, [r0, #-8]!
 80066c8:	f7ff fd8a 	bl	80061e0 <__lo0bits>
 80066cc:	9900      	ldr	r1, [sp, #0]
 80066ce:	b1f0      	cbz	r0, 800670e <__d2b+0x72>
 80066d0:	9a01      	ldr	r2, [sp, #4]
 80066d2:	f1c0 0320 	rsb	r3, r0, #32
 80066d6:	fa02 f303 	lsl.w	r3, r2, r3
 80066da:	430b      	orrs	r3, r1
 80066dc:	40c2      	lsrs	r2, r0
 80066de:	617b      	str	r3, [r7, #20]
 80066e0:	9201      	str	r2, [sp, #4]
 80066e2:	9b01      	ldr	r3, [sp, #4]
 80066e4:	61bb      	str	r3, [r7, #24]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	bf14      	ite	ne
 80066ea:	2102      	movne	r1, #2
 80066ec:	2101      	moveq	r1, #1
 80066ee:	6139      	str	r1, [r7, #16]
 80066f0:	b1c4      	cbz	r4, 8006724 <__d2b+0x88>
 80066f2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80066f6:	4404      	add	r4, r0
 80066f8:	6034      	str	r4, [r6, #0]
 80066fa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80066fe:	6028      	str	r0, [r5, #0]
 8006700:	4638      	mov	r0, r7
 8006702:	b003      	add	sp, #12
 8006704:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006708:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800670c:	e7d5      	b.n	80066ba <__d2b+0x1e>
 800670e:	6179      	str	r1, [r7, #20]
 8006710:	e7e7      	b.n	80066e2 <__d2b+0x46>
 8006712:	a801      	add	r0, sp, #4
 8006714:	f7ff fd64 	bl	80061e0 <__lo0bits>
 8006718:	9b01      	ldr	r3, [sp, #4]
 800671a:	617b      	str	r3, [r7, #20]
 800671c:	2101      	movs	r1, #1
 800671e:	6139      	str	r1, [r7, #16]
 8006720:	3020      	adds	r0, #32
 8006722:	e7e5      	b.n	80066f0 <__d2b+0x54>
 8006724:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006728:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800672c:	6030      	str	r0, [r6, #0]
 800672e:	6918      	ldr	r0, [r3, #16]
 8006730:	f7ff fd37 	bl	80061a2 <__hi0bits>
 8006734:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006738:	e7e1      	b.n	80066fe <__d2b+0x62>

0800673a <__ratio>:
 800673a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800673e:	4688      	mov	r8, r1
 8006740:	4669      	mov	r1, sp
 8006742:	4681      	mov	r9, r0
 8006744:	f7ff ff5c 	bl	8006600 <__b2d>
 8006748:	a901      	add	r1, sp, #4
 800674a:	4640      	mov	r0, r8
 800674c:	ec57 6b10 	vmov	r6, r7, d0
 8006750:	f7ff ff56 	bl	8006600 <__b2d>
 8006754:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006758:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800675c:	eba3 0c02 	sub.w	ip, r3, r2
 8006760:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006764:	1a9b      	subs	r3, r3, r2
 8006766:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800676a:	ec5b ab10 	vmov	sl, fp, d0
 800676e:	2b00      	cmp	r3, #0
 8006770:	bfce      	itee	gt
 8006772:	463a      	movgt	r2, r7
 8006774:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006778:	465a      	movle	r2, fp
 800677a:	4659      	mov	r1, fp
 800677c:	463d      	mov	r5, r7
 800677e:	bfd4      	ite	le
 8006780:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8006784:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8006788:	4630      	mov	r0, r6
 800678a:	ee10 2a10 	vmov	r2, s0
 800678e:	460b      	mov	r3, r1
 8006790:	4629      	mov	r1, r5
 8006792:	f7fa f85b 	bl	800084c <__aeabi_ddiv>
 8006796:	ec41 0b10 	vmov	d0, r0, r1
 800679a:	b003      	add	sp, #12
 800679c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080067a0 <__copybits>:
 80067a0:	3901      	subs	r1, #1
 80067a2:	b510      	push	{r4, lr}
 80067a4:	1149      	asrs	r1, r1, #5
 80067a6:	6914      	ldr	r4, [r2, #16]
 80067a8:	3101      	adds	r1, #1
 80067aa:	f102 0314 	add.w	r3, r2, #20
 80067ae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80067b2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80067b6:	42a3      	cmp	r3, r4
 80067b8:	4602      	mov	r2, r0
 80067ba:	d303      	bcc.n	80067c4 <__copybits+0x24>
 80067bc:	2300      	movs	r3, #0
 80067be:	428a      	cmp	r2, r1
 80067c0:	d305      	bcc.n	80067ce <__copybits+0x2e>
 80067c2:	bd10      	pop	{r4, pc}
 80067c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80067c8:	f840 2b04 	str.w	r2, [r0], #4
 80067cc:	e7f3      	b.n	80067b6 <__copybits+0x16>
 80067ce:	f842 3b04 	str.w	r3, [r2], #4
 80067d2:	e7f4      	b.n	80067be <__copybits+0x1e>

080067d4 <__any_on>:
 80067d4:	f100 0214 	add.w	r2, r0, #20
 80067d8:	6900      	ldr	r0, [r0, #16]
 80067da:	114b      	asrs	r3, r1, #5
 80067dc:	4298      	cmp	r0, r3
 80067de:	b510      	push	{r4, lr}
 80067e0:	db11      	blt.n	8006806 <__any_on+0x32>
 80067e2:	dd0a      	ble.n	80067fa <__any_on+0x26>
 80067e4:	f011 011f 	ands.w	r1, r1, #31
 80067e8:	d007      	beq.n	80067fa <__any_on+0x26>
 80067ea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80067ee:	fa24 f001 	lsr.w	r0, r4, r1
 80067f2:	fa00 f101 	lsl.w	r1, r0, r1
 80067f6:	428c      	cmp	r4, r1
 80067f8:	d10b      	bne.n	8006812 <__any_on+0x3e>
 80067fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80067fe:	4293      	cmp	r3, r2
 8006800:	d803      	bhi.n	800680a <__any_on+0x36>
 8006802:	2000      	movs	r0, #0
 8006804:	bd10      	pop	{r4, pc}
 8006806:	4603      	mov	r3, r0
 8006808:	e7f7      	b.n	80067fa <__any_on+0x26>
 800680a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800680e:	2900      	cmp	r1, #0
 8006810:	d0f5      	beq.n	80067fe <__any_on+0x2a>
 8006812:	2001      	movs	r0, #1
 8006814:	e7f6      	b.n	8006804 <__any_on+0x30>

08006816 <_calloc_r>:
 8006816:	b538      	push	{r3, r4, r5, lr}
 8006818:	fb02 f401 	mul.w	r4, r2, r1
 800681c:	4621      	mov	r1, r4
 800681e:	f000 f857 	bl	80068d0 <_malloc_r>
 8006822:	4605      	mov	r5, r0
 8006824:	b118      	cbz	r0, 800682e <_calloc_r+0x18>
 8006826:	4622      	mov	r2, r4
 8006828:	2100      	movs	r1, #0
 800682a:	f7fc fc55 	bl	80030d8 <memset>
 800682e:	4628      	mov	r0, r5
 8006830:	bd38      	pop	{r3, r4, r5, pc}
	...

08006834 <_free_r>:
 8006834:	b538      	push	{r3, r4, r5, lr}
 8006836:	4605      	mov	r5, r0
 8006838:	2900      	cmp	r1, #0
 800683a:	d045      	beq.n	80068c8 <_free_r+0x94>
 800683c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006840:	1f0c      	subs	r4, r1, #4
 8006842:	2b00      	cmp	r3, #0
 8006844:	bfb8      	it	lt
 8006846:	18e4      	addlt	r4, r4, r3
 8006848:	f000 fdc3 	bl	80073d2 <__malloc_lock>
 800684c:	4a1f      	ldr	r2, [pc, #124]	; (80068cc <_free_r+0x98>)
 800684e:	6813      	ldr	r3, [r2, #0]
 8006850:	4610      	mov	r0, r2
 8006852:	b933      	cbnz	r3, 8006862 <_free_r+0x2e>
 8006854:	6063      	str	r3, [r4, #4]
 8006856:	6014      	str	r4, [r2, #0]
 8006858:	4628      	mov	r0, r5
 800685a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800685e:	f000 bdb9 	b.w	80073d4 <__malloc_unlock>
 8006862:	42a3      	cmp	r3, r4
 8006864:	d90c      	bls.n	8006880 <_free_r+0x4c>
 8006866:	6821      	ldr	r1, [r4, #0]
 8006868:	1862      	adds	r2, r4, r1
 800686a:	4293      	cmp	r3, r2
 800686c:	bf04      	itt	eq
 800686e:	681a      	ldreq	r2, [r3, #0]
 8006870:	685b      	ldreq	r3, [r3, #4]
 8006872:	6063      	str	r3, [r4, #4]
 8006874:	bf04      	itt	eq
 8006876:	1852      	addeq	r2, r2, r1
 8006878:	6022      	streq	r2, [r4, #0]
 800687a:	6004      	str	r4, [r0, #0]
 800687c:	e7ec      	b.n	8006858 <_free_r+0x24>
 800687e:	4613      	mov	r3, r2
 8006880:	685a      	ldr	r2, [r3, #4]
 8006882:	b10a      	cbz	r2, 8006888 <_free_r+0x54>
 8006884:	42a2      	cmp	r2, r4
 8006886:	d9fa      	bls.n	800687e <_free_r+0x4a>
 8006888:	6819      	ldr	r1, [r3, #0]
 800688a:	1858      	adds	r0, r3, r1
 800688c:	42a0      	cmp	r0, r4
 800688e:	d10b      	bne.n	80068a8 <_free_r+0x74>
 8006890:	6820      	ldr	r0, [r4, #0]
 8006892:	4401      	add	r1, r0
 8006894:	1858      	adds	r0, r3, r1
 8006896:	4282      	cmp	r2, r0
 8006898:	6019      	str	r1, [r3, #0]
 800689a:	d1dd      	bne.n	8006858 <_free_r+0x24>
 800689c:	6810      	ldr	r0, [r2, #0]
 800689e:	6852      	ldr	r2, [r2, #4]
 80068a0:	605a      	str	r2, [r3, #4]
 80068a2:	4401      	add	r1, r0
 80068a4:	6019      	str	r1, [r3, #0]
 80068a6:	e7d7      	b.n	8006858 <_free_r+0x24>
 80068a8:	d902      	bls.n	80068b0 <_free_r+0x7c>
 80068aa:	230c      	movs	r3, #12
 80068ac:	602b      	str	r3, [r5, #0]
 80068ae:	e7d3      	b.n	8006858 <_free_r+0x24>
 80068b0:	6820      	ldr	r0, [r4, #0]
 80068b2:	1821      	adds	r1, r4, r0
 80068b4:	428a      	cmp	r2, r1
 80068b6:	bf04      	itt	eq
 80068b8:	6811      	ldreq	r1, [r2, #0]
 80068ba:	6852      	ldreq	r2, [r2, #4]
 80068bc:	6062      	str	r2, [r4, #4]
 80068be:	bf04      	itt	eq
 80068c0:	1809      	addeq	r1, r1, r0
 80068c2:	6021      	streq	r1, [r4, #0]
 80068c4:	605c      	str	r4, [r3, #4]
 80068c6:	e7c7      	b.n	8006858 <_free_r+0x24>
 80068c8:	bd38      	pop	{r3, r4, r5, pc}
 80068ca:	bf00      	nop
 80068cc:	20000200 	.word	0x20000200

080068d0 <_malloc_r>:
 80068d0:	b570      	push	{r4, r5, r6, lr}
 80068d2:	1ccd      	adds	r5, r1, #3
 80068d4:	f025 0503 	bic.w	r5, r5, #3
 80068d8:	3508      	adds	r5, #8
 80068da:	2d0c      	cmp	r5, #12
 80068dc:	bf38      	it	cc
 80068de:	250c      	movcc	r5, #12
 80068e0:	2d00      	cmp	r5, #0
 80068e2:	4606      	mov	r6, r0
 80068e4:	db01      	blt.n	80068ea <_malloc_r+0x1a>
 80068e6:	42a9      	cmp	r1, r5
 80068e8:	d903      	bls.n	80068f2 <_malloc_r+0x22>
 80068ea:	230c      	movs	r3, #12
 80068ec:	6033      	str	r3, [r6, #0]
 80068ee:	2000      	movs	r0, #0
 80068f0:	bd70      	pop	{r4, r5, r6, pc}
 80068f2:	f000 fd6e 	bl	80073d2 <__malloc_lock>
 80068f6:	4a21      	ldr	r2, [pc, #132]	; (800697c <_malloc_r+0xac>)
 80068f8:	6814      	ldr	r4, [r2, #0]
 80068fa:	4621      	mov	r1, r4
 80068fc:	b991      	cbnz	r1, 8006924 <_malloc_r+0x54>
 80068fe:	4c20      	ldr	r4, [pc, #128]	; (8006980 <_malloc_r+0xb0>)
 8006900:	6823      	ldr	r3, [r4, #0]
 8006902:	b91b      	cbnz	r3, 800690c <_malloc_r+0x3c>
 8006904:	4630      	mov	r0, r6
 8006906:	f000 facf 	bl	8006ea8 <_sbrk_r>
 800690a:	6020      	str	r0, [r4, #0]
 800690c:	4629      	mov	r1, r5
 800690e:	4630      	mov	r0, r6
 8006910:	f000 faca 	bl	8006ea8 <_sbrk_r>
 8006914:	1c43      	adds	r3, r0, #1
 8006916:	d124      	bne.n	8006962 <_malloc_r+0x92>
 8006918:	230c      	movs	r3, #12
 800691a:	6033      	str	r3, [r6, #0]
 800691c:	4630      	mov	r0, r6
 800691e:	f000 fd59 	bl	80073d4 <__malloc_unlock>
 8006922:	e7e4      	b.n	80068ee <_malloc_r+0x1e>
 8006924:	680b      	ldr	r3, [r1, #0]
 8006926:	1b5b      	subs	r3, r3, r5
 8006928:	d418      	bmi.n	800695c <_malloc_r+0x8c>
 800692a:	2b0b      	cmp	r3, #11
 800692c:	d90f      	bls.n	800694e <_malloc_r+0x7e>
 800692e:	600b      	str	r3, [r1, #0]
 8006930:	50cd      	str	r5, [r1, r3]
 8006932:	18cc      	adds	r4, r1, r3
 8006934:	4630      	mov	r0, r6
 8006936:	f000 fd4d 	bl	80073d4 <__malloc_unlock>
 800693a:	f104 000b 	add.w	r0, r4, #11
 800693e:	1d23      	adds	r3, r4, #4
 8006940:	f020 0007 	bic.w	r0, r0, #7
 8006944:	1ac3      	subs	r3, r0, r3
 8006946:	d0d3      	beq.n	80068f0 <_malloc_r+0x20>
 8006948:	425a      	negs	r2, r3
 800694a:	50e2      	str	r2, [r4, r3]
 800694c:	e7d0      	b.n	80068f0 <_malloc_r+0x20>
 800694e:	428c      	cmp	r4, r1
 8006950:	684b      	ldr	r3, [r1, #4]
 8006952:	bf16      	itet	ne
 8006954:	6063      	strne	r3, [r4, #4]
 8006956:	6013      	streq	r3, [r2, #0]
 8006958:	460c      	movne	r4, r1
 800695a:	e7eb      	b.n	8006934 <_malloc_r+0x64>
 800695c:	460c      	mov	r4, r1
 800695e:	6849      	ldr	r1, [r1, #4]
 8006960:	e7cc      	b.n	80068fc <_malloc_r+0x2c>
 8006962:	1cc4      	adds	r4, r0, #3
 8006964:	f024 0403 	bic.w	r4, r4, #3
 8006968:	42a0      	cmp	r0, r4
 800696a:	d005      	beq.n	8006978 <_malloc_r+0xa8>
 800696c:	1a21      	subs	r1, r4, r0
 800696e:	4630      	mov	r0, r6
 8006970:	f000 fa9a 	bl	8006ea8 <_sbrk_r>
 8006974:	3001      	adds	r0, #1
 8006976:	d0cf      	beq.n	8006918 <_malloc_r+0x48>
 8006978:	6025      	str	r5, [r4, #0]
 800697a:	e7db      	b.n	8006934 <_malloc_r+0x64>
 800697c:	20000200 	.word	0x20000200
 8006980:	20000204 	.word	0x20000204

08006984 <__ssputs_r>:
 8006984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006988:	688e      	ldr	r6, [r1, #8]
 800698a:	429e      	cmp	r6, r3
 800698c:	4682      	mov	sl, r0
 800698e:	460c      	mov	r4, r1
 8006990:	4690      	mov	r8, r2
 8006992:	4699      	mov	r9, r3
 8006994:	d837      	bhi.n	8006a06 <__ssputs_r+0x82>
 8006996:	898a      	ldrh	r2, [r1, #12]
 8006998:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800699c:	d031      	beq.n	8006a02 <__ssputs_r+0x7e>
 800699e:	6825      	ldr	r5, [r4, #0]
 80069a0:	6909      	ldr	r1, [r1, #16]
 80069a2:	1a6f      	subs	r7, r5, r1
 80069a4:	6965      	ldr	r5, [r4, #20]
 80069a6:	2302      	movs	r3, #2
 80069a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80069ac:	fb95 f5f3 	sdiv	r5, r5, r3
 80069b0:	f109 0301 	add.w	r3, r9, #1
 80069b4:	443b      	add	r3, r7
 80069b6:	429d      	cmp	r5, r3
 80069b8:	bf38      	it	cc
 80069ba:	461d      	movcc	r5, r3
 80069bc:	0553      	lsls	r3, r2, #21
 80069be:	d530      	bpl.n	8006a22 <__ssputs_r+0x9e>
 80069c0:	4629      	mov	r1, r5
 80069c2:	f7ff ff85 	bl	80068d0 <_malloc_r>
 80069c6:	4606      	mov	r6, r0
 80069c8:	b950      	cbnz	r0, 80069e0 <__ssputs_r+0x5c>
 80069ca:	230c      	movs	r3, #12
 80069cc:	f8ca 3000 	str.w	r3, [sl]
 80069d0:	89a3      	ldrh	r3, [r4, #12]
 80069d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069d6:	81a3      	strh	r3, [r4, #12]
 80069d8:	f04f 30ff 	mov.w	r0, #4294967295
 80069dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069e0:	463a      	mov	r2, r7
 80069e2:	6921      	ldr	r1, [r4, #16]
 80069e4:	f7ff fb0e 	bl	8006004 <memcpy>
 80069e8:	89a3      	ldrh	r3, [r4, #12]
 80069ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80069ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069f2:	81a3      	strh	r3, [r4, #12]
 80069f4:	6126      	str	r6, [r4, #16]
 80069f6:	6165      	str	r5, [r4, #20]
 80069f8:	443e      	add	r6, r7
 80069fa:	1bed      	subs	r5, r5, r7
 80069fc:	6026      	str	r6, [r4, #0]
 80069fe:	60a5      	str	r5, [r4, #8]
 8006a00:	464e      	mov	r6, r9
 8006a02:	454e      	cmp	r6, r9
 8006a04:	d900      	bls.n	8006a08 <__ssputs_r+0x84>
 8006a06:	464e      	mov	r6, r9
 8006a08:	4632      	mov	r2, r6
 8006a0a:	4641      	mov	r1, r8
 8006a0c:	6820      	ldr	r0, [r4, #0]
 8006a0e:	f000 fcc7 	bl	80073a0 <memmove>
 8006a12:	68a3      	ldr	r3, [r4, #8]
 8006a14:	1b9b      	subs	r3, r3, r6
 8006a16:	60a3      	str	r3, [r4, #8]
 8006a18:	6823      	ldr	r3, [r4, #0]
 8006a1a:	441e      	add	r6, r3
 8006a1c:	6026      	str	r6, [r4, #0]
 8006a1e:	2000      	movs	r0, #0
 8006a20:	e7dc      	b.n	80069dc <__ssputs_r+0x58>
 8006a22:	462a      	mov	r2, r5
 8006a24:	f000 fcd7 	bl	80073d6 <_realloc_r>
 8006a28:	4606      	mov	r6, r0
 8006a2a:	2800      	cmp	r0, #0
 8006a2c:	d1e2      	bne.n	80069f4 <__ssputs_r+0x70>
 8006a2e:	6921      	ldr	r1, [r4, #16]
 8006a30:	4650      	mov	r0, sl
 8006a32:	f7ff feff 	bl	8006834 <_free_r>
 8006a36:	e7c8      	b.n	80069ca <__ssputs_r+0x46>

08006a38 <_svfiprintf_r>:
 8006a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a3c:	461d      	mov	r5, r3
 8006a3e:	898b      	ldrh	r3, [r1, #12]
 8006a40:	061f      	lsls	r7, r3, #24
 8006a42:	b09d      	sub	sp, #116	; 0x74
 8006a44:	4680      	mov	r8, r0
 8006a46:	460c      	mov	r4, r1
 8006a48:	4616      	mov	r6, r2
 8006a4a:	d50f      	bpl.n	8006a6c <_svfiprintf_r+0x34>
 8006a4c:	690b      	ldr	r3, [r1, #16]
 8006a4e:	b96b      	cbnz	r3, 8006a6c <_svfiprintf_r+0x34>
 8006a50:	2140      	movs	r1, #64	; 0x40
 8006a52:	f7ff ff3d 	bl	80068d0 <_malloc_r>
 8006a56:	6020      	str	r0, [r4, #0]
 8006a58:	6120      	str	r0, [r4, #16]
 8006a5a:	b928      	cbnz	r0, 8006a68 <_svfiprintf_r+0x30>
 8006a5c:	230c      	movs	r3, #12
 8006a5e:	f8c8 3000 	str.w	r3, [r8]
 8006a62:	f04f 30ff 	mov.w	r0, #4294967295
 8006a66:	e0c8      	b.n	8006bfa <_svfiprintf_r+0x1c2>
 8006a68:	2340      	movs	r3, #64	; 0x40
 8006a6a:	6163      	str	r3, [r4, #20]
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	9309      	str	r3, [sp, #36]	; 0x24
 8006a70:	2320      	movs	r3, #32
 8006a72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a76:	2330      	movs	r3, #48	; 0x30
 8006a78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a7c:	9503      	str	r5, [sp, #12]
 8006a7e:	f04f 0b01 	mov.w	fp, #1
 8006a82:	4637      	mov	r7, r6
 8006a84:	463d      	mov	r5, r7
 8006a86:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006a8a:	b10b      	cbz	r3, 8006a90 <_svfiprintf_r+0x58>
 8006a8c:	2b25      	cmp	r3, #37	; 0x25
 8006a8e:	d13e      	bne.n	8006b0e <_svfiprintf_r+0xd6>
 8006a90:	ebb7 0a06 	subs.w	sl, r7, r6
 8006a94:	d00b      	beq.n	8006aae <_svfiprintf_r+0x76>
 8006a96:	4653      	mov	r3, sl
 8006a98:	4632      	mov	r2, r6
 8006a9a:	4621      	mov	r1, r4
 8006a9c:	4640      	mov	r0, r8
 8006a9e:	f7ff ff71 	bl	8006984 <__ssputs_r>
 8006aa2:	3001      	adds	r0, #1
 8006aa4:	f000 80a4 	beq.w	8006bf0 <_svfiprintf_r+0x1b8>
 8006aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aaa:	4453      	add	r3, sl
 8006aac:	9309      	str	r3, [sp, #36]	; 0x24
 8006aae:	783b      	ldrb	r3, [r7, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	f000 809d 	beq.w	8006bf0 <_svfiprintf_r+0x1b8>
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8006abc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ac0:	9304      	str	r3, [sp, #16]
 8006ac2:	9307      	str	r3, [sp, #28]
 8006ac4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ac8:	931a      	str	r3, [sp, #104]	; 0x68
 8006aca:	462f      	mov	r7, r5
 8006acc:	2205      	movs	r2, #5
 8006ace:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006ad2:	4850      	ldr	r0, [pc, #320]	; (8006c14 <_svfiprintf_r+0x1dc>)
 8006ad4:	f7f9 fb84 	bl	80001e0 <memchr>
 8006ad8:	9b04      	ldr	r3, [sp, #16]
 8006ada:	b9d0      	cbnz	r0, 8006b12 <_svfiprintf_r+0xda>
 8006adc:	06d9      	lsls	r1, r3, #27
 8006ade:	bf44      	itt	mi
 8006ae0:	2220      	movmi	r2, #32
 8006ae2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006ae6:	071a      	lsls	r2, r3, #28
 8006ae8:	bf44      	itt	mi
 8006aea:	222b      	movmi	r2, #43	; 0x2b
 8006aec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006af0:	782a      	ldrb	r2, [r5, #0]
 8006af2:	2a2a      	cmp	r2, #42	; 0x2a
 8006af4:	d015      	beq.n	8006b22 <_svfiprintf_r+0xea>
 8006af6:	9a07      	ldr	r2, [sp, #28]
 8006af8:	462f      	mov	r7, r5
 8006afa:	2000      	movs	r0, #0
 8006afc:	250a      	movs	r5, #10
 8006afe:	4639      	mov	r1, r7
 8006b00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b04:	3b30      	subs	r3, #48	; 0x30
 8006b06:	2b09      	cmp	r3, #9
 8006b08:	d94d      	bls.n	8006ba6 <_svfiprintf_r+0x16e>
 8006b0a:	b1b8      	cbz	r0, 8006b3c <_svfiprintf_r+0x104>
 8006b0c:	e00f      	b.n	8006b2e <_svfiprintf_r+0xf6>
 8006b0e:	462f      	mov	r7, r5
 8006b10:	e7b8      	b.n	8006a84 <_svfiprintf_r+0x4c>
 8006b12:	4a40      	ldr	r2, [pc, #256]	; (8006c14 <_svfiprintf_r+0x1dc>)
 8006b14:	1a80      	subs	r0, r0, r2
 8006b16:	fa0b f000 	lsl.w	r0, fp, r0
 8006b1a:	4318      	orrs	r0, r3
 8006b1c:	9004      	str	r0, [sp, #16]
 8006b1e:	463d      	mov	r5, r7
 8006b20:	e7d3      	b.n	8006aca <_svfiprintf_r+0x92>
 8006b22:	9a03      	ldr	r2, [sp, #12]
 8006b24:	1d11      	adds	r1, r2, #4
 8006b26:	6812      	ldr	r2, [r2, #0]
 8006b28:	9103      	str	r1, [sp, #12]
 8006b2a:	2a00      	cmp	r2, #0
 8006b2c:	db01      	blt.n	8006b32 <_svfiprintf_r+0xfa>
 8006b2e:	9207      	str	r2, [sp, #28]
 8006b30:	e004      	b.n	8006b3c <_svfiprintf_r+0x104>
 8006b32:	4252      	negs	r2, r2
 8006b34:	f043 0302 	orr.w	r3, r3, #2
 8006b38:	9207      	str	r2, [sp, #28]
 8006b3a:	9304      	str	r3, [sp, #16]
 8006b3c:	783b      	ldrb	r3, [r7, #0]
 8006b3e:	2b2e      	cmp	r3, #46	; 0x2e
 8006b40:	d10c      	bne.n	8006b5c <_svfiprintf_r+0x124>
 8006b42:	787b      	ldrb	r3, [r7, #1]
 8006b44:	2b2a      	cmp	r3, #42	; 0x2a
 8006b46:	d133      	bne.n	8006bb0 <_svfiprintf_r+0x178>
 8006b48:	9b03      	ldr	r3, [sp, #12]
 8006b4a:	1d1a      	adds	r2, r3, #4
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	9203      	str	r2, [sp, #12]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	bfb8      	it	lt
 8006b54:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b58:	3702      	adds	r7, #2
 8006b5a:	9305      	str	r3, [sp, #20]
 8006b5c:	4d2e      	ldr	r5, [pc, #184]	; (8006c18 <_svfiprintf_r+0x1e0>)
 8006b5e:	7839      	ldrb	r1, [r7, #0]
 8006b60:	2203      	movs	r2, #3
 8006b62:	4628      	mov	r0, r5
 8006b64:	f7f9 fb3c 	bl	80001e0 <memchr>
 8006b68:	b138      	cbz	r0, 8006b7a <_svfiprintf_r+0x142>
 8006b6a:	2340      	movs	r3, #64	; 0x40
 8006b6c:	1b40      	subs	r0, r0, r5
 8006b6e:	fa03 f000 	lsl.w	r0, r3, r0
 8006b72:	9b04      	ldr	r3, [sp, #16]
 8006b74:	4303      	orrs	r3, r0
 8006b76:	3701      	adds	r7, #1
 8006b78:	9304      	str	r3, [sp, #16]
 8006b7a:	7839      	ldrb	r1, [r7, #0]
 8006b7c:	4827      	ldr	r0, [pc, #156]	; (8006c1c <_svfiprintf_r+0x1e4>)
 8006b7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b82:	2206      	movs	r2, #6
 8006b84:	1c7e      	adds	r6, r7, #1
 8006b86:	f7f9 fb2b 	bl	80001e0 <memchr>
 8006b8a:	2800      	cmp	r0, #0
 8006b8c:	d038      	beq.n	8006c00 <_svfiprintf_r+0x1c8>
 8006b8e:	4b24      	ldr	r3, [pc, #144]	; (8006c20 <_svfiprintf_r+0x1e8>)
 8006b90:	bb13      	cbnz	r3, 8006bd8 <_svfiprintf_r+0x1a0>
 8006b92:	9b03      	ldr	r3, [sp, #12]
 8006b94:	3307      	adds	r3, #7
 8006b96:	f023 0307 	bic.w	r3, r3, #7
 8006b9a:	3308      	adds	r3, #8
 8006b9c:	9303      	str	r3, [sp, #12]
 8006b9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ba0:	444b      	add	r3, r9
 8006ba2:	9309      	str	r3, [sp, #36]	; 0x24
 8006ba4:	e76d      	b.n	8006a82 <_svfiprintf_r+0x4a>
 8006ba6:	fb05 3202 	mla	r2, r5, r2, r3
 8006baa:	2001      	movs	r0, #1
 8006bac:	460f      	mov	r7, r1
 8006bae:	e7a6      	b.n	8006afe <_svfiprintf_r+0xc6>
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	3701      	adds	r7, #1
 8006bb4:	9305      	str	r3, [sp, #20]
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	250a      	movs	r5, #10
 8006bba:	4638      	mov	r0, r7
 8006bbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bc0:	3a30      	subs	r2, #48	; 0x30
 8006bc2:	2a09      	cmp	r2, #9
 8006bc4:	d903      	bls.n	8006bce <_svfiprintf_r+0x196>
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d0c8      	beq.n	8006b5c <_svfiprintf_r+0x124>
 8006bca:	9105      	str	r1, [sp, #20]
 8006bcc:	e7c6      	b.n	8006b5c <_svfiprintf_r+0x124>
 8006bce:	fb05 2101 	mla	r1, r5, r1, r2
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	4607      	mov	r7, r0
 8006bd6:	e7f0      	b.n	8006bba <_svfiprintf_r+0x182>
 8006bd8:	ab03      	add	r3, sp, #12
 8006bda:	9300      	str	r3, [sp, #0]
 8006bdc:	4622      	mov	r2, r4
 8006bde:	4b11      	ldr	r3, [pc, #68]	; (8006c24 <_svfiprintf_r+0x1ec>)
 8006be0:	a904      	add	r1, sp, #16
 8006be2:	4640      	mov	r0, r8
 8006be4:	f7fc fb14 	bl	8003210 <_printf_float>
 8006be8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006bec:	4681      	mov	r9, r0
 8006bee:	d1d6      	bne.n	8006b9e <_svfiprintf_r+0x166>
 8006bf0:	89a3      	ldrh	r3, [r4, #12]
 8006bf2:	065b      	lsls	r3, r3, #25
 8006bf4:	f53f af35 	bmi.w	8006a62 <_svfiprintf_r+0x2a>
 8006bf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bfa:	b01d      	add	sp, #116	; 0x74
 8006bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c00:	ab03      	add	r3, sp, #12
 8006c02:	9300      	str	r3, [sp, #0]
 8006c04:	4622      	mov	r2, r4
 8006c06:	4b07      	ldr	r3, [pc, #28]	; (8006c24 <_svfiprintf_r+0x1ec>)
 8006c08:	a904      	add	r1, sp, #16
 8006c0a:	4640      	mov	r0, r8
 8006c0c:	f7fc fdb6 	bl	800377c <_printf_i>
 8006c10:	e7ea      	b.n	8006be8 <_svfiprintf_r+0x1b0>
 8006c12:	bf00      	nop
 8006c14:	080076e4 	.word	0x080076e4
 8006c18:	080076ea 	.word	0x080076ea
 8006c1c:	080076ee 	.word	0x080076ee
 8006c20:	08003211 	.word	0x08003211
 8006c24:	08006985 	.word	0x08006985

08006c28 <__sfputc_r>:
 8006c28:	6893      	ldr	r3, [r2, #8]
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	b410      	push	{r4}
 8006c30:	6093      	str	r3, [r2, #8]
 8006c32:	da08      	bge.n	8006c46 <__sfputc_r+0x1e>
 8006c34:	6994      	ldr	r4, [r2, #24]
 8006c36:	42a3      	cmp	r3, r4
 8006c38:	db01      	blt.n	8006c3e <__sfputc_r+0x16>
 8006c3a:	290a      	cmp	r1, #10
 8006c3c:	d103      	bne.n	8006c46 <__sfputc_r+0x1e>
 8006c3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c42:	f000 b997 	b.w	8006f74 <__swbuf_r>
 8006c46:	6813      	ldr	r3, [r2, #0]
 8006c48:	1c58      	adds	r0, r3, #1
 8006c4a:	6010      	str	r0, [r2, #0]
 8006c4c:	7019      	strb	r1, [r3, #0]
 8006c4e:	4608      	mov	r0, r1
 8006c50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c54:	4770      	bx	lr

08006c56 <__sfputs_r>:
 8006c56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c58:	4606      	mov	r6, r0
 8006c5a:	460f      	mov	r7, r1
 8006c5c:	4614      	mov	r4, r2
 8006c5e:	18d5      	adds	r5, r2, r3
 8006c60:	42ac      	cmp	r4, r5
 8006c62:	d101      	bne.n	8006c68 <__sfputs_r+0x12>
 8006c64:	2000      	movs	r0, #0
 8006c66:	e007      	b.n	8006c78 <__sfputs_r+0x22>
 8006c68:	463a      	mov	r2, r7
 8006c6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c6e:	4630      	mov	r0, r6
 8006c70:	f7ff ffda 	bl	8006c28 <__sfputc_r>
 8006c74:	1c43      	adds	r3, r0, #1
 8006c76:	d1f3      	bne.n	8006c60 <__sfputs_r+0xa>
 8006c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006c7c <_vfiprintf_r>:
 8006c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c80:	460c      	mov	r4, r1
 8006c82:	b09d      	sub	sp, #116	; 0x74
 8006c84:	4617      	mov	r7, r2
 8006c86:	461d      	mov	r5, r3
 8006c88:	4606      	mov	r6, r0
 8006c8a:	b118      	cbz	r0, 8006c94 <_vfiprintf_r+0x18>
 8006c8c:	6983      	ldr	r3, [r0, #24]
 8006c8e:	b90b      	cbnz	r3, 8006c94 <_vfiprintf_r+0x18>
 8006c90:	f7fe fdda 	bl	8005848 <__sinit>
 8006c94:	4b7c      	ldr	r3, [pc, #496]	; (8006e88 <_vfiprintf_r+0x20c>)
 8006c96:	429c      	cmp	r4, r3
 8006c98:	d158      	bne.n	8006d4c <_vfiprintf_r+0xd0>
 8006c9a:	6874      	ldr	r4, [r6, #4]
 8006c9c:	89a3      	ldrh	r3, [r4, #12]
 8006c9e:	0718      	lsls	r0, r3, #28
 8006ca0:	d55e      	bpl.n	8006d60 <_vfiprintf_r+0xe4>
 8006ca2:	6923      	ldr	r3, [r4, #16]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d05b      	beq.n	8006d60 <_vfiprintf_r+0xe4>
 8006ca8:	2300      	movs	r3, #0
 8006caa:	9309      	str	r3, [sp, #36]	; 0x24
 8006cac:	2320      	movs	r3, #32
 8006cae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006cb2:	2330      	movs	r3, #48	; 0x30
 8006cb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006cb8:	9503      	str	r5, [sp, #12]
 8006cba:	f04f 0b01 	mov.w	fp, #1
 8006cbe:	46b8      	mov	r8, r7
 8006cc0:	4645      	mov	r5, r8
 8006cc2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006cc6:	b10b      	cbz	r3, 8006ccc <_vfiprintf_r+0x50>
 8006cc8:	2b25      	cmp	r3, #37	; 0x25
 8006cca:	d154      	bne.n	8006d76 <_vfiprintf_r+0xfa>
 8006ccc:	ebb8 0a07 	subs.w	sl, r8, r7
 8006cd0:	d00b      	beq.n	8006cea <_vfiprintf_r+0x6e>
 8006cd2:	4653      	mov	r3, sl
 8006cd4:	463a      	mov	r2, r7
 8006cd6:	4621      	mov	r1, r4
 8006cd8:	4630      	mov	r0, r6
 8006cda:	f7ff ffbc 	bl	8006c56 <__sfputs_r>
 8006cde:	3001      	adds	r0, #1
 8006ce0:	f000 80c2 	beq.w	8006e68 <_vfiprintf_r+0x1ec>
 8006ce4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ce6:	4453      	add	r3, sl
 8006ce8:	9309      	str	r3, [sp, #36]	; 0x24
 8006cea:	f898 3000 	ldrb.w	r3, [r8]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	f000 80ba 	beq.w	8006e68 <_vfiprintf_r+0x1ec>
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8006cfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cfe:	9304      	str	r3, [sp, #16]
 8006d00:	9307      	str	r3, [sp, #28]
 8006d02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d06:	931a      	str	r3, [sp, #104]	; 0x68
 8006d08:	46a8      	mov	r8, r5
 8006d0a:	2205      	movs	r2, #5
 8006d0c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006d10:	485e      	ldr	r0, [pc, #376]	; (8006e8c <_vfiprintf_r+0x210>)
 8006d12:	f7f9 fa65 	bl	80001e0 <memchr>
 8006d16:	9b04      	ldr	r3, [sp, #16]
 8006d18:	bb78      	cbnz	r0, 8006d7a <_vfiprintf_r+0xfe>
 8006d1a:	06d9      	lsls	r1, r3, #27
 8006d1c:	bf44      	itt	mi
 8006d1e:	2220      	movmi	r2, #32
 8006d20:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006d24:	071a      	lsls	r2, r3, #28
 8006d26:	bf44      	itt	mi
 8006d28:	222b      	movmi	r2, #43	; 0x2b
 8006d2a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006d2e:	782a      	ldrb	r2, [r5, #0]
 8006d30:	2a2a      	cmp	r2, #42	; 0x2a
 8006d32:	d02a      	beq.n	8006d8a <_vfiprintf_r+0x10e>
 8006d34:	9a07      	ldr	r2, [sp, #28]
 8006d36:	46a8      	mov	r8, r5
 8006d38:	2000      	movs	r0, #0
 8006d3a:	250a      	movs	r5, #10
 8006d3c:	4641      	mov	r1, r8
 8006d3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d42:	3b30      	subs	r3, #48	; 0x30
 8006d44:	2b09      	cmp	r3, #9
 8006d46:	d969      	bls.n	8006e1c <_vfiprintf_r+0x1a0>
 8006d48:	b360      	cbz	r0, 8006da4 <_vfiprintf_r+0x128>
 8006d4a:	e024      	b.n	8006d96 <_vfiprintf_r+0x11a>
 8006d4c:	4b50      	ldr	r3, [pc, #320]	; (8006e90 <_vfiprintf_r+0x214>)
 8006d4e:	429c      	cmp	r4, r3
 8006d50:	d101      	bne.n	8006d56 <_vfiprintf_r+0xda>
 8006d52:	68b4      	ldr	r4, [r6, #8]
 8006d54:	e7a2      	b.n	8006c9c <_vfiprintf_r+0x20>
 8006d56:	4b4f      	ldr	r3, [pc, #316]	; (8006e94 <_vfiprintf_r+0x218>)
 8006d58:	429c      	cmp	r4, r3
 8006d5a:	bf08      	it	eq
 8006d5c:	68f4      	ldreq	r4, [r6, #12]
 8006d5e:	e79d      	b.n	8006c9c <_vfiprintf_r+0x20>
 8006d60:	4621      	mov	r1, r4
 8006d62:	4630      	mov	r0, r6
 8006d64:	f000 f978 	bl	8007058 <__swsetup_r>
 8006d68:	2800      	cmp	r0, #0
 8006d6a:	d09d      	beq.n	8006ca8 <_vfiprintf_r+0x2c>
 8006d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d70:	b01d      	add	sp, #116	; 0x74
 8006d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d76:	46a8      	mov	r8, r5
 8006d78:	e7a2      	b.n	8006cc0 <_vfiprintf_r+0x44>
 8006d7a:	4a44      	ldr	r2, [pc, #272]	; (8006e8c <_vfiprintf_r+0x210>)
 8006d7c:	1a80      	subs	r0, r0, r2
 8006d7e:	fa0b f000 	lsl.w	r0, fp, r0
 8006d82:	4318      	orrs	r0, r3
 8006d84:	9004      	str	r0, [sp, #16]
 8006d86:	4645      	mov	r5, r8
 8006d88:	e7be      	b.n	8006d08 <_vfiprintf_r+0x8c>
 8006d8a:	9a03      	ldr	r2, [sp, #12]
 8006d8c:	1d11      	adds	r1, r2, #4
 8006d8e:	6812      	ldr	r2, [r2, #0]
 8006d90:	9103      	str	r1, [sp, #12]
 8006d92:	2a00      	cmp	r2, #0
 8006d94:	db01      	blt.n	8006d9a <_vfiprintf_r+0x11e>
 8006d96:	9207      	str	r2, [sp, #28]
 8006d98:	e004      	b.n	8006da4 <_vfiprintf_r+0x128>
 8006d9a:	4252      	negs	r2, r2
 8006d9c:	f043 0302 	orr.w	r3, r3, #2
 8006da0:	9207      	str	r2, [sp, #28]
 8006da2:	9304      	str	r3, [sp, #16]
 8006da4:	f898 3000 	ldrb.w	r3, [r8]
 8006da8:	2b2e      	cmp	r3, #46	; 0x2e
 8006daa:	d10e      	bne.n	8006dca <_vfiprintf_r+0x14e>
 8006dac:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006db0:	2b2a      	cmp	r3, #42	; 0x2a
 8006db2:	d138      	bne.n	8006e26 <_vfiprintf_r+0x1aa>
 8006db4:	9b03      	ldr	r3, [sp, #12]
 8006db6:	1d1a      	adds	r2, r3, #4
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	9203      	str	r2, [sp, #12]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	bfb8      	it	lt
 8006dc0:	f04f 33ff 	movlt.w	r3, #4294967295
 8006dc4:	f108 0802 	add.w	r8, r8, #2
 8006dc8:	9305      	str	r3, [sp, #20]
 8006dca:	4d33      	ldr	r5, [pc, #204]	; (8006e98 <_vfiprintf_r+0x21c>)
 8006dcc:	f898 1000 	ldrb.w	r1, [r8]
 8006dd0:	2203      	movs	r2, #3
 8006dd2:	4628      	mov	r0, r5
 8006dd4:	f7f9 fa04 	bl	80001e0 <memchr>
 8006dd8:	b140      	cbz	r0, 8006dec <_vfiprintf_r+0x170>
 8006dda:	2340      	movs	r3, #64	; 0x40
 8006ddc:	1b40      	subs	r0, r0, r5
 8006dde:	fa03 f000 	lsl.w	r0, r3, r0
 8006de2:	9b04      	ldr	r3, [sp, #16]
 8006de4:	4303      	orrs	r3, r0
 8006de6:	f108 0801 	add.w	r8, r8, #1
 8006dea:	9304      	str	r3, [sp, #16]
 8006dec:	f898 1000 	ldrb.w	r1, [r8]
 8006df0:	482a      	ldr	r0, [pc, #168]	; (8006e9c <_vfiprintf_r+0x220>)
 8006df2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006df6:	2206      	movs	r2, #6
 8006df8:	f108 0701 	add.w	r7, r8, #1
 8006dfc:	f7f9 f9f0 	bl	80001e0 <memchr>
 8006e00:	2800      	cmp	r0, #0
 8006e02:	d037      	beq.n	8006e74 <_vfiprintf_r+0x1f8>
 8006e04:	4b26      	ldr	r3, [pc, #152]	; (8006ea0 <_vfiprintf_r+0x224>)
 8006e06:	bb1b      	cbnz	r3, 8006e50 <_vfiprintf_r+0x1d4>
 8006e08:	9b03      	ldr	r3, [sp, #12]
 8006e0a:	3307      	adds	r3, #7
 8006e0c:	f023 0307 	bic.w	r3, r3, #7
 8006e10:	3308      	adds	r3, #8
 8006e12:	9303      	str	r3, [sp, #12]
 8006e14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e16:	444b      	add	r3, r9
 8006e18:	9309      	str	r3, [sp, #36]	; 0x24
 8006e1a:	e750      	b.n	8006cbe <_vfiprintf_r+0x42>
 8006e1c:	fb05 3202 	mla	r2, r5, r2, r3
 8006e20:	2001      	movs	r0, #1
 8006e22:	4688      	mov	r8, r1
 8006e24:	e78a      	b.n	8006d3c <_vfiprintf_r+0xc0>
 8006e26:	2300      	movs	r3, #0
 8006e28:	f108 0801 	add.w	r8, r8, #1
 8006e2c:	9305      	str	r3, [sp, #20]
 8006e2e:	4619      	mov	r1, r3
 8006e30:	250a      	movs	r5, #10
 8006e32:	4640      	mov	r0, r8
 8006e34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e38:	3a30      	subs	r2, #48	; 0x30
 8006e3a:	2a09      	cmp	r2, #9
 8006e3c:	d903      	bls.n	8006e46 <_vfiprintf_r+0x1ca>
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d0c3      	beq.n	8006dca <_vfiprintf_r+0x14e>
 8006e42:	9105      	str	r1, [sp, #20]
 8006e44:	e7c1      	b.n	8006dca <_vfiprintf_r+0x14e>
 8006e46:	fb05 2101 	mla	r1, r5, r1, r2
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	4680      	mov	r8, r0
 8006e4e:	e7f0      	b.n	8006e32 <_vfiprintf_r+0x1b6>
 8006e50:	ab03      	add	r3, sp, #12
 8006e52:	9300      	str	r3, [sp, #0]
 8006e54:	4622      	mov	r2, r4
 8006e56:	4b13      	ldr	r3, [pc, #76]	; (8006ea4 <_vfiprintf_r+0x228>)
 8006e58:	a904      	add	r1, sp, #16
 8006e5a:	4630      	mov	r0, r6
 8006e5c:	f7fc f9d8 	bl	8003210 <_printf_float>
 8006e60:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006e64:	4681      	mov	r9, r0
 8006e66:	d1d5      	bne.n	8006e14 <_vfiprintf_r+0x198>
 8006e68:	89a3      	ldrh	r3, [r4, #12]
 8006e6a:	065b      	lsls	r3, r3, #25
 8006e6c:	f53f af7e 	bmi.w	8006d6c <_vfiprintf_r+0xf0>
 8006e70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e72:	e77d      	b.n	8006d70 <_vfiprintf_r+0xf4>
 8006e74:	ab03      	add	r3, sp, #12
 8006e76:	9300      	str	r3, [sp, #0]
 8006e78:	4622      	mov	r2, r4
 8006e7a:	4b0a      	ldr	r3, [pc, #40]	; (8006ea4 <_vfiprintf_r+0x228>)
 8006e7c:	a904      	add	r1, sp, #16
 8006e7e:	4630      	mov	r0, r6
 8006e80:	f7fc fc7c 	bl	800377c <_printf_i>
 8006e84:	e7ec      	b.n	8006e60 <_vfiprintf_r+0x1e4>
 8006e86:	bf00      	nop
 8006e88:	08007598 	.word	0x08007598
 8006e8c:	080076e4 	.word	0x080076e4
 8006e90:	080075b8 	.word	0x080075b8
 8006e94:	08007578 	.word	0x08007578
 8006e98:	080076ea 	.word	0x080076ea
 8006e9c:	080076ee 	.word	0x080076ee
 8006ea0:	08003211 	.word	0x08003211
 8006ea4:	08006c57 	.word	0x08006c57

08006ea8 <_sbrk_r>:
 8006ea8:	b538      	push	{r3, r4, r5, lr}
 8006eaa:	4c06      	ldr	r4, [pc, #24]	; (8006ec4 <_sbrk_r+0x1c>)
 8006eac:	2300      	movs	r3, #0
 8006eae:	4605      	mov	r5, r0
 8006eb0:	4608      	mov	r0, r1
 8006eb2:	6023      	str	r3, [r4, #0]
 8006eb4:	f7fa fa7a 	bl	80013ac <_sbrk>
 8006eb8:	1c43      	adds	r3, r0, #1
 8006eba:	d102      	bne.n	8006ec2 <_sbrk_r+0x1a>
 8006ebc:	6823      	ldr	r3, [r4, #0]
 8006ebe:	b103      	cbz	r3, 8006ec2 <_sbrk_r+0x1a>
 8006ec0:	602b      	str	r3, [r5, #0]
 8006ec2:	bd38      	pop	{r3, r4, r5, pc}
 8006ec4:	2000024c 	.word	0x2000024c

08006ec8 <__sread>:
 8006ec8:	b510      	push	{r4, lr}
 8006eca:	460c      	mov	r4, r1
 8006ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ed0:	f000 faa8 	bl	8007424 <_read_r>
 8006ed4:	2800      	cmp	r0, #0
 8006ed6:	bfab      	itete	ge
 8006ed8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006eda:	89a3      	ldrhlt	r3, [r4, #12]
 8006edc:	181b      	addge	r3, r3, r0
 8006ede:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006ee2:	bfac      	ite	ge
 8006ee4:	6563      	strge	r3, [r4, #84]	; 0x54
 8006ee6:	81a3      	strhlt	r3, [r4, #12]
 8006ee8:	bd10      	pop	{r4, pc}

08006eea <__swrite>:
 8006eea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eee:	461f      	mov	r7, r3
 8006ef0:	898b      	ldrh	r3, [r1, #12]
 8006ef2:	05db      	lsls	r3, r3, #23
 8006ef4:	4605      	mov	r5, r0
 8006ef6:	460c      	mov	r4, r1
 8006ef8:	4616      	mov	r6, r2
 8006efa:	d505      	bpl.n	8006f08 <__swrite+0x1e>
 8006efc:	2302      	movs	r3, #2
 8006efe:	2200      	movs	r2, #0
 8006f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f04:	f000 f9d6 	bl	80072b4 <_lseek_r>
 8006f08:	89a3      	ldrh	r3, [r4, #12]
 8006f0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f12:	81a3      	strh	r3, [r4, #12]
 8006f14:	4632      	mov	r2, r6
 8006f16:	463b      	mov	r3, r7
 8006f18:	4628      	mov	r0, r5
 8006f1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f1e:	f000 b889 	b.w	8007034 <_write_r>

08006f22 <__sseek>:
 8006f22:	b510      	push	{r4, lr}
 8006f24:	460c      	mov	r4, r1
 8006f26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f2a:	f000 f9c3 	bl	80072b4 <_lseek_r>
 8006f2e:	1c43      	adds	r3, r0, #1
 8006f30:	89a3      	ldrh	r3, [r4, #12]
 8006f32:	bf15      	itete	ne
 8006f34:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f3e:	81a3      	strheq	r3, [r4, #12]
 8006f40:	bf18      	it	ne
 8006f42:	81a3      	strhne	r3, [r4, #12]
 8006f44:	bd10      	pop	{r4, pc}

08006f46 <__sclose>:
 8006f46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f4a:	f000 b8f3 	b.w	8007134 <_close_r>

08006f4e <strncmp>:
 8006f4e:	b510      	push	{r4, lr}
 8006f50:	b16a      	cbz	r2, 8006f6e <strncmp+0x20>
 8006f52:	3901      	subs	r1, #1
 8006f54:	1884      	adds	r4, r0, r2
 8006f56:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006f5a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d103      	bne.n	8006f6a <strncmp+0x1c>
 8006f62:	42a0      	cmp	r0, r4
 8006f64:	d001      	beq.n	8006f6a <strncmp+0x1c>
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1f5      	bne.n	8006f56 <strncmp+0x8>
 8006f6a:	1a98      	subs	r0, r3, r2
 8006f6c:	bd10      	pop	{r4, pc}
 8006f6e:	4610      	mov	r0, r2
 8006f70:	e7fc      	b.n	8006f6c <strncmp+0x1e>
	...

08006f74 <__swbuf_r>:
 8006f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f76:	460e      	mov	r6, r1
 8006f78:	4614      	mov	r4, r2
 8006f7a:	4605      	mov	r5, r0
 8006f7c:	b118      	cbz	r0, 8006f86 <__swbuf_r+0x12>
 8006f7e:	6983      	ldr	r3, [r0, #24]
 8006f80:	b90b      	cbnz	r3, 8006f86 <__swbuf_r+0x12>
 8006f82:	f7fe fc61 	bl	8005848 <__sinit>
 8006f86:	4b21      	ldr	r3, [pc, #132]	; (800700c <__swbuf_r+0x98>)
 8006f88:	429c      	cmp	r4, r3
 8006f8a:	d12a      	bne.n	8006fe2 <__swbuf_r+0x6e>
 8006f8c:	686c      	ldr	r4, [r5, #4]
 8006f8e:	69a3      	ldr	r3, [r4, #24]
 8006f90:	60a3      	str	r3, [r4, #8]
 8006f92:	89a3      	ldrh	r3, [r4, #12]
 8006f94:	071a      	lsls	r2, r3, #28
 8006f96:	d52e      	bpl.n	8006ff6 <__swbuf_r+0x82>
 8006f98:	6923      	ldr	r3, [r4, #16]
 8006f9a:	b363      	cbz	r3, 8006ff6 <__swbuf_r+0x82>
 8006f9c:	6923      	ldr	r3, [r4, #16]
 8006f9e:	6820      	ldr	r0, [r4, #0]
 8006fa0:	1ac0      	subs	r0, r0, r3
 8006fa2:	6963      	ldr	r3, [r4, #20]
 8006fa4:	b2f6      	uxtb	r6, r6
 8006fa6:	4283      	cmp	r3, r0
 8006fa8:	4637      	mov	r7, r6
 8006faa:	dc04      	bgt.n	8006fb6 <__swbuf_r+0x42>
 8006fac:	4621      	mov	r1, r4
 8006fae:	4628      	mov	r0, r5
 8006fb0:	f000 f956 	bl	8007260 <_fflush_r>
 8006fb4:	bb28      	cbnz	r0, 8007002 <__swbuf_r+0x8e>
 8006fb6:	68a3      	ldr	r3, [r4, #8]
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	60a3      	str	r3, [r4, #8]
 8006fbc:	6823      	ldr	r3, [r4, #0]
 8006fbe:	1c5a      	adds	r2, r3, #1
 8006fc0:	6022      	str	r2, [r4, #0]
 8006fc2:	701e      	strb	r6, [r3, #0]
 8006fc4:	6963      	ldr	r3, [r4, #20]
 8006fc6:	3001      	adds	r0, #1
 8006fc8:	4283      	cmp	r3, r0
 8006fca:	d004      	beq.n	8006fd6 <__swbuf_r+0x62>
 8006fcc:	89a3      	ldrh	r3, [r4, #12]
 8006fce:	07db      	lsls	r3, r3, #31
 8006fd0:	d519      	bpl.n	8007006 <__swbuf_r+0x92>
 8006fd2:	2e0a      	cmp	r6, #10
 8006fd4:	d117      	bne.n	8007006 <__swbuf_r+0x92>
 8006fd6:	4621      	mov	r1, r4
 8006fd8:	4628      	mov	r0, r5
 8006fda:	f000 f941 	bl	8007260 <_fflush_r>
 8006fde:	b190      	cbz	r0, 8007006 <__swbuf_r+0x92>
 8006fe0:	e00f      	b.n	8007002 <__swbuf_r+0x8e>
 8006fe2:	4b0b      	ldr	r3, [pc, #44]	; (8007010 <__swbuf_r+0x9c>)
 8006fe4:	429c      	cmp	r4, r3
 8006fe6:	d101      	bne.n	8006fec <__swbuf_r+0x78>
 8006fe8:	68ac      	ldr	r4, [r5, #8]
 8006fea:	e7d0      	b.n	8006f8e <__swbuf_r+0x1a>
 8006fec:	4b09      	ldr	r3, [pc, #36]	; (8007014 <__swbuf_r+0xa0>)
 8006fee:	429c      	cmp	r4, r3
 8006ff0:	bf08      	it	eq
 8006ff2:	68ec      	ldreq	r4, [r5, #12]
 8006ff4:	e7cb      	b.n	8006f8e <__swbuf_r+0x1a>
 8006ff6:	4621      	mov	r1, r4
 8006ff8:	4628      	mov	r0, r5
 8006ffa:	f000 f82d 	bl	8007058 <__swsetup_r>
 8006ffe:	2800      	cmp	r0, #0
 8007000:	d0cc      	beq.n	8006f9c <__swbuf_r+0x28>
 8007002:	f04f 37ff 	mov.w	r7, #4294967295
 8007006:	4638      	mov	r0, r7
 8007008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800700a:	bf00      	nop
 800700c:	08007598 	.word	0x08007598
 8007010:	080075b8 	.word	0x080075b8
 8007014:	08007578 	.word	0x08007578

08007018 <__ascii_wctomb>:
 8007018:	b149      	cbz	r1, 800702e <__ascii_wctomb+0x16>
 800701a:	2aff      	cmp	r2, #255	; 0xff
 800701c:	bf85      	ittet	hi
 800701e:	238a      	movhi	r3, #138	; 0x8a
 8007020:	6003      	strhi	r3, [r0, #0]
 8007022:	700a      	strbls	r2, [r1, #0]
 8007024:	f04f 30ff 	movhi.w	r0, #4294967295
 8007028:	bf98      	it	ls
 800702a:	2001      	movls	r0, #1
 800702c:	4770      	bx	lr
 800702e:	4608      	mov	r0, r1
 8007030:	4770      	bx	lr
	...

08007034 <_write_r>:
 8007034:	b538      	push	{r3, r4, r5, lr}
 8007036:	4c07      	ldr	r4, [pc, #28]	; (8007054 <_write_r+0x20>)
 8007038:	4605      	mov	r5, r0
 800703a:	4608      	mov	r0, r1
 800703c:	4611      	mov	r1, r2
 800703e:	2200      	movs	r2, #0
 8007040:	6022      	str	r2, [r4, #0]
 8007042:	461a      	mov	r2, r3
 8007044:	f7fa f8e4 	bl	8001210 <_write>
 8007048:	1c43      	adds	r3, r0, #1
 800704a:	d102      	bne.n	8007052 <_write_r+0x1e>
 800704c:	6823      	ldr	r3, [r4, #0]
 800704e:	b103      	cbz	r3, 8007052 <_write_r+0x1e>
 8007050:	602b      	str	r3, [r5, #0]
 8007052:	bd38      	pop	{r3, r4, r5, pc}
 8007054:	2000024c 	.word	0x2000024c

08007058 <__swsetup_r>:
 8007058:	4b32      	ldr	r3, [pc, #200]	; (8007124 <__swsetup_r+0xcc>)
 800705a:	b570      	push	{r4, r5, r6, lr}
 800705c:	681d      	ldr	r5, [r3, #0]
 800705e:	4606      	mov	r6, r0
 8007060:	460c      	mov	r4, r1
 8007062:	b125      	cbz	r5, 800706e <__swsetup_r+0x16>
 8007064:	69ab      	ldr	r3, [r5, #24]
 8007066:	b913      	cbnz	r3, 800706e <__swsetup_r+0x16>
 8007068:	4628      	mov	r0, r5
 800706a:	f7fe fbed 	bl	8005848 <__sinit>
 800706e:	4b2e      	ldr	r3, [pc, #184]	; (8007128 <__swsetup_r+0xd0>)
 8007070:	429c      	cmp	r4, r3
 8007072:	d10f      	bne.n	8007094 <__swsetup_r+0x3c>
 8007074:	686c      	ldr	r4, [r5, #4]
 8007076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800707a:	b29a      	uxth	r2, r3
 800707c:	0715      	lsls	r5, r2, #28
 800707e:	d42c      	bmi.n	80070da <__swsetup_r+0x82>
 8007080:	06d0      	lsls	r0, r2, #27
 8007082:	d411      	bmi.n	80070a8 <__swsetup_r+0x50>
 8007084:	2209      	movs	r2, #9
 8007086:	6032      	str	r2, [r6, #0]
 8007088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800708c:	81a3      	strh	r3, [r4, #12]
 800708e:	f04f 30ff 	mov.w	r0, #4294967295
 8007092:	e03e      	b.n	8007112 <__swsetup_r+0xba>
 8007094:	4b25      	ldr	r3, [pc, #148]	; (800712c <__swsetup_r+0xd4>)
 8007096:	429c      	cmp	r4, r3
 8007098:	d101      	bne.n	800709e <__swsetup_r+0x46>
 800709a:	68ac      	ldr	r4, [r5, #8]
 800709c:	e7eb      	b.n	8007076 <__swsetup_r+0x1e>
 800709e:	4b24      	ldr	r3, [pc, #144]	; (8007130 <__swsetup_r+0xd8>)
 80070a0:	429c      	cmp	r4, r3
 80070a2:	bf08      	it	eq
 80070a4:	68ec      	ldreq	r4, [r5, #12]
 80070a6:	e7e6      	b.n	8007076 <__swsetup_r+0x1e>
 80070a8:	0751      	lsls	r1, r2, #29
 80070aa:	d512      	bpl.n	80070d2 <__swsetup_r+0x7a>
 80070ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070ae:	b141      	cbz	r1, 80070c2 <__swsetup_r+0x6a>
 80070b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070b4:	4299      	cmp	r1, r3
 80070b6:	d002      	beq.n	80070be <__swsetup_r+0x66>
 80070b8:	4630      	mov	r0, r6
 80070ba:	f7ff fbbb 	bl	8006834 <_free_r>
 80070be:	2300      	movs	r3, #0
 80070c0:	6363      	str	r3, [r4, #52]	; 0x34
 80070c2:	89a3      	ldrh	r3, [r4, #12]
 80070c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80070c8:	81a3      	strh	r3, [r4, #12]
 80070ca:	2300      	movs	r3, #0
 80070cc:	6063      	str	r3, [r4, #4]
 80070ce:	6923      	ldr	r3, [r4, #16]
 80070d0:	6023      	str	r3, [r4, #0]
 80070d2:	89a3      	ldrh	r3, [r4, #12]
 80070d4:	f043 0308 	orr.w	r3, r3, #8
 80070d8:	81a3      	strh	r3, [r4, #12]
 80070da:	6923      	ldr	r3, [r4, #16]
 80070dc:	b94b      	cbnz	r3, 80070f2 <__swsetup_r+0x9a>
 80070de:	89a3      	ldrh	r3, [r4, #12]
 80070e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80070e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070e8:	d003      	beq.n	80070f2 <__swsetup_r+0x9a>
 80070ea:	4621      	mov	r1, r4
 80070ec:	4630      	mov	r0, r6
 80070ee:	f000 f917 	bl	8007320 <__smakebuf_r>
 80070f2:	89a2      	ldrh	r2, [r4, #12]
 80070f4:	f012 0301 	ands.w	r3, r2, #1
 80070f8:	d00c      	beq.n	8007114 <__swsetup_r+0xbc>
 80070fa:	2300      	movs	r3, #0
 80070fc:	60a3      	str	r3, [r4, #8]
 80070fe:	6963      	ldr	r3, [r4, #20]
 8007100:	425b      	negs	r3, r3
 8007102:	61a3      	str	r3, [r4, #24]
 8007104:	6923      	ldr	r3, [r4, #16]
 8007106:	b953      	cbnz	r3, 800711e <__swsetup_r+0xc6>
 8007108:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800710c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007110:	d1ba      	bne.n	8007088 <__swsetup_r+0x30>
 8007112:	bd70      	pop	{r4, r5, r6, pc}
 8007114:	0792      	lsls	r2, r2, #30
 8007116:	bf58      	it	pl
 8007118:	6963      	ldrpl	r3, [r4, #20]
 800711a:	60a3      	str	r3, [r4, #8]
 800711c:	e7f2      	b.n	8007104 <__swsetup_r+0xac>
 800711e:	2000      	movs	r0, #0
 8007120:	e7f7      	b.n	8007112 <__swsetup_r+0xba>
 8007122:	bf00      	nop
 8007124:	2000000c 	.word	0x2000000c
 8007128:	08007598 	.word	0x08007598
 800712c:	080075b8 	.word	0x080075b8
 8007130:	08007578 	.word	0x08007578

08007134 <_close_r>:
 8007134:	b538      	push	{r3, r4, r5, lr}
 8007136:	4c06      	ldr	r4, [pc, #24]	; (8007150 <_close_r+0x1c>)
 8007138:	2300      	movs	r3, #0
 800713a:	4605      	mov	r5, r0
 800713c:	4608      	mov	r0, r1
 800713e:	6023      	str	r3, [r4, #0]
 8007140:	f7fa f8ff 	bl	8001342 <_close>
 8007144:	1c43      	adds	r3, r0, #1
 8007146:	d102      	bne.n	800714e <_close_r+0x1a>
 8007148:	6823      	ldr	r3, [r4, #0]
 800714a:	b103      	cbz	r3, 800714e <_close_r+0x1a>
 800714c:	602b      	str	r3, [r5, #0]
 800714e:	bd38      	pop	{r3, r4, r5, pc}
 8007150:	2000024c 	.word	0x2000024c

08007154 <__sflush_r>:
 8007154:	898a      	ldrh	r2, [r1, #12]
 8007156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800715a:	4605      	mov	r5, r0
 800715c:	0710      	lsls	r0, r2, #28
 800715e:	460c      	mov	r4, r1
 8007160:	d458      	bmi.n	8007214 <__sflush_r+0xc0>
 8007162:	684b      	ldr	r3, [r1, #4]
 8007164:	2b00      	cmp	r3, #0
 8007166:	dc05      	bgt.n	8007174 <__sflush_r+0x20>
 8007168:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800716a:	2b00      	cmp	r3, #0
 800716c:	dc02      	bgt.n	8007174 <__sflush_r+0x20>
 800716e:	2000      	movs	r0, #0
 8007170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007174:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007176:	2e00      	cmp	r6, #0
 8007178:	d0f9      	beq.n	800716e <__sflush_r+0x1a>
 800717a:	2300      	movs	r3, #0
 800717c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007180:	682f      	ldr	r7, [r5, #0]
 8007182:	6a21      	ldr	r1, [r4, #32]
 8007184:	602b      	str	r3, [r5, #0]
 8007186:	d032      	beq.n	80071ee <__sflush_r+0x9a>
 8007188:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800718a:	89a3      	ldrh	r3, [r4, #12]
 800718c:	075a      	lsls	r2, r3, #29
 800718e:	d505      	bpl.n	800719c <__sflush_r+0x48>
 8007190:	6863      	ldr	r3, [r4, #4]
 8007192:	1ac0      	subs	r0, r0, r3
 8007194:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007196:	b10b      	cbz	r3, 800719c <__sflush_r+0x48>
 8007198:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800719a:	1ac0      	subs	r0, r0, r3
 800719c:	2300      	movs	r3, #0
 800719e:	4602      	mov	r2, r0
 80071a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80071a2:	6a21      	ldr	r1, [r4, #32]
 80071a4:	4628      	mov	r0, r5
 80071a6:	47b0      	blx	r6
 80071a8:	1c43      	adds	r3, r0, #1
 80071aa:	89a3      	ldrh	r3, [r4, #12]
 80071ac:	d106      	bne.n	80071bc <__sflush_r+0x68>
 80071ae:	6829      	ldr	r1, [r5, #0]
 80071b0:	291d      	cmp	r1, #29
 80071b2:	d848      	bhi.n	8007246 <__sflush_r+0xf2>
 80071b4:	4a29      	ldr	r2, [pc, #164]	; (800725c <__sflush_r+0x108>)
 80071b6:	40ca      	lsrs	r2, r1
 80071b8:	07d6      	lsls	r6, r2, #31
 80071ba:	d544      	bpl.n	8007246 <__sflush_r+0xf2>
 80071bc:	2200      	movs	r2, #0
 80071be:	6062      	str	r2, [r4, #4]
 80071c0:	04d9      	lsls	r1, r3, #19
 80071c2:	6922      	ldr	r2, [r4, #16]
 80071c4:	6022      	str	r2, [r4, #0]
 80071c6:	d504      	bpl.n	80071d2 <__sflush_r+0x7e>
 80071c8:	1c42      	adds	r2, r0, #1
 80071ca:	d101      	bne.n	80071d0 <__sflush_r+0x7c>
 80071cc:	682b      	ldr	r3, [r5, #0]
 80071ce:	b903      	cbnz	r3, 80071d2 <__sflush_r+0x7e>
 80071d0:	6560      	str	r0, [r4, #84]	; 0x54
 80071d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071d4:	602f      	str	r7, [r5, #0]
 80071d6:	2900      	cmp	r1, #0
 80071d8:	d0c9      	beq.n	800716e <__sflush_r+0x1a>
 80071da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071de:	4299      	cmp	r1, r3
 80071e0:	d002      	beq.n	80071e8 <__sflush_r+0x94>
 80071e2:	4628      	mov	r0, r5
 80071e4:	f7ff fb26 	bl	8006834 <_free_r>
 80071e8:	2000      	movs	r0, #0
 80071ea:	6360      	str	r0, [r4, #52]	; 0x34
 80071ec:	e7c0      	b.n	8007170 <__sflush_r+0x1c>
 80071ee:	2301      	movs	r3, #1
 80071f0:	4628      	mov	r0, r5
 80071f2:	47b0      	blx	r6
 80071f4:	1c41      	adds	r1, r0, #1
 80071f6:	d1c8      	bne.n	800718a <__sflush_r+0x36>
 80071f8:	682b      	ldr	r3, [r5, #0]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d0c5      	beq.n	800718a <__sflush_r+0x36>
 80071fe:	2b1d      	cmp	r3, #29
 8007200:	d001      	beq.n	8007206 <__sflush_r+0xb2>
 8007202:	2b16      	cmp	r3, #22
 8007204:	d101      	bne.n	800720a <__sflush_r+0xb6>
 8007206:	602f      	str	r7, [r5, #0]
 8007208:	e7b1      	b.n	800716e <__sflush_r+0x1a>
 800720a:	89a3      	ldrh	r3, [r4, #12]
 800720c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007210:	81a3      	strh	r3, [r4, #12]
 8007212:	e7ad      	b.n	8007170 <__sflush_r+0x1c>
 8007214:	690f      	ldr	r7, [r1, #16]
 8007216:	2f00      	cmp	r7, #0
 8007218:	d0a9      	beq.n	800716e <__sflush_r+0x1a>
 800721a:	0793      	lsls	r3, r2, #30
 800721c:	680e      	ldr	r6, [r1, #0]
 800721e:	bf08      	it	eq
 8007220:	694b      	ldreq	r3, [r1, #20]
 8007222:	600f      	str	r7, [r1, #0]
 8007224:	bf18      	it	ne
 8007226:	2300      	movne	r3, #0
 8007228:	eba6 0807 	sub.w	r8, r6, r7
 800722c:	608b      	str	r3, [r1, #8]
 800722e:	f1b8 0f00 	cmp.w	r8, #0
 8007232:	dd9c      	ble.n	800716e <__sflush_r+0x1a>
 8007234:	4643      	mov	r3, r8
 8007236:	463a      	mov	r2, r7
 8007238:	6a21      	ldr	r1, [r4, #32]
 800723a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800723c:	4628      	mov	r0, r5
 800723e:	47b0      	blx	r6
 8007240:	2800      	cmp	r0, #0
 8007242:	dc06      	bgt.n	8007252 <__sflush_r+0xfe>
 8007244:	89a3      	ldrh	r3, [r4, #12]
 8007246:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800724a:	81a3      	strh	r3, [r4, #12]
 800724c:	f04f 30ff 	mov.w	r0, #4294967295
 8007250:	e78e      	b.n	8007170 <__sflush_r+0x1c>
 8007252:	4407      	add	r7, r0
 8007254:	eba8 0800 	sub.w	r8, r8, r0
 8007258:	e7e9      	b.n	800722e <__sflush_r+0xda>
 800725a:	bf00      	nop
 800725c:	20400001 	.word	0x20400001

08007260 <_fflush_r>:
 8007260:	b538      	push	{r3, r4, r5, lr}
 8007262:	690b      	ldr	r3, [r1, #16]
 8007264:	4605      	mov	r5, r0
 8007266:	460c      	mov	r4, r1
 8007268:	b1db      	cbz	r3, 80072a2 <_fflush_r+0x42>
 800726a:	b118      	cbz	r0, 8007274 <_fflush_r+0x14>
 800726c:	6983      	ldr	r3, [r0, #24]
 800726e:	b90b      	cbnz	r3, 8007274 <_fflush_r+0x14>
 8007270:	f7fe faea 	bl	8005848 <__sinit>
 8007274:	4b0c      	ldr	r3, [pc, #48]	; (80072a8 <_fflush_r+0x48>)
 8007276:	429c      	cmp	r4, r3
 8007278:	d109      	bne.n	800728e <_fflush_r+0x2e>
 800727a:	686c      	ldr	r4, [r5, #4]
 800727c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007280:	b17b      	cbz	r3, 80072a2 <_fflush_r+0x42>
 8007282:	4621      	mov	r1, r4
 8007284:	4628      	mov	r0, r5
 8007286:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800728a:	f7ff bf63 	b.w	8007154 <__sflush_r>
 800728e:	4b07      	ldr	r3, [pc, #28]	; (80072ac <_fflush_r+0x4c>)
 8007290:	429c      	cmp	r4, r3
 8007292:	d101      	bne.n	8007298 <_fflush_r+0x38>
 8007294:	68ac      	ldr	r4, [r5, #8]
 8007296:	e7f1      	b.n	800727c <_fflush_r+0x1c>
 8007298:	4b05      	ldr	r3, [pc, #20]	; (80072b0 <_fflush_r+0x50>)
 800729a:	429c      	cmp	r4, r3
 800729c:	bf08      	it	eq
 800729e:	68ec      	ldreq	r4, [r5, #12]
 80072a0:	e7ec      	b.n	800727c <_fflush_r+0x1c>
 80072a2:	2000      	movs	r0, #0
 80072a4:	bd38      	pop	{r3, r4, r5, pc}
 80072a6:	bf00      	nop
 80072a8:	08007598 	.word	0x08007598
 80072ac:	080075b8 	.word	0x080075b8
 80072b0:	08007578 	.word	0x08007578

080072b4 <_lseek_r>:
 80072b4:	b538      	push	{r3, r4, r5, lr}
 80072b6:	4c07      	ldr	r4, [pc, #28]	; (80072d4 <_lseek_r+0x20>)
 80072b8:	4605      	mov	r5, r0
 80072ba:	4608      	mov	r0, r1
 80072bc:	4611      	mov	r1, r2
 80072be:	2200      	movs	r2, #0
 80072c0:	6022      	str	r2, [r4, #0]
 80072c2:	461a      	mov	r2, r3
 80072c4:	f7fa f864 	bl	8001390 <_lseek>
 80072c8:	1c43      	adds	r3, r0, #1
 80072ca:	d102      	bne.n	80072d2 <_lseek_r+0x1e>
 80072cc:	6823      	ldr	r3, [r4, #0]
 80072ce:	b103      	cbz	r3, 80072d2 <_lseek_r+0x1e>
 80072d0:	602b      	str	r3, [r5, #0]
 80072d2:	bd38      	pop	{r3, r4, r5, pc}
 80072d4:	2000024c 	.word	0x2000024c

080072d8 <__swhatbuf_r>:
 80072d8:	b570      	push	{r4, r5, r6, lr}
 80072da:	460e      	mov	r6, r1
 80072dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072e0:	2900      	cmp	r1, #0
 80072e2:	b096      	sub	sp, #88	; 0x58
 80072e4:	4614      	mov	r4, r2
 80072e6:	461d      	mov	r5, r3
 80072e8:	da07      	bge.n	80072fa <__swhatbuf_r+0x22>
 80072ea:	2300      	movs	r3, #0
 80072ec:	602b      	str	r3, [r5, #0]
 80072ee:	89b3      	ldrh	r3, [r6, #12]
 80072f0:	061a      	lsls	r2, r3, #24
 80072f2:	d410      	bmi.n	8007316 <__swhatbuf_r+0x3e>
 80072f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072f8:	e00e      	b.n	8007318 <__swhatbuf_r+0x40>
 80072fa:	466a      	mov	r2, sp
 80072fc:	f000 f8a4 	bl	8007448 <_fstat_r>
 8007300:	2800      	cmp	r0, #0
 8007302:	dbf2      	blt.n	80072ea <__swhatbuf_r+0x12>
 8007304:	9a01      	ldr	r2, [sp, #4]
 8007306:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800730a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800730e:	425a      	negs	r2, r3
 8007310:	415a      	adcs	r2, r3
 8007312:	602a      	str	r2, [r5, #0]
 8007314:	e7ee      	b.n	80072f4 <__swhatbuf_r+0x1c>
 8007316:	2340      	movs	r3, #64	; 0x40
 8007318:	2000      	movs	r0, #0
 800731a:	6023      	str	r3, [r4, #0]
 800731c:	b016      	add	sp, #88	; 0x58
 800731e:	bd70      	pop	{r4, r5, r6, pc}

08007320 <__smakebuf_r>:
 8007320:	898b      	ldrh	r3, [r1, #12]
 8007322:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007324:	079d      	lsls	r5, r3, #30
 8007326:	4606      	mov	r6, r0
 8007328:	460c      	mov	r4, r1
 800732a:	d507      	bpl.n	800733c <__smakebuf_r+0x1c>
 800732c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007330:	6023      	str	r3, [r4, #0]
 8007332:	6123      	str	r3, [r4, #16]
 8007334:	2301      	movs	r3, #1
 8007336:	6163      	str	r3, [r4, #20]
 8007338:	b002      	add	sp, #8
 800733a:	bd70      	pop	{r4, r5, r6, pc}
 800733c:	ab01      	add	r3, sp, #4
 800733e:	466a      	mov	r2, sp
 8007340:	f7ff ffca 	bl	80072d8 <__swhatbuf_r>
 8007344:	9900      	ldr	r1, [sp, #0]
 8007346:	4605      	mov	r5, r0
 8007348:	4630      	mov	r0, r6
 800734a:	f7ff fac1 	bl	80068d0 <_malloc_r>
 800734e:	b948      	cbnz	r0, 8007364 <__smakebuf_r+0x44>
 8007350:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007354:	059a      	lsls	r2, r3, #22
 8007356:	d4ef      	bmi.n	8007338 <__smakebuf_r+0x18>
 8007358:	f023 0303 	bic.w	r3, r3, #3
 800735c:	f043 0302 	orr.w	r3, r3, #2
 8007360:	81a3      	strh	r3, [r4, #12]
 8007362:	e7e3      	b.n	800732c <__smakebuf_r+0xc>
 8007364:	4b0d      	ldr	r3, [pc, #52]	; (800739c <__smakebuf_r+0x7c>)
 8007366:	62b3      	str	r3, [r6, #40]	; 0x28
 8007368:	89a3      	ldrh	r3, [r4, #12]
 800736a:	6020      	str	r0, [r4, #0]
 800736c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007370:	81a3      	strh	r3, [r4, #12]
 8007372:	9b00      	ldr	r3, [sp, #0]
 8007374:	6163      	str	r3, [r4, #20]
 8007376:	9b01      	ldr	r3, [sp, #4]
 8007378:	6120      	str	r0, [r4, #16]
 800737a:	b15b      	cbz	r3, 8007394 <__smakebuf_r+0x74>
 800737c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007380:	4630      	mov	r0, r6
 8007382:	f000 f873 	bl	800746c <_isatty_r>
 8007386:	b128      	cbz	r0, 8007394 <__smakebuf_r+0x74>
 8007388:	89a3      	ldrh	r3, [r4, #12]
 800738a:	f023 0303 	bic.w	r3, r3, #3
 800738e:	f043 0301 	orr.w	r3, r3, #1
 8007392:	81a3      	strh	r3, [r4, #12]
 8007394:	89a3      	ldrh	r3, [r4, #12]
 8007396:	431d      	orrs	r5, r3
 8007398:	81a5      	strh	r5, [r4, #12]
 800739a:	e7cd      	b.n	8007338 <__smakebuf_r+0x18>
 800739c:	08005811 	.word	0x08005811

080073a0 <memmove>:
 80073a0:	4288      	cmp	r0, r1
 80073a2:	b510      	push	{r4, lr}
 80073a4:	eb01 0302 	add.w	r3, r1, r2
 80073a8:	d807      	bhi.n	80073ba <memmove+0x1a>
 80073aa:	1e42      	subs	r2, r0, #1
 80073ac:	4299      	cmp	r1, r3
 80073ae:	d00a      	beq.n	80073c6 <memmove+0x26>
 80073b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073b4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80073b8:	e7f8      	b.n	80073ac <memmove+0xc>
 80073ba:	4283      	cmp	r3, r0
 80073bc:	d9f5      	bls.n	80073aa <memmove+0xa>
 80073be:	1881      	adds	r1, r0, r2
 80073c0:	1ad2      	subs	r2, r2, r3
 80073c2:	42d3      	cmn	r3, r2
 80073c4:	d100      	bne.n	80073c8 <memmove+0x28>
 80073c6:	bd10      	pop	{r4, pc}
 80073c8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80073cc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80073d0:	e7f7      	b.n	80073c2 <memmove+0x22>

080073d2 <__malloc_lock>:
 80073d2:	4770      	bx	lr

080073d4 <__malloc_unlock>:
 80073d4:	4770      	bx	lr

080073d6 <_realloc_r>:
 80073d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073d8:	4607      	mov	r7, r0
 80073da:	4614      	mov	r4, r2
 80073dc:	460e      	mov	r6, r1
 80073de:	b921      	cbnz	r1, 80073ea <_realloc_r+0x14>
 80073e0:	4611      	mov	r1, r2
 80073e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80073e6:	f7ff ba73 	b.w	80068d0 <_malloc_r>
 80073ea:	b922      	cbnz	r2, 80073f6 <_realloc_r+0x20>
 80073ec:	f7ff fa22 	bl	8006834 <_free_r>
 80073f0:	4625      	mov	r5, r4
 80073f2:	4628      	mov	r0, r5
 80073f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073f6:	f000 f849 	bl	800748c <_malloc_usable_size_r>
 80073fa:	42a0      	cmp	r0, r4
 80073fc:	d20f      	bcs.n	800741e <_realloc_r+0x48>
 80073fe:	4621      	mov	r1, r4
 8007400:	4638      	mov	r0, r7
 8007402:	f7ff fa65 	bl	80068d0 <_malloc_r>
 8007406:	4605      	mov	r5, r0
 8007408:	2800      	cmp	r0, #0
 800740a:	d0f2      	beq.n	80073f2 <_realloc_r+0x1c>
 800740c:	4631      	mov	r1, r6
 800740e:	4622      	mov	r2, r4
 8007410:	f7fe fdf8 	bl	8006004 <memcpy>
 8007414:	4631      	mov	r1, r6
 8007416:	4638      	mov	r0, r7
 8007418:	f7ff fa0c 	bl	8006834 <_free_r>
 800741c:	e7e9      	b.n	80073f2 <_realloc_r+0x1c>
 800741e:	4635      	mov	r5, r6
 8007420:	e7e7      	b.n	80073f2 <_realloc_r+0x1c>
	...

08007424 <_read_r>:
 8007424:	b538      	push	{r3, r4, r5, lr}
 8007426:	4c07      	ldr	r4, [pc, #28]	; (8007444 <_read_r+0x20>)
 8007428:	4605      	mov	r5, r0
 800742a:	4608      	mov	r0, r1
 800742c:	4611      	mov	r1, r2
 800742e:	2200      	movs	r2, #0
 8007430:	6022      	str	r2, [r4, #0]
 8007432:	461a      	mov	r2, r3
 8007434:	f7f9 ff68 	bl	8001308 <_read>
 8007438:	1c43      	adds	r3, r0, #1
 800743a:	d102      	bne.n	8007442 <_read_r+0x1e>
 800743c:	6823      	ldr	r3, [r4, #0]
 800743e:	b103      	cbz	r3, 8007442 <_read_r+0x1e>
 8007440:	602b      	str	r3, [r5, #0]
 8007442:	bd38      	pop	{r3, r4, r5, pc}
 8007444:	2000024c 	.word	0x2000024c

08007448 <_fstat_r>:
 8007448:	b538      	push	{r3, r4, r5, lr}
 800744a:	4c07      	ldr	r4, [pc, #28]	; (8007468 <_fstat_r+0x20>)
 800744c:	2300      	movs	r3, #0
 800744e:	4605      	mov	r5, r0
 8007450:	4608      	mov	r0, r1
 8007452:	4611      	mov	r1, r2
 8007454:	6023      	str	r3, [r4, #0]
 8007456:	f7f9 ff80 	bl	800135a <_fstat>
 800745a:	1c43      	adds	r3, r0, #1
 800745c:	d102      	bne.n	8007464 <_fstat_r+0x1c>
 800745e:	6823      	ldr	r3, [r4, #0]
 8007460:	b103      	cbz	r3, 8007464 <_fstat_r+0x1c>
 8007462:	602b      	str	r3, [r5, #0]
 8007464:	bd38      	pop	{r3, r4, r5, pc}
 8007466:	bf00      	nop
 8007468:	2000024c 	.word	0x2000024c

0800746c <_isatty_r>:
 800746c:	b538      	push	{r3, r4, r5, lr}
 800746e:	4c06      	ldr	r4, [pc, #24]	; (8007488 <_isatty_r+0x1c>)
 8007470:	2300      	movs	r3, #0
 8007472:	4605      	mov	r5, r0
 8007474:	4608      	mov	r0, r1
 8007476:	6023      	str	r3, [r4, #0]
 8007478:	f7f9 ff7f 	bl	800137a <_isatty>
 800747c:	1c43      	adds	r3, r0, #1
 800747e:	d102      	bne.n	8007486 <_isatty_r+0x1a>
 8007480:	6823      	ldr	r3, [r4, #0]
 8007482:	b103      	cbz	r3, 8007486 <_isatty_r+0x1a>
 8007484:	602b      	str	r3, [r5, #0]
 8007486:	bd38      	pop	{r3, r4, r5, pc}
 8007488:	2000024c 	.word	0x2000024c

0800748c <_malloc_usable_size_r>:
 800748c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007490:	1f18      	subs	r0, r3, #4
 8007492:	2b00      	cmp	r3, #0
 8007494:	bfbc      	itt	lt
 8007496:	580b      	ldrlt	r3, [r1, r0]
 8007498:	18c0      	addlt	r0, r0, r3
 800749a:	4770      	bx	lr

0800749c <_init>:
 800749c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800749e:	bf00      	nop
 80074a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074a2:	bc08      	pop	{r3}
 80074a4:	469e      	mov	lr, r3
 80074a6:	4770      	bx	lr

080074a8 <_fini>:
 80074a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074aa:	bf00      	nop
 80074ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074ae:	bc08      	pop	{r3}
 80074b0:	469e      	mov	lr, r3
 80074b2:	4770      	bx	lr
