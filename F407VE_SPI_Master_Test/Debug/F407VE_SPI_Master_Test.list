
F407VE_SPI_Master_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c7c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08002e0c  08002e0c  00012e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ec8  08002ec8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002ec8  08002ec8  00012ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ed0  08002ed0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ed0  08002ed0  00012ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ed4  08002ed4  00012ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002ed8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  20000070  08002f48  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08002f48  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007dee  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001596  00000000  00000000  00027e8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006b0  00000000  00000000  00029428  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005f8  00000000  00000000  00029ad8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020c21  00000000  00000000  0002a0d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005f00  00000000  00000000  0004acf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c2146  00000000  00000000  00050bf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00112d37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002100  00000000  00000000  00112db4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002df4 	.word	0x08002df4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08002df4 	.word	0x08002df4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000578:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800057c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000580:	f003 0301 	and.w	r3, r3, #1
 8000584:	2b00      	cmp	r3, #0
 8000586:	d013      	beq.n	80005b0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000588:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800058c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000590:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000594:	2b00      	cmp	r3, #0
 8000596:	d00b      	beq.n	80005b0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000598:	e000      	b.n	800059c <ITM_SendChar+0x2c>
    {
      __NOP();
 800059a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800059c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d0f9      	beq.n	800059a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005a6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	b2d2      	uxtb	r2, r2
 80005ae:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005b0:	687b      	ldr	r3, [r7, #4]
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
	...

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b088      	sub	sp, #32
 80005c4:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c6:	f000 fab3 	bl	8000b30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ca:	f000 f84b 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ce:	f000 f8dd 	bl	800078c <MX_GPIO_Init>
  MX_SPI1_Init();
 80005d2:	f000 f8a5 	bl	8000720 <MX_SPI1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  uint8_t tx_buff[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 0};
	  uint8_t tx_buff[10] = {49, 50, 51, 52, 53, 54, 55, 56, 57, 48};
 80005d6:	4a1e      	ldr	r2, [pc, #120]	; (8000650 <main+0x90>)
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80005de:	c303      	stmia	r3!, {r0, r1}
 80005e0:	801a      	strh	r2, [r3, #0]
	  uint8_t rx_buff[10];

	  for(uint8_t i = 0; i < 10; i++)
 80005e2:	2300      	movs	r3, #0
 80005e4:	75fb      	strb	r3, [r7, #23]
 80005e6:	e027      	b.n	8000638 <main+0x78>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2110      	movs	r1, #16
 80005ec:	4819      	ldr	r0, [pc, #100]	; (8000654 <main+0x94>)
 80005ee:	f000 fdb3 	bl	8001158 <HAL_GPIO_WritePin>
		  HAL_SPI_TransmitReceive(&hspi1, &tx_buff[i], &rx_buff[i], 1, 1000);
 80005f2:	7dfb      	ldrb	r3, [r7, #23]
 80005f4:	f107 020c 	add.w	r2, r7, #12
 80005f8:	18d1      	adds	r1, r2, r3
 80005fa:	7dfb      	ldrb	r3, [r7, #23]
 80005fc:	463a      	mov	r2, r7
 80005fe:	441a      	add	r2, r3
 8000600:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2301      	movs	r3, #1
 8000608:	4813      	ldr	r0, [pc, #76]	; (8000658 <main+0x98>)
 800060a:	f001 fa2b 	bl	8001a64 <HAL_SPI_TransmitReceive>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800060e:	2201      	movs	r2, #1
 8000610:	2110      	movs	r1, #16
 8000612:	4810      	ldr	r0, [pc, #64]	; (8000654 <main+0x94>)
 8000614:	f000 fda0 	bl	8001158 <HAL_GPIO_WritePin>

		  printf("%d ", rx_buff[i]);
 8000618:	7dfb      	ldrb	r3, [r7, #23]
 800061a:	f107 0218 	add.w	r2, r7, #24
 800061e:	4413      	add	r3, r2
 8000620:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000624:	4619      	mov	r1, r3
 8000626:	480d      	ldr	r0, [pc, #52]	; (800065c <main+0x9c>)
 8000628:	f001 fc9c 	bl	8001f64 <iprintf>

		  HAL_Delay(1);
 800062c:	2001      	movs	r0, #1
 800062e:	f000 faf1 	bl	8000c14 <HAL_Delay>
	  for(uint8_t i = 0; i < 10; i++)
 8000632:	7dfb      	ldrb	r3, [r7, #23]
 8000634:	3301      	adds	r3, #1
 8000636:	75fb      	strb	r3, [r7, #23]
 8000638:	7dfb      	ldrb	r3, [r7, #23]
 800063a:	2b09      	cmp	r3, #9
 800063c:	d9d4      	bls.n	80005e8 <main+0x28>
	  }
	  printf("\r\n");
 800063e:	4808      	ldr	r0, [pc, #32]	; (8000660 <main+0xa0>)
 8000640:	f001 fd04 	bl	800204c <puts>

	  HAL_Delay(1000);
 8000644:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000648:	f000 fae4 	bl	8000c14 <HAL_Delay>
  {
 800064c:	e7c3      	b.n	80005d6 <main+0x16>
 800064e:	bf00      	nop
 8000650:	08002e14 	.word	0x08002e14
 8000654:	40020000 	.word	0x40020000
 8000658:	20000098 	.word	0x20000098
 800065c:	08002e0c 	.word	0x08002e0c
 8000660:	08002e10 	.word	0x08002e10

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b094      	sub	sp, #80	; 0x50
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 0320 	add.w	r3, r7, #32
 800066e:	2230      	movs	r2, #48	; 0x30
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f001 fc6e 	bl	8001f54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000688:	2300      	movs	r3, #0
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	4b22      	ldr	r3, [pc, #136]	; (8000718 <SystemClock_Config+0xb4>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	4a21      	ldr	r2, [pc, #132]	; (8000718 <SystemClock_Config+0xb4>)
 8000692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000696:	6413      	str	r3, [r2, #64]	; 0x40
 8000698:	4b1f      	ldr	r3, [pc, #124]	; (8000718 <SystemClock_Config+0xb4>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a4:	2300      	movs	r3, #0
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	4b1c      	ldr	r3, [pc, #112]	; (800071c <SystemClock_Config+0xb8>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a1b      	ldr	r2, [pc, #108]	; (800071c <SystemClock_Config+0xb8>)
 80006ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b2:	6013      	str	r3, [r2, #0]
 80006b4:	4b19      	ldr	r3, [pc, #100]	; (800071c <SystemClock_Config+0xb8>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c0:	2302      	movs	r3, #2
 80006c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c4:	2301      	movs	r3, #1
 80006c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c8:	2310      	movs	r3, #16
 80006ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006cc:	2300      	movs	r3, #0
 80006ce:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d0:	f107 0320 	add.w	r3, r7, #32
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 fd59 	bl	800118c <HAL_RCC_OscConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006e0:	f000 f8c2 	bl	8000868 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e4:	230f      	movs	r3, #15
 80006e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006e8:	2300      	movs	r3, #0
 80006ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f8:	f107 030c 	add.w	r3, r7, #12
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 ffb4 	bl	800166c <HAL_RCC_ClockConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800070a:	f000 f8ad 	bl	8000868 <Error_Handler>
  }
}
 800070e:	bf00      	nop
 8000710:	3750      	adds	r7, #80	; 0x50
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800
 800071c:	40007000 	.word	0x40007000

08000720 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000724:	4b17      	ldr	r3, [pc, #92]	; (8000784 <MX_SPI1_Init+0x64>)
 8000726:	4a18      	ldr	r2, [pc, #96]	; (8000788 <MX_SPI1_Init+0x68>)
 8000728:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800072a:	4b16      	ldr	r3, [pc, #88]	; (8000784 <MX_SPI1_Init+0x64>)
 800072c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000730:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000732:	4b14      	ldr	r3, [pc, #80]	; (8000784 <MX_SPI1_Init+0x64>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000738:	4b12      	ldr	r3, [pc, #72]	; (8000784 <MX_SPI1_Init+0x64>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800073e:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_SPI1_Init+0x64>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_SPI1_Init+0x64>)
 8000746:	2200      	movs	r2, #0
 8000748:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <MX_SPI1_Init+0x64>)
 800074c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000750:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000752:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <MX_SPI1_Init+0x64>)
 8000754:	2238      	movs	r2, #56	; 0x38
 8000756:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000758:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <MX_SPI1_Init+0x64>)
 800075a:	2200      	movs	r2, #0
 800075c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_SPI1_Init+0x64>)
 8000760:	2200      	movs	r2, #0
 8000762:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000764:	4b07      	ldr	r3, [pc, #28]	; (8000784 <MX_SPI1_Init+0x64>)
 8000766:	2200      	movs	r2, #0
 8000768:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_SPI1_Init+0x64>)
 800076c:	220a      	movs	r2, #10
 800076e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000770:	4804      	ldr	r0, [pc, #16]	; (8000784 <MX_SPI1_Init+0x64>)
 8000772:	f001 f913 	bl	800199c <HAL_SPI_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800077c:	f000 f874 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000098 	.word	0x20000098
 8000788:	40013000 	.word	0x40013000

0800078c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b088      	sub	sp, #32
 8000790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000792:	f107 030c 	add.w	r3, r7, #12
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
 80007a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	4b1f      	ldr	r3, [pc, #124]	; (8000824 <MX_GPIO_Init+0x98>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a1e      	ldr	r2, [pc, #120]	; (8000824 <MX_GPIO_Init+0x98>)
 80007ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <MX_GPIO_Init+0x98>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	4b18      	ldr	r3, [pc, #96]	; (8000824 <MX_GPIO_Init+0x98>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a17      	ldr	r2, [pc, #92]	; (8000824 <MX_GPIO_Init+0x98>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_GPIO_Init+0x98>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	4b11      	ldr	r3, [pc, #68]	; (8000824 <MX_GPIO_Init+0x98>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a10      	ldr	r2, [pc, #64]	; (8000824 <MX_GPIO_Init+0x98>)
 80007e4:	f043 0302 	orr.w	r3, r3, #2
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_GPIO_Init+0x98>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2110      	movs	r1, #16
 80007fa:	480b      	ldr	r0, [pc, #44]	; (8000828 <MX_GPIO_Init+0x9c>)
 80007fc:	f000 fcac 	bl	8001158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000800:	2310      	movs	r3, #16
 8000802:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000804:	2301      	movs	r3, #1
 8000806:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	2300      	movs	r3, #0
 800080e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	4619      	mov	r1, r3
 8000816:	4804      	ldr	r0, [pc, #16]	; (8000828 <MX_GPIO_Init+0x9c>)
 8000818:	f000 fb04 	bl	8000e24 <HAL_GPIO_Init>

}
 800081c:	bf00      	nop
 800081e:	3720      	adds	r7, #32
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40023800 	.word	0x40023800
 8000828:	40020000 	.word	0x40020000

0800082c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
 8000840:	e009      	b.n	8000856 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	1c5a      	adds	r2, r3, #1
 8000846:	60ba      	str	r2, [r7, #8]
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff fe90 	bl	8000570 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	3301      	adds	r3, #1
 8000854:	617b      	str	r3, [r7, #20]
 8000856:	697a      	ldr	r2, [r7, #20]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	429a      	cmp	r2, r3
 800085c:	dbf1      	blt.n	8000842 <_write+0x16>
  return len;
 800085e:	687b      	ldr	r3, [r7, #4]
}
 8000860:	4618      	mov	r0, r3
 8000862:	3718      	adds	r7, #24
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}

08000868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
	...

08000878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <HAL_MspInit+0x4c>)
 8000884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000886:	4a0f      	ldr	r2, [pc, #60]	; (80008c4 <HAL_MspInit+0x4c>)
 8000888:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800088c:	6453      	str	r3, [r2, #68]	; 0x44
 800088e:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <HAL_MspInit+0x4c>)
 8000890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	603b      	str	r3, [r7, #0]
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <HAL_MspInit+0x4c>)
 80008a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a2:	4a08      	ldr	r2, [pc, #32]	; (80008c4 <HAL_MspInit+0x4c>)
 80008a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a8:	6413      	str	r3, [r2, #64]	; 0x40
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <HAL_MspInit+0x4c>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b6:	bf00      	nop
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	40023800 	.word	0x40023800

080008c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08a      	sub	sp, #40	; 0x28
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a19      	ldr	r2, [pc, #100]	; (800094c <HAL_SPI_MspInit+0x84>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d12b      	bne.n	8000942 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	613b      	str	r3, [r7, #16]
 80008ee:	4b18      	ldr	r3, [pc, #96]	; (8000950 <HAL_SPI_MspInit+0x88>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f2:	4a17      	ldr	r2, [pc, #92]	; (8000950 <HAL_SPI_MspInit+0x88>)
 80008f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008f8:	6453      	str	r3, [r2, #68]	; 0x44
 80008fa:	4b15      	ldr	r3, [pc, #84]	; (8000950 <HAL_SPI_MspInit+0x88>)
 80008fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000902:	613b      	str	r3, [r7, #16]
 8000904:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	4b11      	ldr	r3, [pc, #68]	; (8000950 <HAL_SPI_MspInit+0x88>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a10      	ldr	r2, [pc, #64]	; (8000950 <HAL_SPI_MspInit+0x88>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <HAL_SPI_MspInit+0x88>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000922:	23e0      	movs	r3, #224	; 0xe0
 8000924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	2302      	movs	r3, #2
 8000928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092e:	2303      	movs	r3, #3
 8000930:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000932:	2305      	movs	r3, #5
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000936:	f107 0314 	add.w	r3, r7, #20
 800093a:	4619      	mov	r1, r3
 800093c:	4805      	ldr	r0, [pc, #20]	; (8000954 <HAL_SPI_MspInit+0x8c>)
 800093e:	f000 fa71 	bl	8000e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000942:	bf00      	nop
 8000944:	3728      	adds	r7, #40	; 0x28
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40013000 	.word	0x40013000
 8000950:	40023800 	.word	0x40023800
 8000954:	40020000 	.word	0x40020000

08000958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096a:	e7fe      	b.n	800096a <HardFault_Handler+0x4>

0800096c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <MemManage_Handler+0x4>

08000972 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000976:	e7fe      	b.n	8000976 <BusFault_Handler+0x4>

08000978 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800097c:	e7fe      	b.n	800097c <UsageFault_Handler+0x4>

0800097e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr

0800099a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ac:	f000 f912 	bl	8000bd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	60f8      	str	r0, [r7, #12]
 80009bc:	60b9      	str	r1, [r7, #8]
 80009be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]
 80009c4:	e00a      	b.n	80009dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009c6:	f3af 8000 	nop.w
 80009ca:	4601      	mov	r1, r0
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	1c5a      	adds	r2, r3, #1
 80009d0:	60ba      	str	r2, [r7, #8]
 80009d2:	b2ca      	uxtb	r2, r1
 80009d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	3301      	adds	r3, #1
 80009da:	617b      	str	r3, [r7, #20]
 80009dc:	697a      	ldr	r2, [r7, #20]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	dbf0      	blt.n	80009c6 <_read+0x12>
	}

return len;
 80009e4:	687b      	ldr	r3, [r7, #4]
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3718      	adds	r7, #24
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <_close>:
	}
	return len;
}

int _close(int file)
{
 80009ee:	b480      	push	{r7}
 80009f0:	b083      	sub	sp, #12
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	6078      	str	r0, [r7, #4]
	return -1;
 80009f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr

08000a06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a06:	b480      	push	{r7}
 8000a08:	b083      	sub	sp, #12
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
 8000a0e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a16:	605a      	str	r2, [r3, #4]
	return 0;
 8000a18:	2300      	movs	r3, #0
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr

08000a26 <_isatty>:

int _isatty(int file)
{
 8000a26:	b480      	push	{r7}
 8000a28:	b083      	sub	sp, #12
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
	return 1;
 8000a2e:	2301      	movs	r3, #1
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
	return 0;
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3714      	adds	r7, #20
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
	...

08000a58 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000a60:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <_sbrk+0x50>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d102      	bne.n	8000a6e <_sbrk+0x16>
		heap_end = &end;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <_sbrk+0x50>)
 8000a6a:	4a10      	ldr	r2, [pc, #64]	; (8000aac <_sbrk+0x54>)
 8000a6c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <_sbrk+0x50>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <_sbrk+0x50>)
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	466a      	mov	r2, sp
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d907      	bls.n	8000a92 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000a82:	f001 fa3d 	bl	8001f00 <__errno>
 8000a86:	4602      	mov	r2, r0
 8000a88:	230c      	movs	r3, #12
 8000a8a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a90:	e006      	b.n	8000aa0 <_sbrk+0x48>
	}

	heap_end += incr;
 8000a92:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <_sbrk+0x50>)
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4413      	add	r3, r2
 8000a9a:	4a03      	ldr	r2, [pc, #12]	; (8000aa8 <_sbrk+0x50>)
 8000a9c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3710      	adds	r7, #16
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	2000008c 	.word	0x2000008c
 8000aac:	200000f8 	.word	0x200000f8

08000ab0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <SystemInit+0x28>)
 8000ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aba:	4a07      	ldr	r2, [pc, #28]	; (8000ad8 <SystemInit+0x28>)
 8000abc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ac0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ac4:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <SystemInit+0x28>)
 8000ac6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000aca:	609a      	str	r2, [r3, #8]
#endif
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000adc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b14 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ae0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ae2:	e003      	b.n	8000aec <LoopCopyDataInit>

08000ae4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ae6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ae8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000aea:	3104      	adds	r1, #4

08000aec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000aec:	480b      	ldr	r0, [pc, #44]	; (8000b1c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000aee:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000af0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000af2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000af4:	d3f6      	bcc.n	8000ae4 <CopyDataInit>
  ldr  r2, =_sbss
 8000af6:	4a0b      	ldr	r2, [pc, #44]	; (8000b24 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000af8:	e002      	b.n	8000b00 <LoopFillZerobss>

08000afa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000afa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000afc:	f842 3b04 	str.w	r3, [r2], #4

08000b00 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b00:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b02:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b04:	d3f9      	bcc.n	8000afa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b06:	f7ff ffd3 	bl	8000ab0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b0a:	f001 f9ff 	bl	8001f0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b0e:	f7ff fd57 	bl	80005c0 <main>
  bx  lr    
 8000b12:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b14:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000b18:	08002ed8 	.word	0x08002ed8
  ldr  r0, =_sdata
 8000b1c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b20:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000b24:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000b28:	200000f8 	.word	0x200000f8

08000b2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b2c:	e7fe      	b.n	8000b2c <ADC_IRQHandler>
	...

08000b30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b34:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <HAL_Init+0x40>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a0d      	ldr	r2, [pc, #52]	; (8000b70 <HAL_Init+0x40>)
 8000b3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b40:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <HAL_Init+0x40>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a0a      	ldr	r2, [pc, #40]	; (8000b70 <HAL_Init+0x40>)
 8000b46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b4c:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <HAL_Init+0x40>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a07      	ldr	r2, [pc, #28]	; (8000b70 <HAL_Init+0x40>)
 8000b52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b58:	2003      	movs	r0, #3
 8000b5a:	f000 f92f 	bl	8000dbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b5e:	2000      	movs	r0, #0
 8000b60:	f000 f808 	bl	8000b74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b64:	f7ff fe88 	bl	8000878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40023c00 	.word	0x40023c00

08000b74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b7c:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <HAL_InitTick+0x54>)
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <HAL_InitTick+0x58>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	4619      	mov	r1, r3
 8000b86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b92:	4618      	mov	r0, r3
 8000b94:	f000 f939 	bl	8000e0a <HAL_SYSTICK_Config>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e00e      	b.n	8000bc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2b0f      	cmp	r3, #15
 8000ba6:	d80a      	bhi.n	8000bbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	6879      	ldr	r1, [r7, #4]
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	f000 f90f 	bl	8000dd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bb4:	4a06      	ldr	r2, [pc, #24]	; (8000bd0 <HAL_InitTick+0x5c>)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	e000      	b.n	8000bc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000000 	.word	0x20000000
 8000bcc:	20000008 	.word	0x20000008
 8000bd0:	20000004 	.word	0x20000004

08000bd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_IncTick+0x20>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <HAL_IncTick+0x24>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4413      	add	r3, r2
 8000be4:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <HAL_IncTick+0x24>)
 8000be6:	6013      	str	r3, [r2, #0]
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	20000008 	.word	0x20000008
 8000bf8:	200000f0 	.word	0x200000f0

08000bfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000c00:	4b03      	ldr	r3, [pc, #12]	; (8000c10 <HAL_GetTick+0x14>)
 8000c02:	681b      	ldr	r3, [r3, #0]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	200000f0 	.word	0x200000f0

08000c14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c1c:	f7ff ffee 	bl	8000bfc <HAL_GetTick>
 8000c20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c2c:	d005      	beq.n	8000c3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c2e:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <HAL_Delay+0x40>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	461a      	mov	r2, r3
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	4413      	add	r3, r2
 8000c38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c3a:	bf00      	nop
 8000c3c:	f7ff ffde 	bl	8000bfc <HAL_GetTick>
 8000c40:	4602      	mov	r2, r0
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d8f7      	bhi.n	8000c3c <HAL_Delay+0x28>
  {
  }
}
 8000c4c:	bf00      	nop
 8000c4e:	3710      	adds	r7, #16
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20000008 	.word	0x20000008

08000c58 <__NVIC_SetPriorityGrouping>:
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <__NVIC_SetPriorityGrouping+0x44>)
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c6e:	68ba      	ldr	r2, [r7, #8]
 8000c70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c74:	4013      	ands	r3, r2
 8000c76:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c8a:	4a04      	ldr	r2, [pc, #16]	; (8000c9c <__NVIC_SetPriorityGrouping+0x44>)
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	60d3      	str	r3, [r2, #12]
}
 8000c90:	bf00      	nop
 8000c92:	3714      	adds	r7, #20
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <__NVIC_GetPriorityGrouping>:
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca4:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	0a1b      	lsrs	r3, r3, #8
 8000caa:	f003 0307 	and.w	r3, r3, #7
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <__NVIC_SetPriority>:
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	6039      	str	r1, [r7, #0]
 8000cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	db0a      	blt.n	8000ce6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	490c      	ldr	r1, [pc, #48]	; (8000d08 <__NVIC_SetPriority+0x4c>)
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	0112      	lsls	r2, r2, #4
 8000cdc:	b2d2      	uxtb	r2, r2
 8000cde:	440b      	add	r3, r1
 8000ce0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ce4:	e00a      	b.n	8000cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	4908      	ldr	r1, [pc, #32]	; (8000d0c <__NVIC_SetPriority+0x50>)
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	f003 030f 	and.w	r3, r3, #15
 8000cf2:	3b04      	subs	r3, #4
 8000cf4:	0112      	lsls	r2, r2, #4
 8000cf6:	b2d2      	uxtb	r2, r2
 8000cf8:	440b      	add	r3, r1
 8000cfa:	761a      	strb	r2, [r3, #24]
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e000e100 	.word	0xe000e100
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <NVIC_EncodePriority>:
{
 8000d10:	b480      	push	{r7}
 8000d12:	b089      	sub	sp, #36	; 0x24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	f1c3 0307 	rsb	r3, r3, #7
 8000d2a:	2b04      	cmp	r3, #4
 8000d2c:	bf28      	it	cs
 8000d2e:	2304      	movcs	r3, #4
 8000d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	3304      	adds	r3, #4
 8000d36:	2b06      	cmp	r3, #6
 8000d38:	d902      	bls.n	8000d40 <NVIC_EncodePriority+0x30>
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	3b03      	subs	r3, #3
 8000d3e:	e000      	b.n	8000d42 <NVIC_EncodePriority+0x32>
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d44:	f04f 32ff 	mov.w	r2, #4294967295
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	43da      	mvns	r2, r3
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	401a      	ands	r2, r3
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d58:	f04f 31ff 	mov.w	r1, #4294967295
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d62:	43d9      	mvns	r1, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d68:	4313      	orrs	r3, r2
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3724      	adds	r7, #36	; 0x24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
	...

08000d78 <SysTick_Config>:
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d88:	d301      	bcc.n	8000d8e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e00f      	b.n	8000dae <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d8e:	4a0a      	ldr	r2, [pc, #40]	; (8000db8 <SysTick_Config+0x40>)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d96:	210f      	movs	r1, #15
 8000d98:	f04f 30ff 	mov.w	r0, #4294967295
 8000d9c:	f7ff ff8e 	bl	8000cbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da0:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <SysTick_Config+0x40>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000da6:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <SysTick_Config+0x40>)
 8000da8:	2207      	movs	r2, #7
 8000daa:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	e000e010 	.word	0xe000e010

08000dbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f7ff ff47 	bl	8000c58 <__NVIC_SetPriorityGrouping>
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b086      	sub	sp, #24
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	4603      	mov	r3, r0
 8000dda:	60b9      	str	r1, [r7, #8]
 8000ddc:	607a      	str	r2, [r7, #4]
 8000dde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000de4:	f7ff ff5c 	bl	8000ca0 <__NVIC_GetPriorityGrouping>
 8000de8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	68b9      	ldr	r1, [r7, #8]
 8000dee:	6978      	ldr	r0, [r7, #20]
 8000df0:	f7ff ff8e 	bl	8000d10 <NVIC_EncodePriority>
 8000df4:	4602      	mov	r2, r0
 8000df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ff5d 	bl	8000cbc <__NVIC_SetPriority>
}
 8000e02:	bf00      	nop
 8000e04:	3718      	adds	r7, #24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b082      	sub	sp, #8
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff ffb0 	bl	8000d78 <SysTick_Config>
 8000e18:	4603      	mov	r3, r0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b089      	sub	sp, #36	; 0x24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
 8000e3e:	e16b      	b.n	8001118 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e40:	2201      	movs	r2, #1
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	697a      	ldr	r2, [r7, #20]
 8000e50:	4013      	ands	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	f040 815a 	bne.w	8001112 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d00b      	beq.n	8000e7e <HAL_GPIO_Init+0x5a>
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d007      	beq.n	8000e7e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e72:	2b11      	cmp	r3, #17
 8000e74:	d003      	beq.n	8000e7e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	2b12      	cmp	r3, #18
 8000e7c:	d130      	bne.n	8000ee0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	2203      	movs	r2, #3
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4013      	ands	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	68da      	ldr	r2, [r3, #12]
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	091b      	lsrs	r3, r3, #4
 8000eca:	f003 0201 	and.w	r2, r3, #1
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	2203      	movs	r2, #3
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	689a      	ldr	r2, [r3, #8]
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d003      	beq.n	8000f20 <HAL_GPIO_Init+0xfc>
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	2b12      	cmp	r3, #18
 8000f1e:	d123      	bne.n	8000f68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	08da      	lsrs	r2, r3, #3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3208      	adds	r2, #8
 8000f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	f003 0307 	and.w	r3, r3, #7
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	220f      	movs	r2, #15
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	691a      	ldr	r2, [r3, #16]
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	08da      	lsrs	r2, r3, #3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	3208      	adds	r2, #8
 8000f62:	69b9      	ldr	r1, [r7, #24]
 8000f64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	2203      	movs	r2, #3
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 0203 	and.w	r2, r3, #3
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	f000 80b4 	beq.w	8001112 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	4b5f      	ldr	r3, [pc, #380]	; (800112c <HAL_GPIO_Init+0x308>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb2:	4a5e      	ldr	r2, [pc, #376]	; (800112c <HAL_GPIO_Init+0x308>)
 8000fb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fba:	4b5c      	ldr	r3, [pc, #368]	; (800112c <HAL_GPIO_Init+0x308>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fc6:	4a5a      	ldr	r2, [pc, #360]	; (8001130 <HAL_GPIO_Init+0x30c>)
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	089b      	lsrs	r3, r3, #2
 8000fcc:	3302      	adds	r3, #2
 8000fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	f003 0303 	and.w	r3, r3, #3
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	220f      	movs	r2, #15
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a51      	ldr	r2, [pc, #324]	; (8001134 <HAL_GPIO_Init+0x310>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d02b      	beq.n	800104a <HAL_GPIO_Init+0x226>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a50      	ldr	r2, [pc, #320]	; (8001138 <HAL_GPIO_Init+0x314>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d025      	beq.n	8001046 <HAL_GPIO_Init+0x222>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a4f      	ldr	r2, [pc, #316]	; (800113c <HAL_GPIO_Init+0x318>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d01f      	beq.n	8001042 <HAL_GPIO_Init+0x21e>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a4e      	ldr	r2, [pc, #312]	; (8001140 <HAL_GPIO_Init+0x31c>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d019      	beq.n	800103e <HAL_GPIO_Init+0x21a>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a4d      	ldr	r2, [pc, #308]	; (8001144 <HAL_GPIO_Init+0x320>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d013      	beq.n	800103a <HAL_GPIO_Init+0x216>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a4c      	ldr	r2, [pc, #304]	; (8001148 <HAL_GPIO_Init+0x324>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d00d      	beq.n	8001036 <HAL_GPIO_Init+0x212>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a4b      	ldr	r2, [pc, #300]	; (800114c <HAL_GPIO_Init+0x328>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d007      	beq.n	8001032 <HAL_GPIO_Init+0x20e>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a4a      	ldr	r2, [pc, #296]	; (8001150 <HAL_GPIO_Init+0x32c>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d101      	bne.n	800102e <HAL_GPIO_Init+0x20a>
 800102a:	2307      	movs	r3, #7
 800102c:	e00e      	b.n	800104c <HAL_GPIO_Init+0x228>
 800102e:	2308      	movs	r3, #8
 8001030:	e00c      	b.n	800104c <HAL_GPIO_Init+0x228>
 8001032:	2306      	movs	r3, #6
 8001034:	e00a      	b.n	800104c <HAL_GPIO_Init+0x228>
 8001036:	2305      	movs	r3, #5
 8001038:	e008      	b.n	800104c <HAL_GPIO_Init+0x228>
 800103a:	2304      	movs	r3, #4
 800103c:	e006      	b.n	800104c <HAL_GPIO_Init+0x228>
 800103e:	2303      	movs	r3, #3
 8001040:	e004      	b.n	800104c <HAL_GPIO_Init+0x228>
 8001042:	2302      	movs	r3, #2
 8001044:	e002      	b.n	800104c <HAL_GPIO_Init+0x228>
 8001046:	2301      	movs	r3, #1
 8001048:	e000      	b.n	800104c <HAL_GPIO_Init+0x228>
 800104a:	2300      	movs	r3, #0
 800104c:	69fa      	ldr	r2, [r7, #28]
 800104e:	f002 0203 	and.w	r2, r2, #3
 8001052:	0092      	lsls	r2, r2, #2
 8001054:	4093      	lsls	r3, r2
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4313      	orrs	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800105c:	4934      	ldr	r1, [pc, #208]	; (8001130 <HAL_GPIO_Init+0x30c>)
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	089b      	lsrs	r3, r3, #2
 8001062:	3302      	adds	r3, #2
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800106a:	4b3a      	ldr	r3, [pc, #232]	; (8001154 <HAL_GPIO_Init+0x330>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	43db      	mvns	r3, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4013      	ands	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800108e:	4a31      	ldr	r2, [pc, #196]	; (8001154 <HAL_GPIO_Init+0x330>)
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001094:	4b2f      	ldr	r3, [pc, #188]	; (8001154 <HAL_GPIO_Init+0x330>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d003      	beq.n	80010b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010b8:	4a26      	ldr	r2, [pc, #152]	; (8001154 <HAL_GPIO_Init+0x330>)
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010be:	4b25      	ldr	r3, [pc, #148]	; (8001154 <HAL_GPIO_Init+0x330>)
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	43db      	mvns	r3, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4013      	ands	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010e2:	4a1c      	ldr	r2, [pc, #112]	; (8001154 <HAL_GPIO_Init+0x330>)
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010e8:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <HAL_GPIO_Init+0x330>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d003      	beq.n	800110c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800110c:	4a11      	ldr	r2, [pc, #68]	; (8001154 <HAL_GPIO_Init+0x330>)
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3301      	adds	r3, #1
 8001116:	61fb      	str	r3, [r7, #28]
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	2b0f      	cmp	r3, #15
 800111c:	f67f ae90 	bls.w	8000e40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001120:	bf00      	nop
 8001122:	3724      	adds	r7, #36	; 0x24
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	40023800 	.word	0x40023800
 8001130:	40013800 	.word	0x40013800
 8001134:	40020000 	.word	0x40020000
 8001138:	40020400 	.word	0x40020400
 800113c:	40020800 	.word	0x40020800
 8001140:	40020c00 	.word	0x40020c00
 8001144:	40021000 	.word	0x40021000
 8001148:	40021400 	.word	0x40021400
 800114c:	40021800 	.word	0x40021800
 8001150:	40021c00 	.word	0x40021c00
 8001154:	40013c00 	.word	0x40013c00

08001158 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	807b      	strh	r3, [r7, #2]
 8001164:	4613      	mov	r3, r2
 8001166:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001168:	787b      	ldrb	r3, [r7, #1]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800116e:	887a      	ldrh	r2, [r7, #2]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001174:	e003      	b.n	800117e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001176:	887b      	ldrh	r3, [r7, #2]
 8001178:	041a      	lsls	r2, r3, #16
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	619a      	str	r2, [r3, #24]
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
	...

0800118c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d101      	bne.n	800119e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e25b      	b.n	8001656 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d075      	beq.n	8001296 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011aa:	4ba3      	ldr	r3, [pc, #652]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f003 030c 	and.w	r3, r3, #12
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	d00c      	beq.n	80011d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011b6:	4ba0      	ldr	r3, [pc, #640]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011be:	2b08      	cmp	r3, #8
 80011c0:	d112      	bne.n	80011e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011c2:	4b9d      	ldr	r3, [pc, #628]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011ce:	d10b      	bne.n	80011e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d0:	4b99      	ldr	r3, [pc, #612]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d05b      	beq.n	8001294 <HAL_RCC_OscConfig+0x108>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d157      	bne.n	8001294 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e236      	b.n	8001656 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011f0:	d106      	bne.n	8001200 <HAL_RCC_OscConfig+0x74>
 80011f2:	4b91      	ldr	r3, [pc, #580]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a90      	ldr	r2, [pc, #576]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 80011f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011fc:	6013      	str	r3, [r2, #0]
 80011fe:	e01d      	b.n	800123c <HAL_RCC_OscConfig+0xb0>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001208:	d10c      	bne.n	8001224 <HAL_RCC_OscConfig+0x98>
 800120a:	4b8b      	ldr	r3, [pc, #556]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a8a      	ldr	r2, [pc, #552]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 8001210:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	4b88      	ldr	r3, [pc, #544]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a87      	ldr	r2, [pc, #540]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 800121c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001220:	6013      	str	r3, [r2, #0]
 8001222:	e00b      	b.n	800123c <HAL_RCC_OscConfig+0xb0>
 8001224:	4b84      	ldr	r3, [pc, #528]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a83      	ldr	r2, [pc, #524]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 800122a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800122e:	6013      	str	r3, [r2, #0]
 8001230:	4b81      	ldr	r3, [pc, #516]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a80      	ldr	r2, [pc, #512]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 8001236:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800123a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d013      	beq.n	800126c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001244:	f7ff fcda 	bl	8000bfc <HAL_GetTick>
 8001248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800124a:	e008      	b.n	800125e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800124c:	f7ff fcd6 	bl	8000bfc <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b64      	cmp	r3, #100	; 0x64
 8001258:	d901      	bls.n	800125e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e1fb      	b.n	8001656 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800125e:	4b76      	ldr	r3, [pc, #472]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d0f0      	beq.n	800124c <HAL_RCC_OscConfig+0xc0>
 800126a:	e014      	b.n	8001296 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126c:	f7ff fcc6 	bl	8000bfc <HAL_GetTick>
 8001270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001272:	e008      	b.n	8001286 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001274:	f7ff fcc2 	bl	8000bfc <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b64      	cmp	r3, #100	; 0x64
 8001280:	d901      	bls.n	8001286 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e1e7      	b.n	8001656 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001286:	4b6c      	ldr	r3, [pc, #432]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1f0      	bne.n	8001274 <HAL_RCC_OscConfig+0xe8>
 8001292:	e000      	b.n	8001296 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001294:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d063      	beq.n	800136a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012a2:	4b65      	ldr	r3, [pc, #404]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f003 030c 	and.w	r3, r3, #12
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d00b      	beq.n	80012c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012ae:	4b62      	ldr	r3, [pc, #392]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012b6:	2b08      	cmp	r3, #8
 80012b8:	d11c      	bne.n	80012f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012ba:	4b5f      	ldr	r3, [pc, #380]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d116      	bne.n	80012f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012c6:	4b5c      	ldr	r3, [pc, #368]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d005      	beq.n	80012de <HAL_RCC_OscConfig+0x152>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d001      	beq.n	80012de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e1bb      	b.n	8001656 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012de:	4b56      	ldr	r3, [pc, #344]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	691b      	ldr	r3, [r3, #16]
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	4952      	ldr	r1, [pc, #328]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 80012ee:	4313      	orrs	r3, r2
 80012f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012f2:	e03a      	b.n	800136a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d020      	beq.n	800133e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012fc:	4b4f      	ldr	r3, [pc, #316]	; (800143c <HAL_RCC_OscConfig+0x2b0>)
 80012fe:	2201      	movs	r2, #1
 8001300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001302:	f7ff fc7b 	bl	8000bfc <HAL_GetTick>
 8001306:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001308:	e008      	b.n	800131c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800130a:	f7ff fc77 	bl	8000bfc <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b02      	cmp	r3, #2
 8001316:	d901      	bls.n	800131c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e19c      	b.n	8001656 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800131c:	4b46      	ldr	r3, [pc, #280]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0302 	and.w	r3, r3, #2
 8001324:	2b00      	cmp	r3, #0
 8001326:	d0f0      	beq.n	800130a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001328:	4b43      	ldr	r3, [pc, #268]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	691b      	ldr	r3, [r3, #16]
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	4940      	ldr	r1, [pc, #256]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 8001338:	4313      	orrs	r3, r2
 800133a:	600b      	str	r3, [r1, #0]
 800133c:	e015      	b.n	800136a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800133e:	4b3f      	ldr	r3, [pc, #252]	; (800143c <HAL_RCC_OscConfig+0x2b0>)
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001344:	f7ff fc5a 	bl	8000bfc <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800134c:	f7ff fc56 	bl	8000bfc <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b02      	cmp	r3, #2
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e17b      	b.n	8001656 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800135e:	4b36      	ldr	r3, [pc, #216]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1f0      	bne.n	800134c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0308 	and.w	r3, r3, #8
 8001372:	2b00      	cmp	r3, #0
 8001374:	d030      	beq.n	80013d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	695b      	ldr	r3, [r3, #20]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d016      	beq.n	80013ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800137e:	4b30      	ldr	r3, [pc, #192]	; (8001440 <HAL_RCC_OscConfig+0x2b4>)
 8001380:	2201      	movs	r2, #1
 8001382:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001384:	f7ff fc3a 	bl	8000bfc <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800138c:	f7ff fc36 	bl	8000bfc <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b02      	cmp	r3, #2
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e15b      	b.n	8001656 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800139e:	4b26      	ldr	r3, [pc, #152]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 80013a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d0f0      	beq.n	800138c <HAL_RCC_OscConfig+0x200>
 80013aa:	e015      	b.n	80013d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013ac:	4b24      	ldr	r3, [pc, #144]	; (8001440 <HAL_RCC_OscConfig+0x2b4>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b2:	f7ff fc23 	bl	8000bfc <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013ba:	f7ff fc1f 	bl	8000bfc <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e144      	b.n	8001656 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013cc:	4b1a      	ldr	r3, [pc, #104]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 80013ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d1f0      	bne.n	80013ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 0304 	and.w	r3, r3, #4
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	f000 80a0 	beq.w	8001526 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013e6:	2300      	movs	r3, #0
 80013e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013ea:	4b13      	ldr	r3, [pc, #76]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d10f      	bne.n	8001416 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	4a0e      	ldr	r2, [pc, #56]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 8001400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001404:	6413      	str	r3, [r2, #64]	; 0x40
 8001406:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <HAL_RCC_OscConfig+0x2ac>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001412:	2301      	movs	r3, #1
 8001414:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001416:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <HAL_RCC_OscConfig+0x2b8>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800141e:	2b00      	cmp	r3, #0
 8001420:	d121      	bne.n	8001466 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001422:	4b08      	ldr	r3, [pc, #32]	; (8001444 <HAL_RCC_OscConfig+0x2b8>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a07      	ldr	r2, [pc, #28]	; (8001444 <HAL_RCC_OscConfig+0x2b8>)
 8001428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800142c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800142e:	f7ff fbe5 	bl	8000bfc <HAL_GetTick>
 8001432:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001434:	e011      	b.n	800145a <HAL_RCC_OscConfig+0x2ce>
 8001436:	bf00      	nop
 8001438:	40023800 	.word	0x40023800
 800143c:	42470000 	.word	0x42470000
 8001440:	42470e80 	.word	0x42470e80
 8001444:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001448:	f7ff fbd8 	bl	8000bfc <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e0fd      	b.n	8001656 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800145a:	4b81      	ldr	r3, [pc, #516]	; (8001660 <HAL_RCC_OscConfig+0x4d4>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001462:	2b00      	cmp	r3, #0
 8001464:	d0f0      	beq.n	8001448 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d106      	bne.n	800147c <HAL_RCC_OscConfig+0x2f0>
 800146e:	4b7d      	ldr	r3, [pc, #500]	; (8001664 <HAL_RCC_OscConfig+0x4d8>)
 8001470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001472:	4a7c      	ldr	r2, [pc, #496]	; (8001664 <HAL_RCC_OscConfig+0x4d8>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	6713      	str	r3, [r2, #112]	; 0x70
 800147a:	e01c      	b.n	80014b6 <HAL_RCC_OscConfig+0x32a>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	2b05      	cmp	r3, #5
 8001482:	d10c      	bne.n	800149e <HAL_RCC_OscConfig+0x312>
 8001484:	4b77      	ldr	r3, [pc, #476]	; (8001664 <HAL_RCC_OscConfig+0x4d8>)
 8001486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001488:	4a76      	ldr	r2, [pc, #472]	; (8001664 <HAL_RCC_OscConfig+0x4d8>)
 800148a:	f043 0304 	orr.w	r3, r3, #4
 800148e:	6713      	str	r3, [r2, #112]	; 0x70
 8001490:	4b74      	ldr	r3, [pc, #464]	; (8001664 <HAL_RCC_OscConfig+0x4d8>)
 8001492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001494:	4a73      	ldr	r2, [pc, #460]	; (8001664 <HAL_RCC_OscConfig+0x4d8>)
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	6713      	str	r3, [r2, #112]	; 0x70
 800149c:	e00b      	b.n	80014b6 <HAL_RCC_OscConfig+0x32a>
 800149e:	4b71      	ldr	r3, [pc, #452]	; (8001664 <HAL_RCC_OscConfig+0x4d8>)
 80014a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a2:	4a70      	ldr	r2, [pc, #448]	; (8001664 <HAL_RCC_OscConfig+0x4d8>)
 80014a4:	f023 0301 	bic.w	r3, r3, #1
 80014a8:	6713      	str	r3, [r2, #112]	; 0x70
 80014aa:	4b6e      	ldr	r3, [pc, #440]	; (8001664 <HAL_RCC_OscConfig+0x4d8>)
 80014ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ae:	4a6d      	ldr	r2, [pc, #436]	; (8001664 <HAL_RCC_OscConfig+0x4d8>)
 80014b0:	f023 0304 	bic.w	r3, r3, #4
 80014b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d015      	beq.n	80014ea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014be:	f7ff fb9d 	bl	8000bfc <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014c4:	e00a      	b.n	80014dc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014c6:	f7ff fb99 	bl	8000bfc <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e0bc      	b.n	8001656 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014dc:	4b61      	ldr	r3, [pc, #388]	; (8001664 <HAL_RCC_OscConfig+0x4d8>)
 80014de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d0ee      	beq.n	80014c6 <HAL_RCC_OscConfig+0x33a>
 80014e8:	e014      	b.n	8001514 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ea:	f7ff fb87 	bl	8000bfc <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014f0:	e00a      	b.n	8001508 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014f2:	f7ff fb83 	bl	8000bfc <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001500:	4293      	cmp	r3, r2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e0a6      	b.n	8001656 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001508:	4b56      	ldr	r3, [pc, #344]	; (8001664 <HAL_RCC_OscConfig+0x4d8>)
 800150a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1ee      	bne.n	80014f2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001514:	7dfb      	ldrb	r3, [r7, #23]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d105      	bne.n	8001526 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800151a:	4b52      	ldr	r3, [pc, #328]	; (8001664 <HAL_RCC_OscConfig+0x4d8>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	4a51      	ldr	r2, [pc, #324]	; (8001664 <HAL_RCC_OscConfig+0x4d8>)
 8001520:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001524:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	2b00      	cmp	r3, #0
 800152c:	f000 8092 	beq.w	8001654 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001530:	4b4c      	ldr	r3, [pc, #304]	; (8001664 <HAL_RCC_OscConfig+0x4d8>)
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f003 030c 	and.w	r3, r3, #12
 8001538:	2b08      	cmp	r3, #8
 800153a:	d05c      	beq.n	80015f6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	2b02      	cmp	r3, #2
 8001542:	d141      	bne.n	80015c8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001544:	4b48      	ldr	r3, [pc, #288]	; (8001668 <HAL_RCC_OscConfig+0x4dc>)
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154a:	f7ff fb57 	bl	8000bfc <HAL_GetTick>
 800154e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001550:	e008      	b.n	8001564 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001552:	f7ff fb53 	bl	8000bfc <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e078      	b.n	8001656 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001564:	4b3f      	ldr	r3, [pc, #252]	; (8001664 <HAL_RCC_OscConfig+0x4d8>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1f0      	bne.n	8001552 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	69da      	ldr	r2, [r3, #28]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a1b      	ldr	r3, [r3, #32]
 8001578:	431a      	orrs	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157e:	019b      	lsls	r3, r3, #6
 8001580:	431a      	orrs	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001586:	085b      	lsrs	r3, r3, #1
 8001588:	3b01      	subs	r3, #1
 800158a:	041b      	lsls	r3, r3, #16
 800158c:	431a      	orrs	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001592:	061b      	lsls	r3, r3, #24
 8001594:	4933      	ldr	r1, [pc, #204]	; (8001664 <HAL_RCC_OscConfig+0x4d8>)
 8001596:	4313      	orrs	r3, r2
 8001598:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800159a:	4b33      	ldr	r3, [pc, #204]	; (8001668 <HAL_RCC_OscConfig+0x4dc>)
 800159c:	2201      	movs	r2, #1
 800159e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a0:	f7ff fb2c 	bl	8000bfc <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015a8:	f7ff fb28 	bl	8000bfc <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e04d      	b.n	8001656 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ba:	4b2a      	ldr	r3, [pc, #168]	; (8001664 <HAL_RCC_OscConfig+0x4d8>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d0f0      	beq.n	80015a8 <HAL_RCC_OscConfig+0x41c>
 80015c6:	e045      	b.n	8001654 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c8:	4b27      	ldr	r3, [pc, #156]	; (8001668 <HAL_RCC_OscConfig+0x4dc>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ce:	f7ff fb15 	bl	8000bfc <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015d6:	f7ff fb11 	bl	8000bfc <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e036      	b.n	8001656 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015e8:	4b1e      	ldr	r3, [pc, #120]	; (8001664 <HAL_RCC_OscConfig+0x4d8>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1f0      	bne.n	80015d6 <HAL_RCC_OscConfig+0x44a>
 80015f4:	e02e      	b.n	8001654 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d101      	bne.n	8001602 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e029      	b.n	8001656 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001602:	4b18      	ldr	r3, [pc, #96]	; (8001664 <HAL_RCC_OscConfig+0x4d8>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	429a      	cmp	r2, r3
 8001614:	d11c      	bne.n	8001650 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001620:	429a      	cmp	r2, r3
 8001622:	d115      	bne.n	8001650 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800162a:	4013      	ands	r3, r2
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001630:	4293      	cmp	r3, r2
 8001632:	d10d      	bne.n	8001650 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800163e:	429a      	cmp	r2, r3
 8001640:	d106      	bne.n	8001650 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800164c:	429a      	cmp	r2, r3
 800164e:	d001      	beq.n	8001654 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e000      	b.n	8001656 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40007000 	.word	0x40007000
 8001664:	40023800 	.word	0x40023800
 8001668:	42470060 	.word	0x42470060

0800166c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d101      	bne.n	8001680 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e0cc      	b.n	800181a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001680:	4b68      	ldr	r3, [pc, #416]	; (8001824 <HAL_RCC_ClockConfig+0x1b8>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 030f 	and.w	r3, r3, #15
 8001688:	683a      	ldr	r2, [r7, #0]
 800168a:	429a      	cmp	r2, r3
 800168c:	d90c      	bls.n	80016a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800168e:	4b65      	ldr	r3, [pc, #404]	; (8001824 <HAL_RCC_ClockConfig+0x1b8>)
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001696:	4b63      	ldr	r3, [pc, #396]	; (8001824 <HAL_RCC_ClockConfig+0x1b8>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 030f 	and.w	r3, r3, #15
 800169e:	683a      	ldr	r2, [r7, #0]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d001      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e0b8      	b.n	800181a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d020      	beq.n	80016f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d005      	beq.n	80016cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016c0:	4b59      	ldr	r3, [pc, #356]	; (8001828 <HAL_RCC_ClockConfig+0x1bc>)
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	4a58      	ldr	r2, [pc, #352]	; (8001828 <HAL_RCC_ClockConfig+0x1bc>)
 80016c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0308 	and.w	r3, r3, #8
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d005      	beq.n	80016e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016d8:	4b53      	ldr	r3, [pc, #332]	; (8001828 <HAL_RCC_ClockConfig+0x1bc>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	4a52      	ldr	r2, [pc, #328]	; (8001828 <HAL_RCC_ClockConfig+0x1bc>)
 80016de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016e4:	4b50      	ldr	r3, [pc, #320]	; (8001828 <HAL_RCC_ClockConfig+0x1bc>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	494d      	ldr	r1, [pc, #308]	; (8001828 <HAL_RCC_ClockConfig+0x1bc>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d044      	beq.n	800178c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d107      	bne.n	800171a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800170a:	4b47      	ldr	r3, [pc, #284]	; (8001828 <HAL_RCC_ClockConfig+0x1bc>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d119      	bne.n	800174a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e07f      	b.n	800181a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b02      	cmp	r3, #2
 8001720:	d003      	beq.n	800172a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001726:	2b03      	cmp	r3, #3
 8001728:	d107      	bne.n	800173a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800172a:	4b3f      	ldr	r3, [pc, #252]	; (8001828 <HAL_RCC_ClockConfig+0x1bc>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d109      	bne.n	800174a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e06f      	b.n	800181a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800173a:	4b3b      	ldr	r3, [pc, #236]	; (8001828 <HAL_RCC_ClockConfig+0x1bc>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d101      	bne.n	800174a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e067      	b.n	800181a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800174a:	4b37      	ldr	r3, [pc, #220]	; (8001828 <HAL_RCC_ClockConfig+0x1bc>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f023 0203 	bic.w	r2, r3, #3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	4934      	ldr	r1, [pc, #208]	; (8001828 <HAL_RCC_ClockConfig+0x1bc>)
 8001758:	4313      	orrs	r3, r2
 800175a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800175c:	f7ff fa4e 	bl	8000bfc <HAL_GetTick>
 8001760:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001762:	e00a      	b.n	800177a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001764:	f7ff fa4a 	bl	8000bfc <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001772:	4293      	cmp	r3, r2
 8001774:	d901      	bls.n	800177a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e04f      	b.n	800181a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800177a:	4b2b      	ldr	r3, [pc, #172]	; (8001828 <HAL_RCC_ClockConfig+0x1bc>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f003 020c 	and.w	r2, r3, #12
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	429a      	cmp	r2, r3
 800178a:	d1eb      	bne.n	8001764 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800178c:	4b25      	ldr	r3, [pc, #148]	; (8001824 <HAL_RCC_ClockConfig+0x1b8>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 030f 	and.w	r3, r3, #15
 8001794:	683a      	ldr	r2, [r7, #0]
 8001796:	429a      	cmp	r2, r3
 8001798:	d20c      	bcs.n	80017b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800179a:	4b22      	ldr	r3, [pc, #136]	; (8001824 <HAL_RCC_ClockConfig+0x1b8>)
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a2:	4b20      	ldr	r3, [pc, #128]	; (8001824 <HAL_RCC_ClockConfig+0x1b8>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 030f 	and.w	r3, r3, #15
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d001      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e032      	b.n	800181a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0304 	and.w	r3, r3, #4
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d008      	beq.n	80017d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017c0:	4b19      	ldr	r3, [pc, #100]	; (8001828 <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	4916      	ldr	r1, [pc, #88]	; (8001828 <HAL_RCC_ClockConfig+0x1bc>)
 80017ce:	4313      	orrs	r3, r2
 80017d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0308 	and.w	r3, r3, #8
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d009      	beq.n	80017f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017de:	4b12      	ldr	r3, [pc, #72]	; (8001828 <HAL_RCC_ClockConfig+0x1bc>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	490e      	ldr	r1, [pc, #56]	; (8001828 <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017f2:	f000 f821 	bl	8001838 <HAL_RCC_GetSysClockFreq>
 80017f6:	4601      	mov	r1, r0
 80017f8:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <HAL_RCC_ClockConfig+0x1bc>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	091b      	lsrs	r3, r3, #4
 80017fe:	f003 030f 	and.w	r3, r3, #15
 8001802:	4a0a      	ldr	r2, [pc, #40]	; (800182c <HAL_RCC_ClockConfig+0x1c0>)
 8001804:	5cd3      	ldrb	r3, [r2, r3]
 8001806:	fa21 f303 	lsr.w	r3, r1, r3
 800180a:	4a09      	ldr	r2, [pc, #36]	; (8001830 <HAL_RCC_ClockConfig+0x1c4>)
 800180c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800180e:	4b09      	ldr	r3, [pc, #36]	; (8001834 <HAL_RCC_ClockConfig+0x1c8>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff f9ae 	bl	8000b74 <HAL_InitTick>

  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40023c00 	.word	0x40023c00
 8001828:	40023800 	.word	0x40023800
 800182c:	08002e20 	.word	0x08002e20
 8001830:	20000000 	.word	0x20000000
 8001834:	20000004 	.word	0x20000004

08001838 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800183e:	2300      	movs	r3, #0
 8001840:	607b      	str	r3, [r7, #4]
 8001842:	2300      	movs	r3, #0
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	2300      	movs	r3, #0
 8001848:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800184a:	2300      	movs	r3, #0
 800184c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800184e:	4b50      	ldr	r3, [pc, #320]	; (8001990 <HAL_RCC_GetSysClockFreq+0x158>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f003 030c 	and.w	r3, r3, #12
 8001856:	2b04      	cmp	r3, #4
 8001858:	d007      	beq.n	800186a <HAL_RCC_GetSysClockFreq+0x32>
 800185a:	2b08      	cmp	r3, #8
 800185c:	d008      	beq.n	8001870 <HAL_RCC_GetSysClockFreq+0x38>
 800185e:	2b00      	cmp	r3, #0
 8001860:	f040 808d 	bne.w	800197e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001864:	4b4b      	ldr	r3, [pc, #300]	; (8001994 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001866:	60bb      	str	r3, [r7, #8]
       break;
 8001868:	e08c      	b.n	8001984 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800186a:	4b4b      	ldr	r3, [pc, #300]	; (8001998 <HAL_RCC_GetSysClockFreq+0x160>)
 800186c:	60bb      	str	r3, [r7, #8]
      break;
 800186e:	e089      	b.n	8001984 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001870:	4b47      	ldr	r3, [pc, #284]	; (8001990 <HAL_RCC_GetSysClockFreq+0x158>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001878:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800187a:	4b45      	ldr	r3, [pc, #276]	; (8001990 <HAL_RCC_GetSysClockFreq+0x158>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d023      	beq.n	80018ce <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001886:	4b42      	ldr	r3, [pc, #264]	; (8001990 <HAL_RCC_GetSysClockFreq+0x158>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	099b      	lsrs	r3, r3, #6
 800188c:	f04f 0400 	mov.w	r4, #0
 8001890:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	ea03 0501 	and.w	r5, r3, r1
 800189c:	ea04 0602 	and.w	r6, r4, r2
 80018a0:	4a3d      	ldr	r2, [pc, #244]	; (8001998 <HAL_RCC_GetSysClockFreq+0x160>)
 80018a2:	fb02 f106 	mul.w	r1, r2, r6
 80018a6:	2200      	movs	r2, #0
 80018a8:	fb02 f205 	mul.w	r2, r2, r5
 80018ac:	440a      	add	r2, r1
 80018ae:	493a      	ldr	r1, [pc, #232]	; (8001998 <HAL_RCC_GetSysClockFreq+0x160>)
 80018b0:	fba5 0101 	umull	r0, r1, r5, r1
 80018b4:	1853      	adds	r3, r2, r1
 80018b6:	4619      	mov	r1, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f04f 0400 	mov.w	r4, #0
 80018be:	461a      	mov	r2, r3
 80018c0:	4623      	mov	r3, r4
 80018c2:	f7fe fcd5 	bl	8000270 <__aeabi_uldivmod>
 80018c6:	4603      	mov	r3, r0
 80018c8:	460c      	mov	r4, r1
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	e049      	b.n	8001962 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ce:	4b30      	ldr	r3, [pc, #192]	; (8001990 <HAL_RCC_GetSysClockFreq+0x158>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	099b      	lsrs	r3, r3, #6
 80018d4:	f04f 0400 	mov.w	r4, #0
 80018d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018dc:	f04f 0200 	mov.w	r2, #0
 80018e0:	ea03 0501 	and.w	r5, r3, r1
 80018e4:	ea04 0602 	and.w	r6, r4, r2
 80018e8:	4629      	mov	r1, r5
 80018ea:	4632      	mov	r2, r6
 80018ec:	f04f 0300 	mov.w	r3, #0
 80018f0:	f04f 0400 	mov.w	r4, #0
 80018f4:	0154      	lsls	r4, r2, #5
 80018f6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018fa:	014b      	lsls	r3, r1, #5
 80018fc:	4619      	mov	r1, r3
 80018fe:	4622      	mov	r2, r4
 8001900:	1b49      	subs	r1, r1, r5
 8001902:	eb62 0206 	sbc.w	r2, r2, r6
 8001906:	f04f 0300 	mov.w	r3, #0
 800190a:	f04f 0400 	mov.w	r4, #0
 800190e:	0194      	lsls	r4, r2, #6
 8001910:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001914:	018b      	lsls	r3, r1, #6
 8001916:	1a5b      	subs	r3, r3, r1
 8001918:	eb64 0402 	sbc.w	r4, r4, r2
 800191c:	f04f 0100 	mov.w	r1, #0
 8001920:	f04f 0200 	mov.w	r2, #0
 8001924:	00e2      	lsls	r2, r4, #3
 8001926:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800192a:	00d9      	lsls	r1, r3, #3
 800192c:	460b      	mov	r3, r1
 800192e:	4614      	mov	r4, r2
 8001930:	195b      	adds	r3, r3, r5
 8001932:	eb44 0406 	adc.w	r4, r4, r6
 8001936:	f04f 0100 	mov.w	r1, #0
 800193a:	f04f 0200 	mov.w	r2, #0
 800193e:	02a2      	lsls	r2, r4, #10
 8001940:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001944:	0299      	lsls	r1, r3, #10
 8001946:	460b      	mov	r3, r1
 8001948:	4614      	mov	r4, r2
 800194a:	4618      	mov	r0, r3
 800194c:	4621      	mov	r1, r4
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f04f 0400 	mov.w	r4, #0
 8001954:	461a      	mov	r2, r3
 8001956:	4623      	mov	r3, r4
 8001958:	f7fe fc8a 	bl	8000270 <__aeabi_uldivmod>
 800195c:	4603      	mov	r3, r0
 800195e:	460c      	mov	r4, r1
 8001960:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001962:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <HAL_RCC_GetSysClockFreq+0x158>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	0c1b      	lsrs	r3, r3, #16
 8001968:	f003 0303 	and.w	r3, r3, #3
 800196c:	3301      	adds	r3, #1
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	fbb2 f3f3 	udiv	r3, r2, r3
 800197a:	60bb      	str	r3, [r7, #8]
      break;
 800197c:	e002      	b.n	8001984 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800197e:	4b05      	ldr	r3, [pc, #20]	; (8001994 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001980:	60bb      	str	r3, [r7, #8]
      break;
 8001982:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001984:	68bb      	ldr	r3, [r7, #8]
}
 8001986:	4618      	mov	r0, r3
 8001988:	3714      	adds	r7, #20
 800198a:	46bd      	mov	sp, r7
 800198c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800198e:	bf00      	nop
 8001990:	40023800 	.word	0x40023800
 8001994:	00f42400 	.word	0x00f42400
 8001998:	017d7840 	.word	0x017d7840

0800199c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e056      	b.n	8001a5c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d106      	bne.n	80019ce <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7fe ff7d 	bl	80008c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2202      	movs	r2, #2
 80019d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019e4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685a      	ldr	r2, [r3, #4]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	431a      	orrs	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	431a      	orrs	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	431a      	orrs	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	695b      	ldr	r3, [r3, #20]
 8001a00:	431a      	orrs	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	69db      	ldr	r3, [r3, #28]
 8001a10:	431a      	orrs	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a1b      	ldr	r3, [r3, #32]
 8001a16:	ea42 0103 	orr.w	r1, r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	430a      	orrs	r2, r1
 8001a24:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	0c1b      	lsrs	r3, r3, #16
 8001a2c:	f003 0104 	and.w	r1, r3, #4
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	69da      	ldr	r2, [r3, #28]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a4a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08c      	sub	sp, #48	; 0x30
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
 8001a70:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001a72:	2301      	movs	r3, #1
 8001a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001a76:	2300      	movs	r3, #0
 8001a78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d101      	bne.n	8001a8a <HAL_SPI_TransmitReceive+0x26>
 8001a86:	2302      	movs	r3, #2
 8001a88:	e18a      	b.n	8001da0 <HAL_SPI_TransmitReceive+0x33c>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001a92:	f7ff f8b3 	bl	8000bfc <HAL_GetTick>
 8001a96:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001aa8:	887b      	ldrh	r3, [r7, #2]
 8001aaa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001aac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d00f      	beq.n	8001ad4 <HAL_SPI_TransmitReceive+0x70>
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001aba:	d107      	bne.n	8001acc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d103      	bne.n	8001acc <HAL_SPI_TransmitReceive+0x68>
 8001ac4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ac8:	2b04      	cmp	r3, #4
 8001aca:	d003      	beq.n	8001ad4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001acc:	2302      	movs	r3, #2
 8001ace:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001ad2:	e15b      	b.n	8001d8c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d005      	beq.n	8001ae6 <HAL_SPI_TransmitReceive+0x82>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d002      	beq.n	8001ae6 <HAL_SPI_TransmitReceive+0x82>
 8001ae0:	887b      	ldrh	r3, [r7, #2]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d103      	bne.n	8001aee <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001aec:	e14e      	b.n	8001d8c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b04      	cmp	r3, #4
 8001af8:	d003      	beq.n	8001b02 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2205      	movs	r2, #5
 8001afe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2200      	movs	r2, #0
 8001b06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	887a      	ldrh	r2, [r7, #2]
 8001b12:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	887a      	ldrh	r2, [r7, #2]
 8001b18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	68ba      	ldr	r2, [r7, #8]
 8001b1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	887a      	ldrh	r2, [r7, #2]
 8001b24:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	887a      	ldrh	r2, [r7, #2]
 8001b2a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2200      	movs	r2, #0
 8001b36:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b42:	2b40      	cmp	r3, #64	; 0x40
 8001b44:	d007      	beq.n	8001b56 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b54:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b5e:	d178      	bne.n	8001c52 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d002      	beq.n	8001b6e <HAL_SPI_TransmitReceive+0x10a>
 8001b68:	8b7b      	ldrh	r3, [r7, #26]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d166      	bne.n	8001c3c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	881a      	ldrh	r2, [r3, #0]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	1c9a      	adds	r2, r3, #2
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001b92:	e053      	b.n	8001c3c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d11b      	bne.n	8001bda <HAL_SPI_TransmitReceive+0x176>
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d016      	beq.n	8001bda <HAL_SPI_TransmitReceive+0x176>
 8001bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d113      	bne.n	8001bda <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	881a      	ldrh	r2, [r3, #0]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	1c9a      	adds	r2, r3, #2
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d119      	bne.n	8001c1c <HAL_SPI_TransmitReceive+0x1b8>
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d014      	beq.n	8001c1c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68da      	ldr	r2, [r3, #12]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bfc:	b292      	uxth	r2, r2
 8001bfe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c04:	1c9a      	adds	r2, r3, #2
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	3b01      	subs	r3, #1
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001c1c:	f7fe ffee 	bl	8000bfc <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d807      	bhi.n	8001c3c <HAL_SPI_TransmitReceive+0x1d8>
 8001c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c32:	d003      	beq.n	8001c3c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001c3a:	e0a7      	b.n	8001d8c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1a6      	bne.n	8001b94 <HAL_SPI_TransmitReceive+0x130>
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1a1      	bne.n	8001b94 <HAL_SPI_TransmitReceive+0x130>
 8001c50:	e07c      	b.n	8001d4c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d002      	beq.n	8001c60 <HAL_SPI_TransmitReceive+0x1fc>
 8001c5a:	8b7b      	ldrh	r3, [r7, #26]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d16b      	bne.n	8001d38 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	330c      	adds	r3, #12
 8001c6a:	7812      	ldrb	r2, [r2, #0]
 8001c6c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	1c5a      	adds	r2, r3, #1
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c86:	e057      	b.n	8001d38 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d11c      	bne.n	8001cd0 <HAL_SPI_TransmitReceive+0x26c>
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d017      	beq.n	8001cd0 <HAL_SPI_TransmitReceive+0x26c>
 8001ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d114      	bne.n	8001cd0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	330c      	adds	r3, #12
 8001cb0:	7812      	ldrb	r2, [r2, #0]
 8001cb2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb8:	1c5a      	adds	r2, r3, #1
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d119      	bne.n	8001d12 <HAL_SPI_TransmitReceive+0x2ae>
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d014      	beq.n	8001d12 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68da      	ldr	r2, [r3, #12]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cfa:	1c5a      	adds	r2, r3, #1
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	3b01      	subs	r3, #1
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001d12:	f7fe ff73 	bl	8000bfc <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d803      	bhi.n	8001d2a <HAL_SPI_TransmitReceive+0x2c6>
 8001d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d28:	d102      	bne.n	8001d30 <HAL_SPI_TransmitReceive+0x2cc>
 8001d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d103      	bne.n	8001d38 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001d36:	e029      	b.n	8001d8c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1a2      	bne.n	8001c88 <HAL_SPI_TransmitReceive+0x224>
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d19d      	bne.n	8001c88 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001d50:	68f8      	ldr	r0, [r7, #12]
 8001d52:	f000 f893 	bl	8001e7c <SPI_EndRxTxTransaction>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d006      	beq.n	8001d6a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2220      	movs	r2, #32
 8001d66:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001d68:	e010      	b.n	8001d8c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d10b      	bne.n	8001d8a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001d72:	2300      	movs	r3, #0
 8001d74:	617b      	str	r3, [r7, #20]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	617b      	str	r3, [r7, #20]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	617b      	str	r3, [r7, #20]
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	e000      	b.n	8001d8c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001d8a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001d9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3730      	adds	r7, #48	; 0x30
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	603b      	str	r3, [r7, #0]
 8001db4:	4613      	mov	r3, r2
 8001db6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001db8:	e04c      	b.n	8001e54 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dc0:	d048      	beq.n	8001e54 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001dc2:	f7fe ff1b 	bl	8000bfc <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d902      	bls.n	8001dd8 <SPI_WaitFlagStateUntilTimeout+0x30>
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d13d      	bne.n	8001e54 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	685a      	ldr	r2, [r3, #4]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001de6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001df0:	d111      	bne.n	8001e16 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dfa:	d004      	beq.n	8001e06 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e04:	d107      	bne.n	8001e16 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e14:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e1e:	d10f      	bne.n	8001e40 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e3e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e00f      	b.n	8001e74 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	689a      	ldr	r2, [r3, #8]
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	68ba      	ldr	r2, [r7, #8]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	bf0c      	ite	eq
 8001e64:	2301      	moveq	r3, #1
 8001e66:	2300      	movne	r3, #0
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d1a3      	bne.n	8001dba <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3710      	adds	r7, #16
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b088      	sub	sp, #32
 8001e80:	af02      	add	r7, sp, #8
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001e88:	4b1b      	ldr	r3, [pc, #108]	; (8001ef8 <SPI_EndRxTxTransaction+0x7c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a1b      	ldr	r2, [pc, #108]	; (8001efc <SPI_EndRxTxTransaction+0x80>)
 8001e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e92:	0d5b      	lsrs	r3, r3, #21
 8001e94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e98:	fb02 f303 	mul.w	r3, r2, r3
 8001e9c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ea6:	d112      	bne.n	8001ece <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	9300      	str	r3, [sp, #0]
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2180      	movs	r1, #128	; 0x80
 8001eb2:	68f8      	ldr	r0, [r7, #12]
 8001eb4:	f7ff ff78 	bl	8001da8 <SPI_WaitFlagStateUntilTimeout>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d016      	beq.n	8001eec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec2:	f043 0220 	orr.w	r2, r3, #32
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e00f      	b.n	8001eee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d00a      	beq.n	8001eea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ee4:	2b80      	cmp	r3, #128	; 0x80
 8001ee6:	d0f2      	beq.n	8001ece <SPI_EndRxTxTransaction+0x52>
 8001ee8:	e000      	b.n	8001eec <SPI_EndRxTxTransaction+0x70>
        break;
 8001eea:	bf00      	nop
  }

  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3718      	adds	r7, #24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20000000 	.word	0x20000000
 8001efc:	165e9f81 	.word	0x165e9f81

08001f00 <__errno>:
 8001f00:	4b01      	ldr	r3, [pc, #4]	; (8001f08 <__errno+0x8>)
 8001f02:	6818      	ldr	r0, [r3, #0]
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	2000000c 	.word	0x2000000c

08001f0c <__libc_init_array>:
 8001f0c:	b570      	push	{r4, r5, r6, lr}
 8001f0e:	4e0d      	ldr	r6, [pc, #52]	; (8001f44 <__libc_init_array+0x38>)
 8001f10:	4c0d      	ldr	r4, [pc, #52]	; (8001f48 <__libc_init_array+0x3c>)
 8001f12:	1ba4      	subs	r4, r4, r6
 8001f14:	10a4      	asrs	r4, r4, #2
 8001f16:	2500      	movs	r5, #0
 8001f18:	42a5      	cmp	r5, r4
 8001f1a:	d109      	bne.n	8001f30 <__libc_init_array+0x24>
 8001f1c:	4e0b      	ldr	r6, [pc, #44]	; (8001f4c <__libc_init_array+0x40>)
 8001f1e:	4c0c      	ldr	r4, [pc, #48]	; (8001f50 <__libc_init_array+0x44>)
 8001f20:	f000 ff68 	bl	8002df4 <_init>
 8001f24:	1ba4      	subs	r4, r4, r6
 8001f26:	10a4      	asrs	r4, r4, #2
 8001f28:	2500      	movs	r5, #0
 8001f2a:	42a5      	cmp	r5, r4
 8001f2c:	d105      	bne.n	8001f3a <__libc_init_array+0x2e>
 8001f2e:	bd70      	pop	{r4, r5, r6, pc}
 8001f30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f34:	4798      	blx	r3
 8001f36:	3501      	adds	r5, #1
 8001f38:	e7ee      	b.n	8001f18 <__libc_init_array+0xc>
 8001f3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f3e:	4798      	blx	r3
 8001f40:	3501      	adds	r5, #1
 8001f42:	e7f2      	b.n	8001f2a <__libc_init_array+0x1e>
 8001f44:	08002ed0 	.word	0x08002ed0
 8001f48:	08002ed0 	.word	0x08002ed0
 8001f4c:	08002ed0 	.word	0x08002ed0
 8001f50:	08002ed4 	.word	0x08002ed4

08001f54 <memset>:
 8001f54:	4402      	add	r2, r0
 8001f56:	4603      	mov	r3, r0
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d100      	bne.n	8001f5e <memset+0xa>
 8001f5c:	4770      	bx	lr
 8001f5e:	f803 1b01 	strb.w	r1, [r3], #1
 8001f62:	e7f9      	b.n	8001f58 <memset+0x4>

08001f64 <iprintf>:
 8001f64:	b40f      	push	{r0, r1, r2, r3}
 8001f66:	4b0a      	ldr	r3, [pc, #40]	; (8001f90 <iprintf+0x2c>)
 8001f68:	b513      	push	{r0, r1, r4, lr}
 8001f6a:	681c      	ldr	r4, [r3, #0]
 8001f6c:	b124      	cbz	r4, 8001f78 <iprintf+0x14>
 8001f6e:	69a3      	ldr	r3, [r4, #24]
 8001f70:	b913      	cbnz	r3, 8001f78 <iprintf+0x14>
 8001f72:	4620      	mov	r0, r4
 8001f74:	f000 fa22 	bl	80023bc <__sinit>
 8001f78:	ab05      	add	r3, sp, #20
 8001f7a:	9a04      	ldr	r2, [sp, #16]
 8001f7c:	68a1      	ldr	r1, [r4, #8]
 8001f7e:	9301      	str	r3, [sp, #4]
 8001f80:	4620      	mov	r0, r4
 8001f82:	f000 fbdb 	bl	800273c <_vfiprintf_r>
 8001f86:	b002      	add	sp, #8
 8001f88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f8c:	b004      	add	sp, #16
 8001f8e:	4770      	bx	lr
 8001f90:	2000000c 	.word	0x2000000c

08001f94 <_puts_r>:
 8001f94:	b570      	push	{r4, r5, r6, lr}
 8001f96:	460e      	mov	r6, r1
 8001f98:	4605      	mov	r5, r0
 8001f9a:	b118      	cbz	r0, 8001fa4 <_puts_r+0x10>
 8001f9c:	6983      	ldr	r3, [r0, #24]
 8001f9e:	b90b      	cbnz	r3, 8001fa4 <_puts_r+0x10>
 8001fa0:	f000 fa0c 	bl	80023bc <__sinit>
 8001fa4:	69ab      	ldr	r3, [r5, #24]
 8001fa6:	68ac      	ldr	r4, [r5, #8]
 8001fa8:	b913      	cbnz	r3, 8001fb0 <_puts_r+0x1c>
 8001faa:	4628      	mov	r0, r5
 8001fac:	f000 fa06 	bl	80023bc <__sinit>
 8001fb0:	4b23      	ldr	r3, [pc, #140]	; (8002040 <_puts_r+0xac>)
 8001fb2:	429c      	cmp	r4, r3
 8001fb4:	d117      	bne.n	8001fe6 <_puts_r+0x52>
 8001fb6:	686c      	ldr	r4, [r5, #4]
 8001fb8:	89a3      	ldrh	r3, [r4, #12]
 8001fba:	071b      	lsls	r3, r3, #28
 8001fbc:	d51d      	bpl.n	8001ffa <_puts_r+0x66>
 8001fbe:	6923      	ldr	r3, [r4, #16]
 8001fc0:	b1db      	cbz	r3, 8001ffa <_puts_r+0x66>
 8001fc2:	3e01      	subs	r6, #1
 8001fc4:	68a3      	ldr	r3, [r4, #8]
 8001fc6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	60a3      	str	r3, [r4, #8]
 8001fce:	b9e9      	cbnz	r1, 800200c <_puts_r+0x78>
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	da2e      	bge.n	8002032 <_puts_r+0x9e>
 8001fd4:	4622      	mov	r2, r4
 8001fd6:	210a      	movs	r1, #10
 8001fd8:	4628      	mov	r0, r5
 8001fda:	f000 f83f 	bl	800205c <__swbuf_r>
 8001fde:	3001      	adds	r0, #1
 8001fe0:	d011      	beq.n	8002006 <_puts_r+0x72>
 8001fe2:	200a      	movs	r0, #10
 8001fe4:	e011      	b.n	800200a <_puts_r+0x76>
 8001fe6:	4b17      	ldr	r3, [pc, #92]	; (8002044 <_puts_r+0xb0>)
 8001fe8:	429c      	cmp	r4, r3
 8001fea:	d101      	bne.n	8001ff0 <_puts_r+0x5c>
 8001fec:	68ac      	ldr	r4, [r5, #8]
 8001fee:	e7e3      	b.n	8001fb8 <_puts_r+0x24>
 8001ff0:	4b15      	ldr	r3, [pc, #84]	; (8002048 <_puts_r+0xb4>)
 8001ff2:	429c      	cmp	r4, r3
 8001ff4:	bf08      	it	eq
 8001ff6:	68ec      	ldreq	r4, [r5, #12]
 8001ff8:	e7de      	b.n	8001fb8 <_puts_r+0x24>
 8001ffa:	4621      	mov	r1, r4
 8001ffc:	4628      	mov	r0, r5
 8001ffe:	f000 f87f 	bl	8002100 <__swsetup_r>
 8002002:	2800      	cmp	r0, #0
 8002004:	d0dd      	beq.n	8001fc2 <_puts_r+0x2e>
 8002006:	f04f 30ff 	mov.w	r0, #4294967295
 800200a:	bd70      	pop	{r4, r5, r6, pc}
 800200c:	2b00      	cmp	r3, #0
 800200e:	da04      	bge.n	800201a <_puts_r+0x86>
 8002010:	69a2      	ldr	r2, [r4, #24]
 8002012:	429a      	cmp	r2, r3
 8002014:	dc06      	bgt.n	8002024 <_puts_r+0x90>
 8002016:	290a      	cmp	r1, #10
 8002018:	d004      	beq.n	8002024 <_puts_r+0x90>
 800201a:	6823      	ldr	r3, [r4, #0]
 800201c:	1c5a      	adds	r2, r3, #1
 800201e:	6022      	str	r2, [r4, #0]
 8002020:	7019      	strb	r1, [r3, #0]
 8002022:	e7cf      	b.n	8001fc4 <_puts_r+0x30>
 8002024:	4622      	mov	r2, r4
 8002026:	4628      	mov	r0, r5
 8002028:	f000 f818 	bl	800205c <__swbuf_r>
 800202c:	3001      	adds	r0, #1
 800202e:	d1c9      	bne.n	8001fc4 <_puts_r+0x30>
 8002030:	e7e9      	b.n	8002006 <_puts_r+0x72>
 8002032:	6823      	ldr	r3, [r4, #0]
 8002034:	200a      	movs	r0, #10
 8002036:	1c5a      	adds	r2, r3, #1
 8002038:	6022      	str	r2, [r4, #0]
 800203a:	7018      	strb	r0, [r3, #0]
 800203c:	e7e5      	b.n	800200a <_puts_r+0x76>
 800203e:	bf00      	nop
 8002040:	08002e54 	.word	0x08002e54
 8002044:	08002e74 	.word	0x08002e74
 8002048:	08002e34 	.word	0x08002e34

0800204c <puts>:
 800204c:	4b02      	ldr	r3, [pc, #8]	; (8002058 <puts+0xc>)
 800204e:	4601      	mov	r1, r0
 8002050:	6818      	ldr	r0, [r3, #0]
 8002052:	f7ff bf9f 	b.w	8001f94 <_puts_r>
 8002056:	bf00      	nop
 8002058:	2000000c 	.word	0x2000000c

0800205c <__swbuf_r>:
 800205c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800205e:	460e      	mov	r6, r1
 8002060:	4614      	mov	r4, r2
 8002062:	4605      	mov	r5, r0
 8002064:	b118      	cbz	r0, 800206e <__swbuf_r+0x12>
 8002066:	6983      	ldr	r3, [r0, #24]
 8002068:	b90b      	cbnz	r3, 800206e <__swbuf_r+0x12>
 800206a:	f000 f9a7 	bl	80023bc <__sinit>
 800206e:	4b21      	ldr	r3, [pc, #132]	; (80020f4 <__swbuf_r+0x98>)
 8002070:	429c      	cmp	r4, r3
 8002072:	d12a      	bne.n	80020ca <__swbuf_r+0x6e>
 8002074:	686c      	ldr	r4, [r5, #4]
 8002076:	69a3      	ldr	r3, [r4, #24]
 8002078:	60a3      	str	r3, [r4, #8]
 800207a:	89a3      	ldrh	r3, [r4, #12]
 800207c:	071a      	lsls	r2, r3, #28
 800207e:	d52e      	bpl.n	80020de <__swbuf_r+0x82>
 8002080:	6923      	ldr	r3, [r4, #16]
 8002082:	b363      	cbz	r3, 80020de <__swbuf_r+0x82>
 8002084:	6923      	ldr	r3, [r4, #16]
 8002086:	6820      	ldr	r0, [r4, #0]
 8002088:	1ac0      	subs	r0, r0, r3
 800208a:	6963      	ldr	r3, [r4, #20]
 800208c:	b2f6      	uxtb	r6, r6
 800208e:	4283      	cmp	r3, r0
 8002090:	4637      	mov	r7, r6
 8002092:	dc04      	bgt.n	800209e <__swbuf_r+0x42>
 8002094:	4621      	mov	r1, r4
 8002096:	4628      	mov	r0, r5
 8002098:	f000 f926 	bl	80022e8 <_fflush_r>
 800209c:	bb28      	cbnz	r0, 80020ea <__swbuf_r+0x8e>
 800209e:	68a3      	ldr	r3, [r4, #8]
 80020a0:	3b01      	subs	r3, #1
 80020a2:	60a3      	str	r3, [r4, #8]
 80020a4:	6823      	ldr	r3, [r4, #0]
 80020a6:	1c5a      	adds	r2, r3, #1
 80020a8:	6022      	str	r2, [r4, #0]
 80020aa:	701e      	strb	r6, [r3, #0]
 80020ac:	6963      	ldr	r3, [r4, #20]
 80020ae:	3001      	adds	r0, #1
 80020b0:	4283      	cmp	r3, r0
 80020b2:	d004      	beq.n	80020be <__swbuf_r+0x62>
 80020b4:	89a3      	ldrh	r3, [r4, #12]
 80020b6:	07db      	lsls	r3, r3, #31
 80020b8:	d519      	bpl.n	80020ee <__swbuf_r+0x92>
 80020ba:	2e0a      	cmp	r6, #10
 80020bc:	d117      	bne.n	80020ee <__swbuf_r+0x92>
 80020be:	4621      	mov	r1, r4
 80020c0:	4628      	mov	r0, r5
 80020c2:	f000 f911 	bl	80022e8 <_fflush_r>
 80020c6:	b190      	cbz	r0, 80020ee <__swbuf_r+0x92>
 80020c8:	e00f      	b.n	80020ea <__swbuf_r+0x8e>
 80020ca:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <__swbuf_r+0x9c>)
 80020cc:	429c      	cmp	r4, r3
 80020ce:	d101      	bne.n	80020d4 <__swbuf_r+0x78>
 80020d0:	68ac      	ldr	r4, [r5, #8]
 80020d2:	e7d0      	b.n	8002076 <__swbuf_r+0x1a>
 80020d4:	4b09      	ldr	r3, [pc, #36]	; (80020fc <__swbuf_r+0xa0>)
 80020d6:	429c      	cmp	r4, r3
 80020d8:	bf08      	it	eq
 80020da:	68ec      	ldreq	r4, [r5, #12]
 80020dc:	e7cb      	b.n	8002076 <__swbuf_r+0x1a>
 80020de:	4621      	mov	r1, r4
 80020e0:	4628      	mov	r0, r5
 80020e2:	f000 f80d 	bl	8002100 <__swsetup_r>
 80020e6:	2800      	cmp	r0, #0
 80020e8:	d0cc      	beq.n	8002084 <__swbuf_r+0x28>
 80020ea:	f04f 37ff 	mov.w	r7, #4294967295
 80020ee:	4638      	mov	r0, r7
 80020f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020f2:	bf00      	nop
 80020f4:	08002e54 	.word	0x08002e54
 80020f8:	08002e74 	.word	0x08002e74
 80020fc:	08002e34 	.word	0x08002e34

08002100 <__swsetup_r>:
 8002100:	4b32      	ldr	r3, [pc, #200]	; (80021cc <__swsetup_r+0xcc>)
 8002102:	b570      	push	{r4, r5, r6, lr}
 8002104:	681d      	ldr	r5, [r3, #0]
 8002106:	4606      	mov	r6, r0
 8002108:	460c      	mov	r4, r1
 800210a:	b125      	cbz	r5, 8002116 <__swsetup_r+0x16>
 800210c:	69ab      	ldr	r3, [r5, #24]
 800210e:	b913      	cbnz	r3, 8002116 <__swsetup_r+0x16>
 8002110:	4628      	mov	r0, r5
 8002112:	f000 f953 	bl	80023bc <__sinit>
 8002116:	4b2e      	ldr	r3, [pc, #184]	; (80021d0 <__swsetup_r+0xd0>)
 8002118:	429c      	cmp	r4, r3
 800211a:	d10f      	bne.n	800213c <__swsetup_r+0x3c>
 800211c:	686c      	ldr	r4, [r5, #4]
 800211e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002122:	b29a      	uxth	r2, r3
 8002124:	0715      	lsls	r5, r2, #28
 8002126:	d42c      	bmi.n	8002182 <__swsetup_r+0x82>
 8002128:	06d0      	lsls	r0, r2, #27
 800212a:	d411      	bmi.n	8002150 <__swsetup_r+0x50>
 800212c:	2209      	movs	r2, #9
 800212e:	6032      	str	r2, [r6, #0]
 8002130:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002134:	81a3      	strh	r3, [r4, #12]
 8002136:	f04f 30ff 	mov.w	r0, #4294967295
 800213a:	e03e      	b.n	80021ba <__swsetup_r+0xba>
 800213c:	4b25      	ldr	r3, [pc, #148]	; (80021d4 <__swsetup_r+0xd4>)
 800213e:	429c      	cmp	r4, r3
 8002140:	d101      	bne.n	8002146 <__swsetup_r+0x46>
 8002142:	68ac      	ldr	r4, [r5, #8]
 8002144:	e7eb      	b.n	800211e <__swsetup_r+0x1e>
 8002146:	4b24      	ldr	r3, [pc, #144]	; (80021d8 <__swsetup_r+0xd8>)
 8002148:	429c      	cmp	r4, r3
 800214a:	bf08      	it	eq
 800214c:	68ec      	ldreq	r4, [r5, #12]
 800214e:	e7e6      	b.n	800211e <__swsetup_r+0x1e>
 8002150:	0751      	lsls	r1, r2, #29
 8002152:	d512      	bpl.n	800217a <__swsetup_r+0x7a>
 8002154:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002156:	b141      	cbz	r1, 800216a <__swsetup_r+0x6a>
 8002158:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800215c:	4299      	cmp	r1, r3
 800215e:	d002      	beq.n	8002166 <__swsetup_r+0x66>
 8002160:	4630      	mov	r0, r6
 8002162:	f000 fa19 	bl	8002598 <_free_r>
 8002166:	2300      	movs	r3, #0
 8002168:	6363      	str	r3, [r4, #52]	; 0x34
 800216a:	89a3      	ldrh	r3, [r4, #12]
 800216c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002170:	81a3      	strh	r3, [r4, #12]
 8002172:	2300      	movs	r3, #0
 8002174:	6063      	str	r3, [r4, #4]
 8002176:	6923      	ldr	r3, [r4, #16]
 8002178:	6023      	str	r3, [r4, #0]
 800217a:	89a3      	ldrh	r3, [r4, #12]
 800217c:	f043 0308 	orr.w	r3, r3, #8
 8002180:	81a3      	strh	r3, [r4, #12]
 8002182:	6923      	ldr	r3, [r4, #16]
 8002184:	b94b      	cbnz	r3, 800219a <__swsetup_r+0x9a>
 8002186:	89a3      	ldrh	r3, [r4, #12]
 8002188:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800218c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002190:	d003      	beq.n	800219a <__swsetup_r+0x9a>
 8002192:	4621      	mov	r1, r4
 8002194:	4630      	mov	r0, r6
 8002196:	f000 f9bf 	bl	8002518 <__smakebuf_r>
 800219a:	89a2      	ldrh	r2, [r4, #12]
 800219c:	f012 0301 	ands.w	r3, r2, #1
 80021a0:	d00c      	beq.n	80021bc <__swsetup_r+0xbc>
 80021a2:	2300      	movs	r3, #0
 80021a4:	60a3      	str	r3, [r4, #8]
 80021a6:	6963      	ldr	r3, [r4, #20]
 80021a8:	425b      	negs	r3, r3
 80021aa:	61a3      	str	r3, [r4, #24]
 80021ac:	6923      	ldr	r3, [r4, #16]
 80021ae:	b953      	cbnz	r3, 80021c6 <__swsetup_r+0xc6>
 80021b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80021b4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80021b8:	d1ba      	bne.n	8002130 <__swsetup_r+0x30>
 80021ba:	bd70      	pop	{r4, r5, r6, pc}
 80021bc:	0792      	lsls	r2, r2, #30
 80021be:	bf58      	it	pl
 80021c0:	6963      	ldrpl	r3, [r4, #20]
 80021c2:	60a3      	str	r3, [r4, #8]
 80021c4:	e7f2      	b.n	80021ac <__swsetup_r+0xac>
 80021c6:	2000      	movs	r0, #0
 80021c8:	e7f7      	b.n	80021ba <__swsetup_r+0xba>
 80021ca:	bf00      	nop
 80021cc:	2000000c 	.word	0x2000000c
 80021d0:	08002e54 	.word	0x08002e54
 80021d4:	08002e74 	.word	0x08002e74
 80021d8:	08002e34 	.word	0x08002e34

080021dc <__sflush_r>:
 80021dc:	898a      	ldrh	r2, [r1, #12]
 80021de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021e2:	4605      	mov	r5, r0
 80021e4:	0710      	lsls	r0, r2, #28
 80021e6:	460c      	mov	r4, r1
 80021e8:	d458      	bmi.n	800229c <__sflush_r+0xc0>
 80021ea:	684b      	ldr	r3, [r1, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	dc05      	bgt.n	80021fc <__sflush_r+0x20>
 80021f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	dc02      	bgt.n	80021fc <__sflush_r+0x20>
 80021f6:	2000      	movs	r0, #0
 80021f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80021fe:	2e00      	cmp	r6, #0
 8002200:	d0f9      	beq.n	80021f6 <__sflush_r+0x1a>
 8002202:	2300      	movs	r3, #0
 8002204:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002208:	682f      	ldr	r7, [r5, #0]
 800220a:	6a21      	ldr	r1, [r4, #32]
 800220c:	602b      	str	r3, [r5, #0]
 800220e:	d032      	beq.n	8002276 <__sflush_r+0x9a>
 8002210:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002212:	89a3      	ldrh	r3, [r4, #12]
 8002214:	075a      	lsls	r2, r3, #29
 8002216:	d505      	bpl.n	8002224 <__sflush_r+0x48>
 8002218:	6863      	ldr	r3, [r4, #4]
 800221a:	1ac0      	subs	r0, r0, r3
 800221c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800221e:	b10b      	cbz	r3, 8002224 <__sflush_r+0x48>
 8002220:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002222:	1ac0      	subs	r0, r0, r3
 8002224:	2300      	movs	r3, #0
 8002226:	4602      	mov	r2, r0
 8002228:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800222a:	6a21      	ldr	r1, [r4, #32]
 800222c:	4628      	mov	r0, r5
 800222e:	47b0      	blx	r6
 8002230:	1c43      	adds	r3, r0, #1
 8002232:	89a3      	ldrh	r3, [r4, #12]
 8002234:	d106      	bne.n	8002244 <__sflush_r+0x68>
 8002236:	6829      	ldr	r1, [r5, #0]
 8002238:	291d      	cmp	r1, #29
 800223a:	d848      	bhi.n	80022ce <__sflush_r+0xf2>
 800223c:	4a29      	ldr	r2, [pc, #164]	; (80022e4 <__sflush_r+0x108>)
 800223e:	40ca      	lsrs	r2, r1
 8002240:	07d6      	lsls	r6, r2, #31
 8002242:	d544      	bpl.n	80022ce <__sflush_r+0xf2>
 8002244:	2200      	movs	r2, #0
 8002246:	6062      	str	r2, [r4, #4]
 8002248:	04d9      	lsls	r1, r3, #19
 800224a:	6922      	ldr	r2, [r4, #16]
 800224c:	6022      	str	r2, [r4, #0]
 800224e:	d504      	bpl.n	800225a <__sflush_r+0x7e>
 8002250:	1c42      	adds	r2, r0, #1
 8002252:	d101      	bne.n	8002258 <__sflush_r+0x7c>
 8002254:	682b      	ldr	r3, [r5, #0]
 8002256:	b903      	cbnz	r3, 800225a <__sflush_r+0x7e>
 8002258:	6560      	str	r0, [r4, #84]	; 0x54
 800225a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800225c:	602f      	str	r7, [r5, #0]
 800225e:	2900      	cmp	r1, #0
 8002260:	d0c9      	beq.n	80021f6 <__sflush_r+0x1a>
 8002262:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002266:	4299      	cmp	r1, r3
 8002268:	d002      	beq.n	8002270 <__sflush_r+0x94>
 800226a:	4628      	mov	r0, r5
 800226c:	f000 f994 	bl	8002598 <_free_r>
 8002270:	2000      	movs	r0, #0
 8002272:	6360      	str	r0, [r4, #52]	; 0x34
 8002274:	e7c0      	b.n	80021f8 <__sflush_r+0x1c>
 8002276:	2301      	movs	r3, #1
 8002278:	4628      	mov	r0, r5
 800227a:	47b0      	blx	r6
 800227c:	1c41      	adds	r1, r0, #1
 800227e:	d1c8      	bne.n	8002212 <__sflush_r+0x36>
 8002280:	682b      	ldr	r3, [r5, #0]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d0c5      	beq.n	8002212 <__sflush_r+0x36>
 8002286:	2b1d      	cmp	r3, #29
 8002288:	d001      	beq.n	800228e <__sflush_r+0xb2>
 800228a:	2b16      	cmp	r3, #22
 800228c:	d101      	bne.n	8002292 <__sflush_r+0xb6>
 800228e:	602f      	str	r7, [r5, #0]
 8002290:	e7b1      	b.n	80021f6 <__sflush_r+0x1a>
 8002292:	89a3      	ldrh	r3, [r4, #12]
 8002294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002298:	81a3      	strh	r3, [r4, #12]
 800229a:	e7ad      	b.n	80021f8 <__sflush_r+0x1c>
 800229c:	690f      	ldr	r7, [r1, #16]
 800229e:	2f00      	cmp	r7, #0
 80022a0:	d0a9      	beq.n	80021f6 <__sflush_r+0x1a>
 80022a2:	0793      	lsls	r3, r2, #30
 80022a4:	680e      	ldr	r6, [r1, #0]
 80022a6:	bf08      	it	eq
 80022a8:	694b      	ldreq	r3, [r1, #20]
 80022aa:	600f      	str	r7, [r1, #0]
 80022ac:	bf18      	it	ne
 80022ae:	2300      	movne	r3, #0
 80022b0:	eba6 0807 	sub.w	r8, r6, r7
 80022b4:	608b      	str	r3, [r1, #8]
 80022b6:	f1b8 0f00 	cmp.w	r8, #0
 80022ba:	dd9c      	ble.n	80021f6 <__sflush_r+0x1a>
 80022bc:	4643      	mov	r3, r8
 80022be:	463a      	mov	r2, r7
 80022c0:	6a21      	ldr	r1, [r4, #32]
 80022c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80022c4:	4628      	mov	r0, r5
 80022c6:	47b0      	blx	r6
 80022c8:	2800      	cmp	r0, #0
 80022ca:	dc06      	bgt.n	80022da <__sflush_r+0xfe>
 80022cc:	89a3      	ldrh	r3, [r4, #12]
 80022ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022d2:	81a3      	strh	r3, [r4, #12]
 80022d4:	f04f 30ff 	mov.w	r0, #4294967295
 80022d8:	e78e      	b.n	80021f8 <__sflush_r+0x1c>
 80022da:	4407      	add	r7, r0
 80022dc:	eba8 0800 	sub.w	r8, r8, r0
 80022e0:	e7e9      	b.n	80022b6 <__sflush_r+0xda>
 80022e2:	bf00      	nop
 80022e4:	20400001 	.word	0x20400001

080022e8 <_fflush_r>:
 80022e8:	b538      	push	{r3, r4, r5, lr}
 80022ea:	690b      	ldr	r3, [r1, #16]
 80022ec:	4605      	mov	r5, r0
 80022ee:	460c      	mov	r4, r1
 80022f0:	b1db      	cbz	r3, 800232a <_fflush_r+0x42>
 80022f2:	b118      	cbz	r0, 80022fc <_fflush_r+0x14>
 80022f4:	6983      	ldr	r3, [r0, #24]
 80022f6:	b90b      	cbnz	r3, 80022fc <_fflush_r+0x14>
 80022f8:	f000 f860 	bl	80023bc <__sinit>
 80022fc:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <_fflush_r+0x48>)
 80022fe:	429c      	cmp	r4, r3
 8002300:	d109      	bne.n	8002316 <_fflush_r+0x2e>
 8002302:	686c      	ldr	r4, [r5, #4]
 8002304:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002308:	b17b      	cbz	r3, 800232a <_fflush_r+0x42>
 800230a:	4621      	mov	r1, r4
 800230c:	4628      	mov	r0, r5
 800230e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002312:	f7ff bf63 	b.w	80021dc <__sflush_r>
 8002316:	4b07      	ldr	r3, [pc, #28]	; (8002334 <_fflush_r+0x4c>)
 8002318:	429c      	cmp	r4, r3
 800231a:	d101      	bne.n	8002320 <_fflush_r+0x38>
 800231c:	68ac      	ldr	r4, [r5, #8]
 800231e:	e7f1      	b.n	8002304 <_fflush_r+0x1c>
 8002320:	4b05      	ldr	r3, [pc, #20]	; (8002338 <_fflush_r+0x50>)
 8002322:	429c      	cmp	r4, r3
 8002324:	bf08      	it	eq
 8002326:	68ec      	ldreq	r4, [r5, #12]
 8002328:	e7ec      	b.n	8002304 <_fflush_r+0x1c>
 800232a:	2000      	movs	r0, #0
 800232c:	bd38      	pop	{r3, r4, r5, pc}
 800232e:	bf00      	nop
 8002330:	08002e54 	.word	0x08002e54
 8002334:	08002e74 	.word	0x08002e74
 8002338:	08002e34 	.word	0x08002e34

0800233c <std>:
 800233c:	2300      	movs	r3, #0
 800233e:	b510      	push	{r4, lr}
 8002340:	4604      	mov	r4, r0
 8002342:	e9c0 3300 	strd	r3, r3, [r0]
 8002346:	6083      	str	r3, [r0, #8]
 8002348:	8181      	strh	r1, [r0, #12]
 800234a:	6643      	str	r3, [r0, #100]	; 0x64
 800234c:	81c2      	strh	r2, [r0, #14]
 800234e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002352:	6183      	str	r3, [r0, #24]
 8002354:	4619      	mov	r1, r3
 8002356:	2208      	movs	r2, #8
 8002358:	305c      	adds	r0, #92	; 0x5c
 800235a:	f7ff fdfb 	bl	8001f54 <memset>
 800235e:	4b05      	ldr	r3, [pc, #20]	; (8002374 <std+0x38>)
 8002360:	6263      	str	r3, [r4, #36]	; 0x24
 8002362:	4b05      	ldr	r3, [pc, #20]	; (8002378 <std+0x3c>)
 8002364:	62a3      	str	r3, [r4, #40]	; 0x28
 8002366:	4b05      	ldr	r3, [pc, #20]	; (800237c <std+0x40>)
 8002368:	62e3      	str	r3, [r4, #44]	; 0x2c
 800236a:	4b05      	ldr	r3, [pc, #20]	; (8002380 <std+0x44>)
 800236c:	6224      	str	r4, [r4, #32]
 800236e:	6323      	str	r3, [r4, #48]	; 0x30
 8002370:	bd10      	pop	{r4, pc}
 8002372:	bf00      	nop
 8002374:	08002c99 	.word	0x08002c99
 8002378:	08002cbb 	.word	0x08002cbb
 800237c:	08002cf3 	.word	0x08002cf3
 8002380:	08002d17 	.word	0x08002d17

08002384 <_cleanup_r>:
 8002384:	4901      	ldr	r1, [pc, #4]	; (800238c <_cleanup_r+0x8>)
 8002386:	f000 b885 	b.w	8002494 <_fwalk_reent>
 800238a:	bf00      	nop
 800238c:	080022e9 	.word	0x080022e9

08002390 <__sfmoreglue>:
 8002390:	b570      	push	{r4, r5, r6, lr}
 8002392:	1e4a      	subs	r2, r1, #1
 8002394:	2568      	movs	r5, #104	; 0x68
 8002396:	4355      	muls	r5, r2
 8002398:	460e      	mov	r6, r1
 800239a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800239e:	f000 f949 	bl	8002634 <_malloc_r>
 80023a2:	4604      	mov	r4, r0
 80023a4:	b140      	cbz	r0, 80023b8 <__sfmoreglue+0x28>
 80023a6:	2100      	movs	r1, #0
 80023a8:	e9c0 1600 	strd	r1, r6, [r0]
 80023ac:	300c      	adds	r0, #12
 80023ae:	60a0      	str	r0, [r4, #8]
 80023b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80023b4:	f7ff fdce 	bl	8001f54 <memset>
 80023b8:	4620      	mov	r0, r4
 80023ba:	bd70      	pop	{r4, r5, r6, pc}

080023bc <__sinit>:
 80023bc:	6983      	ldr	r3, [r0, #24]
 80023be:	b510      	push	{r4, lr}
 80023c0:	4604      	mov	r4, r0
 80023c2:	bb33      	cbnz	r3, 8002412 <__sinit+0x56>
 80023c4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80023c8:	6503      	str	r3, [r0, #80]	; 0x50
 80023ca:	4b12      	ldr	r3, [pc, #72]	; (8002414 <__sinit+0x58>)
 80023cc:	4a12      	ldr	r2, [pc, #72]	; (8002418 <__sinit+0x5c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6282      	str	r2, [r0, #40]	; 0x28
 80023d2:	4298      	cmp	r0, r3
 80023d4:	bf04      	itt	eq
 80023d6:	2301      	moveq	r3, #1
 80023d8:	6183      	streq	r3, [r0, #24]
 80023da:	f000 f81f 	bl	800241c <__sfp>
 80023de:	6060      	str	r0, [r4, #4]
 80023e0:	4620      	mov	r0, r4
 80023e2:	f000 f81b 	bl	800241c <__sfp>
 80023e6:	60a0      	str	r0, [r4, #8]
 80023e8:	4620      	mov	r0, r4
 80023ea:	f000 f817 	bl	800241c <__sfp>
 80023ee:	2200      	movs	r2, #0
 80023f0:	60e0      	str	r0, [r4, #12]
 80023f2:	2104      	movs	r1, #4
 80023f4:	6860      	ldr	r0, [r4, #4]
 80023f6:	f7ff ffa1 	bl	800233c <std>
 80023fa:	2201      	movs	r2, #1
 80023fc:	2109      	movs	r1, #9
 80023fe:	68a0      	ldr	r0, [r4, #8]
 8002400:	f7ff ff9c 	bl	800233c <std>
 8002404:	2202      	movs	r2, #2
 8002406:	2112      	movs	r1, #18
 8002408:	68e0      	ldr	r0, [r4, #12]
 800240a:	f7ff ff97 	bl	800233c <std>
 800240e:	2301      	movs	r3, #1
 8002410:	61a3      	str	r3, [r4, #24]
 8002412:	bd10      	pop	{r4, pc}
 8002414:	08002e30 	.word	0x08002e30
 8002418:	08002385 	.word	0x08002385

0800241c <__sfp>:
 800241c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800241e:	4b1b      	ldr	r3, [pc, #108]	; (800248c <__sfp+0x70>)
 8002420:	681e      	ldr	r6, [r3, #0]
 8002422:	69b3      	ldr	r3, [r6, #24]
 8002424:	4607      	mov	r7, r0
 8002426:	b913      	cbnz	r3, 800242e <__sfp+0x12>
 8002428:	4630      	mov	r0, r6
 800242a:	f7ff ffc7 	bl	80023bc <__sinit>
 800242e:	3648      	adds	r6, #72	; 0x48
 8002430:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002434:	3b01      	subs	r3, #1
 8002436:	d503      	bpl.n	8002440 <__sfp+0x24>
 8002438:	6833      	ldr	r3, [r6, #0]
 800243a:	b133      	cbz	r3, 800244a <__sfp+0x2e>
 800243c:	6836      	ldr	r6, [r6, #0]
 800243e:	e7f7      	b.n	8002430 <__sfp+0x14>
 8002440:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002444:	b16d      	cbz	r5, 8002462 <__sfp+0x46>
 8002446:	3468      	adds	r4, #104	; 0x68
 8002448:	e7f4      	b.n	8002434 <__sfp+0x18>
 800244a:	2104      	movs	r1, #4
 800244c:	4638      	mov	r0, r7
 800244e:	f7ff ff9f 	bl	8002390 <__sfmoreglue>
 8002452:	6030      	str	r0, [r6, #0]
 8002454:	2800      	cmp	r0, #0
 8002456:	d1f1      	bne.n	800243c <__sfp+0x20>
 8002458:	230c      	movs	r3, #12
 800245a:	603b      	str	r3, [r7, #0]
 800245c:	4604      	mov	r4, r0
 800245e:	4620      	mov	r0, r4
 8002460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002462:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <__sfp+0x74>)
 8002464:	6665      	str	r5, [r4, #100]	; 0x64
 8002466:	e9c4 5500 	strd	r5, r5, [r4]
 800246a:	60a5      	str	r5, [r4, #8]
 800246c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002470:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002474:	2208      	movs	r2, #8
 8002476:	4629      	mov	r1, r5
 8002478:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800247c:	f7ff fd6a 	bl	8001f54 <memset>
 8002480:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002484:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002488:	e7e9      	b.n	800245e <__sfp+0x42>
 800248a:	bf00      	nop
 800248c:	08002e30 	.word	0x08002e30
 8002490:	ffff0001 	.word	0xffff0001

08002494 <_fwalk_reent>:
 8002494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002498:	4680      	mov	r8, r0
 800249a:	4689      	mov	r9, r1
 800249c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80024a0:	2600      	movs	r6, #0
 80024a2:	b914      	cbnz	r4, 80024aa <_fwalk_reent+0x16>
 80024a4:	4630      	mov	r0, r6
 80024a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80024aa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80024ae:	3f01      	subs	r7, #1
 80024b0:	d501      	bpl.n	80024b6 <_fwalk_reent+0x22>
 80024b2:	6824      	ldr	r4, [r4, #0]
 80024b4:	e7f5      	b.n	80024a2 <_fwalk_reent+0xe>
 80024b6:	89ab      	ldrh	r3, [r5, #12]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d907      	bls.n	80024cc <_fwalk_reent+0x38>
 80024bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80024c0:	3301      	adds	r3, #1
 80024c2:	d003      	beq.n	80024cc <_fwalk_reent+0x38>
 80024c4:	4629      	mov	r1, r5
 80024c6:	4640      	mov	r0, r8
 80024c8:	47c8      	blx	r9
 80024ca:	4306      	orrs	r6, r0
 80024cc:	3568      	adds	r5, #104	; 0x68
 80024ce:	e7ee      	b.n	80024ae <_fwalk_reent+0x1a>

080024d0 <__swhatbuf_r>:
 80024d0:	b570      	push	{r4, r5, r6, lr}
 80024d2:	460e      	mov	r6, r1
 80024d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024d8:	2900      	cmp	r1, #0
 80024da:	b096      	sub	sp, #88	; 0x58
 80024dc:	4614      	mov	r4, r2
 80024de:	461d      	mov	r5, r3
 80024e0:	da07      	bge.n	80024f2 <__swhatbuf_r+0x22>
 80024e2:	2300      	movs	r3, #0
 80024e4:	602b      	str	r3, [r5, #0]
 80024e6:	89b3      	ldrh	r3, [r6, #12]
 80024e8:	061a      	lsls	r2, r3, #24
 80024ea:	d410      	bmi.n	800250e <__swhatbuf_r+0x3e>
 80024ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024f0:	e00e      	b.n	8002510 <__swhatbuf_r+0x40>
 80024f2:	466a      	mov	r2, sp
 80024f4:	f000 fc36 	bl	8002d64 <_fstat_r>
 80024f8:	2800      	cmp	r0, #0
 80024fa:	dbf2      	blt.n	80024e2 <__swhatbuf_r+0x12>
 80024fc:	9a01      	ldr	r2, [sp, #4]
 80024fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002502:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002506:	425a      	negs	r2, r3
 8002508:	415a      	adcs	r2, r3
 800250a:	602a      	str	r2, [r5, #0]
 800250c:	e7ee      	b.n	80024ec <__swhatbuf_r+0x1c>
 800250e:	2340      	movs	r3, #64	; 0x40
 8002510:	2000      	movs	r0, #0
 8002512:	6023      	str	r3, [r4, #0]
 8002514:	b016      	add	sp, #88	; 0x58
 8002516:	bd70      	pop	{r4, r5, r6, pc}

08002518 <__smakebuf_r>:
 8002518:	898b      	ldrh	r3, [r1, #12]
 800251a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800251c:	079d      	lsls	r5, r3, #30
 800251e:	4606      	mov	r6, r0
 8002520:	460c      	mov	r4, r1
 8002522:	d507      	bpl.n	8002534 <__smakebuf_r+0x1c>
 8002524:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002528:	6023      	str	r3, [r4, #0]
 800252a:	6123      	str	r3, [r4, #16]
 800252c:	2301      	movs	r3, #1
 800252e:	6163      	str	r3, [r4, #20]
 8002530:	b002      	add	sp, #8
 8002532:	bd70      	pop	{r4, r5, r6, pc}
 8002534:	ab01      	add	r3, sp, #4
 8002536:	466a      	mov	r2, sp
 8002538:	f7ff ffca 	bl	80024d0 <__swhatbuf_r>
 800253c:	9900      	ldr	r1, [sp, #0]
 800253e:	4605      	mov	r5, r0
 8002540:	4630      	mov	r0, r6
 8002542:	f000 f877 	bl	8002634 <_malloc_r>
 8002546:	b948      	cbnz	r0, 800255c <__smakebuf_r+0x44>
 8002548:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800254c:	059a      	lsls	r2, r3, #22
 800254e:	d4ef      	bmi.n	8002530 <__smakebuf_r+0x18>
 8002550:	f023 0303 	bic.w	r3, r3, #3
 8002554:	f043 0302 	orr.w	r3, r3, #2
 8002558:	81a3      	strh	r3, [r4, #12]
 800255a:	e7e3      	b.n	8002524 <__smakebuf_r+0xc>
 800255c:	4b0d      	ldr	r3, [pc, #52]	; (8002594 <__smakebuf_r+0x7c>)
 800255e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002560:	89a3      	ldrh	r3, [r4, #12]
 8002562:	6020      	str	r0, [r4, #0]
 8002564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002568:	81a3      	strh	r3, [r4, #12]
 800256a:	9b00      	ldr	r3, [sp, #0]
 800256c:	6163      	str	r3, [r4, #20]
 800256e:	9b01      	ldr	r3, [sp, #4]
 8002570:	6120      	str	r0, [r4, #16]
 8002572:	b15b      	cbz	r3, 800258c <__smakebuf_r+0x74>
 8002574:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002578:	4630      	mov	r0, r6
 800257a:	f000 fc05 	bl	8002d88 <_isatty_r>
 800257e:	b128      	cbz	r0, 800258c <__smakebuf_r+0x74>
 8002580:	89a3      	ldrh	r3, [r4, #12]
 8002582:	f023 0303 	bic.w	r3, r3, #3
 8002586:	f043 0301 	orr.w	r3, r3, #1
 800258a:	81a3      	strh	r3, [r4, #12]
 800258c:	89a3      	ldrh	r3, [r4, #12]
 800258e:	431d      	orrs	r5, r3
 8002590:	81a5      	strh	r5, [r4, #12]
 8002592:	e7cd      	b.n	8002530 <__smakebuf_r+0x18>
 8002594:	08002385 	.word	0x08002385

08002598 <_free_r>:
 8002598:	b538      	push	{r3, r4, r5, lr}
 800259a:	4605      	mov	r5, r0
 800259c:	2900      	cmp	r1, #0
 800259e:	d045      	beq.n	800262c <_free_r+0x94>
 80025a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80025a4:	1f0c      	subs	r4, r1, #4
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	bfb8      	it	lt
 80025aa:	18e4      	addlt	r4, r4, r3
 80025ac:	f000 fc0e 	bl	8002dcc <__malloc_lock>
 80025b0:	4a1f      	ldr	r2, [pc, #124]	; (8002630 <_free_r+0x98>)
 80025b2:	6813      	ldr	r3, [r2, #0]
 80025b4:	4610      	mov	r0, r2
 80025b6:	b933      	cbnz	r3, 80025c6 <_free_r+0x2e>
 80025b8:	6063      	str	r3, [r4, #4]
 80025ba:	6014      	str	r4, [r2, #0]
 80025bc:	4628      	mov	r0, r5
 80025be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80025c2:	f000 bc04 	b.w	8002dce <__malloc_unlock>
 80025c6:	42a3      	cmp	r3, r4
 80025c8:	d90c      	bls.n	80025e4 <_free_r+0x4c>
 80025ca:	6821      	ldr	r1, [r4, #0]
 80025cc:	1862      	adds	r2, r4, r1
 80025ce:	4293      	cmp	r3, r2
 80025d0:	bf04      	itt	eq
 80025d2:	681a      	ldreq	r2, [r3, #0]
 80025d4:	685b      	ldreq	r3, [r3, #4]
 80025d6:	6063      	str	r3, [r4, #4]
 80025d8:	bf04      	itt	eq
 80025da:	1852      	addeq	r2, r2, r1
 80025dc:	6022      	streq	r2, [r4, #0]
 80025de:	6004      	str	r4, [r0, #0]
 80025e0:	e7ec      	b.n	80025bc <_free_r+0x24>
 80025e2:	4613      	mov	r3, r2
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	b10a      	cbz	r2, 80025ec <_free_r+0x54>
 80025e8:	42a2      	cmp	r2, r4
 80025ea:	d9fa      	bls.n	80025e2 <_free_r+0x4a>
 80025ec:	6819      	ldr	r1, [r3, #0]
 80025ee:	1858      	adds	r0, r3, r1
 80025f0:	42a0      	cmp	r0, r4
 80025f2:	d10b      	bne.n	800260c <_free_r+0x74>
 80025f4:	6820      	ldr	r0, [r4, #0]
 80025f6:	4401      	add	r1, r0
 80025f8:	1858      	adds	r0, r3, r1
 80025fa:	4282      	cmp	r2, r0
 80025fc:	6019      	str	r1, [r3, #0]
 80025fe:	d1dd      	bne.n	80025bc <_free_r+0x24>
 8002600:	6810      	ldr	r0, [r2, #0]
 8002602:	6852      	ldr	r2, [r2, #4]
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	4401      	add	r1, r0
 8002608:	6019      	str	r1, [r3, #0]
 800260a:	e7d7      	b.n	80025bc <_free_r+0x24>
 800260c:	d902      	bls.n	8002614 <_free_r+0x7c>
 800260e:	230c      	movs	r3, #12
 8002610:	602b      	str	r3, [r5, #0]
 8002612:	e7d3      	b.n	80025bc <_free_r+0x24>
 8002614:	6820      	ldr	r0, [r4, #0]
 8002616:	1821      	adds	r1, r4, r0
 8002618:	428a      	cmp	r2, r1
 800261a:	bf04      	itt	eq
 800261c:	6811      	ldreq	r1, [r2, #0]
 800261e:	6852      	ldreq	r2, [r2, #4]
 8002620:	6062      	str	r2, [r4, #4]
 8002622:	bf04      	itt	eq
 8002624:	1809      	addeq	r1, r1, r0
 8002626:	6021      	streq	r1, [r4, #0]
 8002628:	605c      	str	r4, [r3, #4]
 800262a:	e7c7      	b.n	80025bc <_free_r+0x24>
 800262c:	bd38      	pop	{r3, r4, r5, pc}
 800262e:	bf00      	nop
 8002630:	20000090 	.word	0x20000090

08002634 <_malloc_r>:
 8002634:	b570      	push	{r4, r5, r6, lr}
 8002636:	1ccd      	adds	r5, r1, #3
 8002638:	f025 0503 	bic.w	r5, r5, #3
 800263c:	3508      	adds	r5, #8
 800263e:	2d0c      	cmp	r5, #12
 8002640:	bf38      	it	cc
 8002642:	250c      	movcc	r5, #12
 8002644:	2d00      	cmp	r5, #0
 8002646:	4606      	mov	r6, r0
 8002648:	db01      	blt.n	800264e <_malloc_r+0x1a>
 800264a:	42a9      	cmp	r1, r5
 800264c:	d903      	bls.n	8002656 <_malloc_r+0x22>
 800264e:	230c      	movs	r3, #12
 8002650:	6033      	str	r3, [r6, #0]
 8002652:	2000      	movs	r0, #0
 8002654:	bd70      	pop	{r4, r5, r6, pc}
 8002656:	f000 fbb9 	bl	8002dcc <__malloc_lock>
 800265a:	4a21      	ldr	r2, [pc, #132]	; (80026e0 <_malloc_r+0xac>)
 800265c:	6814      	ldr	r4, [r2, #0]
 800265e:	4621      	mov	r1, r4
 8002660:	b991      	cbnz	r1, 8002688 <_malloc_r+0x54>
 8002662:	4c20      	ldr	r4, [pc, #128]	; (80026e4 <_malloc_r+0xb0>)
 8002664:	6823      	ldr	r3, [r4, #0]
 8002666:	b91b      	cbnz	r3, 8002670 <_malloc_r+0x3c>
 8002668:	4630      	mov	r0, r6
 800266a:	f000 fb05 	bl	8002c78 <_sbrk_r>
 800266e:	6020      	str	r0, [r4, #0]
 8002670:	4629      	mov	r1, r5
 8002672:	4630      	mov	r0, r6
 8002674:	f000 fb00 	bl	8002c78 <_sbrk_r>
 8002678:	1c43      	adds	r3, r0, #1
 800267a:	d124      	bne.n	80026c6 <_malloc_r+0x92>
 800267c:	230c      	movs	r3, #12
 800267e:	6033      	str	r3, [r6, #0]
 8002680:	4630      	mov	r0, r6
 8002682:	f000 fba4 	bl	8002dce <__malloc_unlock>
 8002686:	e7e4      	b.n	8002652 <_malloc_r+0x1e>
 8002688:	680b      	ldr	r3, [r1, #0]
 800268a:	1b5b      	subs	r3, r3, r5
 800268c:	d418      	bmi.n	80026c0 <_malloc_r+0x8c>
 800268e:	2b0b      	cmp	r3, #11
 8002690:	d90f      	bls.n	80026b2 <_malloc_r+0x7e>
 8002692:	600b      	str	r3, [r1, #0]
 8002694:	50cd      	str	r5, [r1, r3]
 8002696:	18cc      	adds	r4, r1, r3
 8002698:	4630      	mov	r0, r6
 800269a:	f000 fb98 	bl	8002dce <__malloc_unlock>
 800269e:	f104 000b 	add.w	r0, r4, #11
 80026a2:	1d23      	adds	r3, r4, #4
 80026a4:	f020 0007 	bic.w	r0, r0, #7
 80026a8:	1ac3      	subs	r3, r0, r3
 80026aa:	d0d3      	beq.n	8002654 <_malloc_r+0x20>
 80026ac:	425a      	negs	r2, r3
 80026ae:	50e2      	str	r2, [r4, r3]
 80026b0:	e7d0      	b.n	8002654 <_malloc_r+0x20>
 80026b2:	428c      	cmp	r4, r1
 80026b4:	684b      	ldr	r3, [r1, #4]
 80026b6:	bf16      	itet	ne
 80026b8:	6063      	strne	r3, [r4, #4]
 80026ba:	6013      	streq	r3, [r2, #0]
 80026bc:	460c      	movne	r4, r1
 80026be:	e7eb      	b.n	8002698 <_malloc_r+0x64>
 80026c0:	460c      	mov	r4, r1
 80026c2:	6849      	ldr	r1, [r1, #4]
 80026c4:	e7cc      	b.n	8002660 <_malloc_r+0x2c>
 80026c6:	1cc4      	adds	r4, r0, #3
 80026c8:	f024 0403 	bic.w	r4, r4, #3
 80026cc:	42a0      	cmp	r0, r4
 80026ce:	d005      	beq.n	80026dc <_malloc_r+0xa8>
 80026d0:	1a21      	subs	r1, r4, r0
 80026d2:	4630      	mov	r0, r6
 80026d4:	f000 fad0 	bl	8002c78 <_sbrk_r>
 80026d8:	3001      	adds	r0, #1
 80026da:	d0cf      	beq.n	800267c <_malloc_r+0x48>
 80026dc:	6025      	str	r5, [r4, #0]
 80026de:	e7db      	b.n	8002698 <_malloc_r+0x64>
 80026e0:	20000090 	.word	0x20000090
 80026e4:	20000094 	.word	0x20000094

080026e8 <__sfputc_r>:
 80026e8:	6893      	ldr	r3, [r2, #8]
 80026ea:	3b01      	subs	r3, #1
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	b410      	push	{r4}
 80026f0:	6093      	str	r3, [r2, #8]
 80026f2:	da08      	bge.n	8002706 <__sfputc_r+0x1e>
 80026f4:	6994      	ldr	r4, [r2, #24]
 80026f6:	42a3      	cmp	r3, r4
 80026f8:	db01      	blt.n	80026fe <__sfputc_r+0x16>
 80026fa:	290a      	cmp	r1, #10
 80026fc:	d103      	bne.n	8002706 <__sfputc_r+0x1e>
 80026fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002702:	f7ff bcab 	b.w	800205c <__swbuf_r>
 8002706:	6813      	ldr	r3, [r2, #0]
 8002708:	1c58      	adds	r0, r3, #1
 800270a:	6010      	str	r0, [r2, #0]
 800270c:	7019      	strb	r1, [r3, #0]
 800270e:	4608      	mov	r0, r1
 8002710:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002714:	4770      	bx	lr

08002716 <__sfputs_r>:
 8002716:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002718:	4606      	mov	r6, r0
 800271a:	460f      	mov	r7, r1
 800271c:	4614      	mov	r4, r2
 800271e:	18d5      	adds	r5, r2, r3
 8002720:	42ac      	cmp	r4, r5
 8002722:	d101      	bne.n	8002728 <__sfputs_r+0x12>
 8002724:	2000      	movs	r0, #0
 8002726:	e007      	b.n	8002738 <__sfputs_r+0x22>
 8002728:	463a      	mov	r2, r7
 800272a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800272e:	4630      	mov	r0, r6
 8002730:	f7ff ffda 	bl	80026e8 <__sfputc_r>
 8002734:	1c43      	adds	r3, r0, #1
 8002736:	d1f3      	bne.n	8002720 <__sfputs_r+0xa>
 8002738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800273c <_vfiprintf_r>:
 800273c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002740:	460c      	mov	r4, r1
 8002742:	b09d      	sub	sp, #116	; 0x74
 8002744:	4617      	mov	r7, r2
 8002746:	461d      	mov	r5, r3
 8002748:	4606      	mov	r6, r0
 800274a:	b118      	cbz	r0, 8002754 <_vfiprintf_r+0x18>
 800274c:	6983      	ldr	r3, [r0, #24]
 800274e:	b90b      	cbnz	r3, 8002754 <_vfiprintf_r+0x18>
 8002750:	f7ff fe34 	bl	80023bc <__sinit>
 8002754:	4b7c      	ldr	r3, [pc, #496]	; (8002948 <_vfiprintf_r+0x20c>)
 8002756:	429c      	cmp	r4, r3
 8002758:	d158      	bne.n	800280c <_vfiprintf_r+0xd0>
 800275a:	6874      	ldr	r4, [r6, #4]
 800275c:	89a3      	ldrh	r3, [r4, #12]
 800275e:	0718      	lsls	r0, r3, #28
 8002760:	d55e      	bpl.n	8002820 <_vfiprintf_r+0xe4>
 8002762:	6923      	ldr	r3, [r4, #16]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d05b      	beq.n	8002820 <_vfiprintf_r+0xe4>
 8002768:	2300      	movs	r3, #0
 800276a:	9309      	str	r3, [sp, #36]	; 0x24
 800276c:	2320      	movs	r3, #32
 800276e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002772:	2330      	movs	r3, #48	; 0x30
 8002774:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002778:	9503      	str	r5, [sp, #12]
 800277a:	f04f 0b01 	mov.w	fp, #1
 800277e:	46b8      	mov	r8, r7
 8002780:	4645      	mov	r5, r8
 8002782:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002786:	b10b      	cbz	r3, 800278c <_vfiprintf_r+0x50>
 8002788:	2b25      	cmp	r3, #37	; 0x25
 800278a:	d154      	bne.n	8002836 <_vfiprintf_r+0xfa>
 800278c:	ebb8 0a07 	subs.w	sl, r8, r7
 8002790:	d00b      	beq.n	80027aa <_vfiprintf_r+0x6e>
 8002792:	4653      	mov	r3, sl
 8002794:	463a      	mov	r2, r7
 8002796:	4621      	mov	r1, r4
 8002798:	4630      	mov	r0, r6
 800279a:	f7ff ffbc 	bl	8002716 <__sfputs_r>
 800279e:	3001      	adds	r0, #1
 80027a0:	f000 80c2 	beq.w	8002928 <_vfiprintf_r+0x1ec>
 80027a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80027a6:	4453      	add	r3, sl
 80027a8:	9309      	str	r3, [sp, #36]	; 0x24
 80027aa:	f898 3000 	ldrb.w	r3, [r8]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f000 80ba 	beq.w	8002928 <_vfiprintf_r+0x1ec>
 80027b4:	2300      	movs	r3, #0
 80027b6:	f04f 32ff 	mov.w	r2, #4294967295
 80027ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80027be:	9304      	str	r3, [sp, #16]
 80027c0:	9307      	str	r3, [sp, #28]
 80027c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80027c6:	931a      	str	r3, [sp, #104]	; 0x68
 80027c8:	46a8      	mov	r8, r5
 80027ca:	2205      	movs	r2, #5
 80027cc:	f818 1b01 	ldrb.w	r1, [r8], #1
 80027d0:	485e      	ldr	r0, [pc, #376]	; (800294c <_vfiprintf_r+0x210>)
 80027d2:	f7fd fcfd 	bl	80001d0 <memchr>
 80027d6:	9b04      	ldr	r3, [sp, #16]
 80027d8:	bb78      	cbnz	r0, 800283a <_vfiprintf_r+0xfe>
 80027da:	06d9      	lsls	r1, r3, #27
 80027dc:	bf44      	itt	mi
 80027de:	2220      	movmi	r2, #32
 80027e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80027e4:	071a      	lsls	r2, r3, #28
 80027e6:	bf44      	itt	mi
 80027e8:	222b      	movmi	r2, #43	; 0x2b
 80027ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80027ee:	782a      	ldrb	r2, [r5, #0]
 80027f0:	2a2a      	cmp	r2, #42	; 0x2a
 80027f2:	d02a      	beq.n	800284a <_vfiprintf_r+0x10e>
 80027f4:	9a07      	ldr	r2, [sp, #28]
 80027f6:	46a8      	mov	r8, r5
 80027f8:	2000      	movs	r0, #0
 80027fa:	250a      	movs	r5, #10
 80027fc:	4641      	mov	r1, r8
 80027fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002802:	3b30      	subs	r3, #48	; 0x30
 8002804:	2b09      	cmp	r3, #9
 8002806:	d969      	bls.n	80028dc <_vfiprintf_r+0x1a0>
 8002808:	b360      	cbz	r0, 8002864 <_vfiprintf_r+0x128>
 800280a:	e024      	b.n	8002856 <_vfiprintf_r+0x11a>
 800280c:	4b50      	ldr	r3, [pc, #320]	; (8002950 <_vfiprintf_r+0x214>)
 800280e:	429c      	cmp	r4, r3
 8002810:	d101      	bne.n	8002816 <_vfiprintf_r+0xda>
 8002812:	68b4      	ldr	r4, [r6, #8]
 8002814:	e7a2      	b.n	800275c <_vfiprintf_r+0x20>
 8002816:	4b4f      	ldr	r3, [pc, #316]	; (8002954 <_vfiprintf_r+0x218>)
 8002818:	429c      	cmp	r4, r3
 800281a:	bf08      	it	eq
 800281c:	68f4      	ldreq	r4, [r6, #12]
 800281e:	e79d      	b.n	800275c <_vfiprintf_r+0x20>
 8002820:	4621      	mov	r1, r4
 8002822:	4630      	mov	r0, r6
 8002824:	f7ff fc6c 	bl	8002100 <__swsetup_r>
 8002828:	2800      	cmp	r0, #0
 800282a:	d09d      	beq.n	8002768 <_vfiprintf_r+0x2c>
 800282c:	f04f 30ff 	mov.w	r0, #4294967295
 8002830:	b01d      	add	sp, #116	; 0x74
 8002832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002836:	46a8      	mov	r8, r5
 8002838:	e7a2      	b.n	8002780 <_vfiprintf_r+0x44>
 800283a:	4a44      	ldr	r2, [pc, #272]	; (800294c <_vfiprintf_r+0x210>)
 800283c:	1a80      	subs	r0, r0, r2
 800283e:	fa0b f000 	lsl.w	r0, fp, r0
 8002842:	4318      	orrs	r0, r3
 8002844:	9004      	str	r0, [sp, #16]
 8002846:	4645      	mov	r5, r8
 8002848:	e7be      	b.n	80027c8 <_vfiprintf_r+0x8c>
 800284a:	9a03      	ldr	r2, [sp, #12]
 800284c:	1d11      	adds	r1, r2, #4
 800284e:	6812      	ldr	r2, [r2, #0]
 8002850:	9103      	str	r1, [sp, #12]
 8002852:	2a00      	cmp	r2, #0
 8002854:	db01      	blt.n	800285a <_vfiprintf_r+0x11e>
 8002856:	9207      	str	r2, [sp, #28]
 8002858:	e004      	b.n	8002864 <_vfiprintf_r+0x128>
 800285a:	4252      	negs	r2, r2
 800285c:	f043 0302 	orr.w	r3, r3, #2
 8002860:	9207      	str	r2, [sp, #28]
 8002862:	9304      	str	r3, [sp, #16]
 8002864:	f898 3000 	ldrb.w	r3, [r8]
 8002868:	2b2e      	cmp	r3, #46	; 0x2e
 800286a:	d10e      	bne.n	800288a <_vfiprintf_r+0x14e>
 800286c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002870:	2b2a      	cmp	r3, #42	; 0x2a
 8002872:	d138      	bne.n	80028e6 <_vfiprintf_r+0x1aa>
 8002874:	9b03      	ldr	r3, [sp, #12]
 8002876:	1d1a      	adds	r2, r3, #4
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	9203      	str	r2, [sp, #12]
 800287c:	2b00      	cmp	r3, #0
 800287e:	bfb8      	it	lt
 8002880:	f04f 33ff 	movlt.w	r3, #4294967295
 8002884:	f108 0802 	add.w	r8, r8, #2
 8002888:	9305      	str	r3, [sp, #20]
 800288a:	4d33      	ldr	r5, [pc, #204]	; (8002958 <_vfiprintf_r+0x21c>)
 800288c:	f898 1000 	ldrb.w	r1, [r8]
 8002890:	2203      	movs	r2, #3
 8002892:	4628      	mov	r0, r5
 8002894:	f7fd fc9c 	bl	80001d0 <memchr>
 8002898:	b140      	cbz	r0, 80028ac <_vfiprintf_r+0x170>
 800289a:	2340      	movs	r3, #64	; 0x40
 800289c:	1b40      	subs	r0, r0, r5
 800289e:	fa03 f000 	lsl.w	r0, r3, r0
 80028a2:	9b04      	ldr	r3, [sp, #16]
 80028a4:	4303      	orrs	r3, r0
 80028a6:	f108 0801 	add.w	r8, r8, #1
 80028aa:	9304      	str	r3, [sp, #16]
 80028ac:	f898 1000 	ldrb.w	r1, [r8]
 80028b0:	482a      	ldr	r0, [pc, #168]	; (800295c <_vfiprintf_r+0x220>)
 80028b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80028b6:	2206      	movs	r2, #6
 80028b8:	f108 0701 	add.w	r7, r8, #1
 80028bc:	f7fd fc88 	bl	80001d0 <memchr>
 80028c0:	2800      	cmp	r0, #0
 80028c2:	d037      	beq.n	8002934 <_vfiprintf_r+0x1f8>
 80028c4:	4b26      	ldr	r3, [pc, #152]	; (8002960 <_vfiprintf_r+0x224>)
 80028c6:	bb1b      	cbnz	r3, 8002910 <_vfiprintf_r+0x1d4>
 80028c8:	9b03      	ldr	r3, [sp, #12]
 80028ca:	3307      	adds	r3, #7
 80028cc:	f023 0307 	bic.w	r3, r3, #7
 80028d0:	3308      	adds	r3, #8
 80028d2:	9303      	str	r3, [sp, #12]
 80028d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80028d6:	444b      	add	r3, r9
 80028d8:	9309      	str	r3, [sp, #36]	; 0x24
 80028da:	e750      	b.n	800277e <_vfiprintf_r+0x42>
 80028dc:	fb05 3202 	mla	r2, r5, r2, r3
 80028e0:	2001      	movs	r0, #1
 80028e2:	4688      	mov	r8, r1
 80028e4:	e78a      	b.n	80027fc <_vfiprintf_r+0xc0>
 80028e6:	2300      	movs	r3, #0
 80028e8:	f108 0801 	add.w	r8, r8, #1
 80028ec:	9305      	str	r3, [sp, #20]
 80028ee:	4619      	mov	r1, r3
 80028f0:	250a      	movs	r5, #10
 80028f2:	4640      	mov	r0, r8
 80028f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80028f8:	3a30      	subs	r2, #48	; 0x30
 80028fa:	2a09      	cmp	r2, #9
 80028fc:	d903      	bls.n	8002906 <_vfiprintf_r+0x1ca>
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0c3      	beq.n	800288a <_vfiprintf_r+0x14e>
 8002902:	9105      	str	r1, [sp, #20]
 8002904:	e7c1      	b.n	800288a <_vfiprintf_r+0x14e>
 8002906:	fb05 2101 	mla	r1, r5, r1, r2
 800290a:	2301      	movs	r3, #1
 800290c:	4680      	mov	r8, r0
 800290e:	e7f0      	b.n	80028f2 <_vfiprintf_r+0x1b6>
 8002910:	ab03      	add	r3, sp, #12
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	4622      	mov	r2, r4
 8002916:	4b13      	ldr	r3, [pc, #76]	; (8002964 <_vfiprintf_r+0x228>)
 8002918:	a904      	add	r1, sp, #16
 800291a:	4630      	mov	r0, r6
 800291c:	f3af 8000 	nop.w
 8002920:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002924:	4681      	mov	r9, r0
 8002926:	d1d5      	bne.n	80028d4 <_vfiprintf_r+0x198>
 8002928:	89a3      	ldrh	r3, [r4, #12]
 800292a:	065b      	lsls	r3, r3, #25
 800292c:	f53f af7e 	bmi.w	800282c <_vfiprintf_r+0xf0>
 8002930:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002932:	e77d      	b.n	8002830 <_vfiprintf_r+0xf4>
 8002934:	ab03      	add	r3, sp, #12
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	4622      	mov	r2, r4
 800293a:	4b0a      	ldr	r3, [pc, #40]	; (8002964 <_vfiprintf_r+0x228>)
 800293c:	a904      	add	r1, sp, #16
 800293e:	4630      	mov	r0, r6
 8002940:	f000 f888 	bl	8002a54 <_printf_i>
 8002944:	e7ec      	b.n	8002920 <_vfiprintf_r+0x1e4>
 8002946:	bf00      	nop
 8002948:	08002e54 	.word	0x08002e54
 800294c:	08002e94 	.word	0x08002e94
 8002950:	08002e74 	.word	0x08002e74
 8002954:	08002e34 	.word	0x08002e34
 8002958:	08002e9a 	.word	0x08002e9a
 800295c:	08002e9e 	.word	0x08002e9e
 8002960:	00000000 	.word	0x00000000
 8002964:	08002717 	.word	0x08002717

08002968 <_printf_common>:
 8002968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800296c:	4691      	mov	r9, r2
 800296e:	461f      	mov	r7, r3
 8002970:	688a      	ldr	r2, [r1, #8]
 8002972:	690b      	ldr	r3, [r1, #16]
 8002974:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002978:	4293      	cmp	r3, r2
 800297a:	bfb8      	it	lt
 800297c:	4613      	movlt	r3, r2
 800297e:	f8c9 3000 	str.w	r3, [r9]
 8002982:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002986:	4606      	mov	r6, r0
 8002988:	460c      	mov	r4, r1
 800298a:	b112      	cbz	r2, 8002992 <_printf_common+0x2a>
 800298c:	3301      	adds	r3, #1
 800298e:	f8c9 3000 	str.w	r3, [r9]
 8002992:	6823      	ldr	r3, [r4, #0]
 8002994:	0699      	lsls	r1, r3, #26
 8002996:	bf42      	ittt	mi
 8002998:	f8d9 3000 	ldrmi.w	r3, [r9]
 800299c:	3302      	addmi	r3, #2
 800299e:	f8c9 3000 	strmi.w	r3, [r9]
 80029a2:	6825      	ldr	r5, [r4, #0]
 80029a4:	f015 0506 	ands.w	r5, r5, #6
 80029a8:	d107      	bne.n	80029ba <_printf_common+0x52>
 80029aa:	f104 0a19 	add.w	sl, r4, #25
 80029ae:	68e3      	ldr	r3, [r4, #12]
 80029b0:	f8d9 2000 	ldr.w	r2, [r9]
 80029b4:	1a9b      	subs	r3, r3, r2
 80029b6:	42ab      	cmp	r3, r5
 80029b8:	dc28      	bgt.n	8002a0c <_printf_common+0xa4>
 80029ba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80029be:	6822      	ldr	r2, [r4, #0]
 80029c0:	3300      	adds	r3, #0
 80029c2:	bf18      	it	ne
 80029c4:	2301      	movne	r3, #1
 80029c6:	0692      	lsls	r2, r2, #26
 80029c8:	d42d      	bmi.n	8002a26 <_printf_common+0xbe>
 80029ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80029ce:	4639      	mov	r1, r7
 80029d0:	4630      	mov	r0, r6
 80029d2:	47c0      	blx	r8
 80029d4:	3001      	adds	r0, #1
 80029d6:	d020      	beq.n	8002a1a <_printf_common+0xb2>
 80029d8:	6823      	ldr	r3, [r4, #0]
 80029da:	68e5      	ldr	r5, [r4, #12]
 80029dc:	f8d9 2000 	ldr.w	r2, [r9]
 80029e0:	f003 0306 	and.w	r3, r3, #6
 80029e4:	2b04      	cmp	r3, #4
 80029e6:	bf08      	it	eq
 80029e8:	1aad      	subeq	r5, r5, r2
 80029ea:	68a3      	ldr	r3, [r4, #8]
 80029ec:	6922      	ldr	r2, [r4, #16]
 80029ee:	bf0c      	ite	eq
 80029f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80029f4:	2500      	movne	r5, #0
 80029f6:	4293      	cmp	r3, r2
 80029f8:	bfc4      	itt	gt
 80029fa:	1a9b      	subgt	r3, r3, r2
 80029fc:	18ed      	addgt	r5, r5, r3
 80029fe:	f04f 0900 	mov.w	r9, #0
 8002a02:	341a      	adds	r4, #26
 8002a04:	454d      	cmp	r5, r9
 8002a06:	d11a      	bne.n	8002a3e <_printf_common+0xd6>
 8002a08:	2000      	movs	r0, #0
 8002a0a:	e008      	b.n	8002a1e <_printf_common+0xb6>
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	4652      	mov	r2, sl
 8002a10:	4639      	mov	r1, r7
 8002a12:	4630      	mov	r0, r6
 8002a14:	47c0      	blx	r8
 8002a16:	3001      	adds	r0, #1
 8002a18:	d103      	bne.n	8002a22 <_printf_common+0xba>
 8002a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8002a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a22:	3501      	adds	r5, #1
 8002a24:	e7c3      	b.n	80029ae <_printf_common+0x46>
 8002a26:	18e1      	adds	r1, r4, r3
 8002a28:	1c5a      	adds	r2, r3, #1
 8002a2a:	2030      	movs	r0, #48	; 0x30
 8002a2c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002a30:	4422      	add	r2, r4
 8002a32:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002a36:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002a3a:	3302      	adds	r3, #2
 8002a3c:	e7c5      	b.n	80029ca <_printf_common+0x62>
 8002a3e:	2301      	movs	r3, #1
 8002a40:	4622      	mov	r2, r4
 8002a42:	4639      	mov	r1, r7
 8002a44:	4630      	mov	r0, r6
 8002a46:	47c0      	blx	r8
 8002a48:	3001      	adds	r0, #1
 8002a4a:	d0e6      	beq.n	8002a1a <_printf_common+0xb2>
 8002a4c:	f109 0901 	add.w	r9, r9, #1
 8002a50:	e7d8      	b.n	8002a04 <_printf_common+0x9c>
	...

08002a54 <_printf_i>:
 8002a54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a58:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002a5c:	460c      	mov	r4, r1
 8002a5e:	7e09      	ldrb	r1, [r1, #24]
 8002a60:	b085      	sub	sp, #20
 8002a62:	296e      	cmp	r1, #110	; 0x6e
 8002a64:	4617      	mov	r7, r2
 8002a66:	4606      	mov	r6, r0
 8002a68:	4698      	mov	r8, r3
 8002a6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002a6c:	f000 80b3 	beq.w	8002bd6 <_printf_i+0x182>
 8002a70:	d822      	bhi.n	8002ab8 <_printf_i+0x64>
 8002a72:	2963      	cmp	r1, #99	; 0x63
 8002a74:	d036      	beq.n	8002ae4 <_printf_i+0x90>
 8002a76:	d80a      	bhi.n	8002a8e <_printf_i+0x3a>
 8002a78:	2900      	cmp	r1, #0
 8002a7a:	f000 80b9 	beq.w	8002bf0 <_printf_i+0x19c>
 8002a7e:	2958      	cmp	r1, #88	; 0x58
 8002a80:	f000 8083 	beq.w	8002b8a <_printf_i+0x136>
 8002a84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a88:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002a8c:	e032      	b.n	8002af4 <_printf_i+0xa0>
 8002a8e:	2964      	cmp	r1, #100	; 0x64
 8002a90:	d001      	beq.n	8002a96 <_printf_i+0x42>
 8002a92:	2969      	cmp	r1, #105	; 0x69
 8002a94:	d1f6      	bne.n	8002a84 <_printf_i+0x30>
 8002a96:	6820      	ldr	r0, [r4, #0]
 8002a98:	6813      	ldr	r3, [r2, #0]
 8002a9a:	0605      	lsls	r5, r0, #24
 8002a9c:	f103 0104 	add.w	r1, r3, #4
 8002aa0:	d52a      	bpl.n	8002af8 <_printf_i+0xa4>
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6011      	str	r1, [r2, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	da03      	bge.n	8002ab2 <_printf_i+0x5e>
 8002aaa:	222d      	movs	r2, #45	; 0x2d
 8002aac:	425b      	negs	r3, r3
 8002aae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002ab2:	486f      	ldr	r0, [pc, #444]	; (8002c70 <_printf_i+0x21c>)
 8002ab4:	220a      	movs	r2, #10
 8002ab6:	e039      	b.n	8002b2c <_printf_i+0xd8>
 8002ab8:	2973      	cmp	r1, #115	; 0x73
 8002aba:	f000 809d 	beq.w	8002bf8 <_printf_i+0x1a4>
 8002abe:	d808      	bhi.n	8002ad2 <_printf_i+0x7e>
 8002ac0:	296f      	cmp	r1, #111	; 0x6f
 8002ac2:	d020      	beq.n	8002b06 <_printf_i+0xb2>
 8002ac4:	2970      	cmp	r1, #112	; 0x70
 8002ac6:	d1dd      	bne.n	8002a84 <_printf_i+0x30>
 8002ac8:	6823      	ldr	r3, [r4, #0]
 8002aca:	f043 0320 	orr.w	r3, r3, #32
 8002ace:	6023      	str	r3, [r4, #0]
 8002ad0:	e003      	b.n	8002ada <_printf_i+0x86>
 8002ad2:	2975      	cmp	r1, #117	; 0x75
 8002ad4:	d017      	beq.n	8002b06 <_printf_i+0xb2>
 8002ad6:	2978      	cmp	r1, #120	; 0x78
 8002ad8:	d1d4      	bne.n	8002a84 <_printf_i+0x30>
 8002ada:	2378      	movs	r3, #120	; 0x78
 8002adc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002ae0:	4864      	ldr	r0, [pc, #400]	; (8002c74 <_printf_i+0x220>)
 8002ae2:	e055      	b.n	8002b90 <_printf_i+0x13c>
 8002ae4:	6813      	ldr	r3, [r2, #0]
 8002ae6:	1d19      	adds	r1, r3, #4
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6011      	str	r1, [r2, #0]
 8002aec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002af0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002af4:	2301      	movs	r3, #1
 8002af6:	e08c      	b.n	8002c12 <_printf_i+0x1be>
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	6011      	str	r1, [r2, #0]
 8002afc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002b00:	bf18      	it	ne
 8002b02:	b21b      	sxthne	r3, r3
 8002b04:	e7cf      	b.n	8002aa6 <_printf_i+0x52>
 8002b06:	6813      	ldr	r3, [r2, #0]
 8002b08:	6825      	ldr	r5, [r4, #0]
 8002b0a:	1d18      	adds	r0, r3, #4
 8002b0c:	6010      	str	r0, [r2, #0]
 8002b0e:	0628      	lsls	r0, r5, #24
 8002b10:	d501      	bpl.n	8002b16 <_printf_i+0xc2>
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	e002      	b.n	8002b1c <_printf_i+0xc8>
 8002b16:	0668      	lsls	r0, r5, #25
 8002b18:	d5fb      	bpl.n	8002b12 <_printf_i+0xbe>
 8002b1a:	881b      	ldrh	r3, [r3, #0]
 8002b1c:	4854      	ldr	r0, [pc, #336]	; (8002c70 <_printf_i+0x21c>)
 8002b1e:	296f      	cmp	r1, #111	; 0x6f
 8002b20:	bf14      	ite	ne
 8002b22:	220a      	movne	r2, #10
 8002b24:	2208      	moveq	r2, #8
 8002b26:	2100      	movs	r1, #0
 8002b28:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002b2c:	6865      	ldr	r5, [r4, #4]
 8002b2e:	60a5      	str	r5, [r4, #8]
 8002b30:	2d00      	cmp	r5, #0
 8002b32:	f2c0 8095 	blt.w	8002c60 <_printf_i+0x20c>
 8002b36:	6821      	ldr	r1, [r4, #0]
 8002b38:	f021 0104 	bic.w	r1, r1, #4
 8002b3c:	6021      	str	r1, [r4, #0]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d13d      	bne.n	8002bbe <_printf_i+0x16a>
 8002b42:	2d00      	cmp	r5, #0
 8002b44:	f040 808e 	bne.w	8002c64 <_printf_i+0x210>
 8002b48:	4665      	mov	r5, ip
 8002b4a:	2a08      	cmp	r2, #8
 8002b4c:	d10b      	bne.n	8002b66 <_printf_i+0x112>
 8002b4e:	6823      	ldr	r3, [r4, #0]
 8002b50:	07db      	lsls	r3, r3, #31
 8002b52:	d508      	bpl.n	8002b66 <_printf_i+0x112>
 8002b54:	6923      	ldr	r3, [r4, #16]
 8002b56:	6862      	ldr	r2, [r4, #4]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	bfde      	ittt	le
 8002b5c:	2330      	movle	r3, #48	; 0x30
 8002b5e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002b62:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002b66:	ebac 0305 	sub.w	r3, ip, r5
 8002b6a:	6123      	str	r3, [r4, #16]
 8002b6c:	f8cd 8000 	str.w	r8, [sp]
 8002b70:	463b      	mov	r3, r7
 8002b72:	aa03      	add	r2, sp, #12
 8002b74:	4621      	mov	r1, r4
 8002b76:	4630      	mov	r0, r6
 8002b78:	f7ff fef6 	bl	8002968 <_printf_common>
 8002b7c:	3001      	adds	r0, #1
 8002b7e:	d14d      	bne.n	8002c1c <_printf_i+0x1c8>
 8002b80:	f04f 30ff 	mov.w	r0, #4294967295
 8002b84:	b005      	add	sp, #20
 8002b86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002b8a:	4839      	ldr	r0, [pc, #228]	; (8002c70 <_printf_i+0x21c>)
 8002b8c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002b90:	6813      	ldr	r3, [r2, #0]
 8002b92:	6821      	ldr	r1, [r4, #0]
 8002b94:	1d1d      	adds	r5, r3, #4
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6015      	str	r5, [r2, #0]
 8002b9a:	060a      	lsls	r2, r1, #24
 8002b9c:	d50b      	bpl.n	8002bb6 <_printf_i+0x162>
 8002b9e:	07ca      	lsls	r2, r1, #31
 8002ba0:	bf44      	itt	mi
 8002ba2:	f041 0120 	orrmi.w	r1, r1, #32
 8002ba6:	6021      	strmi	r1, [r4, #0]
 8002ba8:	b91b      	cbnz	r3, 8002bb2 <_printf_i+0x15e>
 8002baa:	6822      	ldr	r2, [r4, #0]
 8002bac:	f022 0220 	bic.w	r2, r2, #32
 8002bb0:	6022      	str	r2, [r4, #0]
 8002bb2:	2210      	movs	r2, #16
 8002bb4:	e7b7      	b.n	8002b26 <_printf_i+0xd2>
 8002bb6:	064d      	lsls	r5, r1, #25
 8002bb8:	bf48      	it	mi
 8002bba:	b29b      	uxthmi	r3, r3
 8002bbc:	e7ef      	b.n	8002b9e <_printf_i+0x14a>
 8002bbe:	4665      	mov	r5, ip
 8002bc0:	fbb3 f1f2 	udiv	r1, r3, r2
 8002bc4:	fb02 3311 	mls	r3, r2, r1, r3
 8002bc8:	5cc3      	ldrb	r3, [r0, r3]
 8002bca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002bce:	460b      	mov	r3, r1
 8002bd0:	2900      	cmp	r1, #0
 8002bd2:	d1f5      	bne.n	8002bc0 <_printf_i+0x16c>
 8002bd4:	e7b9      	b.n	8002b4a <_printf_i+0xf6>
 8002bd6:	6813      	ldr	r3, [r2, #0]
 8002bd8:	6825      	ldr	r5, [r4, #0]
 8002bda:	6961      	ldr	r1, [r4, #20]
 8002bdc:	1d18      	adds	r0, r3, #4
 8002bde:	6010      	str	r0, [r2, #0]
 8002be0:	0628      	lsls	r0, r5, #24
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	d501      	bpl.n	8002bea <_printf_i+0x196>
 8002be6:	6019      	str	r1, [r3, #0]
 8002be8:	e002      	b.n	8002bf0 <_printf_i+0x19c>
 8002bea:	066a      	lsls	r2, r5, #25
 8002bec:	d5fb      	bpl.n	8002be6 <_printf_i+0x192>
 8002bee:	8019      	strh	r1, [r3, #0]
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	6123      	str	r3, [r4, #16]
 8002bf4:	4665      	mov	r5, ip
 8002bf6:	e7b9      	b.n	8002b6c <_printf_i+0x118>
 8002bf8:	6813      	ldr	r3, [r2, #0]
 8002bfa:	1d19      	adds	r1, r3, #4
 8002bfc:	6011      	str	r1, [r2, #0]
 8002bfe:	681d      	ldr	r5, [r3, #0]
 8002c00:	6862      	ldr	r2, [r4, #4]
 8002c02:	2100      	movs	r1, #0
 8002c04:	4628      	mov	r0, r5
 8002c06:	f7fd fae3 	bl	80001d0 <memchr>
 8002c0a:	b108      	cbz	r0, 8002c10 <_printf_i+0x1bc>
 8002c0c:	1b40      	subs	r0, r0, r5
 8002c0e:	6060      	str	r0, [r4, #4]
 8002c10:	6863      	ldr	r3, [r4, #4]
 8002c12:	6123      	str	r3, [r4, #16]
 8002c14:	2300      	movs	r3, #0
 8002c16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c1a:	e7a7      	b.n	8002b6c <_printf_i+0x118>
 8002c1c:	6923      	ldr	r3, [r4, #16]
 8002c1e:	462a      	mov	r2, r5
 8002c20:	4639      	mov	r1, r7
 8002c22:	4630      	mov	r0, r6
 8002c24:	47c0      	blx	r8
 8002c26:	3001      	adds	r0, #1
 8002c28:	d0aa      	beq.n	8002b80 <_printf_i+0x12c>
 8002c2a:	6823      	ldr	r3, [r4, #0]
 8002c2c:	079b      	lsls	r3, r3, #30
 8002c2e:	d413      	bmi.n	8002c58 <_printf_i+0x204>
 8002c30:	68e0      	ldr	r0, [r4, #12]
 8002c32:	9b03      	ldr	r3, [sp, #12]
 8002c34:	4298      	cmp	r0, r3
 8002c36:	bfb8      	it	lt
 8002c38:	4618      	movlt	r0, r3
 8002c3a:	e7a3      	b.n	8002b84 <_printf_i+0x130>
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	464a      	mov	r2, r9
 8002c40:	4639      	mov	r1, r7
 8002c42:	4630      	mov	r0, r6
 8002c44:	47c0      	blx	r8
 8002c46:	3001      	adds	r0, #1
 8002c48:	d09a      	beq.n	8002b80 <_printf_i+0x12c>
 8002c4a:	3501      	adds	r5, #1
 8002c4c:	68e3      	ldr	r3, [r4, #12]
 8002c4e:	9a03      	ldr	r2, [sp, #12]
 8002c50:	1a9b      	subs	r3, r3, r2
 8002c52:	42ab      	cmp	r3, r5
 8002c54:	dcf2      	bgt.n	8002c3c <_printf_i+0x1e8>
 8002c56:	e7eb      	b.n	8002c30 <_printf_i+0x1dc>
 8002c58:	2500      	movs	r5, #0
 8002c5a:	f104 0919 	add.w	r9, r4, #25
 8002c5e:	e7f5      	b.n	8002c4c <_printf_i+0x1f8>
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1ac      	bne.n	8002bbe <_printf_i+0x16a>
 8002c64:	7803      	ldrb	r3, [r0, #0]
 8002c66:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c6a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c6e:	e76c      	b.n	8002b4a <_printf_i+0xf6>
 8002c70:	08002ea5 	.word	0x08002ea5
 8002c74:	08002eb6 	.word	0x08002eb6

08002c78 <_sbrk_r>:
 8002c78:	b538      	push	{r3, r4, r5, lr}
 8002c7a:	4c06      	ldr	r4, [pc, #24]	; (8002c94 <_sbrk_r+0x1c>)
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	4605      	mov	r5, r0
 8002c80:	4608      	mov	r0, r1
 8002c82:	6023      	str	r3, [r4, #0]
 8002c84:	f7fd fee8 	bl	8000a58 <_sbrk>
 8002c88:	1c43      	adds	r3, r0, #1
 8002c8a:	d102      	bne.n	8002c92 <_sbrk_r+0x1a>
 8002c8c:	6823      	ldr	r3, [r4, #0]
 8002c8e:	b103      	cbz	r3, 8002c92 <_sbrk_r+0x1a>
 8002c90:	602b      	str	r3, [r5, #0]
 8002c92:	bd38      	pop	{r3, r4, r5, pc}
 8002c94:	200000f4 	.word	0x200000f4

08002c98 <__sread>:
 8002c98:	b510      	push	{r4, lr}
 8002c9a:	460c      	mov	r4, r1
 8002c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ca0:	f000 f896 	bl	8002dd0 <_read_r>
 8002ca4:	2800      	cmp	r0, #0
 8002ca6:	bfab      	itete	ge
 8002ca8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002caa:	89a3      	ldrhlt	r3, [r4, #12]
 8002cac:	181b      	addge	r3, r3, r0
 8002cae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002cb2:	bfac      	ite	ge
 8002cb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8002cb6:	81a3      	strhlt	r3, [r4, #12]
 8002cb8:	bd10      	pop	{r4, pc}

08002cba <__swrite>:
 8002cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cbe:	461f      	mov	r7, r3
 8002cc0:	898b      	ldrh	r3, [r1, #12]
 8002cc2:	05db      	lsls	r3, r3, #23
 8002cc4:	4605      	mov	r5, r0
 8002cc6:	460c      	mov	r4, r1
 8002cc8:	4616      	mov	r6, r2
 8002cca:	d505      	bpl.n	8002cd8 <__swrite+0x1e>
 8002ccc:	2302      	movs	r3, #2
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cd4:	f000 f868 	bl	8002da8 <_lseek_r>
 8002cd8:	89a3      	ldrh	r3, [r4, #12]
 8002cda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002cde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ce2:	81a3      	strh	r3, [r4, #12]
 8002ce4:	4632      	mov	r2, r6
 8002ce6:	463b      	mov	r3, r7
 8002ce8:	4628      	mov	r0, r5
 8002cea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002cee:	f000 b817 	b.w	8002d20 <_write_r>

08002cf2 <__sseek>:
 8002cf2:	b510      	push	{r4, lr}
 8002cf4:	460c      	mov	r4, r1
 8002cf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cfa:	f000 f855 	bl	8002da8 <_lseek_r>
 8002cfe:	1c43      	adds	r3, r0, #1
 8002d00:	89a3      	ldrh	r3, [r4, #12]
 8002d02:	bf15      	itete	ne
 8002d04:	6560      	strne	r0, [r4, #84]	; 0x54
 8002d06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002d0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002d0e:	81a3      	strheq	r3, [r4, #12]
 8002d10:	bf18      	it	ne
 8002d12:	81a3      	strhne	r3, [r4, #12]
 8002d14:	bd10      	pop	{r4, pc}

08002d16 <__sclose>:
 8002d16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d1a:	f000 b813 	b.w	8002d44 <_close_r>
	...

08002d20 <_write_r>:
 8002d20:	b538      	push	{r3, r4, r5, lr}
 8002d22:	4c07      	ldr	r4, [pc, #28]	; (8002d40 <_write_r+0x20>)
 8002d24:	4605      	mov	r5, r0
 8002d26:	4608      	mov	r0, r1
 8002d28:	4611      	mov	r1, r2
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	6022      	str	r2, [r4, #0]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	f7fd fd7c 	bl	800082c <_write>
 8002d34:	1c43      	adds	r3, r0, #1
 8002d36:	d102      	bne.n	8002d3e <_write_r+0x1e>
 8002d38:	6823      	ldr	r3, [r4, #0]
 8002d3a:	b103      	cbz	r3, 8002d3e <_write_r+0x1e>
 8002d3c:	602b      	str	r3, [r5, #0]
 8002d3e:	bd38      	pop	{r3, r4, r5, pc}
 8002d40:	200000f4 	.word	0x200000f4

08002d44 <_close_r>:
 8002d44:	b538      	push	{r3, r4, r5, lr}
 8002d46:	4c06      	ldr	r4, [pc, #24]	; (8002d60 <_close_r+0x1c>)
 8002d48:	2300      	movs	r3, #0
 8002d4a:	4605      	mov	r5, r0
 8002d4c:	4608      	mov	r0, r1
 8002d4e:	6023      	str	r3, [r4, #0]
 8002d50:	f7fd fe4d 	bl	80009ee <_close>
 8002d54:	1c43      	adds	r3, r0, #1
 8002d56:	d102      	bne.n	8002d5e <_close_r+0x1a>
 8002d58:	6823      	ldr	r3, [r4, #0]
 8002d5a:	b103      	cbz	r3, 8002d5e <_close_r+0x1a>
 8002d5c:	602b      	str	r3, [r5, #0]
 8002d5e:	bd38      	pop	{r3, r4, r5, pc}
 8002d60:	200000f4 	.word	0x200000f4

08002d64 <_fstat_r>:
 8002d64:	b538      	push	{r3, r4, r5, lr}
 8002d66:	4c07      	ldr	r4, [pc, #28]	; (8002d84 <_fstat_r+0x20>)
 8002d68:	2300      	movs	r3, #0
 8002d6a:	4605      	mov	r5, r0
 8002d6c:	4608      	mov	r0, r1
 8002d6e:	4611      	mov	r1, r2
 8002d70:	6023      	str	r3, [r4, #0]
 8002d72:	f7fd fe48 	bl	8000a06 <_fstat>
 8002d76:	1c43      	adds	r3, r0, #1
 8002d78:	d102      	bne.n	8002d80 <_fstat_r+0x1c>
 8002d7a:	6823      	ldr	r3, [r4, #0]
 8002d7c:	b103      	cbz	r3, 8002d80 <_fstat_r+0x1c>
 8002d7e:	602b      	str	r3, [r5, #0]
 8002d80:	bd38      	pop	{r3, r4, r5, pc}
 8002d82:	bf00      	nop
 8002d84:	200000f4 	.word	0x200000f4

08002d88 <_isatty_r>:
 8002d88:	b538      	push	{r3, r4, r5, lr}
 8002d8a:	4c06      	ldr	r4, [pc, #24]	; (8002da4 <_isatty_r+0x1c>)
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	4605      	mov	r5, r0
 8002d90:	4608      	mov	r0, r1
 8002d92:	6023      	str	r3, [r4, #0]
 8002d94:	f7fd fe47 	bl	8000a26 <_isatty>
 8002d98:	1c43      	adds	r3, r0, #1
 8002d9a:	d102      	bne.n	8002da2 <_isatty_r+0x1a>
 8002d9c:	6823      	ldr	r3, [r4, #0]
 8002d9e:	b103      	cbz	r3, 8002da2 <_isatty_r+0x1a>
 8002da0:	602b      	str	r3, [r5, #0]
 8002da2:	bd38      	pop	{r3, r4, r5, pc}
 8002da4:	200000f4 	.word	0x200000f4

08002da8 <_lseek_r>:
 8002da8:	b538      	push	{r3, r4, r5, lr}
 8002daa:	4c07      	ldr	r4, [pc, #28]	; (8002dc8 <_lseek_r+0x20>)
 8002dac:	4605      	mov	r5, r0
 8002dae:	4608      	mov	r0, r1
 8002db0:	4611      	mov	r1, r2
 8002db2:	2200      	movs	r2, #0
 8002db4:	6022      	str	r2, [r4, #0]
 8002db6:	461a      	mov	r2, r3
 8002db8:	f7fd fe40 	bl	8000a3c <_lseek>
 8002dbc:	1c43      	adds	r3, r0, #1
 8002dbe:	d102      	bne.n	8002dc6 <_lseek_r+0x1e>
 8002dc0:	6823      	ldr	r3, [r4, #0]
 8002dc2:	b103      	cbz	r3, 8002dc6 <_lseek_r+0x1e>
 8002dc4:	602b      	str	r3, [r5, #0]
 8002dc6:	bd38      	pop	{r3, r4, r5, pc}
 8002dc8:	200000f4 	.word	0x200000f4

08002dcc <__malloc_lock>:
 8002dcc:	4770      	bx	lr

08002dce <__malloc_unlock>:
 8002dce:	4770      	bx	lr

08002dd0 <_read_r>:
 8002dd0:	b538      	push	{r3, r4, r5, lr}
 8002dd2:	4c07      	ldr	r4, [pc, #28]	; (8002df0 <_read_r+0x20>)
 8002dd4:	4605      	mov	r5, r0
 8002dd6:	4608      	mov	r0, r1
 8002dd8:	4611      	mov	r1, r2
 8002dda:	2200      	movs	r2, #0
 8002ddc:	6022      	str	r2, [r4, #0]
 8002dde:	461a      	mov	r2, r3
 8002de0:	f7fd fde8 	bl	80009b4 <_read>
 8002de4:	1c43      	adds	r3, r0, #1
 8002de6:	d102      	bne.n	8002dee <_read_r+0x1e>
 8002de8:	6823      	ldr	r3, [r4, #0]
 8002dea:	b103      	cbz	r3, 8002dee <_read_r+0x1e>
 8002dec:	602b      	str	r3, [r5, #0]
 8002dee:	bd38      	pop	{r3, r4, r5, pc}
 8002df0:	200000f4 	.word	0x200000f4

08002df4 <_init>:
 8002df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002df6:	bf00      	nop
 8002df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dfa:	bc08      	pop	{r3}
 8002dfc:	469e      	mov	lr, r3
 8002dfe:	4770      	bx	lr

08002e00 <_fini>:
 8002e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e02:	bf00      	nop
 8002e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e06:	bc08      	pop	{r3}
 8002e08:	469e      	mov	lr, r3
 8002e0a:	4770      	bx	lr
