
HAL_I2C_Slave_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004768  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080048f8  080048f8  000148f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049b0  080049b0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080049b0  080049b0  000149b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049b8  080049b8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049b8  080049b8  000149b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049bc  080049bc  000149bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080049c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000078  08004a38  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08004a38  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c76  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000188a  00000000  00000000  00029d1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000818  00000000  00000000  0002b5a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000770  00000000  00000000  0002bdc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020f18  00000000  00000000  0002c530  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000073ff  00000000  00000000  0004d448  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c2e08  00000000  00000000  00054847  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011764f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002764  00000000  00000000  001176cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080048e0 	.word	0x080048e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080048e0 	.word	0x080048e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000578:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800057c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000580:	f003 0301 	and.w	r3, r3, #1
 8000584:	2b00      	cmp	r3, #0
 8000586:	d013      	beq.n	80005b0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000588:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800058c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000590:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000594:	2b00      	cmp	r3, #0
 8000596:	d00b      	beq.n	80005b0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000598:	e000      	b.n	800059c <ITM_SendChar+0x2c>
    {
      __NOP();
 800059a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800059c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d0f9      	beq.n	800059a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005a6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	b2d2      	uxtb	r2, r2
 80005ae:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005b0:	687b      	ldr	r3, [r7, #4]
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
	...

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f000 fabe 	bl	8000b44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f814 	bl	80005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005cc:	f000 f89e 	bl	800070c <MX_GPIO_Init>
  MX_I2C1_Init();
 80005d0:	f000 f86e 	bl	80006b0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2C_EnableListen_IT(&hi2c1);
 80005d4:	4805      	ldr	r0, [pc, #20]	; (80005ec <main+0x2c>)
 80005d6:	f001 f9cb 	bl	8001970 <HAL_I2C_EnableListen_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 80005da:	2140      	movs	r1, #64	; 0x40
 80005dc:	4804      	ldr	r0, [pc, #16]	; (80005f0 <main+0x30>)
 80005de:	f000 fe3a 	bl	8001256 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80005e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005e6:	f000 fb1f 	bl	8000c28 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 80005ea:	e7f6      	b.n	80005da <main+0x1a>
 80005ec:	200000a0 	.word	0x200000a0
 80005f0:	40020000 	.word	0x40020000

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b094      	sub	sp, #80	; 0x50
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 0320 	add.w	r3, r7, #32
 80005fe:	2230      	movs	r2, #48	; 0x30
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f003 fa80 	bl	8003b08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000618:	2300      	movs	r3, #0
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	4b22      	ldr	r3, [pc, #136]	; (80006a8 <SystemClock_Config+0xb4>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	4a21      	ldr	r2, [pc, #132]	; (80006a8 <SystemClock_Config+0xb4>)
 8000622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000626:	6413      	str	r3, [r2, #64]	; 0x40
 8000628:	4b1f      	ldr	r3, [pc, #124]	; (80006a8 <SystemClock_Config+0xb4>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000634:	2300      	movs	r3, #0
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	4b1c      	ldr	r3, [pc, #112]	; (80006ac <SystemClock_Config+0xb8>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a1b      	ldr	r2, [pc, #108]	; (80006ac <SystemClock_Config+0xb8>)
 800063e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000642:	6013      	str	r3, [r2, #0]
 8000644:	4b19      	ldr	r3, [pc, #100]	; (80006ac <SystemClock_Config+0xb8>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000650:	2302      	movs	r3, #2
 8000652:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000654:	2301      	movs	r3, #1
 8000656:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000658:	2310      	movs	r3, #16
 800065a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800065c:	2300      	movs	r3, #0
 800065e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000660:	f107 0320 	add.w	r3, r7, #32
 8000664:	4618      	mov	r0, r3
 8000666:	f002 fdfd 	bl	8003264 <HAL_RCC_OscConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000670:	f000 f8f2 	bl	8000858 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000674:	230f      	movs	r3, #15
 8000676:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000678:	2300      	movs	r3, #0
 800067a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f003 f858 	bl	8003744 <HAL_RCC_ClockConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800069a:	f000 f8dd 	bl	8000858 <Error_Handler>
  }
}
 800069e:	bf00      	nop
 80006a0:	3750      	adds	r7, #80	; 0x50
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40007000 	.word	0x40007000

080006b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006b4:	4b12      	ldr	r3, [pc, #72]	; (8000700 <MX_I2C1_Init+0x50>)
 80006b6:	4a13      	ldr	r2, [pc, #76]	; (8000704 <MX_I2C1_Init+0x54>)
 80006b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <MX_I2C1_Init+0x50>)
 80006bc:	4a12      	ldr	r2, [pc, #72]	; (8000708 <MX_I2C1_Init+0x58>)
 80006be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <MX_I2C1_Init+0x50>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 170;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <MX_I2C1_Init+0x50>)
 80006c8:	22aa      	movs	r2, #170	; 0xaa
 80006ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <MX_I2C1_Init+0x50>)
 80006ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d4:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <MX_I2C1_Init+0x50>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <MX_I2C1_Init+0x50>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006e0:	4b07      	ldr	r3, [pc, #28]	; (8000700 <MX_I2C1_Init+0x50>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <MX_I2C1_Init+0x50>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006ec:	4804      	ldr	r0, [pc, #16]	; (8000700 <MX_I2C1_Init+0x50>)
 80006ee:	f000 fdcd 	bl	800128c <HAL_I2C_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006f8:	f000 f8ae 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	200000a0 	.word	0x200000a0
 8000704:	40005400 	.word	0x40005400
 8000708:	000186a0 	.word	0x000186a0

0800070c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b088      	sub	sp, #32
 8000710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	f107 030c 	add.w	r3, r7, #12
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <MX_GPIO_Init+0x98>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a1e      	ldr	r2, [pc, #120]	; (80007a4 <MX_GPIO_Init+0x98>)
 800072c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <MX_GPIO_Init+0x98>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <MX_GPIO_Init+0x98>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a17      	ldr	r2, [pc, #92]	; (80007a4 <MX_GPIO_Init+0x98>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <MX_GPIO_Init+0x98>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <MX_GPIO_Init+0x98>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a10      	ldr	r2, [pc, #64]	; (80007a4 <MX_GPIO_Init+0x98>)
 8000764:	f043 0302 	orr.w	r3, r3, #2
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MX_GPIO_Init+0x98>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0302 	and.w	r3, r3, #2
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	2140      	movs	r1, #64	; 0x40
 800077a:	480b      	ldr	r0, [pc, #44]	; (80007a8 <MX_GPIO_Init+0x9c>)
 800077c:	f000 fd52 	bl	8001224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000780:	2340      	movs	r3, #64	; 0x40
 8000782:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000784:	2301      	movs	r3, #1
 8000786:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078c:	2300      	movs	r3, #0
 800078e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	4619      	mov	r1, r3
 8000796:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_GPIO_Init+0x9c>)
 8000798:	f000 fbaa 	bl	8000ef0 <HAL_GPIO_Init>

}
 800079c:	bf00      	nop
 800079e:	3720      	adds	r7, #32
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40020000 	.word	0x40020000

080007ac <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
 80007c0:	e009      	b.n	80007d6 <_write+0x2a>
    ITM_SendChar((*ptr++));
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	1c5a      	adds	r2, r3, #1
 80007c6:	60ba      	str	r2, [r7, #8]
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff fed0 	bl	8000570 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	3301      	adds	r3, #1
 80007d4:	617b      	str	r3, [r7, #20]
 80007d6:	697a      	ldr	r2, [r7, #20]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	429a      	cmp	r2, r3
 80007dc:	dbf1      	blt.n	80007c2 <_write+0x16>
  return len;
 80007de:	687b      	ldr	r3, [r7, #4]
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3718      	adds	r7, #24
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	460b      	mov	r3, r1
 80007f2:	70fb      	strb	r3, [r7, #3]
 80007f4:	4613      	mov	r3, r2
 80007f6:	803b      	strh	r3, [r7, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2220      	movs	r2, #32
 80007fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (TransferDirection == I2C_DIRECTION_TRANSMIT)
 8000800:	78fb      	ldrb	r3, [r7, #3]
 8000802:	2b01      	cmp	r3, #1
 8000804:	d10e      	bne.n	8000824 <HAL_I2C_AddrCallback+0x3c>
    {
    	HAL_I2C_Slave_Receive(hi2c, rev, sizeof(rev), 5000);
 8000806:	f241 3388 	movw	r3, #5000	; 0x1388
 800080a:	2206      	movs	r2, #6
 800080c:	490f      	ldr	r1, [pc, #60]	; (800084c <HAL_I2C_AddrCallback+0x64>)
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f000 ff98 	bl	8001744 <HAL_I2C_Slave_Receive>
    	rev[sizeof(rev)-1] = 0;
 8000814:	4b0d      	ldr	r3, [pc, #52]	; (800084c <HAL_I2C_AddrCallback+0x64>)
 8000816:	2200      	movs	r2, #0
 8000818:	715a      	strb	r2, [r3, #5]
    	printf("%s\r\n", rev);
 800081a:	490c      	ldr	r1, [pc, #48]	; (800084c <HAL_I2C_AddrCallback+0x64>)
 800081c:	480c      	ldr	r0, [pc, #48]	; (8000850 <HAL_I2C_AddrCallback+0x68>)
 800081e:	f003 f97b 	bl	8003b18 <iprintf>
 8000822:	e00c      	b.n	800083e <HAL_I2C_AddrCallback+0x56>
    }
    else
    	if (TransferDirection == I2C_DIRECTION_RECEIVE)
 8000824:	78fb      	ldrb	r3, [r7, #3]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d109      	bne.n	800083e <HAL_I2C_AddrCallback+0x56>
    {
    	HAL_I2C_Slave_Transmit(hi2c, trs, sizeof(trs), 5000);
 800082a:	f241 3388 	movw	r3, #5000	; 0x1388
 800082e:	2206      	movs	r2, #6
 8000830:	4908      	ldr	r1, [pc, #32]	; (8000854 <HAL_I2C_AddrCallback+0x6c>)
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	f000 fe62 	bl	80014fc <HAL_I2C_Slave_Transmit>
    	hi2c->ErrorCode = 0;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2200      	movs	r2, #0
 800083c:	641a      	str	r2, [r3, #64]	; 0x40
    }

	HAL_I2C_EnableListen_IT(hi2c);
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f001 f896 	bl	8001970 <HAL_I2C_EnableListen_IT>
}
 8000844:	bf00      	nop
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	200000f4 	.word	0x200000f4
 8000850:	080048f8 	.word	0x080048f8
 8000854:	20000000 	.word	0x20000000

08000858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
	...

08000868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <HAL_MspInit+0x4c>)
 8000874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000876:	4a0f      	ldr	r2, [pc, #60]	; (80008b4 <HAL_MspInit+0x4c>)
 8000878:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800087c:	6453      	str	r3, [r2, #68]	; 0x44
 800087e:	4b0d      	ldr	r3, [pc, #52]	; (80008b4 <HAL_MspInit+0x4c>)
 8000880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	603b      	str	r3, [r7, #0]
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <HAL_MspInit+0x4c>)
 8000890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000892:	4a08      	ldr	r2, [pc, #32]	; (80008b4 <HAL_MspInit+0x4c>)
 8000894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000898:	6413      	str	r3, [r2, #64]	; 0x40
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <HAL_MspInit+0x4c>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a2:	603b      	str	r3, [r7, #0]
 80008a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a6:	bf00      	nop
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	40023800 	.word	0x40023800

080008b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08a      	sub	sp, #40	; 0x28
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a1d      	ldr	r2, [pc, #116]	; (800094c <HAL_I2C_MspInit+0x94>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d133      	bne.n	8000942 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
 80008de:	4b1c      	ldr	r3, [pc, #112]	; (8000950 <HAL_I2C_MspInit+0x98>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a1b      	ldr	r2, [pc, #108]	; (8000950 <HAL_I2C_MspInit+0x98>)
 80008e4:	f043 0302 	orr.w	r3, r3, #2
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b19      	ldr	r3, [pc, #100]	; (8000950 <HAL_I2C_MspInit+0x98>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0302 	and.w	r3, r3, #2
 80008f2:	613b      	str	r3, [r7, #16]
 80008f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008f6:	23c0      	movs	r3, #192	; 0xc0
 80008f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008fa:	2312      	movs	r3, #18
 80008fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008fe:	2301      	movs	r3, #1
 8000900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000902:	2303      	movs	r3, #3
 8000904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000906:	2304      	movs	r3, #4
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4619      	mov	r1, r3
 8000910:	4810      	ldr	r0, [pc, #64]	; (8000954 <HAL_I2C_MspInit+0x9c>)
 8000912:	f000 faed 	bl	8000ef0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	4b0d      	ldr	r3, [pc, #52]	; (8000950 <HAL_I2C_MspInit+0x98>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091e:	4a0c      	ldr	r2, [pc, #48]	; (8000950 <HAL_I2C_MspInit+0x98>)
 8000920:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000924:	6413      	str	r3, [r2, #64]	; 0x40
 8000926:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <HAL_I2C_MspInit+0x98>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
 8000932:	2200      	movs	r2, #0
 8000934:	2101      	movs	r1, #1
 8000936:	201f      	movs	r0, #31
 8000938:	f000 fa73 	bl	8000e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800093c:	201f      	movs	r0, #31
 800093e:	f000 fa8c 	bl	8000e5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000942:	bf00      	nop
 8000944:	3728      	adds	r7, #40	; 0x28
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40005400 	.word	0x40005400
 8000950:	40023800 	.word	0x40023800
 8000954:	40020400 	.word	0x40020400

08000958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096a:	e7fe      	b.n	800096a <HardFault_Handler+0x4>

0800096c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <MemManage_Handler+0x4>

08000972 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000976:	e7fe      	b.n	8000976 <BusFault_Handler+0x4>

08000978 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800097c:	e7fe      	b.n	800097c <UsageFault_Handler+0x4>

0800097e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr

0800099a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ac:	f000 f91c 	bl	8000be8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80009b8:	4802      	ldr	r0, [pc, #8]	; (80009c4 <I2C1_EV_IRQHandler+0x10>)
 80009ba:	f001 f80f 	bl	80019dc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	200000a0 	.word	0x200000a0

080009c8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]
 80009d8:	e00a      	b.n	80009f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009da:	f3af 8000 	nop.w
 80009de:	4601      	mov	r1, r0
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	1c5a      	adds	r2, r3, #1
 80009e4:	60ba      	str	r2, [r7, #8]
 80009e6:	b2ca      	uxtb	r2, r1
 80009e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	3301      	adds	r3, #1
 80009ee:	617b      	str	r3, [r7, #20]
 80009f0:	697a      	ldr	r2, [r7, #20]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	dbf0      	blt.n	80009da <_read+0x12>
	}

return len;
 80009f8:	687b      	ldr	r3, [r7, #4]
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3718      	adds	r7, #24
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000a02:	b480      	push	{r7}
 8000a04:	b083      	sub	sp, #12
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
	return -1;
 8000a0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	b083      	sub	sp, #12
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
 8000a22:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a2a:	605a      	str	r2, [r3, #4]
	return 0;
 8000a2c:	2300      	movs	r3, #0
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr

08000a3a <_isatty>:

int _isatty(int file)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	b083      	sub	sp, #12
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	6078      	str	r0, [r7, #4]
	return 1;
 8000a42:	2301      	movs	r3, #1
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]
	return 0;
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3714      	adds	r7, #20
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
	...

08000a6c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000a74:	4b11      	ldr	r3, [pc, #68]	; (8000abc <_sbrk+0x50>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d102      	bne.n	8000a82 <_sbrk+0x16>
		heap_end = &end;
 8000a7c:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <_sbrk+0x50>)
 8000a7e:	4a10      	ldr	r2, [pc, #64]	; (8000ac0 <_sbrk+0x54>)
 8000a80:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000a82:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <_sbrk+0x50>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <_sbrk+0x50>)
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4413      	add	r3, r2
 8000a90:	466a      	mov	r2, sp
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d907      	bls.n	8000aa6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000a96:	f003 f80d 	bl	8003ab4 <__errno>
 8000a9a:	4602      	mov	r2, r0
 8000a9c:	230c      	movs	r3, #12
 8000a9e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa4:	e006      	b.n	8000ab4 <_sbrk+0x48>
	}

	heap_end += incr;
 8000aa6:	4b05      	ldr	r3, [pc, #20]	; (8000abc <_sbrk+0x50>)
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4413      	add	r3, r2
 8000aae:	4a03      	ldr	r2, [pc, #12]	; (8000abc <_sbrk+0x50>)
 8000ab0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000ab2:	68fb      	ldr	r3, [r7, #12]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3710      	adds	r7, #16
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000094 	.word	0x20000094
 8000ac0:	20000108 	.word	0x20000108

08000ac4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac8:	4b08      	ldr	r3, [pc, #32]	; (8000aec <SystemInit+0x28>)
 8000aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ace:	4a07      	ldr	r2, [pc, #28]	; (8000aec <SystemInit+0x28>)
 8000ad0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ad8:	4b04      	ldr	r3, [pc, #16]	; (8000aec <SystemInit+0x28>)
 8000ada:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ade:	609a      	str	r2, [r3, #8]
#endif
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000af0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b28 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000af4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000af6:	e003      	b.n	8000b00 <LoopCopyDataInit>

08000af8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000af8:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000afa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000afc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000afe:	3104      	adds	r1, #4

08000b00 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b00:	480b      	ldr	r0, [pc, #44]	; (8000b30 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b02:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b04:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b06:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b08:	d3f6      	bcc.n	8000af8 <CopyDataInit>
  ldr  r2, =_sbss
 8000b0a:	4a0b      	ldr	r2, [pc, #44]	; (8000b38 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b0c:	e002      	b.n	8000b14 <LoopFillZerobss>

08000b0e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b0e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b10:	f842 3b04 	str.w	r3, [r2], #4

08000b14 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b14:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b16:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b18:	d3f9      	bcc.n	8000b0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b1a:	f7ff ffd3 	bl	8000ac4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b1e:	f002 ffcf 	bl	8003ac0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b22:	f7ff fd4d 	bl	80005c0 <main>
  bx  lr    
 8000b26:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b28:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000b2c:	080049c0 	.word	0x080049c0
  ldr  r0, =_sdata
 8000b30:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b34:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8000b38:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8000b3c:	20000104 	.word	0x20000104

08000b40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b40:	e7fe      	b.n	8000b40 <ADC_IRQHandler>
	...

08000b44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b48:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <HAL_Init+0x40>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a0d      	ldr	r2, [pc, #52]	; (8000b84 <HAL_Init+0x40>)
 8000b4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b54:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <HAL_Init+0x40>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a0a      	ldr	r2, [pc, #40]	; (8000b84 <HAL_Init+0x40>)
 8000b5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <HAL_Init+0x40>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a07      	ldr	r2, [pc, #28]	; (8000b84 <HAL_Init+0x40>)
 8000b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b6c:	2003      	movs	r0, #3
 8000b6e:	f000 f94d 	bl	8000e0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b72:	2000      	movs	r0, #0
 8000b74:	f000 f808 	bl	8000b88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b78:	f7ff fe76 	bl	8000868 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40023c00 	.word	0x40023c00

08000b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b90:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <HAL_InitTick+0x54>)
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <HAL_InitTick+0x58>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	4619      	mov	r1, r3
 8000b9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f000 f965 	bl	8000e76 <HAL_SYSTICK_Config>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e00e      	b.n	8000bd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2b0f      	cmp	r3, #15
 8000bba:	d80a      	bhi.n	8000bd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	6879      	ldr	r1, [r7, #4]
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	f000 f92d 	bl	8000e22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bc8:	4a06      	ldr	r2, [pc, #24]	; (8000be4 <HAL_InitTick+0x5c>)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	e000      	b.n	8000bd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20000008 	.word	0x20000008
 8000be0:	20000010 	.word	0x20000010
 8000be4:	2000000c 	.word	0x2000000c

08000be8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bec:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <HAL_IncTick+0x20>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <HAL_IncTick+0x24>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <HAL_IncTick+0x24>)
 8000bfa:	6013      	str	r3, [r2, #0]
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	20000010 	.word	0x20000010
 8000c0c:	200000fc 	.word	0x200000fc

08000c10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  return uwTick;
 8000c14:	4b03      	ldr	r3, [pc, #12]	; (8000c24 <HAL_GetTick+0x14>)
 8000c16:	681b      	ldr	r3, [r3, #0]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	200000fc 	.word	0x200000fc

08000c28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c30:	f7ff ffee 	bl	8000c10 <HAL_GetTick>
 8000c34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c40:	d005      	beq.n	8000c4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <HAL_Delay+0x40>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	461a      	mov	r2, r3
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c4e:	bf00      	nop
 8000c50:	f7ff ffde 	bl	8000c10 <HAL_GetTick>
 8000c54:	4602      	mov	r2, r0
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	68fa      	ldr	r2, [r7, #12]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d8f7      	bhi.n	8000c50 <HAL_Delay+0x28>
  {
  }
}
 8000c60:	bf00      	nop
 8000c62:	3710      	adds	r7, #16
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000010 	.word	0x20000010

08000c6c <__NVIC_SetPriorityGrouping>:
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c88:	4013      	ands	r3, r2
 8000c8a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9e:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	60d3      	str	r3, [r2, #12]
}
 8000ca4:	bf00      	nop
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_GetPriorityGrouping>:
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb8:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <__NVIC_GetPriorityGrouping+0x18>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	0a1b      	lsrs	r3, r3, #8
 8000cbe:	f003 0307 	and.w	r3, r3, #7
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_EnableIRQ>:
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	db0b      	blt.n	8000cfa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	f003 021f 	and.w	r2, r3, #31
 8000ce8:	4907      	ldr	r1, [pc, #28]	; (8000d08 <__NVIC_EnableIRQ+0x38>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	095b      	lsrs	r3, r3, #5
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	e000e100 	.word	0xe000e100

08000d0c <__NVIC_SetPriority>:
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	6039      	str	r1, [r7, #0]
 8000d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	db0a      	blt.n	8000d36 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	490c      	ldr	r1, [pc, #48]	; (8000d58 <__NVIC_SetPriority+0x4c>)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	0112      	lsls	r2, r2, #4
 8000d2c:	b2d2      	uxtb	r2, r2
 8000d2e:	440b      	add	r3, r1
 8000d30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000d34:	e00a      	b.n	8000d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	4908      	ldr	r1, [pc, #32]	; (8000d5c <__NVIC_SetPriority+0x50>)
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	f003 030f 	and.w	r3, r3, #15
 8000d42:	3b04      	subs	r3, #4
 8000d44:	0112      	lsls	r2, r2, #4
 8000d46:	b2d2      	uxtb	r2, r2
 8000d48:	440b      	add	r3, r1
 8000d4a:	761a      	strb	r2, [r3, #24]
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000e100 	.word	0xe000e100
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <NVIC_EncodePriority>:
{
 8000d60:	b480      	push	{r7}
 8000d62:	b089      	sub	sp, #36	; 0x24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	f1c3 0307 	rsb	r3, r3, #7
 8000d7a:	2b04      	cmp	r3, #4
 8000d7c:	bf28      	it	cs
 8000d7e:	2304      	movcs	r3, #4
 8000d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	3304      	adds	r3, #4
 8000d86:	2b06      	cmp	r3, #6
 8000d88:	d902      	bls.n	8000d90 <NVIC_EncodePriority+0x30>
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	3b03      	subs	r3, #3
 8000d8e:	e000      	b.n	8000d92 <NVIC_EncodePriority+0x32>
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d94:	f04f 32ff 	mov.w	r2, #4294967295
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43da      	mvns	r2, r3
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	401a      	ands	r2, r3
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	fa01 f303 	lsl.w	r3, r1, r3
 8000db2:	43d9      	mvns	r1, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db8:	4313      	orrs	r3, r2
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3724      	adds	r7, #36	; 0x24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
	...

08000dc8 <SysTick_Config>:
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dd8:	d301      	bcc.n	8000dde <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e00f      	b.n	8000dfe <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dde:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <SysTick_Config+0x40>)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000de6:	210f      	movs	r1, #15
 8000de8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dec:	f7ff ff8e 	bl	8000d0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000df0:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <SysTick_Config+0x40>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000df6:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <SysTick_Config+0x40>)
 8000df8:	2207      	movs	r2, #7
 8000dfa:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	e000e010 	.word	0xe000e010

08000e0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f7ff ff29 	bl	8000c6c <__NVIC_SetPriorityGrouping>
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b086      	sub	sp, #24
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	4603      	mov	r3, r0
 8000e2a:	60b9      	str	r1, [r7, #8]
 8000e2c:	607a      	str	r2, [r7, #4]
 8000e2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e34:	f7ff ff3e 	bl	8000cb4 <__NVIC_GetPriorityGrouping>
 8000e38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	68b9      	ldr	r1, [r7, #8]
 8000e3e:	6978      	ldr	r0, [r7, #20]
 8000e40:	f7ff ff8e 	bl	8000d60 <NVIC_EncodePriority>
 8000e44:	4602      	mov	r2, r0
 8000e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ff5d 	bl	8000d0c <__NVIC_SetPriority>
}
 8000e52:	bf00      	nop
 8000e54:	3718      	adds	r7, #24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	4603      	mov	r3, r0
 8000e62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff31 	bl	8000cd0 <__NVIC_EnableIRQ>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff ffa2 	bl	8000dc8 <SysTick_Config>
 8000e84:	4603      	mov	r3, r0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	b083      	sub	sp, #12
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d004      	beq.n	8000eac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2280      	movs	r2, #128	; 0x80
 8000ea6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e00c      	b.n	8000ec6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2205      	movs	r2, #5
 8000eb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f022 0201 	bic.w	r2, r2, #1
 8000ec2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	b083      	sub	sp, #12
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ee0:	b2db      	uxtb	r3, r3
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
	...

08000ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b089      	sub	sp, #36	; 0x24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
 8000f0a:	e16b      	b.n	80011e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	697a      	ldr	r2, [r7, #20]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	f040 815a 	bne.w	80011de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d00b      	beq.n	8000f4a <HAL_GPIO_Init+0x5a>
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d007      	beq.n	8000f4a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f3e:	2b11      	cmp	r3, #17
 8000f40:	d003      	beq.n	8000f4a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	2b12      	cmp	r3, #18
 8000f48:	d130      	bne.n	8000fac <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	2203      	movs	r2, #3
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	68da      	ldr	r2, [r3, #12]
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f80:	2201      	movs	r2, #1
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	091b      	lsrs	r3, r3, #4
 8000f96:	f003 0201 	and.w	r2, r3, #1
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	689a      	ldr	r2, [r3, #8]
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d003      	beq.n	8000fec <HAL_GPIO_Init+0xfc>
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	2b12      	cmp	r3, #18
 8000fea:	d123      	bne.n	8001034 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	08da      	lsrs	r2, r3, #3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3208      	adds	r2, #8
 8000ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	f003 0307 	and.w	r3, r3, #7
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	220f      	movs	r2, #15
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	691a      	ldr	r2, [r3, #16]
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	08da      	lsrs	r2, r3, #3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	3208      	adds	r2, #8
 800102e:	69b9      	ldr	r1, [r7, #24]
 8001030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	2203      	movs	r2, #3
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4013      	ands	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 0203 	and.w	r2, r3, #3
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4313      	orrs	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001070:	2b00      	cmp	r3, #0
 8001072:	f000 80b4 	beq.w	80011de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	4b5f      	ldr	r3, [pc, #380]	; (80011f8 <HAL_GPIO_Init+0x308>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	4a5e      	ldr	r2, [pc, #376]	; (80011f8 <HAL_GPIO_Init+0x308>)
 8001080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001084:	6453      	str	r3, [r2, #68]	; 0x44
 8001086:	4b5c      	ldr	r3, [pc, #368]	; (80011f8 <HAL_GPIO_Init+0x308>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001092:	4a5a      	ldr	r2, [pc, #360]	; (80011fc <HAL_GPIO_Init+0x30c>)
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	089b      	lsrs	r3, r3, #2
 8001098:	3302      	adds	r3, #2
 800109a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	f003 0303 	and.w	r3, r3, #3
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	220f      	movs	r2, #15
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43db      	mvns	r3, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4013      	ands	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a51      	ldr	r2, [pc, #324]	; (8001200 <HAL_GPIO_Init+0x310>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d02b      	beq.n	8001116 <HAL_GPIO_Init+0x226>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a50      	ldr	r2, [pc, #320]	; (8001204 <HAL_GPIO_Init+0x314>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d025      	beq.n	8001112 <HAL_GPIO_Init+0x222>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a4f      	ldr	r2, [pc, #316]	; (8001208 <HAL_GPIO_Init+0x318>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d01f      	beq.n	800110e <HAL_GPIO_Init+0x21e>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a4e      	ldr	r2, [pc, #312]	; (800120c <HAL_GPIO_Init+0x31c>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d019      	beq.n	800110a <HAL_GPIO_Init+0x21a>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4d      	ldr	r2, [pc, #308]	; (8001210 <HAL_GPIO_Init+0x320>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d013      	beq.n	8001106 <HAL_GPIO_Init+0x216>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4c      	ldr	r2, [pc, #304]	; (8001214 <HAL_GPIO_Init+0x324>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d00d      	beq.n	8001102 <HAL_GPIO_Init+0x212>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4b      	ldr	r2, [pc, #300]	; (8001218 <HAL_GPIO_Init+0x328>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d007      	beq.n	80010fe <HAL_GPIO_Init+0x20e>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a4a      	ldr	r2, [pc, #296]	; (800121c <HAL_GPIO_Init+0x32c>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d101      	bne.n	80010fa <HAL_GPIO_Init+0x20a>
 80010f6:	2307      	movs	r3, #7
 80010f8:	e00e      	b.n	8001118 <HAL_GPIO_Init+0x228>
 80010fa:	2308      	movs	r3, #8
 80010fc:	e00c      	b.n	8001118 <HAL_GPIO_Init+0x228>
 80010fe:	2306      	movs	r3, #6
 8001100:	e00a      	b.n	8001118 <HAL_GPIO_Init+0x228>
 8001102:	2305      	movs	r3, #5
 8001104:	e008      	b.n	8001118 <HAL_GPIO_Init+0x228>
 8001106:	2304      	movs	r3, #4
 8001108:	e006      	b.n	8001118 <HAL_GPIO_Init+0x228>
 800110a:	2303      	movs	r3, #3
 800110c:	e004      	b.n	8001118 <HAL_GPIO_Init+0x228>
 800110e:	2302      	movs	r3, #2
 8001110:	e002      	b.n	8001118 <HAL_GPIO_Init+0x228>
 8001112:	2301      	movs	r3, #1
 8001114:	e000      	b.n	8001118 <HAL_GPIO_Init+0x228>
 8001116:	2300      	movs	r3, #0
 8001118:	69fa      	ldr	r2, [r7, #28]
 800111a:	f002 0203 	and.w	r2, r2, #3
 800111e:	0092      	lsls	r2, r2, #2
 8001120:	4093      	lsls	r3, r2
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4313      	orrs	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001128:	4934      	ldr	r1, [pc, #208]	; (80011fc <HAL_GPIO_Init+0x30c>)
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	089b      	lsrs	r3, r3, #2
 800112e:	3302      	adds	r3, #2
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001136:	4b3a      	ldr	r3, [pc, #232]	; (8001220 <HAL_GPIO_Init+0x330>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	43db      	mvns	r3, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4013      	ands	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800115a:	4a31      	ldr	r2, [pc, #196]	; (8001220 <HAL_GPIO_Init+0x330>)
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001160:	4b2f      	ldr	r3, [pc, #188]	; (8001220 <HAL_GPIO_Init+0x330>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d003      	beq.n	8001184 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	4313      	orrs	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001184:	4a26      	ldr	r2, [pc, #152]	; (8001220 <HAL_GPIO_Init+0x330>)
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800118a:	4b25      	ldr	r3, [pc, #148]	; (8001220 <HAL_GPIO_Init+0x330>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	43db      	mvns	r3, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4013      	ands	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011ae:	4a1c      	ldr	r2, [pc, #112]	; (8001220 <HAL_GPIO_Init+0x330>)
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011b4:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <HAL_GPIO_Init+0x330>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d003      	beq.n	80011d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011d8:	4a11      	ldr	r2, [pc, #68]	; (8001220 <HAL_GPIO_Init+0x330>)
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3301      	adds	r3, #1
 80011e2:	61fb      	str	r3, [r7, #28]
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	2b0f      	cmp	r3, #15
 80011e8:	f67f ae90 	bls.w	8000f0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011ec:	bf00      	nop
 80011ee:	3724      	adds	r7, #36	; 0x24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40013800 	.word	0x40013800
 8001200:	40020000 	.word	0x40020000
 8001204:	40020400 	.word	0x40020400
 8001208:	40020800 	.word	0x40020800
 800120c:	40020c00 	.word	0x40020c00
 8001210:	40021000 	.word	0x40021000
 8001214:	40021400 	.word	0x40021400
 8001218:	40021800 	.word	0x40021800
 800121c:	40021c00 	.word	0x40021c00
 8001220:	40013c00 	.word	0x40013c00

08001224 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	807b      	strh	r3, [r7, #2]
 8001230:	4613      	mov	r3, r2
 8001232:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001234:	787b      	ldrb	r3, [r7, #1]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800123a:	887a      	ldrh	r2, [r7, #2]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001240:	e003      	b.n	800124a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001242:	887b      	ldrh	r3, [r7, #2]
 8001244:	041a      	lsls	r2, r3, #16
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	619a      	str	r2, [r3, #24]
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001256:	b480      	push	{r7}
 8001258:	b083      	sub	sp, #12
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
 800125e:	460b      	mov	r3, r1
 8001260:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	695a      	ldr	r2, [r3, #20]
 8001266:	887b      	ldrh	r3, [r7, #2]
 8001268:	401a      	ands	r2, r3
 800126a:	887b      	ldrh	r3, [r7, #2]
 800126c:	429a      	cmp	r2, r3
 800126e:	d104      	bne.n	800127a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001270:	887b      	ldrh	r3, [r7, #2]
 8001272:	041a      	lsls	r2, r3, #16
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001278:	e002      	b.n	8001280 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800127a:	887a      	ldrh	r2, [r7, #2]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	619a      	str	r2, [r3, #24]
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d101      	bne.n	800129e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e11f      	b.n	80014de <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d106      	bne.n	80012b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2200      	movs	r2, #0
 80012ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7ff fb00 	bl	80008b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2224      	movs	r2, #36	; 0x24
 80012bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f022 0201 	bic.w	r2, r2, #1
 80012ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80012f0:	f002 fbcc 	bl	8003a8c <HAL_RCC_GetPCLK1Freq>
 80012f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	4a7b      	ldr	r2, [pc, #492]	; (80014e8 <HAL_I2C_Init+0x25c>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d807      	bhi.n	8001310 <HAL_I2C_Init+0x84>
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4a7a      	ldr	r2, [pc, #488]	; (80014ec <HAL_I2C_Init+0x260>)
 8001304:	4293      	cmp	r3, r2
 8001306:	bf94      	ite	ls
 8001308:	2301      	movls	r3, #1
 800130a:	2300      	movhi	r3, #0
 800130c:	b2db      	uxtb	r3, r3
 800130e:	e006      	b.n	800131e <HAL_I2C_Init+0x92>
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	4a77      	ldr	r2, [pc, #476]	; (80014f0 <HAL_I2C_Init+0x264>)
 8001314:	4293      	cmp	r3, r2
 8001316:	bf94      	ite	ls
 8001318:	2301      	movls	r3, #1
 800131a:	2300      	movhi	r3, #0
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e0db      	b.n	80014de <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	4a72      	ldr	r2, [pc, #456]	; (80014f4 <HAL_I2C_Init+0x268>)
 800132a:	fba2 2303 	umull	r2, r3, r2, r3
 800132e:	0c9b      	lsrs	r3, r3, #18
 8001330:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	68ba      	ldr	r2, [r7, #8]
 8001342:	430a      	orrs	r2, r1
 8001344:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	6a1b      	ldr	r3, [r3, #32]
 800134c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	4a64      	ldr	r2, [pc, #400]	; (80014e8 <HAL_I2C_Init+0x25c>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d802      	bhi.n	8001360 <HAL_I2C_Init+0xd4>
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	3301      	adds	r3, #1
 800135e:	e009      	b.n	8001374 <HAL_I2C_Init+0xe8>
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001366:	fb02 f303 	mul.w	r3, r2, r3
 800136a:	4a63      	ldr	r2, [pc, #396]	; (80014f8 <HAL_I2C_Init+0x26c>)
 800136c:	fba2 2303 	umull	r2, r3, r2, r3
 8001370:	099b      	lsrs	r3, r3, #6
 8001372:	3301      	adds	r3, #1
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	6812      	ldr	r2, [r2, #0]
 8001378:	430b      	orrs	r3, r1
 800137a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001386:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	4956      	ldr	r1, [pc, #344]	; (80014e8 <HAL_I2C_Init+0x25c>)
 8001390:	428b      	cmp	r3, r1
 8001392:	d80d      	bhi.n	80013b0 <HAL_I2C_Init+0x124>
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	1e59      	subs	r1, r3, #1
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	fbb1 f3f3 	udiv	r3, r1, r3
 80013a2:	3301      	adds	r3, #1
 80013a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013a8:	2b04      	cmp	r3, #4
 80013aa:	bf38      	it	cc
 80013ac:	2304      	movcc	r3, #4
 80013ae:	e04f      	b.n	8001450 <HAL_I2C_Init+0x1c4>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d111      	bne.n	80013dc <HAL_I2C_Init+0x150>
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	1e58      	subs	r0, r3, #1
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6859      	ldr	r1, [r3, #4]
 80013c0:	460b      	mov	r3, r1
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	440b      	add	r3, r1
 80013c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80013ca:	3301      	adds	r3, #1
 80013cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	bf0c      	ite	eq
 80013d4:	2301      	moveq	r3, #1
 80013d6:	2300      	movne	r3, #0
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	e012      	b.n	8001402 <HAL_I2C_Init+0x176>
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	1e58      	subs	r0, r3, #1
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6859      	ldr	r1, [r3, #4]
 80013e4:	460b      	mov	r3, r1
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	440b      	add	r3, r1
 80013ea:	0099      	lsls	r1, r3, #2
 80013ec:	440b      	add	r3, r1
 80013ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80013f2:	3301      	adds	r3, #1
 80013f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	bf0c      	ite	eq
 80013fc:	2301      	moveq	r3, #1
 80013fe:	2300      	movne	r3, #0
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <HAL_I2C_Init+0x17e>
 8001406:	2301      	movs	r3, #1
 8001408:	e022      	b.n	8001450 <HAL_I2C_Init+0x1c4>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d10e      	bne.n	8001430 <HAL_I2C_Init+0x1a4>
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	1e58      	subs	r0, r3, #1
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6859      	ldr	r1, [r3, #4]
 800141a:	460b      	mov	r3, r1
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	440b      	add	r3, r1
 8001420:	fbb0 f3f3 	udiv	r3, r0, r3
 8001424:	3301      	adds	r3, #1
 8001426:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800142a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800142e:	e00f      	b.n	8001450 <HAL_I2C_Init+0x1c4>
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	1e58      	subs	r0, r3, #1
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6859      	ldr	r1, [r3, #4]
 8001438:	460b      	mov	r3, r1
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	440b      	add	r3, r1
 800143e:	0099      	lsls	r1, r3, #2
 8001440:	440b      	add	r3, r1
 8001442:	fbb0 f3f3 	udiv	r3, r0, r3
 8001446:	3301      	adds	r3, #1
 8001448:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800144c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001450:	6879      	ldr	r1, [r7, #4]
 8001452:	6809      	ldr	r1, [r1, #0]
 8001454:	4313      	orrs	r3, r2
 8001456:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	69da      	ldr	r2, [r3, #28]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a1b      	ldr	r3, [r3, #32]
 800146a:	431a      	orrs	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	430a      	orrs	r2, r1
 8001472:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800147e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	6911      	ldr	r1, [r2, #16]
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	68d2      	ldr	r2, [r2, #12]
 800148a:	4311      	orrs	r1, r2
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	6812      	ldr	r2, [r2, #0]
 8001490:	430b      	orrs	r3, r1
 8001492:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	695a      	ldr	r2, [r3, #20]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	431a      	orrs	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	430a      	orrs	r2, r1
 80014ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f042 0201 	orr.w	r2, r2, #1
 80014be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2220      	movs	r2, #32
 80014ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	000186a0 	.word	0x000186a0
 80014ec:	001e847f 	.word	0x001e847f
 80014f0:	003d08ff 	.word	0x003d08ff
 80014f4:	431bde83 	.word	0x431bde83
 80014f8:	10624dd3 	.word	0x10624dd3

080014fc <HAL_I2C_Slave_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08a      	sub	sp, #40	; 0x28
 8001500:	af02      	add	r7, sp, #8
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	603b      	str	r3, [r7, #0]
 8001508:	4613      	mov	r3, r2
 800150a:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800150c:	f7ff fb80 	bl	8000c10 <HAL_GetTick>
 8001510:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b20      	cmp	r3, #32
 800151c:	f040 8108 	bne.w	8001730 <HAL_I2C_Slave_Transmit+0x234>
  {
    if ((pData == NULL) || (Size == 0U))
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d002      	beq.n	800152c <HAL_I2C_Slave_Transmit+0x30>
 8001526:	88fb      	ldrh	r3, [r7, #6]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d101      	bne.n	8001530 <HAL_I2C_Slave_Transmit+0x34>
    {
      return  HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e100      	b.n	8001732 <HAL_I2C_Slave_Transmit+0x236>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001536:	2b01      	cmp	r3, #1
 8001538:	d101      	bne.n	800153e <HAL_I2C_Slave_Transmit+0x42>
 800153a:	2302      	movs	r3, #2
 800153c:	e0f9      	b.n	8001732 <HAL_I2C_Slave_Transmit+0x236>
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2201      	movs	r2, #1
 8001542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	2b01      	cmp	r3, #1
 8001552:	d007      	beq.n	8001564 <HAL_I2C_Slave_Transmit+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f042 0201 	orr.w	r2, r2, #1
 8001562:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001572:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2221      	movs	r2, #33	; 0x21
 8001578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2220      	movs	r2, #32
 8001580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2200      	movs	r2, #0
 8001588:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	68ba      	ldr	r2, [r7, #8]
 800158e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	88fa      	ldrh	r2, [r7, #6]
 8001594:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800159a:	b29a      	uxth	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	4a66      	ldr	r2, [pc, #408]	; (800173c <HAL_I2C_Slave_Transmit+0x240>)
 80015a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80015b4:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	2200      	movs	r2, #0
 80015be:	4960      	ldr	r1, [pc, #384]	; (8001740 <HAL_I2C_Slave_Transmit+0x244>)
 80015c0:	68f8      	ldr	r0, [r7, #12]
 80015c2:	f001 fcda 	bl	8002f7a <I2C_WaitOnFlagUntilTimeout>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <HAL_I2C_Slave_Transmit+0xd4>
    {
      return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e0b0      	b.n	8001732 <HAL_I2C_Slave_Transmit+0x236>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015d0:	2300      	movs	r3, #0
 80015d2:	61bb      	str	r3, [r7, #24]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	61bb      	str	r3, [r7, #24]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	61bb      	str	r3, [r7, #24]
 80015e4:	69bb      	ldr	r3, [r7, #24]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	691b      	ldr	r3, [r3, #16]
 80015ea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80015ee:	d172      	bne.n	80016d6 <HAL_I2C_Slave_Transmit+0x1da>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	2200      	movs	r2, #0
 80015f8:	4951      	ldr	r1, [pc, #324]	; (8001740 <HAL_I2C_Slave_Transmit+0x244>)
 80015fa:	68f8      	ldr	r0, [r7, #12]
 80015fc:	f001 fcbd 	bl	8002f7a <I2C_WaitOnFlagUntilTimeout>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <HAL_I2C_Slave_Transmit+0x10e>
      {
        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e093      	b.n	8001732 <HAL_I2C_Slave_Transmit+0x236>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	695b      	ldr	r3, [r3, #20]
 8001614:	617b      	str	r3, [r7, #20]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	617b      	str	r3, [r7, #20]
 800161e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001620:	e059      	b.n	80016d6 <HAL_I2C_Slave_Transmit+0x1da>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001622:	69fa      	ldr	r2, [r7, #28]
 8001624:	6839      	ldr	r1, [r7, #0]
 8001626:	68f8      	ldr	r0, [r7, #12]
 8001628:	f001 fcfe 	bl	8003028 <I2C_WaitOnTXEFlagUntilTimeout>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d009      	beq.n	8001646 <HAL_I2C_Slave_Transmit+0x14a>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001640:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e075      	b.n	8001732 <HAL_I2C_Slave_Transmit+0x236>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164a:	781a      	ldrb	r2, [r3, #0]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001656:	1c5a      	adds	r2, r3, #1
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001660:	b29b      	uxth	r3, r3
 8001662:	3b01      	subs	r3, #1
 8001664:	b29a      	uxth	r2, r3
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800166e:	3b01      	subs	r3, #1
 8001670:	b29a      	uxth	r2, r3
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	695b      	ldr	r3, [r3, #20]
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	2b04      	cmp	r3, #4
 8001682:	d11b      	bne.n	80016bc <HAL_I2C_Slave_Transmit+0x1c0>
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001688:	2b00      	cmp	r3, #0
 800168a:	d017      	beq.n	80016bc <HAL_I2C_Slave_Transmit+0x1c0>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001690:	781a      	ldrb	r2, [r3, #0]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169c:	1c5a      	adds	r2, r3, #1
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	3b01      	subs	r3, #1
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016b4:	3b01      	subs	r3, #1
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      if(hi2c->XferCount == 0)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d107      	bne.n	80016d6 <HAL_I2C_Slave_Transmit+0x1da>
      {
		HAL_Delay(1);
 80016c6:	2001      	movs	r0, #1
 80016c8:	f7ff faae 	bl	8000c28 <HAL_Delay>
		HAL_I2C_Init(hi2c);
 80016cc:	68f8      	ldr	r0, [r7, #12]
 80016ce:	f7ff fddd 	bl	800128c <HAL_I2C_Init>
		return HAL_OK;
 80016d2:	2300      	movs	r3, #0
 80016d4:	e02d      	b.n	8001732 <HAL_I2C_Slave_Transmit+0x236>
    while (hi2c->XferSize > 0U)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1a1      	bne.n	8001622 <HAL_I2C_Slave_Transmit+0x126>
      }
    }

    /* Wait until AF flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_AF, RESET, Timeout, tickstart) != HAL_OK)
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f44f 3182 	mov.w	r1, #66560	; 0x10400
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	f001 fc45 	bl	8002f7a <I2C_WaitOnFlagUntilTimeout>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <HAL_I2C_Slave_Transmit+0x1fe>
    {
      return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e01b      	b.n	8001732 <HAL_I2C_Slave_Transmit+0x236>
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001702:	615a      	str	r2, [r3, #20]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001712:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2220      	movs	r2, #32
 8001718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2200      	movs	r2, #0
 8001720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2200      	movs	r2, #0
 8001728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800172c:	2300      	movs	r3, #0
 800172e:	e000      	b.n	8001732 <HAL_I2C_Slave_Transmit+0x236>
  }
  else
  {
    return HAL_BUSY;
 8001730:	2302      	movs	r3, #2
  }
}
 8001732:	4618      	mov	r0, r3
 8001734:	3720      	adds	r7, #32
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	ffff0000 	.word	0xffff0000
 8001740:	00010002 	.word	0x00010002

08001744 <HAL_I2C_Slave_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b08a      	sub	sp, #40	; 0x28
 8001748:	af02      	add	r7, sp, #8
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	603b      	str	r3, [r7, #0]
 8001750:	4613      	mov	r3, r2
 8001752:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001754:	f7ff fa5c 	bl	8000c10 <HAL_GetTick>
 8001758:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b20      	cmp	r3, #32
 8001764:	f040 80fb 	bne.w	800195e <HAL_I2C_Slave_Receive+0x21a>
  {
    if ((pData == NULL) || (Size == (uint16_t)0))
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d002      	beq.n	8001774 <HAL_I2C_Slave_Receive+0x30>
 800176e:	88fb      	ldrh	r3, [r7, #6]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d101      	bne.n	8001778 <HAL_I2C_Slave_Receive+0x34>
    {
      return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e0f3      	b.n	8001960 <HAL_I2C_Slave_Receive+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800177e:	2b01      	cmp	r3, #1
 8001780:	d101      	bne.n	8001786 <HAL_I2C_Slave_Receive+0x42>
 8001782:	2302      	movs	r3, #2
 8001784:	e0ec      	b.n	8001960 <HAL_I2C_Slave_Receive+0x21c>
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2201      	movs	r2, #1
 800178a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	2b01      	cmp	r3, #1
 800179a:	d007      	beq.n	80017ac <HAL_I2C_Slave_Receive+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f042 0201 	orr.w	r2, r2, #1
 80017aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017ba:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2222      	movs	r2, #34	; 0x22
 80017c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2220      	movs	r2, #32
 80017c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2200      	movs	r2, #0
 80017d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	68ba      	ldr	r2, [r7, #8]
 80017d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	88fa      	ldrh	r2, [r7, #6]
 80017dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4a5f      	ldr	r2, [pc, #380]	; (8001968 <HAL_I2C_Slave_Receive+0x224>)
 80017ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80017fc:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	2200      	movs	r2, #0
 8001806:	4959      	ldr	r1, [pc, #356]	; (800196c <HAL_I2C_Slave_Receive+0x228>)
 8001808:	68f8      	ldr	r0, [r7, #12]
 800180a:	f001 fbb6 	bl	8002f7a <I2C_WaitOnFlagUntilTimeout>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <HAL_I2C_Slave_Receive+0xd4>
    {
      return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e0a3      	b.n	8001960 <HAL_I2C_Slave_Receive+0x21c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001818:	2300      	movs	r3, #0
 800181a:	61bb      	str	r3, [r7, #24]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	61bb      	str	r3, [r7, #24]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	61bb      	str	r3, [r7, #24]
 800182c:	69bb      	ldr	r3, [r7, #24]

    while (hi2c->XferSize > 0U)
 800182e:	e05b      	b.n	80018e8 <HAL_I2C_Slave_Receive+0x1a4>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001830:	69fa      	ldr	r2, [r7, #28]
 8001832:	6839      	ldr	r1, [r7, #0]
 8001834:	68f8      	ldr	r0, [r7, #12]
 8001836:	f001 fc75 	bl	8003124 <I2C_WaitOnRXNEFlagUntilTimeout>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d009      	beq.n	8001854 <HAL_I2C_Slave_Receive+0x110>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800184e:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e085      	b.n	8001960 <HAL_I2C_Slave_Receive+0x21c>
      }

      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	691a      	ldr	r2, [r3, #16]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185e:	b2d2      	uxtb	r2, r2
 8001860:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001866:	1c5a      	adds	r2, r3, #1
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001870:	3b01      	subs	r3, #1
 8001872:	b29a      	uxth	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800187c:	b29b      	uxth	r3, r3
 800187e:	3b01      	subs	r3, #1
 8001880:	b29a      	uxth	r2, r3
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	2b04      	cmp	r3, #4
 8001892:	d11c      	bne.n	80018ce <HAL_I2C_Slave_Receive+0x18a>
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001898:	2b00      	cmp	r3, #0
 800189a:	d018      	beq.n	80018ce <HAL_I2C_Slave_Receive+0x18a>
      {
        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	691a      	ldr	r2, [r3, #16]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a6:	b2d2      	uxtb	r2, r2
 80018a8:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ae:	1c5a      	adds	r2, r3, #1
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018b8:	3b01      	subs	r3, #1
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	3b01      	subs	r3, #1
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	855a      	strh	r2, [r3, #42]	; 0x2a
      }

      if(hi2c->XferCount == 1)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d107      	bne.n	80018e8 <HAL_I2C_Slave_Receive+0x1a4>
      {
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018e6:	601a      	str	r2, [r3, #0]
    while (hi2c->XferSize > 0U)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d19f      	bne.n	8001830 <HAL_I2C_Slave_Receive+0xec>
      }
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018f0:	69fa      	ldr	r2, [r7, #28]
 80018f2:	6839      	ldr	r1, [r7, #0]
 80018f4:	68f8      	ldr	r0, [r7, #12]
 80018f6:	f001 fbd8 	bl	80030aa <I2C_WaitOnSTOPFlagUntilTimeout>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d009      	beq.n	8001914 <HAL_I2C_Slave_Receive+0x1d0>
    {
      /* Disable Address Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800190e:	601a      	str	r2, [r3, #0]

      return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e025      	b.n	8001960 <HAL_I2C_Slave_Receive+0x21c>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	695b      	ldr	r3, [r3, #20]
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f042 0201 	orr.w	r2, r2, #1
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	697b      	ldr	r3, [r7, #20]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001940:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2220      	movs	r2, #32
 8001946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800195a:	2300      	movs	r3, #0
 800195c:	e000      	b.n	8001960 <HAL_I2C_Slave_Receive+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800195e:	2302      	movs	r3, #2
  }
}
 8001960:	4618      	mov	r0, r3
 8001962:	3720      	adds	r7, #32
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	ffff0000 	.word	0xffff0000
 800196c:	00010002 	.word	0x00010002

08001970 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800197e:	b2db      	uxtb	r3, r3
 8001980:	2b20      	cmp	r3, #32
 8001982:	d124      	bne.n	80019ce <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2228      	movs	r2, #40	; 0x28
 8001988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	2b01      	cmp	r3, #1
 8001998:	d007      	beq.n	80019aa <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f042 0201 	orr.w	r2, r2, #1
 80019a8:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80019b8:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	685a      	ldr	r2, [r3, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80019c8:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80019ca:	2300      	movs	r3, #0
 80019cc:	e000      	b.n	80019d0 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80019ce:	2302      	movs	r3, #2
  }
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b088      	sub	sp, #32
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80019e4:	2300      	movs	r3, #0
 80019e6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80019fc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a04:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001a06:	7bfb      	ldrb	r3, [r7, #15]
 8001a08:	2b10      	cmp	r3, #16
 8001a0a:	d003      	beq.n	8001a14 <HAL_I2C_EV_IRQHandler+0x38>
 8001a0c:	7bfb      	ldrb	r3, [r7, #15]
 8001a0e:	2b40      	cmp	r3, #64	; 0x40
 8001a10:	f040 80b6 	bne.w	8001b80 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10d      	bne.n	8001a4a <HAL_I2C_EV_IRQHandler+0x6e>
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001a34:	d003      	beq.n	8001a3e <HAL_I2C_EV_IRQHandler+0x62>
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001a3c:	d101      	bne.n	8001a42 <HAL_I2C_EV_IRQHandler+0x66>
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e000      	b.n	8001a44 <HAL_I2C_EV_IRQHandler+0x68>
 8001a42:	2300      	movs	r3, #0
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	f000 8127 	beq.w	8001c98 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d00c      	beq.n	8001a6e <HAL_I2C_EV_IRQHandler+0x92>
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	0a5b      	lsrs	r3, r3, #9
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d006      	beq.n	8001a6e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f001 fbe4 	bl	800322e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 fc67 	bl	800233a <I2C_Master_SB>
 8001a6c:	e087      	b.n	8001b7e <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	08db      	lsrs	r3, r3, #3
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d009      	beq.n	8001a8e <HAL_I2C_EV_IRQHandler+0xb2>
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	0a5b      	lsrs	r3, r3, #9
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f000 fcdd 	bl	8002446 <I2C_Master_ADD10>
 8001a8c:	e077      	b.n	8001b7e <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	085b      	lsrs	r3, r3, #1
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d009      	beq.n	8001aae <HAL_I2C_EV_IRQHandler+0xd2>
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	0a5b      	lsrs	r3, r3, #9
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 fcf7 	bl	800249a <I2C_Master_ADDR>
 8001aac:	e067      	b.n	8001b7e <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	089b      	lsrs	r3, r3, #2
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d030      	beq.n	8001b1c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ac4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ac8:	f000 80e8 	beq.w	8001c9c <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	09db      	lsrs	r3, r3, #7
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d00f      	beq.n	8001af8 <HAL_I2C_EV_IRQHandler+0x11c>
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	0a9b      	lsrs	r3, r3, #10
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d009      	beq.n	8001af8 <HAL_I2C_EV_IRQHandler+0x11c>
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	089b      	lsrs	r3, r3, #2
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d103      	bne.n	8001af8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f000 f933 	bl	8001d5c <I2C_MasterTransmit_TXE>
 8001af6:	e042      	b.n	8001b7e <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	089b      	lsrs	r3, r3, #2
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 80cb 	beq.w	8001c9c <HAL_I2C_EV_IRQHandler+0x2c0>
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	0a5b      	lsrs	r3, r3, #9
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f000 80c4 	beq.w	8001c9c <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 f9bd 	bl	8001e94 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b1a:	e0bf      	b.n	8001c9c <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b2a:	f000 80b7 	beq.w	8001c9c <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	099b      	lsrs	r3, r3, #6
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d00f      	beq.n	8001b5a <HAL_I2C_EV_IRQHandler+0x17e>
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	0a9b      	lsrs	r3, r3, #10
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d009      	beq.n	8001b5a <HAL_I2C_EV_IRQHandler+0x17e>
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	089b      	lsrs	r3, r3, #2
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d103      	bne.n	8001b5a <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 fa85 	bl	8002062 <I2C_MasterReceive_RXNE>
 8001b58:	e011      	b.n	8001b7e <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	089b      	lsrs	r3, r3, #2
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f000 809a 	beq.w	8001c9c <HAL_I2C_EV_IRQHandler+0x2c0>
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	0a5b      	lsrs	r3, r3, #9
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f000 8093 	beq.w	8001c9c <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 faf5 	bl	8002166 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b7c:	e08e      	b.n	8001c9c <HAL_I2C_EV_IRQHandler+0x2c0>
 8001b7e:	e08d      	b.n	8001c9c <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d004      	beq.n	8001b92 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	61fb      	str	r3, [r7, #28]
 8001b90:	e007      	b.n	8001ba2 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	695b      	ldr	r3, [r3, #20]
 8001ba0:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	085b      	lsrs	r3, r3, #1
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d012      	beq.n	8001bd4 <HAL_I2C_EV_IRQHandler+0x1f8>
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	0a5b      	lsrs	r3, r3, #9
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d00c      	beq.n	8001bd4 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001bca:	69b9      	ldr	r1, [r7, #24]
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f000 feb3 	bl	8002938 <I2C_Slave_ADDR>
 8001bd2:	e066      	b.n	8001ca2 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	091b      	lsrs	r3, r3, #4
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d009      	beq.n	8001bf4 <HAL_I2C_EV_IRQHandler+0x218>
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	0a5b      	lsrs	r3, r3, #9
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d003      	beq.n	8001bf4 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 fee7 	bl	80029c0 <I2C_Slave_STOPF>
 8001bf2:	e056      	b.n	8001ca2 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001bf4:	7bbb      	ldrb	r3, [r7, #14]
 8001bf6:	2b21      	cmp	r3, #33	; 0x21
 8001bf8:	d002      	beq.n	8001c00 <HAL_I2C_EV_IRQHandler+0x224>
 8001bfa:	7bbb      	ldrb	r3, [r7, #14]
 8001bfc:	2b29      	cmp	r3, #41	; 0x29
 8001bfe:	d125      	bne.n	8001c4c <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	09db      	lsrs	r3, r3, #7
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d00f      	beq.n	8001c2c <HAL_I2C_EV_IRQHandler+0x250>
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	0a9b      	lsrs	r3, r3, #10
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d009      	beq.n	8001c2c <HAL_I2C_EV_IRQHandler+0x250>
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	089b      	lsrs	r3, r3, #2
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d103      	bne.n	8001c2c <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 fdc9 	bl	80027bc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c2a:	e039      	b.n	8001ca0 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	089b      	lsrs	r3, r3, #2
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d033      	beq.n	8001ca0 <HAL_I2C_EV_IRQHandler+0x2c4>
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	0a5b      	lsrs	r3, r3, #9
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d02d      	beq.n	8001ca0 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 fdf6 	bl	8002836 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c4a:	e029      	b.n	8001ca0 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	099b      	lsrs	r3, r3, #6
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d00f      	beq.n	8001c78 <HAL_I2C_EV_IRQHandler+0x29c>
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	0a9b      	lsrs	r3, r3, #10
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d009      	beq.n	8001c78 <HAL_I2C_EV_IRQHandler+0x29c>
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	089b      	lsrs	r3, r3, #2
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d103      	bne.n	8001c78 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f000 fe01 	bl	8002878 <I2C_SlaveReceive_RXNE>
 8001c76:	e014      	b.n	8001ca2 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	089b      	lsrs	r3, r3, #2
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d00e      	beq.n	8001ca2 <HAL_I2C_EV_IRQHandler+0x2c6>
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	0a5b      	lsrs	r3, r3, #9
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d008      	beq.n	8001ca2 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 fe2f 	bl	80028f4 <I2C_SlaveReceive_BTF>
 8001c96:	e004      	b.n	8001ca2 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8001c98:	bf00      	nop
 8001c9a:	e002      	b.n	8001ca2 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c9c:	bf00      	nop
 8001c9e:	e000      	b.n	8001ca2 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ca0:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001ca2:	3720      	adds	r7, #32
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d6a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d72:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d78:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d150      	bne.n	8001e24 <I2C_MasterTransmit_TXE+0xc8>
 8001d82:	7bfb      	ldrb	r3, [r7, #15]
 8001d84:	2b21      	cmp	r3, #33	; 0x21
 8001d86:	d14d      	bne.n	8001e24 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	2b08      	cmp	r3, #8
 8001d8c:	d01d      	beq.n	8001dca <I2C_MasterTransmit_TXE+0x6e>
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	2b20      	cmp	r3, #32
 8001d92:	d01a      	beq.n	8001dca <I2C_MasterTransmit_TXE+0x6e>
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d9a:	d016      	beq.n	8001dca <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	685a      	ldr	r2, [r3, #4]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001daa:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2211      	movs	r2, #17
 8001db0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2220      	movs	r2, #32
 8001dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7ff ff70 	bl	8001ca8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001dc8:	e060      	b.n	8001e8c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001dd8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001de8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2220      	movs	r2, #32
 8001df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b40      	cmp	r3, #64	; 0x40
 8001e02:	d107      	bne.n	8001e14 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f7ff ff7d 	bl	8001d0c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001e12:	e03b      	b.n	8001e8c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7ff ff43 	bl	8001ca8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001e22:	e033      	b.n	8001e8c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001e24:	7bfb      	ldrb	r3, [r7, #15]
 8001e26:	2b21      	cmp	r3, #33	; 0x21
 8001e28:	d005      	beq.n	8001e36 <I2C_MasterTransmit_TXE+0xda>
 8001e2a:	7bbb      	ldrb	r3, [r7, #14]
 8001e2c:	2b40      	cmp	r3, #64	; 0x40
 8001e2e:	d12d      	bne.n	8001e8c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001e30:	7bfb      	ldrb	r3, [r7, #15]
 8001e32:	2b22      	cmp	r3, #34	; 0x22
 8001e34:	d12a      	bne.n	8001e8c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d108      	bne.n	8001e52 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e4e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001e50:	e01c      	b.n	8001e8c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b40      	cmp	r3, #64	; 0x40
 8001e5c:	d103      	bne.n	8001e66 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 f898 	bl	8001f94 <I2C_MemoryTransmit_TXE_BTF>
}
 8001e64:	e012      	b.n	8001e8c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6a:	781a      	ldrb	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e76:	1c5a      	adds	r2, r3, #1
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	3b01      	subs	r3, #1
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001e8a:	e7ff      	b.n	8001e8c <I2C_MasterTransmit_TXE+0x130>
 8001e8c:	bf00      	nop
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b21      	cmp	r3, #33	; 0x21
 8001eac:	d165      	bne.n	8001f7a <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d012      	beq.n	8001ede <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebc:	781a      	ldrb	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec8:	1c5a      	adds	r2, r3, #1
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001edc:	e056      	b.n	8001f8c <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2b08      	cmp	r3, #8
 8001ee2:	d01d      	beq.n	8001f20 <I2C_MasterTransmit_BTF+0x8c>
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2b20      	cmp	r3, #32
 8001ee8:	d01a      	beq.n	8001f20 <I2C_MasterTransmit_BTF+0x8c>
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ef0:	d016      	beq.n	8001f20 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001f00:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2211      	movs	r2, #17
 8001f06:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2220      	movs	r2, #32
 8001f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7ff fec5 	bl	8001ca8 <HAL_I2C_MasterTxCpltCallback>
}
 8001f1e:	e035      	b.n	8001f8c <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001f2e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f3e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2220      	movs	r2, #32
 8001f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b40      	cmp	r3, #64	; 0x40
 8001f58:	d107      	bne.n	8001f6a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7ff fed2 	bl	8001d0c <HAL_I2C_MemTxCpltCallback>
}
 8001f68:	e010      	b.n	8001f8c <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7ff fe98 	bl	8001ca8 <HAL_I2C_MasterTxCpltCallback>
}
 8001f78:	e008      	b.n	8001f8c <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b40      	cmp	r3, #64	; 0x40
 8001f84:	d102      	bne.n	8001f8c <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f804 	bl	8001f94 <I2C_MemoryTransmit_TXE_BTF>
}
 8001f8c:	bf00      	nop
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d11d      	bne.n	8001fe0 <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d10b      	bne.n	8001fc4 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fbc:	1c9a      	adds	r2, r3, #2
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8001fc2:	e048      	b.n	8002056 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	121b      	asrs	r3, r3, #8
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fd8:	1c5a      	adds	r2, r3, #1
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001fde:	e03a      	b.n	8002056 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d10b      	bne.n	8002000 <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ff8:	1c5a      	adds	r2, r3, #1
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001ffe:	e02a      	b.n	8002056 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002004:	2b02      	cmp	r3, #2
 8002006:	d126      	bne.n	8002056 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b22      	cmp	r3, #34	; 0x22
 8002012:	d108      	bne.n	8002026 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002022:	601a      	str	r2, [r3, #0]
}
 8002024:	e017      	b.n	8002056 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b21      	cmp	r3, #33	; 0x21
 8002030:	d111      	bne.n	8002056 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002036:	781a      	ldrb	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002042:	1c5a      	adds	r2, r3, #1
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800204c:	b29b      	uxth	r3, r3
 800204e:	3b01      	subs	r3, #1
 8002050:	b29a      	uxth	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b084      	sub	sp, #16
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b22      	cmp	r3, #34	; 0x22
 8002074:	d173      	bne.n	800215e <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800207a:	b29b      	uxth	r3, r3
 800207c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2b03      	cmp	r3, #3
 8002082:	d920      	bls.n	80020c6 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	691a      	ldr	r2, [r3, #16]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002096:	1c5a      	adds	r2, r3, #1
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	3b01      	subs	r3, #1
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	2b03      	cmp	r3, #3
 80020b2:	d154      	bne.n	800215e <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020c2:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80020c4:	e04b      	b.n	800215e <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d047      	beq.n	800215e <I2C_MasterReceive_RXNE+0xfc>
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d002      	beq.n	80020da <I2C_MasterReceive_RXNE+0x78>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d141      	bne.n	800215e <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020e8:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80020f8:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	691a      	ldr	r2, [r3, #16]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002104:	b2d2      	uxtb	r2, r2
 8002106:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210c:	1c5a      	adds	r2, r3, #1
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002116:	b29b      	uxth	r3, r3
 8002118:	3b01      	subs	r3, #1
 800211a:	b29a      	uxth	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2220      	movs	r2, #32
 8002124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b40      	cmp	r3, #64	; 0x40
 8002132:	d10a      	bne.n	800214a <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7ff fdec 	bl	8001d20 <HAL_I2C_MemRxCpltCallback>
}
 8002148:	e009      	b.n	800215e <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2212      	movs	r2, #18
 8002156:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f7ff fdaf 	bl	8001cbc <HAL_I2C_MasterRxCpltCallback>
}
 800215e:	bf00      	nop
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b084      	sub	sp, #16
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002172:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002178:	b29b      	uxth	r3, r3
 800217a:	2b04      	cmp	r3, #4
 800217c:	d11b      	bne.n	80021b6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800218c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	691a      	ldr	r2, [r3, #16]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a0:	1c5a      	adds	r2, r3, #1
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	3b01      	subs	r3, #1
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80021b4:	e0bd      	b.n	8002332 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	2b03      	cmp	r3, #3
 80021be:	d129      	bne.n	8002214 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021ce:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2b04      	cmp	r3, #4
 80021d4:	d00a      	beq.n	80021ec <I2C_MasterReceive_BTF+0x86>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d007      	beq.n	80021ec <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021ea:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	691a      	ldr	r2, [r3, #16]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f6:	b2d2      	uxtb	r2, r2
 80021f8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fe:	1c5a      	adds	r2, r3, #1
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002208:	b29b      	uxth	r3, r3
 800220a:	3b01      	subs	r3, #1
 800220c:	b29a      	uxth	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002212:	e08e      	b.n	8002332 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002218:	b29b      	uxth	r3, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d176      	bne.n	800230c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d002      	beq.n	800222a <I2C_MasterReceive_BTF+0xc4>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2b10      	cmp	r3, #16
 8002228:	d108      	bne.n	800223c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	e019      	b.n	8002270 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2b04      	cmp	r3, #4
 8002240:	d002      	beq.n	8002248 <I2C_MasterReceive_BTF+0xe2>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2b02      	cmp	r3, #2
 8002246:	d108      	bne.n	800225a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	e00a      	b.n	8002270 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2b10      	cmp	r3, #16
 800225e:	d007      	beq.n	8002270 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800226e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	691a      	ldr	r2, [r3, #16]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002282:	1c5a      	adds	r2, r3, #1
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800228c:	b29b      	uxth	r3, r3
 800228e:	3b01      	subs	r3, #1
 8002290:	b29a      	uxth	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	691a      	ldr	r2, [r3, #16]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a0:	b2d2      	uxtb	r2, r2
 80022a2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a8:	1c5a      	adds	r2, r3, #1
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	3b01      	subs	r3, #1
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80022ca:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2220      	movs	r2, #32
 80022d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	2b40      	cmp	r3, #64	; 0x40
 80022de:	d10a      	bne.n	80022f6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7ff fd16 	bl	8001d20 <HAL_I2C_MemRxCpltCallback>
}
 80022f4:	e01d      	b.n	8002332 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2212      	movs	r2, #18
 8002302:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f7ff fcd9 	bl	8001cbc <HAL_I2C_MasterRxCpltCallback>
}
 800230a:	e012      	b.n	8002332 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	691a      	ldr	r2, [r3, #16]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231e:	1c5a      	adds	r2, r3, #1
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002328:	b29b      	uxth	r3, r3
 800232a:	3b01      	subs	r3, #1
 800232c:	b29a      	uxth	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002332:	bf00      	nop
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b40      	cmp	r3, #64	; 0x40
 800234c:	d117      	bne.n	800237e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002352:	2b00      	cmp	r3, #0
 8002354:	d109      	bne.n	800236a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235a:	b2db      	uxtb	r3, r3
 800235c:	461a      	mov	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002366:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002368:	e067      	b.n	800243a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236e:	b2db      	uxtb	r3, r3
 8002370:	f043 0301 	orr.w	r3, r3, #1
 8002374:	b2da      	uxtb	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	611a      	str	r2, [r3, #16]
}
 800237c:	e05d      	b.n	800243a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002386:	d133      	bne.n	80023f0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b21      	cmp	r3, #33	; 0x21
 8002392:	d109      	bne.n	80023a8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002398:	b2db      	uxtb	r3, r3
 800239a:	461a      	mov	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023a4:	611a      	str	r2, [r3, #16]
 80023a6:	e008      	b.n	80023ba <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	f043 0301 	orr.w	r3, r3, #1
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d004      	beq.n	80023cc <I2C_Master_SB+0x92>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d108      	bne.n	80023de <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d032      	beq.n	800243a <I2C_Master_SB+0x100>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d02d      	beq.n	800243a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	685a      	ldr	r2, [r3, #4]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023ec:	605a      	str	r2, [r3, #4]
}
 80023ee:	e024      	b.n	800243a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d10e      	bne.n	8002416 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	11db      	asrs	r3, r3, #7
 8002400:	b2db      	uxtb	r3, r3
 8002402:	f003 0306 	and.w	r3, r3, #6
 8002406:	b2db      	uxtb	r3, r3
 8002408:	f063 030f 	orn	r3, r3, #15
 800240c:	b2da      	uxtb	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	611a      	str	r2, [r3, #16]
}
 8002414:	e011      	b.n	800243a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800241a:	2b01      	cmp	r3, #1
 800241c:	d10d      	bne.n	800243a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002422:	b29b      	uxth	r3, r3
 8002424:	11db      	asrs	r3, r3, #7
 8002426:	b2db      	uxtb	r3, r3
 8002428:	f003 0306 	and.w	r3, r3, #6
 800242c:	b2db      	uxtb	r3, r3
 800242e:	f063 030e 	orn	r3, r3, #14
 8002432:	b2da      	uxtb	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	611a      	str	r2, [r3, #16]
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002446:	b480      	push	{r7}
 8002448:	b083      	sub	sp, #12
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002452:	b2da      	uxtb	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800245e:	2b00      	cmp	r3, #0
 8002460:	d103      	bne.n	800246a <I2C_Master_ADD10+0x24>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002466:	2b00      	cmp	r3, #0
 8002468:	d011      	beq.n	800248e <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800246e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002470:	2b00      	cmp	r3, #0
 8002472:	d104      	bne.n	800247e <I2C_Master_ADD10+0x38>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800247a:	2b00      	cmp	r3, #0
 800247c:	d007      	beq.n	800248e <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	685a      	ldr	r2, [r3, #4]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800248c:	605a      	str	r2, [r3, #4]
    }
  }
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800249a:	b480      	push	{r7}
 800249c:	b091      	sub	sp, #68	; 0x44
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2b22      	cmp	r3, #34	; 0x22
 80024c2:	f040 8169 	bne.w	8002798 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10f      	bne.n	80024ee <I2C_Master_ADDR+0x54>
 80024ce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80024d2:	2b40      	cmp	r3, #64	; 0x40
 80024d4:	d10b      	bne.n	80024ee <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024d6:	2300      	movs	r3, #0
 80024d8:	633b      	str	r3, [r7, #48]	; 0x30
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	695b      	ldr	r3, [r3, #20]
 80024e0:	633b      	str	r3, [r7, #48]	; 0x30
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	633b      	str	r3, [r7, #48]	; 0x30
 80024ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ec:	e160      	b.n	80027b0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d11d      	bne.n	8002532 <I2C_Master_ADDR+0x98>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80024fe:	d118      	bne.n	8002532 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002500:	2300      	movs	r3, #0
 8002502:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002514:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002524:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800252a:	1c5a      	adds	r2, r3, #1
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	651a      	str	r2, [r3, #80]	; 0x50
 8002530:	e13e      	b.n	80027b0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002536:	b29b      	uxth	r3, r3
 8002538:	2b00      	cmp	r3, #0
 800253a:	d113      	bne.n	8002564 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800253c:	2300      	movs	r3, #0
 800253e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	62bb      	str	r3, [r7, #40]	; 0x28
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002550:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	e115      	b.n	8002790 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002568:	b29b      	uxth	r3, r3
 800256a:	2b01      	cmp	r3, #1
 800256c:	f040 808a 	bne.w	8002684 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002572:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002576:	d137      	bne.n	80025e8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002586:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002592:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002596:	d113      	bne.n	80025c0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025a6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025a8:	2300      	movs	r3, #0
 80025aa:	627b      	str	r3, [r7, #36]	; 0x24
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	627b      	str	r3, [r7, #36]	; 0x24
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	627b      	str	r3, [r7, #36]	; 0x24
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	e0e7      	b.n	8002790 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025c0:	2300      	movs	r3, #0
 80025c2:	623b      	str	r3, [r7, #32]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	623b      	str	r3, [r7, #32]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	623b      	str	r3, [r7, #32]
 80025d4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	e0d3      	b.n	8002790 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80025e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ea:	2b08      	cmp	r3, #8
 80025ec:	d02e      	beq.n	800264c <I2C_Master_ADDR+0x1b2>
 80025ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f0:	2b20      	cmp	r3, #32
 80025f2:	d02b      	beq.n	800264c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80025f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f6:	2b12      	cmp	r3, #18
 80025f8:	d102      	bne.n	8002600 <I2C_Master_ADDR+0x166>
 80025fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d125      	bne.n	800264c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002602:	2b04      	cmp	r3, #4
 8002604:	d00e      	beq.n	8002624 <I2C_Master_ADDR+0x18a>
 8002606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002608:	2b02      	cmp	r3, #2
 800260a:	d00b      	beq.n	8002624 <I2C_Master_ADDR+0x18a>
 800260c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800260e:	2b10      	cmp	r3, #16
 8002610:	d008      	beq.n	8002624 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	e007      	b.n	8002634 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002632:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002634:	2300      	movs	r3, #0
 8002636:	61fb      	str	r3, [r7, #28]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	61fb      	str	r3, [r7, #28]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	61fb      	str	r3, [r7, #28]
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	e0a1      	b.n	8002790 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800265a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800265c:	2300      	movs	r3, #0
 800265e:	61bb      	str	r3, [r7, #24]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	61bb      	str	r3, [r7, #24]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	61bb      	str	r3, [r7, #24]
 8002670:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	e085      	b.n	8002790 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002688:	b29b      	uxth	r3, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d14d      	bne.n	800272a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800268e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002690:	2b04      	cmp	r3, #4
 8002692:	d016      	beq.n	80026c2 <I2C_Master_ADDR+0x228>
 8002694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002696:	2b02      	cmp	r3, #2
 8002698:	d013      	beq.n	80026c2 <I2C_Master_ADDR+0x228>
 800269a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800269c:	2b10      	cmp	r3, #16
 800269e:	d010      	beq.n	80026c2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026ae:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	e007      	b.n	80026d2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026d0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026e0:	d117      	bne.n	8002712 <I2C_Master_ADDR+0x278>
 80026e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026e8:	d00b      	beq.n	8002702 <I2C_Master_ADDR+0x268>
 80026ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d008      	beq.n	8002702 <I2C_Master_ADDR+0x268>
 80026f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f2:	2b08      	cmp	r3, #8
 80026f4:	d005      	beq.n	8002702 <I2C_Master_ADDR+0x268>
 80026f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f8:	2b10      	cmp	r3, #16
 80026fa:	d002      	beq.n	8002702 <I2C_Master_ADDR+0x268>
 80026fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026fe:	2b20      	cmp	r3, #32
 8002700:	d107      	bne.n	8002712 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002710:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002712:	2300      	movs	r3, #0
 8002714:	617b      	str	r3, [r7, #20]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	617b      	str	r3, [r7, #20]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	617b      	str	r3, [r7, #20]
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	e032      	b.n	8002790 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002738:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002744:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002748:	d117      	bne.n	800277a <I2C_Master_ADDR+0x2e0>
 800274a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800274c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002750:	d00b      	beq.n	800276a <I2C_Master_ADDR+0x2d0>
 8002752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002754:	2b01      	cmp	r3, #1
 8002756:	d008      	beq.n	800276a <I2C_Master_ADDR+0x2d0>
 8002758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800275a:	2b08      	cmp	r3, #8
 800275c:	d005      	beq.n	800276a <I2C_Master_ADDR+0x2d0>
 800275e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002760:	2b10      	cmp	r3, #16
 8002762:	d002      	beq.n	800276a <I2C_Master_ADDR+0x2d0>
 8002764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002766:	2b20      	cmp	r3, #32
 8002768:	d107      	bne.n	800277a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002778:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800277a:	2300      	movs	r3, #0
 800277c:	613b      	str	r3, [r7, #16]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	613b      	str	r3, [r7, #16]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	613b      	str	r3, [r7, #16]
 800278e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002796:	e00b      	b.n	80027b0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002798:	2300      	movs	r3, #0
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	68fb      	ldr	r3, [r7, #12]
}
 80027ae:	e7ff      	b.n	80027b0 <I2C_Master_ADDR+0x316>
 80027b0:	bf00      	nop
 80027b2:	3744      	adds	r7, #68	; 0x44
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ca:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d02b      	beq.n	800282e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	781a      	ldrb	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e6:	1c5a      	adds	r2, r3, #1
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	3b01      	subs	r3, #1
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027fe:	b29b      	uxth	r3, r3
 8002800:	2b00      	cmp	r3, #0
 8002802:	d114      	bne.n	800282e <I2C_SlaveTransmit_TXE+0x72>
 8002804:	7bfb      	ldrb	r3, [r7, #15]
 8002806:	2b29      	cmp	r3, #41	; 0x29
 8002808:	d111      	bne.n	800282e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	685a      	ldr	r2, [r3, #4]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002818:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2221      	movs	r2, #33	; 0x21
 800281e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2228      	movs	r2, #40	; 0x28
 8002824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7ff fa51 	bl	8001cd0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800282e:	bf00      	nop
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002836:	b480      	push	{r7}
 8002838:	b083      	sub	sp, #12
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002842:	b29b      	uxth	r3, r3
 8002844:	2b00      	cmp	r3, #0
 8002846:	d011      	beq.n	800286c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284c:	781a      	ldrb	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002858:	1c5a      	adds	r2, r3, #1
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002862:	b29b      	uxth	r3, r3
 8002864:	3b01      	subs	r3, #1
 8002866:	b29a      	uxth	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002886:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800288c:	b29b      	uxth	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d02c      	beq.n	80028ec <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	691a      	ldr	r2, [r3, #16]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a4:	1c5a      	adds	r2, r3, #1
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	3b01      	subs	r3, #1
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028bc:	b29b      	uxth	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d114      	bne.n	80028ec <I2C_SlaveReceive_RXNE+0x74>
 80028c2:	7bfb      	ldrb	r3, [r7, #15]
 80028c4:	2b2a      	cmp	r3, #42	; 0x2a
 80028c6:	d111      	bne.n	80028ec <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028d6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2222      	movs	r2, #34	; 0x22
 80028dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2228      	movs	r2, #40	; 0x28
 80028e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7ff f9fc 	bl	8001ce4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80028ec:	bf00      	nop
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002900:	b29b      	uxth	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d012      	beq.n	800292c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	691a      	ldr	r2, [r3, #16]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002910:	b2d2      	uxtb	r2, r2
 8002912:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002918:	1c5a      	adds	r2, r3, #1
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002922:	b29b      	uxth	r3, r3
 8002924:	3b01      	subs	r3, #1
 8002926:	b29a      	uxth	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002942:	2300      	movs	r3, #0
 8002944:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800294c:	b2db      	uxtb	r3, r3
 800294e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002952:	2b28      	cmp	r3, #40	; 0x28
 8002954:	d127      	bne.n	80029a6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002964:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	089b      	lsrs	r3, r3, #2
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002972:	2301      	movs	r3, #1
 8002974:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	09db      	lsrs	r3, r3, #7
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b00      	cmp	r3, #0
 8002980:	d103      	bne.n	800298a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	81bb      	strh	r3, [r7, #12]
 8002988:	e002      	b.n	8002990 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002998:	89ba      	ldrh	r2, [r7, #12]
 800299a:	7bfb      	ldrb	r3, [r7, #15]
 800299c:	4619      	mov	r1, r3
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f7fd ff22 	bl	80007e8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80029a4:	e008      	b.n	80029b8 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f06f 0202 	mvn.w	r2, #2
 80029ae:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80029b8:	bf00      	nop
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ce:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	685a      	ldr	r2, [r3, #4]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80029de:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80029e0:	2300      	movs	r3, #0
 80029e2:	60bb      	str	r3, [r7, #8]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	60bb      	str	r3, [r7, #8]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 0201 	orr.w	r2, r2, #1
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a0c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a1c:	d172      	bne.n	8002b04 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002a1e:	7bfb      	ldrb	r3, [r7, #15]
 8002a20:	2b22      	cmp	r3, #34	; 0x22
 8002a22:	d002      	beq.n	8002a2a <I2C_Slave_STOPF+0x6a>
 8002a24:	7bfb      	ldrb	r3, [r7, #15]
 8002a26:	2b2a      	cmp	r3, #42	; 0x2a
 8002a28:	d135      	bne.n	8002a96 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d005      	beq.n	8002a4e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	f043 0204 	orr.w	r2, r3, #4
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	685a      	ldr	r2, [r3, #4]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a5c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fe fa35 	bl	8000ed2 <HAL_DMA_GetState>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d049      	beq.n	8002b02 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a72:	4a69      	ldr	r2, [pc, #420]	; (8002c18 <I2C_Slave_STOPF+0x258>)
 8002a74:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fe fa07 	bl	8000e8e <HAL_DMA_Abort_IT>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d03d      	beq.n	8002b02 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a90:	4610      	mov	r0, r2
 8002a92:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002a94:	e035      	b.n	8002b02 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d005      	beq.n	8002aba <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	f043 0204 	orr.w	r2, r3, #4
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	685a      	ldr	r2, [r3, #4]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ac8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7fe f9ff 	bl	8000ed2 <HAL_DMA_GetState>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d014      	beq.n	8002b04 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ade:	4a4e      	ldr	r2, [pc, #312]	; (8002c18 <I2C_Slave_STOPF+0x258>)
 8002ae0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fe f9d1 	bl	8000e8e <HAL_DMA_Abort_IT>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d008      	beq.n	8002b04 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002afc:	4610      	mov	r0, r2
 8002afe:	4798      	blx	r3
 8002b00:	e000      	b.n	8002b04 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b02:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d03e      	beq.n	8002b8c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b04      	cmp	r3, #4
 8002b1a:	d112      	bne.n	8002b42 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	691a      	ldr	r2, [r3, #16]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2e:	1c5a      	adds	r2, r3, #1
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b4c:	2b40      	cmp	r3, #64	; 0x40
 8002b4e:	d112      	bne.n	8002b76 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	691a      	ldr	r2, [r3, #16]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5a:	b2d2      	uxtb	r2, r2
 8002b5c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b62:	1c5a      	adds	r2, r3, #1
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d005      	beq.n	8002b8c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b84:	f043 0204 	orr.w	r2, r3, #4
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d003      	beq.n	8002b9c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 f843 	bl	8002c20 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002b9a:	e039      	b.n	8002c10 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002b9c:	7bfb      	ldrb	r3, [r7, #15]
 8002b9e:	2b2a      	cmp	r3, #42	; 0x2a
 8002ba0:	d109      	bne.n	8002bb6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2228      	movs	r2, #40	; 0x28
 8002bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f7ff f897 	bl	8001ce4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b28      	cmp	r3, #40	; 0x28
 8002bc0:	d111      	bne.n	8002be6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a15      	ldr	r2, [pc, #84]	; (8002c1c <I2C_Slave_STOPF+0x25c>)
 8002bc6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7ff f88a 	bl	8001cf8 <HAL_I2C_ListenCpltCallback>
}
 8002be4:	e014      	b.n	8002c10 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bea:	2b22      	cmp	r3, #34	; 0x22
 8002bec:	d002      	beq.n	8002bf4 <I2C_Slave_STOPF+0x234>
 8002bee:	7bfb      	ldrb	r3, [r7, #15]
 8002bf0:	2b22      	cmp	r3, #34	; 0x22
 8002bf2:	d10d      	bne.n	8002c10 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2220      	movs	r2, #32
 8002bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7ff f86a 	bl	8001ce4 <HAL_I2C_SlaveRxCpltCallback>
}
 8002c10:	bf00      	nop
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	08002e7d 	.word	0x08002e7d
 8002c1c:	ffff0000 	.word	0xffff0000

08002c20 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c2e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b10      	cmp	r3, #16
 8002c3a:	d10a      	bne.n	8002c52 <I2C_ITError+0x32>
 8002c3c:	7bfb      	ldrb	r3, [r7, #15]
 8002c3e:	2b22      	cmp	r3, #34	; 0x22
 8002c40:	d107      	bne.n	8002c52 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c50:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002c52:	7bfb      	ldrb	r3, [r7, #15]
 8002c54:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002c58:	2b28      	cmp	r3, #40	; 0x28
 8002c5a:	d107      	bne.n	8002c6c <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2228      	movs	r2, #40	; 0x28
 8002c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002c6a:	e015      	b.n	8002c98 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c7a:	d006      	beq.n	8002c8a <I2C_ITError+0x6a>
 8002c7c:	7bfb      	ldrb	r3, [r7, #15]
 8002c7e:	2b60      	cmp	r3, #96	; 0x60
 8002c80:	d003      	beq.n	8002c8a <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2220      	movs	r2, #32
 8002c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ca2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ca6:	d162      	bne.n	8002d6e <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cb6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d020      	beq.n	8002d08 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cca:	4a6a      	ldr	r2, [pc, #424]	; (8002e74 <I2C_ITError+0x254>)
 8002ccc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7fe f8db 	bl	8000e8e <HAL_DMA_Abort_IT>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f000 8089 	beq.w	8002df2 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 0201 	bic.w	r2, r2, #1
 8002cee:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d02:	4610      	mov	r0, r2
 8002d04:	4798      	blx	r3
 8002d06:	e074      	b.n	8002df2 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0c:	4a59      	ldr	r2, [pc, #356]	; (8002e74 <I2C_ITError+0x254>)
 8002d0e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7fe f8ba 	bl	8000e8e <HAL_DMA_Abort_IT>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d068      	beq.n	8002df2 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2a:	2b40      	cmp	r3, #64	; 0x40
 8002d2c:	d10b      	bne.n	8002d46 <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	691a      	ldr	r2, [r3, #16]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	b2d2      	uxtb	r2, r2
 8002d3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d40:	1c5a      	adds	r2, r3, #1
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f022 0201 	bic.w	r2, r2, #1
 8002d54:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2220      	movs	r2, #32
 8002d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d68:	4610      	mov	r0, r2
 8002d6a:	4798      	blx	r3
 8002d6c:	e041      	b.n	8002df2 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b60      	cmp	r3, #96	; 0x60
 8002d78:	d125      	bne.n	8002dc6 <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2220      	movs	r2, #32
 8002d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d92:	2b40      	cmp	r3, #64	; 0x40
 8002d94:	d10b      	bne.n	8002dae <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	691a      	ldr	r2, [r3, #16]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	b2d2      	uxtb	r2, r2
 8002da2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	1c5a      	adds	r2, r3, #1
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 0201 	bic.w	r2, r2, #1
 8002dbc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7fe ffc2 	bl	8001d48 <HAL_I2C_AbortCpltCallback>
 8002dc4:	e015      	b.n	8002df2 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	695b      	ldr	r3, [r3, #20]
 8002dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd0:	2b40      	cmp	r3, #64	; 0x40
 8002dd2:	d10b      	bne.n	8002dec <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	691a      	ldr	r2, [r3, #16]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	1c5a      	adds	r2, r3, #1
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f7fe ffa1 	bl	8001d34 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10e      	bne.n	8002e20 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d109      	bne.n	8002e20 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d104      	bne.n	8002e20 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d007      	beq.n	8002e30 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e2e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e36:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b04      	cmp	r3, #4
 8002e42:	d113      	bne.n	8002e6c <I2C_ITError+0x24c>
 8002e44:	7bfb      	ldrb	r3, [r7, #15]
 8002e46:	2b28      	cmp	r3, #40	; 0x28
 8002e48:	d110      	bne.n	8002e6c <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a0a      	ldr	r2, [pc, #40]	; (8002e78 <I2C_ITError+0x258>)
 8002e4e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2220      	movs	r2, #32
 8002e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7fe ff46 	bl	8001cf8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002e6c:	bf00      	nop
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	08002e7d 	.word	0x08002e7d
 8002e78:	ffff0000 	.word	0xffff0000

08002e7c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e88:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e90:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eae:	2200      	movs	r2, #0
 8002eb0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ec0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d003      	beq.n	8002ed8 <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d003      	beq.n	8002ee8 <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0201 	bic.w	r2, r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b60      	cmp	r3, #96	; 0x60
 8002f02:	d10e      	bne.n	8002f22 <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2220      	movs	r2, #32
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f7fe ff14 	bl	8001d48 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002f20:	e027      	b.n	8002f72 <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f22:	7afb      	ldrb	r3, [r7, #11]
 8002f24:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f28:	2b28      	cmp	r3, #40	; 0x28
 8002f2a:	d117      	bne.n	8002f5c <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 0201 	orr.w	r2, r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f4a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2228      	movs	r2, #40	; 0x28
 8002f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002f5a:	e007      	b.n	8002f6c <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f7fe fee1 	bl	8001d34 <HAL_I2C_ErrorCallback>
}
 8002f72:	bf00      	nop
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b084      	sub	sp, #16
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	60f8      	str	r0, [r7, #12]
 8002f82:	60b9      	str	r1, [r7, #8]
 8002f84:	603b      	str	r3, [r7, #0]
 8002f86:	4613      	mov	r3, r2
 8002f88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f8a:	e025      	b.n	8002fd8 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f92:	d021      	beq.n	8002fd8 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f94:	f7fd fe3c 	bl	8000c10 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d302      	bcc.n	8002faa <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d116      	bne.n	8002fd8 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc4:	f043 0220 	orr.w	r2, r3, #32
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e023      	b.n	8003020 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	0c1b      	lsrs	r3, r3, #16
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d10d      	bne.n	8002ffe <I2C_WaitOnFlagUntilTimeout+0x84>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	43da      	mvns	r2, r3
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	4013      	ands	r3, r2
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	bf0c      	ite	eq
 8002ff4:	2301      	moveq	r3, #1
 8002ff6:	2300      	movne	r3, #0
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	e00c      	b.n	8003018 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	43da      	mvns	r2, r3
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	4013      	ands	r3, r2
 800300a:	b29b      	uxth	r3, r3
 800300c:	2b00      	cmp	r3, #0
 800300e:	bf0c      	ite	eq
 8003010:	2301      	moveq	r3, #1
 8003012:	2300      	movne	r3, #0
 8003014:	b2db      	uxtb	r3, r3
 8003016:	461a      	mov	r2, r3
 8003018:	79fb      	ldrb	r3, [r7, #7]
 800301a:	429a      	cmp	r2, r3
 800301c:	d0b6      	beq.n	8002f8c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003034:	e02d      	b.n	8003092 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 f8ca 	bl	80031d0 <I2C_IsAcknowledgeFailed>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e02d      	b.n	80030a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800304c:	d021      	beq.n	8003092 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800304e:	f7fd fddf 	bl	8000c10 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	68ba      	ldr	r2, [r7, #8]
 800305a:	429a      	cmp	r2, r3
 800305c:	d302      	bcc.n	8003064 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d116      	bne.n	8003092 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2220      	movs	r2, #32
 800306e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	f043 0220 	orr.w	r2, r3, #32
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e007      	b.n	80030a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800309c:	2b80      	cmp	r3, #128	; 0x80
 800309e:	d1ca      	bne.n	8003036 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b084      	sub	sp, #16
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	60f8      	str	r0, [r7, #12]
 80030b2:	60b9      	str	r1, [r7, #8]
 80030b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030b6:	e029      	b.n	800310c <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f000 f889 	bl	80031d0 <I2C_IsAcknowledgeFailed>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e029      	b.n	800311c <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030c8:	f7fd fda2 	bl	8000c10 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	68ba      	ldr	r2, [r7, #8]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d302      	bcc.n	80030de <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d116      	bne.n	800310c <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2220      	movs	r2, #32
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f8:	f043 0220 	orr.w	r2, r3, #32
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e007      	b.n	800311c <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	f003 0310 	and.w	r3, r3, #16
 8003116:	2b10      	cmp	r3, #16
 8003118:	d1ce      	bne.n	80030b8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003130:	e042      	b.n	80031b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	f003 0310 	and.w	r3, r3, #16
 800313c:	2b10      	cmp	r3, #16
 800313e:	d119      	bne.n	8003174 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f06f 0210 	mvn.w	r2, #16
 8003148:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2220      	movs	r2, #32
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e029      	b.n	80031c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003174:	f7fd fd4c 	bl	8000c10 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	429a      	cmp	r2, r3
 8003182:	d302      	bcc.n	800318a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d116      	bne.n	80031b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2220      	movs	r2, #32
 8003194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a4:	f043 0220 	orr.w	r2, r3, #32
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e007      	b.n	80031c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c2:	2b40      	cmp	r3, #64	; 0x40
 80031c4:	d1b5      	bne.n	8003132 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031e6:	d11b      	bne.n	8003220 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2220      	movs	r2, #32
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320c:	f043 0204 	orr.w	r2, r3, #4
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e000      	b.n	8003222 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr

0800322e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800322e:	b480      	push	{r7}
 8003230:	b083      	sub	sp, #12
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800323e:	d103      	bne.n	8003248 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003246:	e007      	b.n	8003258 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003250:	d102      	bne.n	8003258 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2208      	movs	r2, #8
 8003256:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e25b      	b.n	800372e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d075      	beq.n	800336e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003282:	4ba3      	ldr	r3, [pc, #652]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 030c 	and.w	r3, r3, #12
 800328a:	2b04      	cmp	r3, #4
 800328c:	d00c      	beq.n	80032a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800328e:	4ba0      	ldr	r3, [pc, #640]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003296:	2b08      	cmp	r3, #8
 8003298:	d112      	bne.n	80032c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800329a:	4b9d      	ldr	r3, [pc, #628]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032a6:	d10b      	bne.n	80032c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a8:	4b99      	ldr	r3, [pc, #612]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d05b      	beq.n	800336c <HAL_RCC_OscConfig+0x108>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d157      	bne.n	800336c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e236      	b.n	800372e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032c8:	d106      	bne.n	80032d8 <HAL_RCC_OscConfig+0x74>
 80032ca:	4b91      	ldr	r3, [pc, #580]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a90      	ldr	r2, [pc, #576]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 80032d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d4:	6013      	str	r3, [r2, #0]
 80032d6:	e01d      	b.n	8003314 <HAL_RCC_OscConfig+0xb0>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032e0:	d10c      	bne.n	80032fc <HAL_RCC_OscConfig+0x98>
 80032e2:	4b8b      	ldr	r3, [pc, #556]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a8a      	ldr	r2, [pc, #552]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 80032e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032ec:	6013      	str	r3, [r2, #0]
 80032ee:	4b88      	ldr	r3, [pc, #544]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a87      	ldr	r2, [pc, #540]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 80032f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f8:	6013      	str	r3, [r2, #0]
 80032fa:	e00b      	b.n	8003314 <HAL_RCC_OscConfig+0xb0>
 80032fc:	4b84      	ldr	r3, [pc, #528]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a83      	ldr	r2, [pc, #524]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 8003302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003306:	6013      	str	r3, [r2, #0]
 8003308:	4b81      	ldr	r3, [pc, #516]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a80      	ldr	r2, [pc, #512]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 800330e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003312:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d013      	beq.n	8003344 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800331c:	f7fd fc78 	bl	8000c10 <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003324:	f7fd fc74 	bl	8000c10 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b64      	cmp	r3, #100	; 0x64
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e1fb      	b.n	800372e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003336:	4b76      	ldr	r3, [pc, #472]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d0f0      	beq.n	8003324 <HAL_RCC_OscConfig+0xc0>
 8003342:	e014      	b.n	800336e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003344:	f7fd fc64 	bl	8000c10 <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800334c:	f7fd fc60 	bl	8000c10 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b64      	cmp	r3, #100	; 0x64
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e1e7      	b.n	800372e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800335e:	4b6c      	ldr	r3, [pc, #432]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1f0      	bne.n	800334c <HAL_RCC_OscConfig+0xe8>
 800336a:	e000      	b.n	800336e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800336c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d063      	beq.n	8003442 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800337a:	4b65      	ldr	r3, [pc, #404]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 030c 	and.w	r3, r3, #12
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00b      	beq.n	800339e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003386:	4b62      	ldr	r3, [pc, #392]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800338e:	2b08      	cmp	r3, #8
 8003390:	d11c      	bne.n	80033cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003392:	4b5f      	ldr	r3, [pc, #380]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d116      	bne.n	80033cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800339e:	4b5c      	ldr	r3, [pc, #368]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d005      	beq.n	80033b6 <HAL_RCC_OscConfig+0x152>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d001      	beq.n	80033b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e1bb      	b.n	800372e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033b6:	4b56      	ldr	r3, [pc, #344]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	4952      	ldr	r1, [pc, #328]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ca:	e03a      	b.n	8003442 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d020      	beq.n	8003416 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033d4:	4b4f      	ldr	r3, [pc, #316]	; (8003514 <HAL_RCC_OscConfig+0x2b0>)
 80033d6:	2201      	movs	r2, #1
 80033d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033da:	f7fd fc19 	bl	8000c10 <HAL_GetTick>
 80033de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e0:	e008      	b.n	80033f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033e2:	f7fd fc15 	bl	8000c10 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e19c      	b.n	800372e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033f4:	4b46      	ldr	r3, [pc, #280]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d0f0      	beq.n	80033e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003400:	4b43      	ldr	r3, [pc, #268]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	4940      	ldr	r1, [pc, #256]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 8003410:	4313      	orrs	r3, r2
 8003412:	600b      	str	r3, [r1, #0]
 8003414:	e015      	b.n	8003442 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003416:	4b3f      	ldr	r3, [pc, #252]	; (8003514 <HAL_RCC_OscConfig+0x2b0>)
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341c:	f7fd fbf8 	bl	8000c10 <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003424:	f7fd fbf4 	bl	8000c10 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e17b      	b.n	800372e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003436:	4b36      	ldr	r3, [pc, #216]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1f0      	bne.n	8003424 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0308 	and.w	r3, r3, #8
 800344a:	2b00      	cmp	r3, #0
 800344c:	d030      	beq.n	80034b0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d016      	beq.n	8003484 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003456:	4b30      	ldr	r3, [pc, #192]	; (8003518 <HAL_RCC_OscConfig+0x2b4>)
 8003458:	2201      	movs	r2, #1
 800345a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800345c:	f7fd fbd8 	bl	8000c10 <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003464:	f7fd fbd4 	bl	8000c10 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e15b      	b.n	800372e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003476:	4b26      	ldr	r3, [pc, #152]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 8003478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d0f0      	beq.n	8003464 <HAL_RCC_OscConfig+0x200>
 8003482:	e015      	b.n	80034b0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003484:	4b24      	ldr	r3, [pc, #144]	; (8003518 <HAL_RCC_OscConfig+0x2b4>)
 8003486:	2200      	movs	r2, #0
 8003488:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800348a:	f7fd fbc1 	bl	8000c10 <HAL_GetTick>
 800348e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003490:	e008      	b.n	80034a4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003492:	f7fd fbbd 	bl	8000c10 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e144      	b.n	800372e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034a4:	4b1a      	ldr	r3, [pc, #104]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 80034a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1f0      	bne.n	8003492 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 80a0 	beq.w	80035fe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034be:	2300      	movs	r3, #0
 80034c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034c2:	4b13      	ldr	r3, [pc, #76]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10f      	bne.n	80034ee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034ce:	2300      	movs	r3, #0
 80034d0:	60bb      	str	r3, [r7, #8]
 80034d2:	4b0f      	ldr	r3, [pc, #60]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	4a0e      	ldr	r2, [pc, #56]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 80034d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034dc:	6413      	str	r3, [r2, #64]	; 0x40
 80034de:	4b0c      	ldr	r3, [pc, #48]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e6:	60bb      	str	r3, [r7, #8]
 80034e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034ea:	2301      	movs	r3, #1
 80034ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ee:	4b0b      	ldr	r3, [pc, #44]	; (800351c <HAL_RCC_OscConfig+0x2b8>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d121      	bne.n	800353e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034fa:	4b08      	ldr	r3, [pc, #32]	; (800351c <HAL_RCC_OscConfig+0x2b8>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a07      	ldr	r2, [pc, #28]	; (800351c <HAL_RCC_OscConfig+0x2b8>)
 8003500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003504:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003506:	f7fd fb83 	bl	8000c10 <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800350c:	e011      	b.n	8003532 <HAL_RCC_OscConfig+0x2ce>
 800350e:	bf00      	nop
 8003510:	40023800 	.word	0x40023800
 8003514:	42470000 	.word	0x42470000
 8003518:	42470e80 	.word	0x42470e80
 800351c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003520:	f7fd fb76 	bl	8000c10 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e0fd      	b.n	800372e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003532:	4b81      	ldr	r3, [pc, #516]	; (8003738 <HAL_RCC_OscConfig+0x4d4>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0f0      	beq.n	8003520 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d106      	bne.n	8003554 <HAL_RCC_OscConfig+0x2f0>
 8003546:	4b7d      	ldr	r3, [pc, #500]	; (800373c <HAL_RCC_OscConfig+0x4d8>)
 8003548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354a:	4a7c      	ldr	r2, [pc, #496]	; (800373c <HAL_RCC_OscConfig+0x4d8>)
 800354c:	f043 0301 	orr.w	r3, r3, #1
 8003550:	6713      	str	r3, [r2, #112]	; 0x70
 8003552:	e01c      	b.n	800358e <HAL_RCC_OscConfig+0x32a>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	2b05      	cmp	r3, #5
 800355a:	d10c      	bne.n	8003576 <HAL_RCC_OscConfig+0x312>
 800355c:	4b77      	ldr	r3, [pc, #476]	; (800373c <HAL_RCC_OscConfig+0x4d8>)
 800355e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003560:	4a76      	ldr	r2, [pc, #472]	; (800373c <HAL_RCC_OscConfig+0x4d8>)
 8003562:	f043 0304 	orr.w	r3, r3, #4
 8003566:	6713      	str	r3, [r2, #112]	; 0x70
 8003568:	4b74      	ldr	r3, [pc, #464]	; (800373c <HAL_RCC_OscConfig+0x4d8>)
 800356a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356c:	4a73      	ldr	r2, [pc, #460]	; (800373c <HAL_RCC_OscConfig+0x4d8>)
 800356e:	f043 0301 	orr.w	r3, r3, #1
 8003572:	6713      	str	r3, [r2, #112]	; 0x70
 8003574:	e00b      	b.n	800358e <HAL_RCC_OscConfig+0x32a>
 8003576:	4b71      	ldr	r3, [pc, #452]	; (800373c <HAL_RCC_OscConfig+0x4d8>)
 8003578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357a:	4a70      	ldr	r2, [pc, #448]	; (800373c <HAL_RCC_OscConfig+0x4d8>)
 800357c:	f023 0301 	bic.w	r3, r3, #1
 8003580:	6713      	str	r3, [r2, #112]	; 0x70
 8003582:	4b6e      	ldr	r3, [pc, #440]	; (800373c <HAL_RCC_OscConfig+0x4d8>)
 8003584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003586:	4a6d      	ldr	r2, [pc, #436]	; (800373c <HAL_RCC_OscConfig+0x4d8>)
 8003588:	f023 0304 	bic.w	r3, r3, #4
 800358c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d015      	beq.n	80035c2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003596:	f7fd fb3b 	bl	8000c10 <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800359c:	e00a      	b.n	80035b4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800359e:	f7fd fb37 	bl	8000c10 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e0bc      	b.n	800372e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035b4:	4b61      	ldr	r3, [pc, #388]	; (800373c <HAL_RCC_OscConfig+0x4d8>)
 80035b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0ee      	beq.n	800359e <HAL_RCC_OscConfig+0x33a>
 80035c0:	e014      	b.n	80035ec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035c2:	f7fd fb25 	bl	8000c10 <HAL_GetTick>
 80035c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035c8:	e00a      	b.n	80035e0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035ca:	f7fd fb21 	bl	8000c10 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035d8:	4293      	cmp	r3, r2
 80035da:	d901      	bls.n	80035e0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e0a6      	b.n	800372e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035e0:	4b56      	ldr	r3, [pc, #344]	; (800373c <HAL_RCC_OscConfig+0x4d8>)
 80035e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1ee      	bne.n	80035ca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035ec:	7dfb      	ldrb	r3, [r7, #23]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d105      	bne.n	80035fe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035f2:	4b52      	ldr	r3, [pc, #328]	; (800373c <HAL_RCC_OscConfig+0x4d8>)
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	4a51      	ldr	r2, [pc, #324]	; (800373c <HAL_RCC_OscConfig+0x4d8>)
 80035f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	2b00      	cmp	r3, #0
 8003604:	f000 8092 	beq.w	800372c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003608:	4b4c      	ldr	r3, [pc, #304]	; (800373c <HAL_RCC_OscConfig+0x4d8>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f003 030c 	and.w	r3, r3, #12
 8003610:	2b08      	cmp	r3, #8
 8003612:	d05c      	beq.n	80036ce <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	2b02      	cmp	r3, #2
 800361a:	d141      	bne.n	80036a0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800361c:	4b48      	ldr	r3, [pc, #288]	; (8003740 <HAL_RCC_OscConfig+0x4dc>)
 800361e:	2200      	movs	r2, #0
 8003620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003622:	f7fd faf5 	bl	8000c10 <HAL_GetTick>
 8003626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003628:	e008      	b.n	800363c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800362a:	f7fd faf1 	bl	8000c10 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e078      	b.n	800372e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800363c:	4b3f      	ldr	r3, [pc, #252]	; (800373c <HAL_RCC_OscConfig+0x4d8>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1f0      	bne.n	800362a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	69da      	ldr	r2, [r3, #28]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	431a      	orrs	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003656:	019b      	lsls	r3, r3, #6
 8003658:	431a      	orrs	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365e:	085b      	lsrs	r3, r3, #1
 8003660:	3b01      	subs	r3, #1
 8003662:	041b      	lsls	r3, r3, #16
 8003664:	431a      	orrs	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366a:	061b      	lsls	r3, r3, #24
 800366c:	4933      	ldr	r1, [pc, #204]	; (800373c <HAL_RCC_OscConfig+0x4d8>)
 800366e:	4313      	orrs	r3, r2
 8003670:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003672:	4b33      	ldr	r3, [pc, #204]	; (8003740 <HAL_RCC_OscConfig+0x4dc>)
 8003674:	2201      	movs	r2, #1
 8003676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003678:	f7fd faca 	bl	8000c10 <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003680:	f7fd fac6 	bl	8000c10 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e04d      	b.n	800372e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003692:	4b2a      	ldr	r3, [pc, #168]	; (800373c <HAL_RCC_OscConfig+0x4d8>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d0f0      	beq.n	8003680 <HAL_RCC_OscConfig+0x41c>
 800369e:	e045      	b.n	800372c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036a0:	4b27      	ldr	r3, [pc, #156]	; (8003740 <HAL_RCC_OscConfig+0x4dc>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a6:	f7fd fab3 	bl	8000c10 <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ac:	e008      	b.n	80036c0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036ae:	f7fd faaf 	bl	8000c10 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d901      	bls.n	80036c0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e036      	b.n	800372e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036c0:	4b1e      	ldr	r3, [pc, #120]	; (800373c <HAL_RCC_OscConfig+0x4d8>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1f0      	bne.n	80036ae <HAL_RCC_OscConfig+0x44a>
 80036cc:	e02e      	b.n	800372c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d101      	bne.n	80036da <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e029      	b.n	800372e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036da:	4b18      	ldr	r3, [pc, #96]	; (800373c <HAL_RCC_OscConfig+0x4d8>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d11c      	bne.n	8003728 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d115      	bne.n	8003728 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003702:	4013      	ands	r3, r2
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003708:	4293      	cmp	r3, r2
 800370a:	d10d      	bne.n	8003728 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003716:	429a      	cmp	r2, r3
 8003718:	d106      	bne.n	8003728 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003724:	429a      	cmp	r2, r3
 8003726:	d001      	beq.n	800372c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e000      	b.n	800372e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3718      	adds	r7, #24
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	40007000 	.word	0x40007000
 800373c:	40023800 	.word	0x40023800
 8003740:	42470060 	.word	0x42470060

08003744 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e0cc      	b.n	80038f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003758:	4b68      	ldr	r3, [pc, #416]	; (80038fc <HAL_RCC_ClockConfig+0x1b8>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 030f 	and.w	r3, r3, #15
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	429a      	cmp	r2, r3
 8003764:	d90c      	bls.n	8003780 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003766:	4b65      	ldr	r3, [pc, #404]	; (80038fc <HAL_RCC_ClockConfig+0x1b8>)
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	b2d2      	uxtb	r2, r2
 800376c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800376e:	4b63      	ldr	r3, [pc, #396]	; (80038fc <HAL_RCC_ClockConfig+0x1b8>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 030f 	and.w	r3, r3, #15
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	429a      	cmp	r2, r3
 800377a:	d001      	beq.n	8003780 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e0b8      	b.n	80038f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d020      	beq.n	80037ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0304 	and.w	r3, r3, #4
 8003794:	2b00      	cmp	r3, #0
 8003796:	d005      	beq.n	80037a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003798:	4b59      	ldr	r3, [pc, #356]	; (8003900 <HAL_RCC_ClockConfig+0x1bc>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	4a58      	ldr	r2, [pc, #352]	; (8003900 <HAL_RCC_ClockConfig+0x1bc>)
 800379e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0308 	and.w	r3, r3, #8
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d005      	beq.n	80037bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037b0:	4b53      	ldr	r3, [pc, #332]	; (8003900 <HAL_RCC_ClockConfig+0x1bc>)
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	4a52      	ldr	r2, [pc, #328]	; (8003900 <HAL_RCC_ClockConfig+0x1bc>)
 80037b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037bc:	4b50      	ldr	r3, [pc, #320]	; (8003900 <HAL_RCC_ClockConfig+0x1bc>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	494d      	ldr	r1, [pc, #308]	; (8003900 <HAL_RCC_ClockConfig+0x1bc>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d044      	beq.n	8003864 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d107      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037e2:	4b47      	ldr	r3, [pc, #284]	; (8003900 <HAL_RCC_ClockConfig+0x1bc>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d119      	bne.n	8003822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e07f      	b.n	80038f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d003      	beq.n	8003802 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037fe:	2b03      	cmp	r3, #3
 8003800:	d107      	bne.n	8003812 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003802:	4b3f      	ldr	r3, [pc, #252]	; (8003900 <HAL_RCC_ClockConfig+0x1bc>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d109      	bne.n	8003822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e06f      	b.n	80038f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003812:	4b3b      	ldr	r3, [pc, #236]	; (8003900 <HAL_RCC_ClockConfig+0x1bc>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e067      	b.n	80038f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003822:	4b37      	ldr	r3, [pc, #220]	; (8003900 <HAL_RCC_ClockConfig+0x1bc>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f023 0203 	bic.w	r2, r3, #3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	4934      	ldr	r1, [pc, #208]	; (8003900 <HAL_RCC_ClockConfig+0x1bc>)
 8003830:	4313      	orrs	r3, r2
 8003832:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003834:	f7fd f9ec 	bl	8000c10 <HAL_GetTick>
 8003838:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800383a:	e00a      	b.n	8003852 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800383c:	f7fd f9e8 	bl	8000c10 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	f241 3288 	movw	r2, #5000	; 0x1388
 800384a:	4293      	cmp	r3, r2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e04f      	b.n	80038f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003852:	4b2b      	ldr	r3, [pc, #172]	; (8003900 <HAL_RCC_ClockConfig+0x1bc>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f003 020c 	and.w	r2, r3, #12
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	429a      	cmp	r2, r3
 8003862:	d1eb      	bne.n	800383c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003864:	4b25      	ldr	r3, [pc, #148]	; (80038fc <HAL_RCC_ClockConfig+0x1b8>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 030f 	and.w	r3, r3, #15
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	429a      	cmp	r2, r3
 8003870:	d20c      	bcs.n	800388c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003872:	4b22      	ldr	r3, [pc, #136]	; (80038fc <HAL_RCC_ClockConfig+0x1b8>)
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	b2d2      	uxtb	r2, r2
 8003878:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800387a:	4b20      	ldr	r3, [pc, #128]	; (80038fc <HAL_RCC_ClockConfig+0x1b8>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 030f 	and.w	r3, r3, #15
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	429a      	cmp	r2, r3
 8003886:	d001      	beq.n	800388c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e032      	b.n	80038f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0304 	and.w	r3, r3, #4
 8003894:	2b00      	cmp	r3, #0
 8003896:	d008      	beq.n	80038aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003898:	4b19      	ldr	r3, [pc, #100]	; (8003900 <HAL_RCC_ClockConfig+0x1bc>)
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	4916      	ldr	r1, [pc, #88]	; (8003900 <HAL_RCC_ClockConfig+0x1bc>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0308 	and.w	r3, r3, #8
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d009      	beq.n	80038ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038b6:	4b12      	ldr	r3, [pc, #72]	; (8003900 <HAL_RCC_ClockConfig+0x1bc>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	490e      	ldr	r1, [pc, #56]	; (8003900 <HAL_RCC_ClockConfig+0x1bc>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038ca:	f000 f821 	bl	8003910 <HAL_RCC_GetSysClockFreq>
 80038ce:	4601      	mov	r1, r0
 80038d0:	4b0b      	ldr	r3, [pc, #44]	; (8003900 <HAL_RCC_ClockConfig+0x1bc>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	091b      	lsrs	r3, r3, #4
 80038d6:	f003 030f 	and.w	r3, r3, #15
 80038da:	4a0a      	ldr	r2, [pc, #40]	; (8003904 <HAL_RCC_ClockConfig+0x1c0>)
 80038dc:	5cd3      	ldrb	r3, [r2, r3]
 80038de:	fa21 f303 	lsr.w	r3, r1, r3
 80038e2:	4a09      	ldr	r2, [pc, #36]	; (8003908 <HAL_RCC_ClockConfig+0x1c4>)
 80038e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038e6:	4b09      	ldr	r3, [pc, #36]	; (800390c <HAL_RCC_ClockConfig+0x1c8>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7fd f94c 	bl	8000b88 <HAL_InitTick>

  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	40023c00 	.word	0x40023c00
 8003900:	40023800 	.word	0x40023800
 8003904:	08004900 	.word	0x08004900
 8003908:	20000008 	.word	0x20000008
 800390c:	2000000c 	.word	0x2000000c

08003910 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003916:	2300      	movs	r3, #0
 8003918:	607b      	str	r3, [r7, #4]
 800391a:	2300      	movs	r3, #0
 800391c:	60fb      	str	r3, [r7, #12]
 800391e:	2300      	movs	r3, #0
 8003920:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003922:	2300      	movs	r3, #0
 8003924:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003926:	4b50      	ldr	r3, [pc, #320]	; (8003a68 <HAL_RCC_GetSysClockFreq+0x158>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 030c 	and.w	r3, r3, #12
 800392e:	2b04      	cmp	r3, #4
 8003930:	d007      	beq.n	8003942 <HAL_RCC_GetSysClockFreq+0x32>
 8003932:	2b08      	cmp	r3, #8
 8003934:	d008      	beq.n	8003948 <HAL_RCC_GetSysClockFreq+0x38>
 8003936:	2b00      	cmp	r3, #0
 8003938:	f040 808d 	bne.w	8003a56 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800393c:	4b4b      	ldr	r3, [pc, #300]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x15c>)
 800393e:	60bb      	str	r3, [r7, #8]
       break;
 8003940:	e08c      	b.n	8003a5c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003942:	4b4b      	ldr	r3, [pc, #300]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x160>)
 8003944:	60bb      	str	r3, [r7, #8]
      break;
 8003946:	e089      	b.n	8003a5c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003948:	4b47      	ldr	r3, [pc, #284]	; (8003a68 <HAL_RCC_GetSysClockFreq+0x158>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003950:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003952:	4b45      	ldr	r3, [pc, #276]	; (8003a68 <HAL_RCC_GetSysClockFreq+0x158>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d023      	beq.n	80039a6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800395e:	4b42      	ldr	r3, [pc, #264]	; (8003a68 <HAL_RCC_GetSysClockFreq+0x158>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	099b      	lsrs	r3, r3, #6
 8003964:	f04f 0400 	mov.w	r4, #0
 8003968:	f240 11ff 	movw	r1, #511	; 0x1ff
 800396c:	f04f 0200 	mov.w	r2, #0
 8003970:	ea03 0501 	and.w	r5, r3, r1
 8003974:	ea04 0602 	and.w	r6, r4, r2
 8003978:	4a3d      	ldr	r2, [pc, #244]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x160>)
 800397a:	fb02 f106 	mul.w	r1, r2, r6
 800397e:	2200      	movs	r2, #0
 8003980:	fb02 f205 	mul.w	r2, r2, r5
 8003984:	440a      	add	r2, r1
 8003986:	493a      	ldr	r1, [pc, #232]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x160>)
 8003988:	fba5 0101 	umull	r0, r1, r5, r1
 800398c:	1853      	adds	r3, r2, r1
 800398e:	4619      	mov	r1, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f04f 0400 	mov.w	r4, #0
 8003996:	461a      	mov	r2, r3
 8003998:	4623      	mov	r3, r4
 800399a:	f7fc fc69 	bl	8000270 <__aeabi_uldivmod>
 800399e:	4603      	mov	r3, r0
 80039a0:	460c      	mov	r4, r1
 80039a2:	60fb      	str	r3, [r7, #12]
 80039a4:	e049      	b.n	8003a3a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039a6:	4b30      	ldr	r3, [pc, #192]	; (8003a68 <HAL_RCC_GetSysClockFreq+0x158>)
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	099b      	lsrs	r3, r3, #6
 80039ac:	f04f 0400 	mov.w	r4, #0
 80039b0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80039b4:	f04f 0200 	mov.w	r2, #0
 80039b8:	ea03 0501 	and.w	r5, r3, r1
 80039bc:	ea04 0602 	and.w	r6, r4, r2
 80039c0:	4629      	mov	r1, r5
 80039c2:	4632      	mov	r2, r6
 80039c4:	f04f 0300 	mov.w	r3, #0
 80039c8:	f04f 0400 	mov.w	r4, #0
 80039cc:	0154      	lsls	r4, r2, #5
 80039ce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80039d2:	014b      	lsls	r3, r1, #5
 80039d4:	4619      	mov	r1, r3
 80039d6:	4622      	mov	r2, r4
 80039d8:	1b49      	subs	r1, r1, r5
 80039da:	eb62 0206 	sbc.w	r2, r2, r6
 80039de:	f04f 0300 	mov.w	r3, #0
 80039e2:	f04f 0400 	mov.w	r4, #0
 80039e6:	0194      	lsls	r4, r2, #6
 80039e8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80039ec:	018b      	lsls	r3, r1, #6
 80039ee:	1a5b      	subs	r3, r3, r1
 80039f0:	eb64 0402 	sbc.w	r4, r4, r2
 80039f4:	f04f 0100 	mov.w	r1, #0
 80039f8:	f04f 0200 	mov.w	r2, #0
 80039fc:	00e2      	lsls	r2, r4, #3
 80039fe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003a02:	00d9      	lsls	r1, r3, #3
 8003a04:	460b      	mov	r3, r1
 8003a06:	4614      	mov	r4, r2
 8003a08:	195b      	adds	r3, r3, r5
 8003a0a:	eb44 0406 	adc.w	r4, r4, r6
 8003a0e:	f04f 0100 	mov.w	r1, #0
 8003a12:	f04f 0200 	mov.w	r2, #0
 8003a16:	02a2      	lsls	r2, r4, #10
 8003a18:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003a1c:	0299      	lsls	r1, r3, #10
 8003a1e:	460b      	mov	r3, r1
 8003a20:	4614      	mov	r4, r2
 8003a22:	4618      	mov	r0, r3
 8003a24:	4621      	mov	r1, r4
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f04f 0400 	mov.w	r4, #0
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	4623      	mov	r3, r4
 8003a30:	f7fc fc1e 	bl	8000270 <__aeabi_uldivmod>
 8003a34:	4603      	mov	r3, r0
 8003a36:	460c      	mov	r4, r1
 8003a38:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a3a:	4b0b      	ldr	r3, [pc, #44]	; (8003a68 <HAL_RCC_GetSysClockFreq+0x158>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	0c1b      	lsrs	r3, r3, #16
 8003a40:	f003 0303 	and.w	r3, r3, #3
 8003a44:	3301      	adds	r3, #1
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a52:	60bb      	str	r3, [r7, #8]
      break;
 8003a54:	e002      	b.n	8003a5c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a56:	4b05      	ldr	r3, [pc, #20]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x15c>)
 8003a58:	60bb      	str	r3, [r7, #8]
      break;
 8003a5a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a5c:	68bb      	ldr	r3, [r7, #8]
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3714      	adds	r7, #20
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a66:	bf00      	nop
 8003a68:	40023800 	.word	0x40023800
 8003a6c:	00f42400 	.word	0x00f42400
 8003a70:	017d7840 	.word	0x017d7840

08003a74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a78:	4b03      	ldr	r3, [pc, #12]	; (8003a88 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	20000008 	.word	0x20000008

08003a8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a90:	f7ff fff0 	bl	8003a74 <HAL_RCC_GetHCLKFreq>
 8003a94:	4601      	mov	r1, r0
 8003a96:	4b05      	ldr	r3, [pc, #20]	; (8003aac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	0a9b      	lsrs	r3, r3, #10
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	4a03      	ldr	r2, [pc, #12]	; (8003ab0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aa2:	5cd3      	ldrb	r3, [r2, r3]
 8003aa4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	40023800 	.word	0x40023800
 8003ab0:	08004910 	.word	0x08004910

08003ab4 <__errno>:
 8003ab4:	4b01      	ldr	r3, [pc, #4]	; (8003abc <__errno+0x8>)
 8003ab6:	6818      	ldr	r0, [r3, #0]
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	20000014 	.word	0x20000014

08003ac0 <__libc_init_array>:
 8003ac0:	b570      	push	{r4, r5, r6, lr}
 8003ac2:	4e0d      	ldr	r6, [pc, #52]	; (8003af8 <__libc_init_array+0x38>)
 8003ac4:	4c0d      	ldr	r4, [pc, #52]	; (8003afc <__libc_init_array+0x3c>)
 8003ac6:	1ba4      	subs	r4, r4, r6
 8003ac8:	10a4      	asrs	r4, r4, #2
 8003aca:	2500      	movs	r5, #0
 8003acc:	42a5      	cmp	r5, r4
 8003ace:	d109      	bne.n	8003ae4 <__libc_init_array+0x24>
 8003ad0:	4e0b      	ldr	r6, [pc, #44]	; (8003b00 <__libc_init_array+0x40>)
 8003ad2:	4c0c      	ldr	r4, [pc, #48]	; (8003b04 <__libc_init_array+0x44>)
 8003ad4:	f000 ff04 	bl	80048e0 <_init>
 8003ad8:	1ba4      	subs	r4, r4, r6
 8003ada:	10a4      	asrs	r4, r4, #2
 8003adc:	2500      	movs	r5, #0
 8003ade:	42a5      	cmp	r5, r4
 8003ae0:	d105      	bne.n	8003aee <__libc_init_array+0x2e>
 8003ae2:	bd70      	pop	{r4, r5, r6, pc}
 8003ae4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ae8:	4798      	blx	r3
 8003aea:	3501      	adds	r5, #1
 8003aec:	e7ee      	b.n	8003acc <__libc_init_array+0xc>
 8003aee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003af2:	4798      	blx	r3
 8003af4:	3501      	adds	r5, #1
 8003af6:	e7f2      	b.n	8003ade <__libc_init_array+0x1e>
 8003af8:	080049b8 	.word	0x080049b8
 8003afc:	080049b8 	.word	0x080049b8
 8003b00:	080049b8 	.word	0x080049b8
 8003b04:	080049bc 	.word	0x080049bc

08003b08 <memset>:
 8003b08:	4402      	add	r2, r0
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d100      	bne.n	8003b12 <memset+0xa>
 8003b10:	4770      	bx	lr
 8003b12:	f803 1b01 	strb.w	r1, [r3], #1
 8003b16:	e7f9      	b.n	8003b0c <memset+0x4>

08003b18 <iprintf>:
 8003b18:	b40f      	push	{r0, r1, r2, r3}
 8003b1a:	4b0a      	ldr	r3, [pc, #40]	; (8003b44 <iprintf+0x2c>)
 8003b1c:	b513      	push	{r0, r1, r4, lr}
 8003b1e:	681c      	ldr	r4, [r3, #0]
 8003b20:	b124      	cbz	r4, 8003b2c <iprintf+0x14>
 8003b22:	69a3      	ldr	r3, [r4, #24]
 8003b24:	b913      	cbnz	r3, 8003b2c <iprintf+0x14>
 8003b26:	4620      	mov	r0, r4
 8003b28:	f000 f84e 	bl	8003bc8 <__sinit>
 8003b2c:	ab05      	add	r3, sp, #20
 8003b2e:	9a04      	ldr	r2, [sp, #16]
 8003b30:	68a1      	ldr	r1, [r4, #8]
 8003b32:	9301      	str	r3, [sp, #4]
 8003b34:	4620      	mov	r0, r4
 8003b36:	f000 f955 	bl	8003de4 <_vfiprintf_r>
 8003b3a:	b002      	add	sp, #8
 8003b3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b40:	b004      	add	sp, #16
 8003b42:	4770      	bx	lr
 8003b44:	20000014 	.word	0x20000014

08003b48 <std>:
 8003b48:	2300      	movs	r3, #0
 8003b4a:	b510      	push	{r4, lr}
 8003b4c:	4604      	mov	r4, r0
 8003b4e:	e9c0 3300 	strd	r3, r3, [r0]
 8003b52:	6083      	str	r3, [r0, #8]
 8003b54:	8181      	strh	r1, [r0, #12]
 8003b56:	6643      	str	r3, [r0, #100]	; 0x64
 8003b58:	81c2      	strh	r2, [r0, #14]
 8003b5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b5e:	6183      	str	r3, [r0, #24]
 8003b60:	4619      	mov	r1, r3
 8003b62:	2208      	movs	r2, #8
 8003b64:	305c      	adds	r0, #92	; 0x5c
 8003b66:	f7ff ffcf 	bl	8003b08 <memset>
 8003b6a:	4b05      	ldr	r3, [pc, #20]	; (8003b80 <std+0x38>)
 8003b6c:	6263      	str	r3, [r4, #36]	; 0x24
 8003b6e:	4b05      	ldr	r3, [pc, #20]	; (8003b84 <std+0x3c>)
 8003b70:	62a3      	str	r3, [r4, #40]	; 0x28
 8003b72:	4b05      	ldr	r3, [pc, #20]	; (8003b88 <std+0x40>)
 8003b74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003b76:	4b05      	ldr	r3, [pc, #20]	; (8003b8c <std+0x44>)
 8003b78:	6224      	str	r4, [r4, #32]
 8003b7a:	6323      	str	r3, [r4, #48]	; 0x30
 8003b7c:	bd10      	pop	{r4, pc}
 8003b7e:	bf00      	nop
 8003b80:	08004341 	.word	0x08004341
 8003b84:	08004363 	.word	0x08004363
 8003b88:	0800439b 	.word	0x0800439b
 8003b8c:	080043bf 	.word	0x080043bf

08003b90 <_cleanup_r>:
 8003b90:	4901      	ldr	r1, [pc, #4]	; (8003b98 <_cleanup_r+0x8>)
 8003b92:	f000 b885 	b.w	8003ca0 <_fwalk_reent>
 8003b96:	bf00      	nop
 8003b98:	08004699 	.word	0x08004699

08003b9c <__sfmoreglue>:
 8003b9c:	b570      	push	{r4, r5, r6, lr}
 8003b9e:	1e4a      	subs	r2, r1, #1
 8003ba0:	2568      	movs	r5, #104	; 0x68
 8003ba2:	4355      	muls	r5, r2
 8003ba4:	460e      	mov	r6, r1
 8003ba6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003baa:	f000 f897 	bl	8003cdc <_malloc_r>
 8003bae:	4604      	mov	r4, r0
 8003bb0:	b140      	cbz	r0, 8003bc4 <__sfmoreglue+0x28>
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	e9c0 1600 	strd	r1, r6, [r0]
 8003bb8:	300c      	adds	r0, #12
 8003bba:	60a0      	str	r0, [r4, #8]
 8003bbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003bc0:	f7ff ffa2 	bl	8003b08 <memset>
 8003bc4:	4620      	mov	r0, r4
 8003bc6:	bd70      	pop	{r4, r5, r6, pc}

08003bc8 <__sinit>:
 8003bc8:	6983      	ldr	r3, [r0, #24]
 8003bca:	b510      	push	{r4, lr}
 8003bcc:	4604      	mov	r4, r0
 8003bce:	bb33      	cbnz	r3, 8003c1e <__sinit+0x56>
 8003bd0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003bd4:	6503      	str	r3, [r0, #80]	; 0x50
 8003bd6:	4b12      	ldr	r3, [pc, #72]	; (8003c20 <__sinit+0x58>)
 8003bd8:	4a12      	ldr	r2, [pc, #72]	; (8003c24 <__sinit+0x5c>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6282      	str	r2, [r0, #40]	; 0x28
 8003bde:	4298      	cmp	r0, r3
 8003be0:	bf04      	itt	eq
 8003be2:	2301      	moveq	r3, #1
 8003be4:	6183      	streq	r3, [r0, #24]
 8003be6:	f000 f81f 	bl	8003c28 <__sfp>
 8003bea:	6060      	str	r0, [r4, #4]
 8003bec:	4620      	mov	r0, r4
 8003bee:	f000 f81b 	bl	8003c28 <__sfp>
 8003bf2:	60a0      	str	r0, [r4, #8]
 8003bf4:	4620      	mov	r0, r4
 8003bf6:	f000 f817 	bl	8003c28 <__sfp>
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	60e0      	str	r0, [r4, #12]
 8003bfe:	2104      	movs	r1, #4
 8003c00:	6860      	ldr	r0, [r4, #4]
 8003c02:	f7ff ffa1 	bl	8003b48 <std>
 8003c06:	2201      	movs	r2, #1
 8003c08:	2109      	movs	r1, #9
 8003c0a:	68a0      	ldr	r0, [r4, #8]
 8003c0c:	f7ff ff9c 	bl	8003b48 <std>
 8003c10:	2202      	movs	r2, #2
 8003c12:	2112      	movs	r1, #18
 8003c14:	68e0      	ldr	r0, [r4, #12]
 8003c16:	f7ff ff97 	bl	8003b48 <std>
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	61a3      	str	r3, [r4, #24]
 8003c1e:	bd10      	pop	{r4, pc}
 8003c20:	08004918 	.word	0x08004918
 8003c24:	08003b91 	.word	0x08003b91

08003c28 <__sfp>:
 8003c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c2a:	4b1b      	ldr	r3, [pc, #108]	; (8003c98 <__sfp+0x70>)
 8003c2c:	681e      	ldr	r6, [r3, #0]
 8003c2e:	69b3      	ldr	r3, [r6, #24]
 8003c30:	4607      	mov	r7, r0
 8003c32:	b913      	cbnz	r3, 8003c3a <__sfp+0x12>
 8003c34:	4630      	mov	r0, r6
 8003c36:	f7ff ffc7 	bl	8003bc8 <__sinit>
 8003c3a:	3648      	adds	r6, #72	; 0x48
 8003c3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003c40:	3b01      	subs	r3, #1
 8003c42:	d503      	bpl.n	8003c4c <__sfp+0x24>
 8003c44:	6833      	ldr	r3, [r6, #0]
 8003c46:	b133      	cbz	r3, 8003c56 <__sfp+0x2e>
 8003c48:	6836      	ldr	r6, [r6, #0]
 8003c4a:	e7f7      	b.n	8003c3c <__sfp+0x14>
 8003c4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003c50:	b16d      	cbz	r5, 8003c6e <__sfp+0x46>
 8003c52:	3468      	adds	r4, #104	; 0x68
 8003c54:	e7f4      	b.n	8003c40 <__sfp+0x18>
 8003c56:	2104      	movs	r1, #4
 8003c58:	4638      	mov	r0, r7
 8003c5a:	f7ff ff9f 	bl	8003b9c <__sfmoreglue>
 8003c5e:	6030      	str	r0, [r6, #0]
 8003c60:	2800      	cmp	r0, #0
 8003c62:	d1f1      	bne.n	8003c48 <__sfp+0x20>
 8003c64:	230c      	movs	r3, #12
 8003c66:	603b      	str	r3, [r7, #0]
 8003c68:	4604      	mov	r4, r0
 8003c6a:	4620      	mov	r0, r4
 8003c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c6e:	4b0b      	ldr	r3, [pc, #44]	; (8003c9c <__sfp+0x74>)
 8003c70:	6665      	str	r5, [r4, #100]	; 0x64
 8003c72:	e9c4 5500 	strd	r5, r5, [r4]
 8003c76:	60a5      	str	r5, [r4, #8]
 8003c78:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003c7c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003c80:	2208      	movs	r2, #8
 8003c82:	4629      	mov	r1, r5
 8003c84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003c88:	f7ff ff3e 	bl	8003b08 <memset>
 8003c8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003c90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003c94:	e7e9      	b.n	8003c6a <__sfp+0x42>
 8003c96:	bf00      	nop
 8003c98:	08004918 	.word	0x08004918
 8003c9c:	ffff0001 	.word	0xffff0001

08003ca0 <_fwalk_reent>:
 8003ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ca4:	4680      	mov	r8, r0
 8003ca6:	4689      	mov	r9, r1
 8003ca8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003cac:	2600      	movs	r6, #0
 8003cae:	b914      	cbnz	r4, 8003cb6 <_fwalk_reent+0x16>
 8003cb0:	4630      	mov	r0, r6
 8003cb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cb6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003cba:	3f01      	subs	r7, #1
 8003cbc:	d501      	bpl.n	8003cc2 <_fwalk_reent+0x22>
 8003cbe:	6824      	ldr	r4, [r4, #0]
 8003cc0:	e7f5      	b.n	8003cae <_fwalk_reent+0xe>
 8003cc2:	89ab      	ldrh	r3, [r5, #12]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d907      	bls.n	8003cd8 <_fwalk_reent+0x38>
 8003cc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ccc:	3301      	adds	r3, #1
 8003cce:	d003      	beq.n	8003cd8 <_fwalk_reent+0x38>
 8003cd0:	4629      	mov	r1, r5
 8003cd2:	4640      	mov	r0, r8
 8003cd4:	47c8      	blx	r9
 8003cd6:	4306      	orrs	r6, r0
 8003cd8:	3568      	adds	r5, #104	; 0x68
 8003cda:	e7ee      	b.n	8003cba <_fwalk_reent+0x1a>

08003cdc <_malloc_r>:
 8003cdc:	b570      	push	{r4, r5, r6, lr}
 8003cde:	1ccd      	adds	r5, r1, #3
 8003ce0:	f025 0503 	bic.w	r5, r5, #3
 8003ce4:	3508      	adds	r5, #8
 8003ce6:	2d0c      	cmp	r5, #12
 8003ce8:	bf38      	it	cc
 8003cea:	250c      	movcc	r5, #12
 8003cec:	2d00      	cmp	r5, #0
 8003cee:	4606      	mov	r6, r0
 8003cf0:	db01      	blt.n	8003cf6 <_malloc_r+0x1a>
 8003cf2:	42a9      	cmp	r1, r5
 8003cf4:	d903      	bls.n	8003cfe <_malloc_r+0x22>
 8003cf6:	230c      	movs	r3, #12
 8003cf8:	6033      	str	r3, [r6, #0]
 8003cfa:	2000      	movs	r0, #0
 8003cfc:	bd70      	pop	{r4, r5, r6, pc}
 8003cfe:	f000 fd6b 	bl	80047d8 <__malloc_lock>
 8003d02:	4a21      	ldr	r2, [pc, #132]	; (8003d88 <_malloc_r+0xac>)
 8003d04:	6814      	ldr	r4, [r2, #0]
 8003d06:	4621      	mov	r1, r4
 8003d08:	b991      	cbnz	r1, 8003d30 <_malloc_r+0x54>
 8003d0a:	4c20      	ldr	r4, [pc, #128]	; (8003d8c <_malloc_r+0xb0>)
 8003d0c:	6823      	ldr	r3, [r4, #0]
 8003d0e:	b91b      	cbnz	r3, 8003d18 <_malloc_r+0x3c>
 8003d10:	4630      	mov	r0, r6
 8003d12:	f000 fb05 	bl	8004320 <_sbrk_r>
 8003d16:	6020      	str	r0, [r4, #0]
 8003d18:	4629      	mov	r1, r5
 8003d1a:	4630      	mov	r0, r6
 8003d1c:	f000 fb00 	bl	8004320 <_sbrk_r>
 8003d20:	1c43      	adds	r3, r0, #1
 8003d22:	d124      	bne.n	8003d6e <_malloc_r+0x92>
 8003d24:	230c      	movs	r3, #12
 8003d26:	6033      	str	r3, [r6, #0]
 8003d28:	4630      	mov	r0, r6
 8003d2a:	f000 fd56 	bl	80047da <__malloc_unlock>
 8003d2e:	e7e4      	b.n	8003cfa <_malloc_r+0x1e>
 8003d30:	680b      	ldr	r3, [r1, #0]
 8003d32:	1b5b      	subs	r3, r3, r5
 8003d34:	d418      	bmi.n	8003d68 <_malloc_r+0x8c>
 8003d36:	2b0b      	cmp	r3, #11
 8003d38:	d90f      	bls.n	8003d5a <_malloc_r+0x7e>
 8003d3a:	600b      	str	r3, [r1, #0]
 8003d3c:	50cd      	str	r5, [r1, r3]
 8003d3e:	18cc      	adds	r4, r1, r3
 8003d40:	4630      	mov	r0, r6
 8003d42:	f000 fd4a 	bl	80047da <__malloc_unlock>
 8003d46:	f104 000b 	add.w	r0, r4, #11
 8003d4a:	1d23      	adds	r3, r4, #4
 8003d4c:	f020 0007 	bic.w	r0, r0, #7
 8003d50:	1ac3      	subs	r3, r0, r3
 8003d52:	d0d3      	beq.n	8003cfc <_malloc_r+0x20>
 8003d54:	425a      	negs	r2, r3
 8003d56:	50e2      	str	r2, [r4, r3]
 8003d58:	e7d0      	b.n	8003cfc <_malloc_r+0x20>
 8003d5a:	428c      	cmp	r4, r1
 8003d5c:	684b      	ldr	r3, [r1, #4]
 8003d5e:	bf16      	itet	ne
 8003d60:	6063      	strne	r3, [r4, #4]
 8003d62:	6013      	streq	r3, [r2, #0]
 8003d64:	460c      	movne	r4, r1
 8003d66:	e7eb      	b.n	8003d40 <_malloc_r+0x64>
 8003d68:	460c      	mov	r4, r1
 8003d6a:	6849      	ldr	r1, [r1, #4]
 8003d6c:	e7cc      	b.n	8003d08 <_malloc_r+0x2c>
 8003d6e:	1cc4      	adds	r4, r0, #3
 8003d70:	f024 0403 	bic.w	r4, r4, #3
 8003d74:	42a0      	cmp	r0, r4
 8003d76:	d005      	beq.n	8003d84 <_malloc_r+0xa8>
 8003d78:	1a21      	subs	r1, r4, r0
 8003d7a:	4630      	mov	r0, r6
 8003d7c:	f000 fad0 	bl	8004320 <_sbrk_r>
 8003d80:	3001      	adds	r0, #1
 8003d82:	d0cf      	beq.n	8003d24 <_malloc_r+0x48>
 8003d84:	6025      	str	r5, [r4, #0]
 8003d86:	e7db      	b.n	8003d40 <_malloc_r+0x64>
 8003d88:	20000098 	.word	0x20000098
 8003d8c:	2000009c 	.word	0x2000009c

08003d90 <__sfputc_r>:
 8003d90:	6893      	ldr	r3, [r2, #8]
 8003d92:	3b01      	subs	r3, #1
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	b410      	push	{r4}
 8003d98:	6093      	str	r3, [r2, #8]
 8003d9a:	da08      	bge.n	8003dae <__sfputc_r+0x1e>
 8003d9c:	6994      	ldr	r4, [r2, #24]
 8003d9e:	42a3      	cmp	r3, r4
 8003da0:	db01      	blt.n	8003da6 <__sfputc_r+0x16>
 8003da2:	290a      	cmp	r1, #10
 8003da4:	d103      	bne.n	8003dae <__sfputc_r+0x1e>
 8003da6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003daa:	f000 bb0d 	b.w	80043c8 <__swbuf_r>
 8003dae:	6813      	ldr	r3, [r2, #0]
 8003db0:	1c58      	adds	r0, r3, #1
 8003db2:	6010      	str	r0, [r2, #0]
 8003db4:	7019      	strb	r1, [r3, #0]
 8003db6:	4608      	mov	r0, r1
 8003db8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <__sfputs_r>:
 8003dbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dc0:	4606      	mov	r6, r0
 8003dc2:	460f      	mov	r7, r1
 8003dc4:	4614      	mov	r4, r2
 8003dc6:	18d5      	adds	r5, r2, r3
 8003dc8:	42ac      	cmp	r4, r5
 8003dca:	d101      	bne.n	8003dd0 <__sfputs_r+0x12>
 8003dcc:	2000      	movs	r0, #0
 8003dce:	e007      	b.n	8003de0 <__sfputs_r+0x22>
 8003dd0:	463a      	mov	r2, r7
 8003dd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dd6:	4630      	mov	r0, r6
 8003dd8:	f7ff ffda 	bl	8003d90 <__sfputc_r>
 8003ddc:	1c43      	adds	r3, r0, #1
 8003dde:	d1f3      	bne.n	8003dc8 <__sfputs_r+0xa>
 8003de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003de4 <_vfiprintf_r>:
 8003de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003de8:	460c      	mov	r4, r1
 8003dea:	b09d      	sub	sp, #116	; 0x74
 8003dec:	4617      	mov	r7, r2
 8003dee:	461d      	mov	r5, r3
 8003df0:	4606      	mov	r6, r0
 8003df2:	b118      	cbz	r0, 8003dfc <_vfiprintf_r+0x18>
 8003df4:	6983      	ldr	r3, [r0, #24]
 8003df6:	b90b      	cbnz	r3, 8003dfc <_vfiprintf_r+0x18>
 8003df8:	f7ff fee6 	bl	8003bc8 <__sinit>
 8003dfc:	4b7c      	ldr	r3, [pc, #496]	; (8003ff0 <_vfiprintf_r+0x20c>)
 8003dfe:	429c      	cmp	r4, r3
 8003e00:	d158      	bne.n	8003eb4 <_vfiprintf_r+0xd0>
 8003e02:	6874      	ldr	r4, [r6, #4]
 8003e04:	89a3      	ldrh	r3, [r4, #12]
 8003e06:	0718      	lsls	r0, r3, #28
 8003e08:	d55e      	bpl.n	8003ec8 <_vfiprintf_r+0xe4>
 8003e0a:	6923      	ldr	r3, [r4, #16]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d05b      	beq.n	8003ec8 <_vfiprintf_r+0xe4>
 8003e10:	2300      	movs	r3, #0
 8003e12:	9309      	str	r3, [sp, #36]	; 0x24
 8003e14:	2320      	movs	r3, #32
 8003e16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e1a:	2330      	movs	r3, #48	; 0x30
 8003e1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e20:	9503      	str	r5, [sp, #12]
 8003e22:	f04f 0b01 	mov.w	fp, #1
 8003e26:	46b8      	mov	r8, r7
 8003e28:	4645      	mov	r5, r8
 8003e2a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003e2e:	b10b      	cbz	r3, 8003e34 <_vfiprintf_r+0x50>
 8003e30:	2b25      	cmp	r3, #37	; 0x25
 8003e32:	d154      	bne.n	8003ede <_vfiprintf_r+0xfa>
 8003e34:	ebb8 0a07 	subs.w	sl, r8, r7
 8003e38:	d00b      	beq.n	8003e52 <_vfiprintf_r+0x6e>
 8003e3a:	4653      	mov	r3, sl
 8003e3c:	463a      	mov	r2, r7
 8003e3e:	4621      	mov	r1, r4
 8003e40:	4630      	mov	r0, r6
 8003e42:	f7ff ffbc 	bl	8003dbe <__sfputs_r>
 8003e46:	3001      	adds	r0, #1
 8003e48:	f000 80c2 	beq.w	8003fd0 <_vfiprintf_r+0x1ec>
 8003e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e4e:	4453      	add	r3, sl
 8003e50:	9309      	str	r3, [sp, #36]	; 0x24
 8003e52:	f898 3000 	ldrb.w	r3, [r8]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f000 80ba 	beq.w	8003fd0 <_vfiprintf_r+0x1ec>
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e66:	9304      	str	r3, [sp, #16]
 8003e68:	9307      	str	r3, [sp, #28]
 8003e6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e6e:	931a      	str	r3, [sp, #104]	; 0x68
 8003e70:	46a8      	mov	r8, r5
 8003e72:	2205      	movs	r2, #5
 8003e74:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003e78:	485e      	ldr	r0, [pc, #376]	; (8003ff4 <_vfiprintf_r+0x210>)
 8003e7a:	f7fc f9a9 	bl	80001d0 <memchr>
 8003e7e:	9b04      	ldr	r3, [sp, #16]
 8003e80:	bb78      	cbnz	r0, 8003ee2 <_vfiprintf_r+0xfe>
 8003e82:	06d9      	lsls	r1, r3, #27
 8003e84:	bf44      	itt	mi
 8003e86:	2220      	movmi	r2, #32
 8003e88:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003e8c:	071a      	lsls	r2, r3, #28
 8003e8e:	bf44      	itt	mi
 8003e90:	222b      	movmi	r2, #43	; 0x2b
 8003e92:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003e96:	782a      	ldrb	r2, [r5, #0]
 8003e98:	2a2a      	cmp	r2, #42	; 0x2a
 8003e9a:	d02a      	beq.n	8003ef2 <_vfiprintf_r+0x10e>
 8003e9c:	9a07      	ldr	r2, [sp, #28]
 8003e9e:	46a8      	mov	r8, r5
 8003ea0:	2000      	movs	r0, #0
 8003ea2:	250a      	movs	r5, #10
 8003ea4:	4641      	mov	r1, r8
 8003ea6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003eaa:	3b30      	subs	r3, #48	; 0x30
 8003eac:	2b09      	cmp	r3, #9
 8003eae:	d969      	bls.n	8003f84 <_vfiprintf_r+0x1a0>
 8003eb0:	b360      	cbz	r0, 8003f0c <_vfiprintf_r+0x128>
 8003eb2:	e024      	b.n	8003efe <_vfiprintf_r+0x11a>
 8003eb4:	4b50      	ldr	r3, [pc, #320]	; (8003ff8 <_vfiprintf_r+0x214>)
 8003eb6:	429c      	cmp	r4, r3
 8003eb8:	d101      	bne.n	8003ebe <_vfiprintf_r+0xda>
 8003eba:	68b4      	ldr	r4, [r6, #8]
 8003ebc:	e7a2      	b.n	8003e04 <_vfiprintf_r+0x20>
 8003ebe:	4b4f      	ldr	r3, [pc, #316]	; (8003ffc <_vfiprintf_r+0x218>)
 8003ec0:	429c      	cmp	r4, r3
 8003ec2:	bf08      	it	eq
 8003ec4:	68f4      	ldreq	r4, [r6, #12]
 8003ec6:	e79d      	b.n	8003e04 <_vfiprintf_r+0x20>
 8003ec8:	4621      	mov	r1, r4
 8003eca:	4630      	mov	r0, r6
 8003ecc:	f000 fae0 	bl	8004490 <__swsetup_r>
 8003ed0:	2800      	cmp	r0, #0
 8003ed2:	d09d      	beq.n	8003e10 <_vfiprintf_r+0x2c>
 8003ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed8:	b01d      	add	sp, #116	; 0x74
 8003eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ede:	46a8      	mov	r8, r5
 8003ee0:	e7a2      	b.n	8003e28 <_vfiprintf_r+0x44>
 8003ee2:	4a44      	ldr	r2, [pc, #272]	; (8003ff4 <_vfiprintf_r+0x210>)
 8003ee4:	1a80      	subs	r0, r0, r2
 8003ee6:	fa0b f000 	lsl.w	r0, fp, r0
 8003eea:	4318      	orrs	r0, r3
 8003eec:	9004      	str	r0, [sp, #16]
 8003eee:	4645      	mov	r5, r8
 8003ef0:	e7be      	b.n	8003e70 <_vfiprintf_r+0x8c>
 8003ef2:	9a03      	ldr	r2, [sp, #12]
 8003ef4:	1d11      	adds	r1, r2, #4
 8003ef6:	6812      	ldr	r2, [r2, #0]
 8003ef8:	9103      	str	r1, [sp, #12]
 8003efa:	2a00      	cmp	r2, #0
 8003efc:	db01      	blt.n	8003f02 <_vfiprintf_r+0x11e>
 8003efe:	9207      	str	r2, [sp, #28]
 8003f00:	e004      	b.n	8003f0c <_vfiprintf_r+0x128>
 8003f02:	4252      	negs	r2, r2
 8003f04:	f043 0302 	orr.w	r3, r3, #2
 8003f08:	9207      	str	r2, [sp, #28]
 8003f0a:	9304      	str	r3, [sp, #16]
 8003f0c:	f898 3000 	ldrb.w	r3, [r8]
 8003f10:	2b2e      	cmp	r3, #46	; 0x2e
 8003f12:	d10e      	bne.n	8003f32 <_vfiprintf_r+0x14e>
 8003f14:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003f18:	2b2a      	cmp	r3, #42	; 0x2a
 8003f1a:	d138      	bne.n	8003f8e <_vfiprintf_r+0x1aa>
 8003f1c:	9b03      	ldr	r3, [sp, #12]
 8003f1e:	1d1a      	adds	r2, r3, #4
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	9203      	str	r2, [sp, #12]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	bfb8      	it	lt
 8003f28:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f2c:	f108 0802 	add.w	r8, r8, #2
 8003f30:	9305      	str	r3, [sp, #20]
 8003f32:	4d33      	ldr	r5, [pc, #204]	; (8004000 <_vfiprintf_r+0x21c>)
 8003f34:	f898 1000 	ldrb.w	r1, [r8]
 8003f38:	2203      	movs	r2, #3
 8003f3a:	4628      	mov	r0, r5
 8003f3c:	f7fc f948 	bl	80001d0 <memchr>
 8003f40:	b140      	cbz	r0, 8003f54 <_vfiprintf_r+0x170>
 8003f42:	2340      	movs	r3, #64	; 0x40
 8003f44:	1b40      	subs	r0, r0, r5
 8003f46:	fa03 f000 	lsl.w	r0, r3, r0
 8003f4a:	9b04      	ldr	r3, [sp, #16]
 8003f4c:	4303      	orrs	r3, r0
 8003f4e:	f108 0801 	add.w	r8, r8, #1
 8003f52:	9304      	str	r3, [sp, #16]
 8003f54:	f898 1000 	ldrb.w	r1, [r8]
 8003f58:	482a      	ldr	r0, [pc, #168]	; (8004004 <_vfiprintf_r+0x220>)
 8003f5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f5e:	2206      	movs	r2, #6
 8003f60:	f108 0701 	add.w	r7, r8, #1
 8003f64:	f7fc f934 	bl	80001d0 <memchr>
 8003f68:	2800      	cmp	r0, #0
 8003f6a:	d037      	beq.n	8003fdc <_vfiprintf_r+0x1f8>
 8003f6c:	4b26      	ldr	r3, [pc, #152]	; (8004008 <_vfiprintf_r+0x224>)
 8003f6e:	bb1b      	cbnz	r3, 8003fb8 <_vfiprintf_r+0x1d4>
 8003f70:	9b03      	ldr	r3, [sp, #12]
 8003f72:	3307      	adds	r3, #7
 8003f74:	f023 0307 	bic.w	r3, r3, #7
 8003f78:	3308      	adds	r3, #8
 8003f7a:	9303      	str	r3, [sp, #12]
 8003f7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f7e:	444b      	add	r3, r9
 8003f80:	9309      	str	r3, [sp, #36]	; 0x24
 8003f82:	e750      	b.n	8003e26 <_vfiprintf_r+0x42>
 8003f84:	fb05 3202 	mla	r2, r5, r2, r3
 8003f88:	2001      	movs	r0, #1
 8003f8a:	4688      	mov	r8, r1
 8003f8c:	e78a      	b.n	8003ea4 <_vfiprintf_r+0xc0>
 8003f8e:	2300      	movs	r3, #0
 8003f90:	f108 0801 	add.w	r8, r8, #1
 8003f94:	9305      	str	r3, [sp, #20]
 8003f96:	4619      	mov	r1, r3
 8003f98:	250a      	movs	r5, #10
 8003f9a:	4640      	mov	r0, r8
 8003f9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fa0:	3a30      	subs	r2, #48	; 0x30
 8003fa2:	2a09      	cmp	r2, #9
 8003fa4:	d903      	bls.n	8003fae <_vfiprintf_r+0x1ca>
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d0c3      	beq.n	8003f32 <_vfiprintf_r+0x14e>
 8003faa:	9105      	str	r1, [sp, #20]
 8003fac:	e7c1      	b.n	8003f32 <_vfiprintf_r+0x14e>
 8003fae:	fb05 2101 	mla	r1, r5, r1, r2
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	4680      	mov	r8, r0
 8003fb6:	e7f0      	b.n	8003f9a <_vfiprintf_r+0x1b6>
 8003fb8:	ab03      	add	r3, sp, #12
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	4622      	mov	r2, r4
 8003fbe:	4b13      	ldr	r3, [pc, #76]	; (800400c <_vfiprintf_r+0x228>)
 8003fc0:	a904      	add	r1, sp, #16
 8003fc2:	4630      	mov	r0, r6
 8003fc4:	f3af 8000 	nop.w
 8003fc8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003fcc:	4681      	mov	r9, r0
 8003fce:	d1d5      	bne.n	8003f7c <_vfiprintf_r+0x198>
 8003fd0:	89a3      	ldrh	r3, [r4, #12]
 8003fd2:	065b      	lsls	r3, r3, #25
 8003fd4:	f53f af7e 	bmi.w	8003ed4 <_vfiprintf_r+0xf0>
 8003fd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003fda:	e77d      	b.n	8003ed8 <_vfiprintf_r+0xf4>
 8003fdc:	ab03      	add	r3, sp, #12
 8003fde:	9300      	str	r3, [sp, #0]
 8003fe0:	4622      	mov	r2, r4
 8003fe2:	4b0a      	ldr	r3, [pc, #40]	; (800400c <_vfiprintf_r+0x228>)
 8003fe4:	a904      	add	r1, sp, #16
 8003fe6:	4630      	mov	r0, r6
 8003fe8:	f000 f888 	bl	80040fc <_printf_i>
 8003fec:	e7ec      	b.n	8003fc8 <_vfiprintf_r+0x1e4>
 8003fee:	bf00      	nop
 8003ff0:	0800493c 	.word	0x0800493c
 8003ff4:	0800497c 	.word	0x0800497c
 8003ff8:	0800495c 	.word	0x0800495c
 8003ffc:	0800491c 	.word	0x0800491c
 8004000:	08004982 	.word	0x08004982
 8004004:	08004986 	.word	0x08004986
 8004008:	00000000 	.word	0x00000000
 800400c:	08003dbf 	.word	0x08003dbf

08004010 <_printf_common>:
 8004010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004014:	4691      	mov	r9, r2
 8004016:	461f      	mov	r7, r3
 8004018:	688a      	ldr	r2, [r1, #8]
 800401a:	690b      	ldr	r3, [r1, #16]
 800401c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004020:	4293      	cmp	r3, r2
 8004022:	bfb8      	it	lt
 8004024:	4613      	movlt	r3, r2
 8004026:	f8c9 3000 	str.w	r3, [r9]
 800402a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800402e:	4606      	mov	r6, r0
 8004030:	460c      	mov	r4, r1
 8004032:	b112      	cbz	r2, 800403a <_printf_common+0x2a>
 8004034:	3301      	adds	r3, #1
 8004036:	f8c9 3000 	str.w	r3, [r9]
 800403a:	6823      	ldr	r3, [r4, #0]
 800403c:	0699      	lsls	r1, r3, #26
 800403e:	bf42      	ittt	mi
 8004040:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004044:	3302      	addmi	r3, #2
 8004046:	f8c9 3000 	strmi.w	r3, [r9]
 800404a:	6825      	ldr	r5, [r4, #0]
 800404c:	f015 0506 	ands.w	r5, r5, #6
 8004050:	d107      	bne.n	8004062 <_printf_common+0x52>
 8004052:	f104 0a19 	add.w	sl, r4, #25
 8004056:	68e3      	ldr	r3, [r4, #12]
 8004058:	f8d9 2000 	ldr.w	r2, [r9]
 800405c:	1a9b      	subs	r3, r3, r2
 800405e:	42ab      	cmp	r3, r5
 8004060:	dc28      	bgt.n	80040b4 <_printf_common+0xa4>
 8004062:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004066:	6822      	ldr	r2, [r4, #0]
 8004068:	3300      	adds	r3, #0
 800406a:	bf18      	it	ne
 800406c:	2301      	movne	r3, #1
 800406e:	0692      	lsls	r2, r2, #26
 8004070:	d42d      	bmi.n	80040ce <_printf_common+0xbe>
 8004072:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004076:	4639      	mov	r1, r7
 8004078:	4630      	mov	r0, r6
 800407a:	47c0      	blx	r8
 800407c:	3001      	adds	r0, #1
 800407e:	d020      	beq.n	80040c2 <_printf_common+0xb2>
 8004080:	6823      	ldr	r3, [r4, #0]
 8004082:	68e5      	ldr	r5, [r4, #12]
 8004084:	f8d9 2000 	ldr.w	r2, [r9]
 8004088:	f003 0306 	and.w	r3, r3, #6
 800408c:	2b04      	cmp	r3, #4
 800408e:	bf08      	it	eq
 8004090:	1aad      	subeq	r5, r5, r2
 8004092:	68a3      	ldr	r3, [r4, #8]
 8004094:	6922      	ldr	r2, [r4, #16]
 8004096:	bf0c      	ite	eq
 8004098:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800409c:	2500      	movne	r5, #0
 800409e:	4293      	cmp	r3, r2
 80040a0:	bfc4      	itt	gt
 80040a2:	1a9b      	subgt	r3, r3, r2
 80040a4:	18ed      	addgt	r5, r5, r3
 80040a6:	f04f 0900 	mov.w	r9, #0
 80040aa:	341a      	adds	r4, #26
 80040ac:	454d      	cmp	r5, r9
 80040ae:	d11a      	bne.n	80040e6 <_printf_common+0xd6>
 80040b0:	2000      	movs	r0, #0
 80040b2:	e008      	b.n	80040c6 <_printf_common+0xb6>
 80040b4:	2301      	movs	r3, #1
 80040b6:	4652      	mov	r2, sl
 80040b8:	4639      	mov	r1, r7
 80040ba:	4630      	mov	r0, r6
 80040bc:	47c0      	blx	r8
 80040be:	3001      	adds	r0, #1
 80040c0:	d103      	bne.n	80040ca <_printf_common+0xba>
 80040c2:	f04f 30ff 	mov.w	r0, #4294967295
 80040c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040ca:	3501      	adds	r5, #1
 80040cc:	e7c3      	b.n	8004056 <_printf_common+0x46>
 80040ce:	18e1      	adds	r1, r4, r3
 80040d0:	1c5a      	adds	r2, r3, #1
 80040d2:	2030      	movs	r0, #48	; 0x30
 80040d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040d8:	4422      	add	r2, r4
 80040da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040e2:	3302      	adds	r3, #2
 80040e4:	e7c5      	b.n	8004072 <_printf_common+0x62>
 80040e6:	2301      	movs	r3, #1
 80040e8:	4622      	mov	r2, r4
 80040ea:	4639      	mov	r1, r7
 80040ec:	4630      	mov	r0, r6
 80040ee:	47c0      	blx	r8
 80040f0:	3001      	adds	r0, #1
 80040f2:	d0e6      	beq.n	80040c2 <_printf_common+0xb2>
 80040f4:	f109 0901 	add.w	r9, r9, #1
 80040f8:	e7d8      	b.n	80040ac <_printf_common+0x9c>
	...

080040fc <_printf_i>:
 80040fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004100:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004104:	460c      	mov	r4, r1
 8004106:	7e09      	ldrb	r1, [r1, #24]
 8004108:	b085      	sub	sp, #20
 800410a:	296e      	cmp	r1, #110	; 0x6e
 800410c:	4617      	mov	r7, r2
 800410e:	4606      	mov	r6, r0
 8004110:	4698      	mov	r8, r3
 8004112:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004114:	f000 80b3 	beq.w	800427e <_printf_i+0x182>
 8004118:	d822      	bhi.n	8004160 <_printf_i+0x64>
 800411a:	2963      	cmp	r1, #99	; 0x63
 800411c:	d036      	beq.n	800418c <_printf_i+0x90>
 800411e:	d80a      	bhi.n	8004136 <_printf_i+0x3a>
 8004120:	2900      	cmp	r1, #0
 8004122:	f000 80b9 	beq.w	8004298 <_printf_i+0x19c>
 8004126:	2958      	cmp	r1, #88	; 0x58
 8004128:	f000 8083 	beq.w	8004232 <_printf_i+0x136>
 800412c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004130:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004134:	e032      	b.n	800419c <_printf_i+0xa0>
 8004136:	2964      	cmp	r1, #100	; 0x64
 8004138:	d001      	beq.n	800413e <_printf_i+0x42>
 800413a:	2969      	cmp	r1, #105	; 0x69
 800413c:	d1f6      	bne.n	800412c <_printf_i+0x30>
 800413e:	6820      	ldr	r0, [r4, #0]
 8004140:	6813      	ldr	r3, [r2, #0]
 8004142:	0605      	lsls	r5, r0, #24
 8004144:	f103 0104 	add.w	r1, r3, #4
 8004148:	d52a      	bpl.n	80041a0 <_printf_i+0xa4>
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	6011      	str	r1, [r2, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	da03      	bge.n	800415a <_printf_i+0x5e>
 8004152:	222d      	movs	r2, #45	; 0x2d
 8004154:	425b      	negs	r3, r3
 8004156:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800415a:	486f      	ldr	r0, [pc, #444]	; (8004318 <_printf_i+0x21c>)
 800415c:	220a      	movs	r2, #10
 800415e:	e039      	b.n	80041d4 <_printf_i+0xd8>
 8004160:	2973      	cmp	r1, #115	; 0x73
 8004162:	f000 809d 	beq.w	80042a0 <_printf_i+0x1a4>
 8004166:	d808      	bhi.n	800417a <_printf_i+0x7e>
 8004168:	296f      	cmp	r1, #111	; 0x6f
 800416a:	d020      	beq.n	80041ae <_printf_i+0xb2>
 800416c:	2970      	cmp	r1, #112	; 0x70
 800416e:	d1dd      	bne.n	800412c <_printf_i+0x30>
 8004170:	6823      	ldr	r3, [r4, #0]
 8004172:	f043 0320 	orr.w	r3, r3, #32
 8004176:	6023      	str	r3, [r4, #0]
 8004178:	e003      	b.n	8004182 <_printf_i+0x86>
 800417a:	2975      	cmp	r1, #117	; 0x75
 800417c:	d017      	beq.n	80041ae <_printf_i+0xb2>
 800417e:	2978      	cmp	r1, #120	; 0x78
 8004180:	d1d4      	bne.n	800412c <_printf_i+0x30>
 8004182:	2378      	movs	r3, #120	; 0x78
 8004184:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004188:	4864      	ldr	r0, [pc, #400]	; (800431c <_printf_i+0x220>)
 800418a:	e055      	b.n	8004238 <_printf_i+0x13c>
 800418c:	6813      	ldr	r3, [r2, #0]
 800418e:	1d19      	adds	r1, r3, #4
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	6011      	str	r1, [r2, #0]
 8004194:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004198:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800419c:	2301      	movs	r3, #1
 800419e:	e08c      	b.n	80042ba <_printf_i+0x1be>
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	6011      	str	r1, [r2, #0]
 80041a4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80041a8:	bf18      	it	ne
 80041aa:	b21b      	sxthne	r3, r3
 80041ac:	e7cf      	b.n	800414e <_printf_i+0x52>
 80041ae:	6813      	ldr	r3, [r2, #0]
 80041b0:	6825      	ldr	r5, [r4, #0]
 80041b2:	1d18      	adds	r0, r3, #4
 80041b4:	6010      	str	r0, [r2, #0]
 80041b6:	0628      	lsls	r0, r5, #24
 80041b8:	d501      	bpl.n	80041be <_printf_i+0xc2>
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	e002      	b.n	80041c4 <_printf_i+0xc8>
 80041be:	0668      	lsls	r0, r5, #25
 80041c0:	d5fb      	bpl.n	80041ba <_printf_i+0xbe>
 80041c2:	881b      	ldrh	r3, [r3, #0]
 80041c4:	4854      	ldr	r0, [pc, #336]	; (8004318 <_printf_i+0x21c>)
 80041c6:	296f      	cmp	r1, #111	; 0x6f
 80041c8:	bf14      	ite	ne
 80041ca:	220a      	movne	r2, #10
 80041cc:	2208      	moveq	r2, #8
 80041ce:	2100      	movs	r1, #0
 80041d0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041d4:	6865      	ldr	r5, [r4, #4]
 80041d6:	60a5      	str	r5, [r4, #8]
 80041d8:	2d00      	cmp	r5, #0
 80041da:	f2c0 8095 	blt.w	8004308 <_printf_i+0x20c>
 80041de:	6821      	ldr	r1, [r4, #0]
 80041e0:	f021 0104 	bic.w	r1, r1, #4
 80041e4:	6021      	str	r1, [r4, #0]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d13d      	bne.n	8004266 <_printf_i+0x16a>
 80041ea:	2d00      	cmp	r5, #0
 80041ec:	f040 808e 	bne.w	800430c <_printf_i+0x210>
 80041f0:	4665      	mov	r5, ip
 80041f2:	2a08      	cmp	r2, #8
 80041f4:	d10b      	bne.n	800420e <_printf_i+0x112>
 80041f6:	6823      	ldr	r3, [r4, #0]
 80041f8:	07db      	lsls	r3, r3, #31
 80041fa:	d508      	bpl.n	800420e <_printf_i+0x112>
 80041fc:	6923      	ldr	r3, [r4, #16]
 80041fe:	6862      	ldr	r2, [r4, #4]
 8004200:	429a      	cmp	r2, r3
 8004202:	bfde      	ittt	le
 8004204:	2330      	movle	r3, #48	; 0x30
 8004206:	f805 3c01 	strble.w	r3, [r5, #-1]
 800420a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800420e:	ebac 0305 	sub.w	r3, ip, r5
 8004212:	6123      	str	r3, [r4, #16]
 8004214:	f8cd 8000 	str.w	r8, [sp]
 8004218:	463b      	mov	r3, r7
 800421a:	aa03      	add	r2, sp, #12
 800421c:	4621      	mov	r1, r4
 800421e:	4630      	mov	r0, r6
 8004220:	f7ff fef6 	bl	8004010 <_printf_common>
 8004224:	3001      	adds	r0, #1
 8004226:	d14d      	bne.n	80042c4 <_printf_i+0x1c8>
 8004228:	f04f 30ff 	mov.w	r0, #4294967295
 800422c:	b005      	add	sp, #20
 800422e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004232:	4839      	ldr	r0, [pc, #228]	; (8004318 <_printf_i+0x21c>)
 8004234:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004238:	6813      	ldr	r3, [r2, #0]
 800423a:	6821      	ldr	r1, [r4, #0]
 800423c:	1d1d      	adds	r5, r3, #4
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6015      	str	r5, [r2, #0]
 8004242:	060a      	lsls	r2, r1, #24
 8004244:	d50b      	bpl.n	800425e <_printf_i+0x162>
 8004246:	07ca      	lsls	r2, r1, #31
 8004248:	bf44      	itt	mi
 800424a:	f041 0120 	orrmi.w	r1, r1, #32
 800424e:	6021      	strmi	r1, [r4, #0]
 8004250:	b91b      	cbnz	r3, 800425a <_printf_i+0x15e>
 8004252:	6822      	ldr	r2, [r4, #0]
 8004254:	f022 0220 	bic.w	r2, r2, #32
 8004258:	6022      	str	r2, [r4, #0]
 800425a:	2210      	movs	r2, #16
 800425c:	e7b7      	b.n	80041ce <_printf_i+0xd2>
 800425e:	064d      	lsls	r5, r1, #25
 8004260:	bf48      	it	mi
 8004262:	b29b      	uxthmi	r3, r3
 8004264:	e7ef      	b.n	8004246 <_printf_i+0x14a>
 8004266:	4665      	mov	r5, ip
 8004268:	fbb3 f1f2 	udiv	r1, r3, r2
 800426c:	fb02 3311 	mls	r3, r2, r1, r3
 8004270:	5cc3      	ldrb	r3, [r0, r3]
 8004272:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004276:	460b      	mov	r3, r1
 8004278:	2900      	cmp	r1, #0
 800427a:	d1f5      	bne.n	8004268 <_printf_i+0x16c>
 800427c:	e7b9      	b.n	80041f2 <_printf_i+0xf6>
 800427e:	6813      	ldr	r3, [r2, #0]
 8004280:	6825      	ldr	r5, [r4, #0]
 8004282:	6961      	ldr	r1, [r4, #20]
 8004284:	1d18      	adds	r0, r3, #4
 8004286:	6010      	str	r0, [r2, #0]
 8004288:	0628      	lsls	r0, r5, #24
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	d501      	bpl.n	8004292 <_printf_i+0x196>
 800428e:	6019      	str	r1, [r3, #0]
 8004290:	e002      	b.n	8004298 <_printf_i+0x19c>
 8004292:	066a      	lsls	r2, r5, #25
 8004294:	d5fb      	bpl.n	800428e <_printf_i+0x192>
 8004296:	8019      	strh	r1, [r3, #0]
 8004298:	2300      	movs	r3, #0
 800429a:	6123      	str	r3, [r4, #16]
 800429c:	4665      	mov	r5, ip
 800429e:	e7b9      	b.n	8004214 <_printf_i+0x118>
 80042a0:	6813      	ldr	r3, [r2, #0]
 80042a2:	1d19      	adds	r1, r3, #4
 80042a4:	6011      	str	r1, [r2, #0]
 80042a6:	681d      	ldr	r5, [r3, #0]
 80042a8:	6862      	ldr	r2, [r4, #4]
 80042aa:	2100      	movs	r1, #0
 80042ac:	4628      	mov	r0, r5
 80042ae:	f7fb ff8f 	bl	80001d0 <memchr>
 80042b2:	b108      	cbz	r0, 80042b8 <_printf_i+0x1bc>
 80042b4:	1b40      	subs	r0, r0, r5
 80042b6:	6060      	str	r0, [r4, #4]
 80042b8:	6863      	ldr	r3, [r4, #4]
 80042ba:	6123      	str	r3, [r4, #16]
 80042bc:	2300      	movs	r3, #0
 80042be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042c2:	e7a7      	b.n	8004214 <_printf_i+0x118>
 80042c4:	6923      	ldr	r3, [r4, #16]
 80042c6:	462a      	mov	r2, r5
 80042c8:	4639      	mov	r1, r7
 80042ca:	4630      	mov	r0, r6
 80042cc:	47c0      	blx	r8
 80042ce:	3001      	adds	r0, #1
 80042d0:	d0aa      	beq.n	8004228 <_printf_i+0x12c>
 80042d2:	6823      	ldr	r3, [r4, #0]
 80042d4:	079b      	lsls	r3, r3, #30
 80042d6:	d413      	bmi.n	8004300 <_printf_i+0x204>
 80042d8:	68e0      	ldr	r0, [r4, #12]
 80042da:	9b03      	ldr	r3, [sp, #12]
 80042dc:	4298      	cmp	r0, r3
 80042de:	bfb8      	it	lt
 80042e0:	4618      	movlt	r0, r3
 80042e2:	e7a3      	b.n	800422c <_printf_i+0x130>
 80042e4:	2301      	movs	r3, #1
 80042e6:	464a      	mov	r2, r9
 80042e8:	4639      	mov	r1, r7
 80042ea:	4630      	mov	r0, r6
 80042ec:	47c0      	blx	r8
 80042ee:	3001      	adds	r0, #1
 80042f0:	d09a      	beq.n	8004228 <_printf_i+0x12c>
 80042f2:	3501      	adds	r5, #1
 80042f4:	68e3      	ldr	r3, [r4, #12]
 80042f6:	9a03      	ldr	r2, [sp, #12]
 80042f8:	1a9b      	subs	r3, r3, r2
 80042fa:	42ab      	cmp	r3, r5
 80042fc:	dcf2      	bgt.n	80042e4 <_printf_i+0x1e8>
 80042fe:	e7eb      	b.n	80042d8 <_printf_i+0x1dc>
 8004300:	2500      	movs	r5, #0
 8004302:	f104 0919 	add.w	r9, r4, #25
 8004306:	e7f5      	b.n	80042f4 <_printf_i+0x1f8>
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1ac      	bne.n	8004266 <_printf_i+0x16a>
 800430c:	7803      	ldrb	r3, [r0, #0]
 800430e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004312:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004316:	e76c      	b.n	80041f2 <_printf_i+0xf6>
 8004318:	0800498d 	.word	0x0800498d
 800431c:	0800499e 	.word	0x0800499e

08004320 <_sbrk_r>:
 8004320:	b538      	push	{r3, r4, r5, lr}
 8004322:	4c06      	ldr	r4, [pc, #24]	; (800433c <_sbrk_r+0x1c>)
 8004324:	2300      	movs	r3, #0
 8004326:	4605      	mov	r5, r0
 8004328:	4608      	mov	r0, r1
 800432a:	6023      	str	r3, [r4, #0]
 800432c:	f7fc fb9e 	bl	8000a6c <_sbrk>
 8004330:	1c43      	adds	r3, r0, #1
 8004332:	d102      	bne.n	800433a <_sbrk_r+0x1a>
 8004334:	6823      	ldr	r3, [r4, #0]
 8004336:	b103      	cbz	r3, 800433a <_sbrk_r+0x1a>
 8004338:	602b      	str	r3, [r5, #0]
 800433a:	bd38      	pop	{r3, r4, r5, pc}
 800433c:	20000100 	.word	0x20000100

08004340 <__sread>:
 8004340:	b510      	push	{r4, lr}
 8004342:	460c      	mov	r4, r1
 8004344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004348:	f000 fa96 	bl	8004878 <_read_r>
 800434c:	2800      	cmp	r0, #0
 800434e:	bfab      	itete	ge
 8004350:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004352:	89a3      	ldrhlt	r3, [r4, #12]
 8004354:	181b      	addge	r3, r3, r0
 8004356:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800435a:	bfac      	ite	ge
 800435c:	6563      	strge	r3, [r4, #84]	; 0x54
 800435e:	81a3      	strhlt	r3, [r4, #12]
 8004360:	bd10      	pop	{r4, pc}

08004362 <__swrite>:
 8004362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004366:	461f      	mov	r7, r3
 8004368:	898b      	ldrh	r3, [r1, #12]
 800436a:	05db      	lsls	r3, r3, #23
 800436c:	4605      	mov	r5, r0
 800436e:	460c      	mov	r4, r1
 8004370:	4616      	mov	r6, r2
 8004372:	d505      	bpl.n	8004380 <__swrite+0x1e>
 8004374:	2302      	movs	r3, #2
 8004376:	2200      	movs	r2, #0
 8004378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800437c:	f000 f9b6 	bl	80046ec <_lseek_r>
 8004380:	89a3      	ldrh	r3, [r4, #12]
 8004382:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004386:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800438a:	81a3      	strh	r3, [r4, #12]
 800438c:	4632      	mov	r2, r6
 800438e:	463b      	mov	r3, r7
 8004390:	4628      	mov	r0, r5
 8004392:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004396:	f000 b869 	b.w	800446c <_write_r>

0800439a <__sseek>:
 800439a:	b510      	push	{r4, lr}
 800439c:	460c      	mov	r4, r1
 800439e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043a2:	f000 f9a3 	bl	80046ec <_lseek_r>
 80043a6:	1c43      	adds	r3, r0, #1
 80043a8:	89a3      	ldrh	r3, [r4, #12]
 80043aa:	bf15      	itete	ne
 80043ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80043ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80043b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80043b6:	81a3      	strheq	r3, [r4, #12]
 80043b8:	bf18      	it	ne
 80043ba:	81a3      	strhne	r3, [r4, #12]
 80043bc:	bd10      	pop	{r4, pc}

080043be <__sclose>:
 80043be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043c2:	f000 b8d3 	b.w	800456c <_close_r>
	...

080043c8 <__swbuf_r>:
 80043c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ca:	460e      	mov	r6, r1
 80043cc:	4614      	mov	r4, r2
 80043ce:	4605      	mov	r5, r0
 80043d0:	b118      	cbz	r0, 80043da <__swbuf_r+0x12>
 80043d2:	6983      	ldr	r3, [r0, #24]
 80043d4:	b90b      	cbnz	r3, 80043da <__swbuf_r+0x12>
 80043d6:	f7ff fbf7 	bl	8003bc8 <__sinit>
 80043da:	4b21      	ldr	r3, [pc, #132]	; (8004460 <__swbuf_r+0x98>)
 80043dc:	429c      	cmp	r4, r3
 80043de:	d12a      	bne.n	8004436 <__swbuf_r+0x6e>
 80043e0:	686c      	ldr	r4, [r5, #4]
 80043e2:	69a3      	ldr	r3, [r4, #24]
 80043e4:	60a3      	str	r3, [r4, #8]
 80043e6:	89a3      	ldrh	r3, [r4, #12]
 80043e8:	071a      	lsls	r2, r3, #28
 80043ea:	d52e      	bpl.n	800444a <__swbuf_r+0x82>
 80043ec:	6923      	ldr	r3, [r4, #16]
 80043ee:	b363      	cbz	r3, 800444a <__swbuf_r+0x82>
 80043f0:	6923      	ldr	r3, [r4, #16]
 80043f2:	6820      	ldr	r0, [r4, #0]
 80043f4:	1ac0      	subs	r0, r0, r3
 80043f6:	6963      	ldr	r3, [r4, #20]
 80043f8:	b2f6      	uxtb	r6, r6
 80043fa:	4283      	cmp	r3, r0
 80043fc:	4637      	mov	r7, r6
 80043fe:	dc04      	bgt.n	800440a <__swbuf_r+0x42>
 8004400:	4621      	mov	r1, r4
 8004402:	4628      	mov	r0, r5
 8004404:	f000 f948 	bl	8004698 <_fflush_r>
 8004408:	bb28      	cbnz	r0, 8004456 <__swbuf_r+0x8e>
 800440a:	68a3      	ldr	r3, [r4, #8]
 800440c:	3b01      	subs	r3, #1
 800440e:	60a3      	str	r3, [r4, #8]
 8004410:	6823      	ldr	r3, [r4, #0]
 8004412:	1c5a      	adds	r2, r3, #1
 8004414:	6022      	str	r2, [r4, #0]
 8004416:	701e      	strb	r6, [r3, #0]
 8004418:	6963      	ldr	r3, [r4, #20]
 800441a:	3001      	adds	r0, #1
 800441c:	4283      	cmp	r3, r0
 800441e:	d004      	beq.n	800442a <__swbuf_r+0x62>
 8004420:	89a3      	ldrh	r3, [r4, #12]
 8004422:	07db      	lsls	r3, r3, #31
 8004424:	d519      	bpl.n	800445a <__swbuf_r+0x92>
 8004426:	2e0a      	cmp	r6, #10
 8004428:	d117      	bne.n	800445a <__swbuf_r+0x92>
 800442a:	4621      	mov	r1, r4
 800442c:	4628      	mov	r0, r5
 800442e:	f000 f933 	bl	8004698 <_fflush_r>
 8004432:	b190      	cbz	r0, 800445a <__swbuf_r+0x92>
 8004434:	e00f      	b.n	8004456 <__swbuf_r+0x8e>
 8004436:	4b0b      	ldr	r3, [pc, #44]	; (8004464 <__swbuf_r+0x9c>)
 8004438:	429c      	cmp	r4, r3
 800443a:	d101      	bne.n	8004440 <__swbuf_r+0x78>
 800443c:	68ac      	ldr	r4, [r5, #8]
 800443e:	e7d0      	b.n	80043e2 <__swbuf_r+0x1a>
 8004440:	4b09      	ldr	r3, [pc, #36]	; (8004468 <__swbuf_r+0xa0>)
 8004442:	429c      	cmp	r4, r3
 8004444:	bf08      	it	eq
 8004446:	68ec      	ldreq	r4, [r5, #12]
 8004448:	e7cb      	b.n	80043e2 <__swbuf_r+0x1a>
 800444a:	4621      	mov	r1, r4
 800444c:	4628      	mov	r0, r5
 800444e:	f000 f81f 	bl	8004490 <__swsetup_r>
 8004452:	2800      	cmp	r0, #0
 8004454:	d0cc      	beq.n	80043f0 <__swbuf_r+0x28>
 8004456:	f04f 37ff 	mov.w	r7, #4294967295
 800445a:	4638      	mov	r0, r7
 800445c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800445e:	bf00      	nop
 8004460:	0800493c 	.word	0x0800493c
 8004464:	0800495c 	.word	0x0800495c
 8004468:	0800491c 	.word	0x0800491c

0800446c <_write_r>:
 800446c:	b538      	push	{r3, r4, r5, lr}
 800446e:	4c07      	ldr	r4, [pc, #28]	; (800448c <_write_r+0x20>)
 8004470:	4605      	mov	r5, r0
 8004472:	4608      	mov	r0, r1
 8004474:	4611      	mov	r1, r2
 8004476:	2200      	movs	r2, #0
 8004478:	6022      	str	r2, [r4, #0]
 800447a:	461a      	mov	r2, r3
 800447c:	f7fc f996 	bl	80007ac <_write>
 8004480:	1c43      	adds	r3, r0, #1
 8004482:	d102      	bne.n	800448a <_write_r+0x1e>
 8004484:	6823      	ldr	r3, [r4, #0]
 8004486:	b103      	cbz	r3, 800448a <_write_r+0x1e>
 8004488:	602b      	str	r3, [r5, #0]
 800448a:	bd38      	pop	{r3, r4, r5, pc}
 800448c:	20000100 	.word	0x20000100

08004490 <__swsetup_r>:
 8004490:	4b32      	ldr	r3, [pc, #200]	; (800455c <__swsetup_r+0xcc>)
 8004492:	b570      	push	{r4, r5, r6, lr}
 8004494:	681d      	ldr	r5, [r3, #0]
 8004496:	4606      	mov	r6, r0
 8004498:	460c      	mov	r4, r1
 800449a:	b125      	cbz	r5, 80044a6 <__swsetup_r+0x16>
 800449c:	69ab      	ldr	r3, [r5, #24]
 800449e:	b913      	cbnz	r3, 80044a6 <__swsetup_r+0x16>
 80044a0:	4628      	mov	r0, r5
 80044a2:	f7ff fb91 	bl	8003bc8 <__sinit>
 80044a6:	4b2e      	ldr	r3, [pc, #184]	; (8004560 <__swsetup_r+0xd0>)
 80044a8:	429c      	cmp	r4, r3
 80044aa:	d10f      	bne.n	80044cc <__swsetup_r+0x3c>
 80044ac:	686c      	ldr	r4, [r5, #4]
 80044ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	0715      	lsls	r5, r2, #28
 80044b6:	d42c      	bmi.n	8004512 <__swsetup_r+0x82>
 80044b8:	06d0      	lsls	r0, r2, #27
 80044ba:	d411      	bmi.n	80044e0 <__swsetup_r+0x50>
 80044bc:	2209      	movs	r2, #9
 80044be:	6032      	str	r2, [r6, #0]
 80044c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044c4:	81a3      	strh	r3, [r4, #12]
 80044c6:	f04f 30ff 	mov.w	r0, #4294967295
 80044ca:	e03e      	b.n	800454a <__swsetup_r+0xba>
 80044cc:	4b25      	ldr	r3, [pc, #148]	; (8004564 <__swsetup_r+0xd4>)
 80044ce:	429c      	cmp	r4, r3
 80044d0:	d101      	bne.n	80044d6 <__swsetup_r+0x46>
 80044d2:	68ac      	ldr	r4, [r5, #8]
 80044d4:	e7eb      	b.n	80044ae <__swsetup_r+0x1e>
 80044d6:	4b24      	ldr	r3, [pc, #144]	; (8004568 <__swsetup_r+0xd8>)
 80044d8:	429c      	cmp	r4, r3
 80044da:	bf08      	it	eq
 80044dc:	68ec      	ldreq	r4, [r5, #12]
 80044de:	e7e6      	b.n	80044ae <__swsetup_r+0x1e>
 80044e0:	0751      	lsls	r1, r2, #29
 80044e2:	d512      	bpl.n	800450a <__swsetup_r+0x7a>
 80044e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044e6:	b141      	cbz	r1, 80044fa <__swsetup_r+0x6a>
 80044e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044ec:	4299      	cmp	r1, r3
 80044ee:	d002      	beq.n	80044f6 <__swsetup_r+0x66>
 80044f0:	4630      	mov	r0, r6
 80044f2:	f000 f973 	bl	80047dc <_free_r>
 80044f6:	2300      	movs	r3, #0
 80044f8:	6363      	str	r3, [r4, #52]	; 0x34
 80044fa:	89a3      	ldrh	r3, [r4, #12]
 80044fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004500:	81a3      	strh	r3, [r4, #12]
 8004502:	2300      	movs	r3, #0
 8004504:	6063      	str	r3, [r4, #4]
 8004506:	6923      	ldr	r3, [r4, #16]
 8004508:	6023      	str	r3, [r4, #0]
 800450a:	89a3      	ldrh	r3, [r4, #12]
 800450c:	f043 0308 	orr.w	r3, r3, #8
 8004510:	81a3      	strh	r3, [r4, #12]
 8004512:	6923      	ldr	r3, [r4, #16]
 8004514:	b94b      	cbnz	r3, 800452a <__swsetup_r+0x9a>
 8004516:	89a3      	ldrh	r3, [r4, #12]
 8004518:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800451c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004520:	d003      	beq.n	800452a <__swsetup_r+0x9a>
 8004522:	4621      	mov	r1, r4
 8004524:	4630      	mov	r0, r6
 8004526:	f000 f917 	bl	8004758 <__smakebuf_r>
 800452a:	89a2      	ldrh	r2, [r4, #12]
 800452c:	f012 0301 	ands.w	r3, r2, #1
 8004530:	d00c      	beq.n	800454c <__swsetup_r+0xbc>
 8004532:	2300      	movs	r3, #0
 8004534:	60a3      	str	r3, [r4, #8]
 8004536:	6963      	ldr	r3, [r4, #20]
 8004538:	425b      	negs	r3, r3
 800453a:	61a3      	str	r3, [r4, #24]
 800453c:	6923      	ldr	r3, [r4, #16]
 800453e:	b953      	cbnz	r3, 8004556 <__swsetup_r+0xc6>
 8004540:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004544:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004548:	d1ba      	bne.n	80044c0 <__swsetup_r+0x30>
 800454a:	bd70      	pop	{r4, r5, r6, pc}
 800454c:	0792      	lsls	r2, r2, #30
 800454e:	bf58      	it	pl
 8004550:	6963      	ldrpl	r3, [r4, #20]
 8004552:	60a3      	str	r3, [r4, #8]
 8004554:	e7f2      	b.n	800453c <__swsetup_r+0xac>
 8004556:	2000      	movs	r0, #0
 8004558:	e7f7      	b.n	800454a <__swsetup_r+0xba>
 800455a:	bf00      	nop
 800455c:	20000014 	.word	0x20000014
 8004560:	0800493c 	.word	0x0800493c
 8004564:	0800495c 	.word	0x0800495c
 8004568:	0800491c 	.word	0x0800491c

0800456c <_close_r>:
 800456c:	b538      	push	{r3, r4, r5, lr}
 800456e:	4c06      	ldr	r4, [pc, #24]	; (8004588 <_close_r+0x1c>)
 8004570:	2300      	movs	r3, #0
 8004572:	4605      	mov	r5, r0
 8004574:	4608      	mov	r0, r1
 8004576:	6023      	str	r3, [r4, #0]
 8004578:	f7fc fa43 	bl	8000a02 <_close>
 800457c:	1c43      	adds	r3, r0, #1
 800457e:	d102      	bne.n	8004586 <_close_r+0x1a>
 8004580:	6823      	ldr	r3, [r4, #0]
 8004582:	b103      	cbz	r3, 8004586 <_close_r+0x1a>
 8004584:	602b      	str	r3, [r5, #0]
 8004586:	bd38      	pop	{r3, r4, r5, pc}
 8004588:	20000100 	.word	0x20000100

0800458c <__sflush_r>:
 800458c:	898a      	ldrh	r2, [r1, #12]
 800458e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004592:	4605      	mov	r5, r0
 8004594:	0710      	lsls	r0, r2, #28
 8004596:	460c      	mov	r4, r1
 8004598:	d458      	bmi.n	800464c <__sflush_r+0xc0>
 800459a:	684b      	ldr	r3, [r1, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	dc05      	bgt.n	80045ac <__sflush_r+0x20>
 80045a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	dc02      	bgt.n	80045ac <__sflush_r+0x20>
 80045a6:	2000      	movs	r0, #0
 80045a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045ae:	2e00      	cmp	r6, #0
 80045b0:	d0f9      	beq.n	80045a6 <__sflush_r+0x1a>
 80045b2:	2300      	movs	r3, #0
 80045b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80045b8:	682f      	ldr	r7, [r5, #0]
 80045ba:	6a21      	ldr	r1, [r4, #32]
 80045bc:	602b      	str	r3, [r5, #0]
 80045be:	d032      	beq.n	8004626 <__sflush_r+0x9a>
 80045c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80045c2:	89a3      	ldrh	r3, [r4, #12]
 80045c4:	075a      	lsls	r2, r3, #29
 80045c6:	d505      	bpl.n	80045d4 <__sflush_r+0x48>
 80045c8:	6863      	ldr	r3, [r4, #4]
 80045ca:	1ac0      	subs	r0, r0, r3
 80045cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80045ce:	b10b      	cbz	r3, 80045d4 <__sflush_r+0x48>
 80045d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80045d2:	1ac0      	subs	r0, r0, r3
 80045d4:	2300      	movs	r3, #0
 80045d6:	4602      	mov	r2, r0
 80045d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045da:	6a21      	ldr	r1, [r4, #32]
 80045dc:	4628      	mov	r0, r5
 80045de:	47b0      	blx	r6
 80045e0:	1c43      	adds	r3, r0, #1
 80045e2:	89a3      	ldrh	r3, [r4, #12]
 80045e4:	d106      	bne.n	80045f4 <__sflush_r+0x68>
 80045e6:	6829      	ldr	r1, [r5, #0]
 80045e8:	291d      	cmp	r1, #29
 80045ea:	d848      	bhi.n	800467e <__sflush_r+0xf2>
 80045ec:	4a29      	ldr	r2, [pc, #164]	; (8004694 <__sflush_r+0x108>)
 80045ee:	40ca      	lsrs	r2, r1
 80045f0:	07d6      	lsls	r6, r2, #31
 80045f2:	d544      	bpl.n	800467e <__sflush_r+0xf2>
 80045f4:	2200      	movs	r2, #0
 80045f6:	6062      	str	r2, [r4, #4]
 80045f8:	04d9      	lsls	r1, r3, #19
 80045fa:	6922      	ldr	r2, [r4, #16]
 80045fc:	6022      	str	r2, [r4, #0]
 80045fe:	d504      	bpl.n	800460a <__sflush_r+0x7e>
 8004600:	1c42      	adds	r2, r0, #1
 8004602:	d101      	bne.n	8004608 <__sflush_r+0x7c>
 8004604:	682b      	ldr	r3, [r5, #0]
 8004606:	b903      	cbnz	r3, 800460a <__sflush_r+0x7e>
 8004608:	6560      	str	r0, [r4, #84]	; 0x54
 800460a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800460c:	602f      	str	r7, [r5, #0]
 800460e:	2900      	cmp	r1, #0
 8004610:	d0c9      	beq.n	80045a6 <__sflush_r+0x1a>
 8004612:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004616:	4299      	cmp	r1, r3
 8004618:	d002      	beq.n	8004620 <__sflush_r+0x94>
 800461a:	4628      	mov	r0, r5
 800461c:	f000 f8de 	bl	80047dc <_free_r>
 8004620:	2000      	movs	r0, #0
 8004622:	6360      	str	r0, [r4, #52]	; 0x34
 8004624:	e7c0      	b.n	80045a8 <__sflush_r+0x1c>
 8004626:	2301      	movs	r3, #1
 8004628:	4628      	mov	r0, r5
 800462a:	47b0      	blx	r6
 800462c:	1c41      	adds	r1, r0, #1
 800462e:	d1c8      	bne.n	80045c2 <__sflush_r+0x36>
 8004630:	682b      	ldr	r3, [r5, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d0c5      	beq.n	80045c2 <__sflush_r+0x36>
 8004636:	2b1d      	cmp	r3, #29
 8004638:	d001      	beq.n	800463e <__sflush_r+0xb2>
 800463a:	2b16      	cmp	r3, #22
 800463c:	d101      	bne.n	8004642 <__sflush_r+0xb6>
 800463e:	602f      	str	r7, [r5, #0]
 8004640:	e7b1      	b.n	80045a6 <__sflush_r+0x1a>
 8004642:	89a3      	ldrh	r3, [r4, #12]
 8004644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004648:	81a3      	strh	r3, [r4, #12]
 800464a:	e7ad      	b.n	80045a8 <__sflush_r+0x1c>
 800464c:	690f      	ldr	r7, [r1, #16]
 800464e:	2f00      	cmp	r7, #0
 8004650:	d0a9      	beq.n	80045a6 <__sflush_r+0x1a>
 8004652:	0793      	lsls	r3, r2, #30
 8004654:	680e      	ldr	r6, [r1, #0]
 8004656:	bf08      	it	eq
 8004658:	694b      	ldreq	r3, [r1, #20]
 800465a:	600f      	str	r7, [r1, #0]
 800465c:	bf18      	it	ne
 800465e:	2300      	movne	r3, #0
 8004660:	eba6 0807 	sub.w	r8, r6, r7
 8004664:	608b      	str	r3, [r1, #8]
 8004666:	f1b8 0f00 	cmp.w	r8, #0
 800466a:	dd9c      	ble.n	80045a6 <__sflush_r+0x1a>
 800466c:	4643      	mov	r3, r8
 800466e:	463a      	mov	r2, r7
 8004670:	6a21      	ldr	r1, [r4, #32]
 8004672:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004674:	4628      	mov	r0, r5
 8004676:	47b0      	blx	r6
 8004678:	2800      	cmp	r0, #0
 800467a:	dc06      	bgt.n	800468a <__sflush_r+0xfe>
 800467c:	89a3      	ldrh	r3, [r4, #12]
 800467e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004682:	81a3      	strh	r3, [r4, #12]
 8004684:	f04f 30ff 	mov.w	r0, #4294967295
 8004688:	e78e      	b.n	80045a8 <__sflush_r+0x1c>
 800468a:	4407      	add	r7, r0
 800468c:	eba8 0800 	sub.w	r8, r8, r0
 8004690:	e7e9      	b.n	8004666 <__sflush_r+0xda>
 8004692:	bf00      	nop
 8004694:	20400001 	.word	0x20400001

08004698 <_fflush_r>:
 8004698:	b538      	push	{r3, r4, r5, lr}
 800469a:	690b      	ldr	r3, [r1, #16]
 800469c:	4605      	mov	r5, r0
 800469e:	460c      	mov	r4, r1
 80046a0:	b1db      	cbz	r3, 80046da <_fflush_r+0x42>
 80046a2:	b118      	cbz	r0, 80046ac <_fflush_r+0x14>
 80046a4:	6983      	ldr	r3, [r0, #24]
 80046a6:	b90b      	cbnz	r3, 80046ac <_fflush_r+0x14>
 80046a8:	f7ff fa8e 	bl	8003bc8 <__sinit>
 80046ac:	4b0c      	ldr	r3, [pc, #48]	; (80046e0 <_fflush_r+0x48>)
 80046ae:	429c      	cmp	r4, r3
 80046b0:	d109      	bne.n	80046c6 <_fflush_r+0x2e>
 80046b2:	686c      	ldr	r4, [r5, #4]
 80046b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046b8:	b17b      	cbz	r3, 80046da <_fflush_r+0x42>
 80046ba:	4621      	mov	r1, r4
 80046bc:	4628      	mov	r0, r5
 80046be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046c2:	f7ff bf63 	b.w	800458c <__sflush_r>
 80046c6:	4b07      	ldr	r3, [pc, #28]	; (80046e4 <_fflush_r+0x4c>)
 80046c8:	429c      	cmp	r4, r3
 80046ca:	d101      	bne.n	80046d0 <_fflush_r+0x38>
 80046cc:	68ac      	ldr	r4, [r5, #8]
 80046ce:	e7f1      	b.n	80046b4 <_fflush_r+0x1c>
 80046d0:	4b05      	ldr	r3, [pc, #20]	; (80046e8 <_fflush_r+0x50>)
 80046d2:	429c      	cmp	r4, r3
 80046d4:	bf08      	it	eq
 80046d6:	68ec      	ldreq	r4, [r5, #12]
 80046d8:	e7ec      	b.n	80046b4 <_fflush_r+0x1c>
 80046da:	2000      	movs	r0, #0
 80046dc:	bd38      	pop	{r3, r4, r5, pc}
 80046de:	bf00      	nop
 80046e0:	0800493c 	.word	0x0800493c
 80046e4:	0800495c 	.word	0x0800495c
 80046e8:	0800491c 	.word	0x0800491c

080046ec <_lseek_r>:
 80046ec:	b538      	push	{r3, r4, r5, lr}
 80046ee:	4c07      	ldr	r4, [pc, #28]	; (800470c <_lseek_r+0x20>)
 80046f0:	4605      	mov	r5, r0
 80046f2:	4608      	mov	r0, r1
 80046f4:	4611      	mov	r1, r2
 80046f6:	2200      	movs	r2, #0
 80046f8:	6022      	str	r2, [r4, #0]
 80046fa:	461a      	mov	r2, r3
 80046fc:	f7fc f9a8 	bl	8000a50 <_lseek>
 8004700:	1c43      	adds	r3, r0, #1
 8004702:	d102      	bne.n	800470a <_lseek_r+0x1e>
 8004704:	6823      	ldr	r3, [r4, #0]
 8004706:	b103      	cbz	r3, 800470a <_lseek_r+0x1e>
 8004708:	602b      	str	r3, [r5, #0]
 800470a:	bd38      	pop	{r3, r4, r5, pc}
 800470c:	20000100 	.word	0x20000100

08004710 <__swhatbuf_r>:
 8004710:	b570      	push	{r4, r5, r6, lr}
 8004712:	460e      	mov	r6, r1
 8004714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004718:	2900      	cmp	r1, #0
 800471a:	b096      	sub	sp, #88	; 0x58
 800471c:	4614      	mov	r4, r2
 800471e:	461d      	mov	r5, r3
 8004720:	da07      	bge.n	8004732 <__swhatbuf_r+0x22>
 8004722:	2300      	movs	r3, #0
 8004724:	602b      	str	r3, [r5, #0]
 8004726:	89b3      	ldrh	r3, [r6, #12]
 8004728:	061a      	lsls	r2, r3, #24
 800472a:	d410      	bmi.n	800474e <__swhatbuf_r+0x3e>
 800472c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004730:	e00e      	b.n	8004750 <__swhatbuf_r+0x40>
 8004732:	466a      	mov	r2, sp
 8004734:	f000 f8b2 	bl	800489c <_fstat_r>
 8004738:	2800      	cmp	r0, #0
 800473a:	dbf2      	blt.n	8004722 <__swhatbuf_r+0x12>
 800473c:	9a01      	ldr	r2, [sp, #4]
 800473e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004742:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004746:	425a      	negs	r2, r3
 8004748:	415a      	adcs	r2, r3
 800474a:	602a      	str	r2, [r5, #0]
 800474c:	e7ee      	b.n	800472c <__swhatbuf_r+0x1c>
 800474e:	2340      	movs	r3, #64	; 0x40
 8004750:	2000      	movs	r0, #0
 8004752:	6023      	str	r3, [r4, #0]
 8004754:	b016      	add	sp, #88	; 0x58
 8004756:	bd70      	pop	{r4, r5, r6, pc}

08004758 <__smakebuf_r>:
 8004758:	898b      	ldrh	r3, [r1, #12]
 800475a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800475c:	079d      	lsls	r5, r3, #30
 800475e:	4606      	mov	r6, r0
 8004760:	460c      	mov	r4, r1
 8004762:	d507      	bpl.n	8004774 <__smakebuf_r+0x1c>
 8004764:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004768:	6023      	str	r3, [r4, #0]
 800476a:	6123      	str	r3, [r4, #16]
 800476c:	2301      	movs	r3, #1
 800476e:	6163      	str	r3, [r4, #20]
 8004770:	b002      	add	sp, #8
 8004772:	bd70      	pop	{r4, r5, r6, pc}
 8004774:	ab01      	add	r3, sp, #4
 8004776:	466a      	mov	r2, sp
 8004778:	f7ff ffca 	bl	8004710 <__swhatbuf_r>
 800477c:	9900      	ldr	r1, [sp, #0]
 800477e:	4605      	mov	r5, r0
 8004780:	4630      	mov	r0, r6
 8004782:	f7ff faab 	bl	8003cdc <_malloc_r>
 8004786:	b948      	cbnz	r0, 800479c <__smakebuf_r+0x44>
 8004788:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800478c:	059a      	lsls	r2, r3, #22
 800478e:	d4ef      	bmi.n	8004770 <__smakebuf_r+0x18>
 8004790:	f023 0303 	bic.w	r3, r3, #3
 8004794:	f043 0302 	orr.w	r3, r3, #2
 8004798:	81a3      	strh	r3, [r4, #12]
 800479a:	e7e3      	b.n	8004764 <__smakebuf_r+0xc>
 800479c:	4b0d      	ldr	r3, [pc, #52]	; (80047d4 <__smakebuf_r+0x7c>)
 800479e:	62b3      	str	r3, [r6, #40]	; 0x28
 80047a0:	89a3      	ldrh	r3, [r4, #12]
 80047a2:	6020      	str	r0, [r4, #0]
 80047a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047a8:	81a3      	strh	r3, [r4, #12]
 80047aa:	9b00      	ldr	r3, [sp, #0]
 80047ac:	6163      	str	r3, [r4, #20]
 80047ae:	9b01      	ldr	r3, [sp, #4]
 80047b0:	6120      	str	r0, [r4, #16]
 80047b2:	b15b      	cbz	r3, 80047cc <__smakebuf_r+0x74>
 80047b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047b8:	4630      	mov	r0, r6
 80047ba:	f000 f881 	bl	80048c0 <_isatty_r>
 80047be:	b128      	cbz	r0, 80047cc <__smakebuf_r+0x74>
 80047c0:	89a3      	ldrh	r3, [r4, #12]
 80047c2:	f023 0303 	bic.w	r3, r3, #3
 80047c6:	f043 0301 	orr.w	r3, r3, #1
 80047ca:	81a3      	strh	r3, [r4, #12]
 80047cc:	89a3      	ldrh	r3, [r4, #12]
 80047ce:	431d      	orrs	r5, r3
 80047d0:	81a5      	strh	r5, [r4, #12]
 80047d2:	e7cd      	b.n	8004770 <__smakebuf_r+0x18>
 80047d4:	08003b91 	.word	0x08003b91

080047d8 <__malloc_lock>:
 80047d8:	4770      	bx	lr

080047da <__malloc_unlock>:
 80047da:	4770      	bx	lr

080047dc <_free_r>:
 80047dc:	b538      	push	{r3, r4, r5, lr}
 80047de:	4605      	mov	r5, r0
 80047e0:	2900      	cmp	r1, #0
 80047e2:	d045      	beq.n	8004870 <_free_r+0x94>
 80047e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047e8:	1f0c      	subs	r4, r1, #4
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	bfb8      	it	lt
 80047ee:	18e4      	addlt	r4, r4, r3
 80047f0:	f7ff fff2 	bl	80047d8 <__malloc_lock>
 80047f4:	4a1f      	ldr	r2, [pc, #124]	; (8004874 <_free_r+0x98>)
 80047f6:	6813      	ldr	r3, [r2, #0]
 80047f8:	4610      	mov	r0, r2
 80047fa:	b933      	cbnz	r3, 800480a <_free_r+0x2e>
 80047fc:	6063      	str	r3, [r4, #4]
 80047fe:	6014      	str	r4, [r2, #0]
 8004800:	4628      	mov	r0, r5
 8004802:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004806:	f7ff bfe8 	b.w	80047da <__malloc_unlock>
 800480a:	42a3      	cmp	r3, r4
 800480c:	d90c      	bls.n	8004828 <_free_r+0x4c>
 800480e:	6821      	ldr	r1, [r4, #0]
 8004810:	1862      	adds	r2, r4, r1
 8004812:	4293      	cmp	r3, r2
 8004814:	bf04      	itt	eq
 8004816:	681a      	ldreq	r2, [r3, #0]
 8004818:	685b      	ldreq	r3, [r3, #4]
 800481a:	6063      	str	r3, [r4, #4]
 800481c:	bf04      	itt	eq
 800481e:	1852      	addeq	r2, r2, r1
 8004820:	6022      	streq	r2, [r4, #0]
 8004822:	6004      	str	r4, [r0, #0]
 8004824:	e7ec      	b.n	8004800 <_free_r+0x24>
 8004826:	4613      	mov	r3, r2
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	b10a      	cbz	r2, 8004830 <_free_r+0x54>
 800482c:	42a2      	cmp	r2, r4
 800482e:	d9fa      	bls.n	8004826 <_free_r+0x4a>
 8004830:	6819      	ldr	r1, [r3, #0]
 8004832:	1858      	adds	r0, r3, r1
 8004834:	42a0      	cmp	r0, r4
 8004836:	d10b      	bne.n	8004850 <_free_r+0x74>
 8004838:	6820      	ldr	r0, [r4, #0]
 800483a:	4401      	add	r1, r0
 800483c:	1858      	adds	r0, r3, r1
 800483e:	4282      	cmp	r2, r0
 8004840:	6019      	str	r1, [r3, #0]
 8004842:	d1dd      	bne.n	8004800 <_free_r+0x24>
 8004844:	6810      	ldr	r0, [r2, #0]
 8004846:	6852      	ldr	r2, [r2, #4]
 8004848:	605a      	str	r2, [r3, #4]
 800484a:	4401      	add	r1, r0
 800484c:	6019      	str	r1, [r3, #0]
 800484e:	e7d7      	b.n	8004800 <_free_r+0x24>
 8004850:	d902      	bls.n	8004858 <_free_r+0x7c>
 8004852:	230c      	movs	r3, #12
 8004854:	602b      	str	r3, [r5, #0]
 8004856:	e7d3      	b.n	8004800 <_free_r+0x24>
 8004858:	6820      	ldr	r0, [r4, #0]
 800485a:	1821      	adds	r1, r4, r0
 800485c:	428a      	cmp	r2, r1
 800485e:	bf04      	itt	eq
 8004860:	6811      	ldreq	r1, [r2, #0]
 8004862:	6852      	ldreq	r2, [r2, #4]
 8004864:	6062      	str	r2, [r4, #4]
 8004866:	bf04      	itt	eq
 8004868:	1809      	addeq	r1, r1, r0
 800486a:	6021      	streq	r1, [r4, #0]
 800486c:	605c      	str	r4, [r3, #4]
 800486e:	e7c7      	b.n	8004800 <_free_r+0x24>
 8004870:	bd38      	pop	{r3, r4, r5, pc}
 8004872:	bf00      	nop
 8004874:	20000098 	.word	0x20000098

08004878 <_read_r>:
 8004878:	b538      	push	{r3, r4, r5, lr}
 800487a:	4c07      	ldr	r4, [pc, #28]	; (8004898 <_read_r+0x20>)
 800487c:	4605      	mov	r5, r0
 800487e:	4608      	mov	r0, r1
 8004880:	4611      	mov	r1, r2
 8004882:	2200      	movs	r2, #0
 8004884:	6022      	str	r2, [r4, #0]
 8004886:	461a      	mov	r2, r3
 8004888:	f7fc f89e 	bl	80009c8 <_read>
 800488c:	1c43      	adds	r3, r0, #1
 800488e:	d102      	bne.n	8004896 <_read_r+0x1e>
 8004890:	6823      	ldr	r3, [r4, #0]
 8004892:	b103      	cbz	r3, 8004896 <_read_r+0x1e>
 8004894:	602b      	str	r3, [r5, #0]
 8004896:	bd38      	pop	{r3, r4, r5, pc}
 8004898:	20000100 	.word	0x20000100

0800489c <_fstat_r>:
 800489c:	b538      	push	{r3, r4, r5, lr}
 800489e:	4c07      	ldr	r4, [pc, #28]	; (80048bc <_fstat_r+0x20>)
 80048a0:	2300      	movs	r3, #0
 80048a2:	4605      	mov	r5, r0
 80048a4:	4608      	mov	r0, r1
 80048a6:	4611      	mov	r1, r2
 80048a8:	6023      	str	r3, [r4, #0]
 80048aa:	f7fc f8b6 	bl	8000a1a <_fstat>
 80048ae:	1c43      	adds	r3, r0, #1
 80048b0:	d102      	bne.n	80048b8 <_fstat_r+0x1c>
 80048b2:	6823      	ldr	r3, [r4, #0]
 80048b4:	b103      	cbz	r3, 80048b8 <_fstat_r+0x1c>
 80048b6:	602b      	str	r3, [r5, #0]
 80048b8:	bd38      	pop	{r3, r4, r5, pc}
 80048ba:	bf00      	nop
 80048bc:	20000100 	.word	0x20000100

080048c0 <_isatty_r>:
 80048c0:	b538      	push	{r3, r4, r5, lr}
 80048c2:	4c06      	ldr	r4, [pc, #24]	; (80048dc <_isatty_r+0x1c>)
 80048c4:	2300      	movs	r3, #0
 80048c6:	4605      	mov	r5, r0
 80048c8:	4608      	mov	r0, r1
 80048ca:	6023      	str	r3, [r4, #0]
 80048cc:	f7fc f8b5 	bl	8000a3a <_isatty>
 80048d0:	1c43      	adds	r3, r0, #1
 80048d2:	d102      	bne.n	80048da <_isatty_r+0x1a>
 80048d4:	6823      	ldr	r3, [r4, #0]
 80048d6:	b103      	cbz	r3, 80048da <_isatty_r+0x1a>
 80048d8:	602b      	str	r3, [r5, #0]
 80048da:	bd38      	pop	{r3, r4, r5, pc}
 80048dc:	20000100 	.word	0x20000100

080048e0 <_init>:
 80048e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048e2:	bf00      	nop
 80048e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048e6:	bc08      	pop	{r3}
 80048e8:	469e      	mov	lr, r3
 80048ea:	4770      	bx	lr

080048ec <_fini>:
 80048ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ee:	bf00      	nop
 80048f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048f2:	bc08      	pop	{r3}
 80048f4:	469e      	mov	lr, r3
 80048f6:	4770      	bx	lr
